package = {}
package.path = './?.lua;./?/init.lua;lib/?.lua;lib/?/init.lua'

local P
do
    local preloadType, preload, _errorhandler
    do
        preloadType = 'string'
        preload = load
        _errorhandler = function(msg)
            return print(msg)
        end
    end

    local _G = _G
    local package = package
    local string, table = string, table
    local error, xpcall, type, setmetatable, tostring, ipairs, load = error, xpcall, type, setmetatable, tostring,
                                                                      ipairs, load

    local _FILES = {}
    local _LOADED_MODULES = {}
    local _LOADED_FILES = {}
    local _LOADING_FILES = {}

    local function errorhandler(msg)
        if _errorhandler and msg then
            return _errorhandler(msg)
        end
    end

    local function resolvefile(module)
        module = module:gsub('[./\\]+', '/')

        for item in package.path:gmatch('[^;]+') do
            local filename = item:gsub('^%.[/\\]+', ''):gsub('%?', module)
            if _FILES[filename] then
                return filename
            end
        end
    end

    local function compilefile(filename, mode, env, level)
        local code = _FILES[filename]
        if not code then
            error(string.format('cannot open %s: No such file or directory', filename), (level or 1) + 1)
        end
        return preload(code, '@' .. filename, mode, env or _G)
    end

    function require(module)
        local loaded = _LOADED_MODULES[module]
        if loaded then
            return loaded
        end

        local filename = resolvefile(module)
        if not filename then
            error(string.format('module \'%s\' not found', module), 2)
        end

        loaded = _LOADED_FILES[filename]
        if loaded then
            return loaded
        end

        if _LOADING_FILES[filename] then
            error('critical dependency', 2)
        end

        local f, err = compilefile(filename, nil, nil, 2)
        if not f then
            error(err, 2)
        end

        _LOADING_FILES[filename] = true
        local ok, ret = xpcall(f, errorhandler, module, filename)
        _LOADING_FILES[filename] = false
        if not ok then
            error()
        end

        ret = ret or true

        _LOADED_MODULES[module] = ret
        _LOADED_FILES[filename] = ret

        return ret
    end

    function loadfile(filename, mode, env)
        return compilefile(filename, mode, env, 2)
    end

    function dofile(filename)
        compilefile(filename, nil, nil, 2)()
    end

    function seterrorhandler(handler)
        if type(handler) ~= 'function' then
            error(string.format('bad argument #1 to `seterrorhandler` (function expected, got %s)', type(handler)), 2)
        end
        _errorhandler = handler
    end

    function geterrorhandler()
        return _errorhandler
    end

    -- hook for errorhandler
    do
        local function tryreturn(ok, ...)
            if ok then
                return ...
            end
        end

        local function generate(index, count)
            local args = {}
            for i = 1, count do
                table.insert(args, 'ARG' .. i)
            end
            args = table.concat(args, ',')

            local code = [[
local o, r, e = ...
return function({ARGS})
    if type(ARG{N}) == 'function' then
        local c = ARG{N}
        ARG{N} = function(...)
            return r(xpcall(c, e, ...))
        end
    end
    return o({ARGS})
end
]]
            code = code:gsub('{N}', tostring(index)):gsub('{ARGS}', args)

            return load(code)
        end

        local apis = {
            {'TimerStart', 4, 4}, {'ForGroup', 2, 2}, {'ForForce', 2, 2}, {'Condition', 1, 1}, {'Filter', 1, 1},
            {'EnumDestructablesInRect', 3, 3}, {'EnumItemsInRect', 3, 3}, {'TriggerAddAction', 2, 2},
        }

        for _, v in ipairs(apis) do
            local name, index, count = v[1], v[2], v[3]
            _G[name] = generate(index, count)(_G[name], tryreturn, errorhandler)
        end
    end

    P = setmetatable({}, {
        __newindex = function(t, k, v)
            if type(v) ~= preloadType then
                error('PRELOADED value must be ' .. preloadType)
            end
            _FILES[k] = v
        end,
        __index = function(t, k)
            error('Can`t read')
        end,
        __metatable = false,
    })
end

P['biz/ability/ability1.lua'] = [[local AbilityType = require("core.ability.ability_type")


local AbilityBarrageType = MKCore.UnitSys:registerUnitType('e002')

AbilityBarrageType.defaultPhysics.phyType = PhysicsType.Dynamic
AbilityBarrageType.canSelect = false

AbilityBarrageType.onBlockOther =  function(unit,other)
    unit:kill()
    unit:damageUnitSimple(other,5)
    if other.physicsState.phyType == PhysicsType.Dynamic then
        local x = math.cos(math.rad(unit:getFacing())) * 300
        local y = math.sin(math.rad(unit:getFacing())) * 300
        other:addForce(x,y,0)
    end
    
end

AbilityBarrageType.onOverlapOther =  function()
    
end


---@type AbilityType
local abilityType1 = MKCore.AbilitySys:registerAbility('A000','attack spell')

abilityType1.onSpellEffect = function(event)
    local x = event.triggerX
    local y = event.triggerY
    local triggerUnit = event.triggerUnit
    local player = triggerUnit:getOwner()

    local targetX = event.spellTargetX
    local targetY = event.spellTargetY

    local angle = math.deg(event.spellRad)

    local unit = MKCore.UnitSys:createUnit(AbilityBarrageType,player,x,y,angle)
    local speed = 900
    unit.physicsState.forceX = math.cos(event.spellRad) * speed
    unit.physicsState.forceY = math.sin(event.spellRad) * speed
    Timer:after(1.4,function()
        if unit:isAlive() then
            unit:kill()
        end
        
    end)
end]]

P['biz/ability/ability2.lua'] = [[local AbilityType = require("core.ability.ability_type")


local Portal = MKCore.UnitSys:registerUnitType('e004')

Portal.defaultPhysics.phyType = PhysicsType.None
Portal.canSelect = false

local abilityType2 = MKCore.AbilitySys:registerAbility('A002')


abilityType2.onSpellEffect = function(event)

    local x = event.triggerX
    local y = event.triggerY
    local unit = event.triggerUnit
    local facing = math.rad(unit:getFacing())
    local x1 = event.triggerX + math.cos(facing) * 200
    local y1 = event.triggerY + math.sin(facing) * 200
    local x2 = event.triggerX + math.cos(facing) * 800
    local y2 = event.triggerY + math.sin(facing) * 800

    local portal1 = MKCore.UnitSys:createUnit(Portal,event.owningPlayer,x1,y1,math.deg(facing))
    portal1:setLife(1.0)
    
    portal1:setAnimation('birth')
    portal1:setTimeScale(20)
    local portal2 = MKCore.UnitSys:createUnit(Portal,event.owningPlayer,x2,y2,math.deg(facing))
    portal2:setAnimation('birth')
    portal2:setTimeScale(20)

    Timer:after(1.0,function()
        portal1:kill()
        portal2:kill()
    end)

    unit:setAnimation('Spell')
    local timer = Timer:create()
    local timer2 = Timer:create()
    local speed = 500
    timer:start(0.03,function()
        local rad = math.atan(y1 - unit:getY(),x1 - unit:getX())
        local x0 = unit:getX() + math.cos(rad) * 500 * 0.03
        local y0 = unit:getY() + math.sin(rad) * 500 * 0.03
        local dx =  x0 - x1
        local dy = y0 - y1
        local dis = math.sqrt(dx * dx + dy * dy)
        speed = math.smoothDamp(dis,200,speed,0.1,1000,0.03)
        if dis < 10 then
            timer:delete()
            unit:setX(x2)
            unit:setY(y2)
            unit:addForce(500*math.cos(facing),500*math.sin(facing),0)
            Effect:addSpecial('Abilities\\Spells\\NightElf\\Blink\\BlinkCaster.mdl',x1,y1):delete()
            Effect:addSpecial('Abilities\\Spells\\NightElf\\Blink\\BlinkCaster.mdl',x2,y2):delete()
            
            unit:setPaused(true)
            Timer:after(0.1,function()
                unit:setPaused(false)
            end)
            timer:destroy()
        else
            unit:setX(x0)
            unit:setY(y0)
        end      
    end)
    
end]]

P['biz/ability/ability3.lua'] = [[local AbilityType = require("core.ability.ability_type")


local Missile = MKCore.UnitSys:registerUnitType('e005')

local Explosion = MKCore.UnitSys:registerUnitType('e006')


Missile.defaultPhysics.phyType = PhysicsType.Dynamic
Missile.defaultPhysics.dampX = 900
Missile.defaultPhysics.dampY = 900
Missile.canSelect = false
Missile.defaultPhysics.radius = 100

Explosion.defaultPhysics.phyType = PhysicsType.None
Explosion.canSelect = false

Missile.onBlockOther = function(unit,other)
    if(unit:isEnemy(other:getOwner())) then
        local rad = math.rad(unit:getFacing())
        unit:kill()
        other:addForce(math.cos(rad) * 400,math.sin(rad) * 400,0)
        local explosion = MKCore.UnitSys:createUnit(Explosion,unit:getOwner(),unit:getX(),unit:getY(),0)
        Timer:after(1,function()
            explosion:kill()
        end)
    end
end

local abilityType2 = MKCore.AbilitySys:registerAbility('A006')


abilityType2.onSpellEffect = function(event)

    for i = 0,5 do
        local deg = math.rad(60 * i)
        local missile = MKCore.UnitSys:createUnit(Missile,event.owningPlayer,event.triggerX,event.triggerY,0)
        missile:addForce(math.cos(deg) * 600, math.sin(deg) * 600,0)
        Timer:after(1.5,function()
            if missile:isAlive() then
                local explosion = MKCore.UnitSys:createUnit(Explosion,event.owningPlayer,missile:getX(),missile:getY(),0)
                Timer:after(1,function()
                    explosion:kill()
                end)

                missile:kill()            
            end
            
        end)

    end  
    
end]]

P['biz/ability/ability4.lua'] = [[local AbilityType = require("core.ability.ability_type")



local abilityType2 = MKCore.AbilitySys:registerAbility('A007')


abilityType2.onSpellEffect = function(event)

    local group = Group:create()
    group:enumEnemyUnits(event.owningPlayer,event.spellTargetX,event.spellTargetY,150)
    ---@type Unit
    local select = nil
    
    group:forEach(function(unit)
        if select == nil then
            select = unit
            event.triggerUnit.selectObject = select
            select.throwing = false
        end        
    end)
    local t = Timer:create()
    local t2 = Timer:create()
    local height = 0
    t:start(0.03,function()
        if select:getFlyHeight() > 300 or select.throwing == true then
            t:delete()
            height = 300
            t2:start(0.03,function()
                if select:getFlyHeight() < 10 then 
                    t2:delete()
                    select:setFlyHeight(0,9999)
                else
                    select:setFlyHeight(height,9999)
                    height = height - 500 * 0.03
                end
            end)
        else
            select:addAbility(FourCC('Arav'))
            select:removeAbility(FourCC('Arav'))
            select:setFlyHeight(height,9999)
            height = height + 500 * 0.03
            print(height)

        end        
    end)

    
end]]

P['biz/doodads/tree.lua'] = [[local tree1 = MKCore.UnitSys:registerUnitType('e003')

tree1.defaultPhysics.phyType = PhysicsType.Static
tree1.canSelect = false
tree1.defaultPhysics.radius = 100
tree1.onBlockOther = function(unit,other)

end

tree1.onOverlapOther = function(unit,other)

end



local rock = MKCore.UnitSys:registerUnitType('e007')

rock.defaultPhysics.phyType = PhysicsType.Dynamic
rock.canSelect = false
rock.defaultPhysics.radius = 75
rock.onBlockOther = function(unit,other)

end

rock.onOverlapOther = function(unit,other)

end]]

P['biz/hero/hero.lua'] = [[

_G.MainHero = MKCore.UnitSys:registerUnitType('H002')
MainHero.defaultPhysics.phyType = PhysicsType.Dynamic
MainHero.defaultPhysics.dampX = 500
MainHero.defaultPhysics.dampY = 500]]

P['core/MKCore.lua'] = [[local PhysicsSystem = require('core.physics.physics_system')
local AbilitySystem = require('core.ability.ability_system')
local UnitSystem = require('core.unit.unit_system')

require('core.unit.unit_base')
require('core.unit.unit_ext')

---@class MKCore
---@field UserPlayers Force
---@field MapRect Rect
---@field PhySys PhysicsSystem
---@field AbilitySys AbilitySystem
---

---@type MKCore
---
MKCore = {}
_G.MKCore = MKCore

function MKCore:boot()
    self.MapRect = Rect:fromUd(GetEntireMapRect())
    self.UserPlayers = Force:create()
    self.UserPlayers:enumPlayers(function(player)
        return player:getController() == MapControl.User
    end)
    self.UnitSys = UnitSystem:new()
    self.AbilitySys = AbilitySystem:new()
    self.PhySys = PhysicsSystem:new()
    require('biz.doodads.tree')
    require('biz.hero.hero')
    self.UnitSys:init()
    self.AbilitySys:init()    
    self.PhySys:init()
end]]

P['core/ability/ability_system.lua'] = [[local AbilityType = require("core.ability.ability_type")

---@class AbilitySystem
---@field abilityTypes AbilityType[]
---@field spellEffectTrigger Trigger
---@field spellCastTrigger Trigger
---@type AbilitySystem
local AbilitySystem = class("AbilitySystem")

function AbilitySystem:constructor()
    self.spellEffectTrigger = Trigger:create()
    self.spellCastTrigger = Trigger:create()
    self.abilityTypes = {}

end

function AbilitySystem:init()
    
    self.spellEffectTrigger:addCondition(function()
        for k,v in pairs(self.abilityTypes) do
            if Event:getSpellAbilityId() == v:getUd() then
                return true
            end
        end
    self.spellCastTrigger:addCondition(function()
        for k,v in pairs(self.abilityTypes) do
            if Event:getSpellAbilityId() == v:getUd() then
                return true
            end
        end
    end)    
    end)    
    self.spellEffectTrigger:addAction(function()
        self:dispatchEvent(Event:getSpellAbilityId(),UnitEvent.SpellEffect)
    end)
    self.spellCastTrigger:addAction(function()
        self:dispatchEvent(Event:getSpellAbilityId(),UnitEvent.SpellChannel)
    end)
end

function AbilitySystem:registerAbility(typeName)
    local obj = AbilityType:create(typeName)
    self.abilityTypes[typeName] = obj
    return obj
end

function AbilitySystem:registerUnit(unit)
    self.spellEffectTrigger:registerUnitEvent(unit,UnitEvent.SpellEffect)
    self.spellCastTrigger:registerUnitEvent(unit,UnitEvent.SpellChannel)
end

function AbilitySystem:dispatchEvent(id,event)
    local name = ToStr(id)
    
    local abilityType = self.abilityTypes[name]
    if abilityType == nil then
        return
    end
    if(event == UnitEvent.SpellEffect) then
        print("SpellEffect"..name)
        abilityType:spellEffect(id)
        return
    end
    if(event == UnitEvent.SpellChannel) then
        
        print("SpellCast"..name)
        abilityType:spellCast(id)
        return
    end
    
end

return AbilitySystem]]

P['core/ability/ability_type.lua'] = [[
require('core.utils')

---@class AbilityType : Agent
---@field castAnim string
---@field onSpellEffect fun(event:AbilityEvent):void
---@field onSpellCast fun(event:AbilityEvent):void
---
---
---@type AbilityType
local AbilityType = class('AbilityBase',require('lib.stdlib.oop.agent'))

---@return AbilityType
function AbilityType:create(typeName)
    ---@type AbilityType
    local obj = AbilityType:fromUd(FourCC(typeName))
    return obj
end

function AbilityType:spellEffect(id)
    local name = ToStr(id)
    print("技能释放效果" .. name)
    if self.onSpellEffect ~= nil then
        self.onSpellEffect(self:prepareEvent())
    end
end

function AbilityType:spellCast(id)
    local name = ToStr(id)
    print("技能释放效果" .. name)
    local event = self:prepareEvent()
    if self.onSpellCast ~= nil then
        self.onSpellCast(event)
    end
    
end

---@class AbilityEvent
---@field owningPlayer Player
---@field triggerUnit Unit
---@field triggerX number
---@field triggerY number
---@field spellTargetX number
---@field spellTargetY number
---@field spellTarget Unit
---@field spellRad number
---
---@retun AbilityEvent
function AbilityType:prepareEvent()
    ---@type AbilityEvent
    local event = {}
    ---@type Unit
    local triggerUnit = Unit:fromUd(getUd(Event:getTriggerUnit()))
    event.triggerUnit = triggerUnit
    local sepllX = 0
    local sepllY = 0 
    local triggerX = triggerUnit:getX()
    local triggerY = triggerUnit:getY()    
    event.spellTarget = UnitBase:fromUd(getUd(Event:getSpellTargetUnit()))
    if event.spellTarget == nil then
        sepllX = Event:getSpellTargetX()
        sepllY =  Event:getSpellTargetY()
      
    else
        sepllX  = event.spellTarget:getX()
        sepllY = event.spellTarget:getY()
    end
    event.spellRad = math.atan(sepllY - triggerY,sepllX - triggerX)
    event.spellTargetX = sepllX
    event.spellTargetY = sepllY
    event.triggerX = triggerX
    event.triggerY = triggerY
    event.owningPlayer = triggerUnit:getOwner()

    return event
end

function AbilityType:angleBetween(x1,y1,x2,y2)
    local deltaX = x2 - x1;
    local deltaY = y2 - y1;
    return math.deg(math.atan(deltaY,deltaX))
end

---@param unit Unit
---@param location Location
function AbilityType:angleBetweenUnitAndLocation(unit,location)
    return AbilityType:angleBetween(unit:getX(),unit:getY(),location:getX(),location:getY())
end

---@param unit1 Unit
---@param unit2 Unit
function AbilityType:angleBetweenUnits(unit1,unit2)
    local x1 = unit1:getX()
    local y1 = unit1:getY()
    local x2 = unit2:getX()
    local y2 = unit2:getY()
    return AbilityType:angleBetween(x1,y1,x2,y2)
end

function AbilityType:getSpellDistance()
    local x = Event:getTriggerUnit():getX()
    local y = Event:getTriggerUnit():getY()
    local targetX = Event:getSpellTargetX()
    local targetY = Event:getSpellTargetY()
    local deltaX = targetX - x;
    local deltaY = targetY - y;
    return math.sqrt(deltaX * deltaX + deltaY * deltaY)    
end

function AbilityType:getSpellLocationAngle()    
    local x = Event:getTriggerUnit():getX()
    local y = Event:getTriggerUnit():getY()
    local targetX = Event:getSpellTargetX()
    local targetY = Event:getSpellTargetY()
    return AbilityType:angleBetween(x,y,targetX,targetY)
end



return AbilityType]]

P['core/globals.lua'] = [[
---@class GlobalTriggers

---@type GlobalTriggers
_Triggers = {}

_Triggers.AnyUnitEnterTrig = Trigger:create()
_Triggers.TaskAcceptTrigger = Trigger:create()
_Triggers.ChoseFaithTrigger = Trigger:create()
_Triggers.EnterRectTipTrigger = Trigger:create()

__MapRect = Rect:fromUd(GetEntireMapRect())

_Triggers.AnyUnitEnterTrig:registerEnterRect(__MapRect)

---@class GameUIManager
---@field GameUI Frame
---@field MinimapUI Frame
---@field WorldFrame Frame
---@field HeroButton Frame
---
---@type GameUIManager
_UI = {}
_UI.GameUI = Frame:getOrigin(OriginFrameType.GameUi,0)
_UI.MinimapUI = Frame:getOrigin(OriginFrameType.Minimap,0)
_UI.WorldFrame = Frame:getOrigin(OriginFrameType.WorldFrame,0)
_UI.HeroButton = Frame:getOrigin(OriginFrameType.HeroButton,0)]]

P['core/physics/physics_state.lua'] = [[---@class PhysicsState
---@field phyType PhysicsType
---@field colType CollisionType
---@field forceX number
---@field forceY number
---@field forceZ number
---@field dampX number
---@field dampY number
---@field dampZ number
---@field radius number
---@type PhysicsState
local PhysicsState = class("PhysicsState")


function PhysicsState:constructor()
    self.phyType = PhysicsType.None
    self.colType = CollisionType.Block
    self.forceX = 0
    self.forceY = 0
    self.forceZ = 0
    self.dampX = 0
    self.dampY = 0
    self.dampZ = 0
    self.radius = 50
end
---@class PhysicsType
---@type PhysicsType
PhysicsType = {}
PhysicsType.None = 0 -- 无物理效果
PhysicsType.Static = 1 -- 静态无位移
PhysicsType.Dynamic = 2 -- 动态物理效果

---@class CollisionType
---@type CollisionType
CollisionType = {}
CollisionType.None = 0 -- 无碰撞
CollisionType.Block = 1 -- 阻挡
CollisionType.Overlap = 2 -- 穿透

return PhysicsState]]

P['core/physics/physics_system.lua'] = [[local PhysicsState = require('core.physics.physics_state')

---@class PhysicsSystem
---@field instance PhysicsSystem
---@field tmpGroup Group
---@field dynamicGroup Unit[]
---@field staticGroup Unit[]

---@type PhysicsSystem
local PhysicsSystem = class('PhysicsSystem')

---@type PhysicsSystem
PhysicsSystem.instance = nil


function PhysicsSystem:constructor()
    PhysicsSystem.instance = self
    self.mainTimer = Timer:create()
    self.mainTimer:start(0.03,PhysicsSystem.MainLoop)
    self.dynamicGroup = {}
    self.staticGroup = {}
    self.tmpGroup = Group:create()
end

function PhysicsSystem:init()
  
end

function PhysicsSystem:check()
    -- body
end

---@param unit Unit
function PhysicsSystem:registerUnit(unit)
    local UnitType = require('core.unit.unit_type')
    ---@type UnitType
    local unitType = UnitType:fromUd(unit:getTypeId())
    unit.physicsState = PhysicsState:new() 
    unit.physicsState.phyType = unitType.defaultPhysics.phyType
    unit.physicsState.dampX = unitType.defaultPhysics.dampX
    unit.physicsState.dampY = unitType.defaultPhysics.dampY
    unit.physicsState.dampZ = unitType.defaultPhysics.dampZ
    unit.physicsState.radius = unitType.defaultPhysics.radius
    if unit.physicsState.phyType == PhysicsType.Static then
        table.insert(self.staticGroup,unit)
    end
    if unit.physicsState.phyType == PhysicsType.Dynamic then
        table.insert(self.dynamicGroup,unit)
    end

    print(unit:getName() .. " 注册进物理系统")
 
end

function PhysicsSystem.MainLoop()
    local phy = MKCore.PhySys
    for i,unit in ipairs(phy.dynamicGroup) do
        phy:UnitLoopCallback(unit)
    end
end

function PhysicsSystem:UnitMove(unit)
    local x = unit:getX()
    local y = unit:getY()
  
    self.tmpGroup:enumEnemyUnits(unit:getOwner(),x,y,250)
    self.tmpGroup:forEach(function(o)
        local oX = o:getX()
        local oY = o:getY()
        local dx = oX -x 
        local dy = oY - y
        local dis = dx* dx + dy * dy 
        if dis < 250 then
            local rad = math.atan(dy,dx) + 3.14
            unit:setX( oX + 50 * math.cos(rad))
            unit:setY( oY + 50 * math.sin(rad))
        end    
    end)
    
end
---@param unit Unit
function PhysicsSystem:UnitLoopCallback(unit)
    if unit:isDead() then
        return
    end
    self.tmpGroup:clear()
    local phyState = unit.physicsState
    if phyState == nil then
        return 
    end
    self:UnitMove(unit)
    local x = unit:getX()
    local y = unit:getY()
    local forecX = phyState.forceX
    local forecY = phyState.forceY
    local rad = math.atan(forecY,forecX)
    local speed = forecX * forecX  + forecY * forecY
    speed = math.sqrt(speed)
    local dX = speed * 0.03 * math.cos(rad)
    local dY = speed * 0.03 * math.sin(rad)
    local dampX = math.abs(phyState.dampX * 0.03 * math.cos(rad))
    local dampY = math.abs(phyState.dampY * 0.03 * math.sin(rad))
    local newX = x + dX
    local newY = y + dY
    self.tmpGroup:enumEnemyUnits(unit:getOwner(),newX,newY,phyState.radius)
    
    local isBlock = false
    self.tmpGroup:forEach(function(o)
        local other = Unit:fromUd(getUd(o))
        if unit:isAlive() then
            unit.unitType.onBlockOther(unit,other)
            other.unitType.onBlockOther(other,unit)
        end
        if unit.physicsState.colType == CollisionType.Block and other.physicsState.colType == CollisionType.Block then
            isBlock = true
            print(isBlock)
        end
    end)
    
    if not isBlock then
        unit:setX(newX)
        unit:setY(newY) 
    end

    if phyState.forceX > 0 then
        phyState.forceX = phyState.forceX - dampX
        if phyState.forceX < 0 then
            phyState.forceX = 0
        end
    end
    
    if phyState.forceX < 0 then
        phyState.forceX = phyState.forceX + dampX
        if phyState.forceX > 0 then
            phyState.forceX = 0
        end
    end
   
    if phyState.forceY > 0 then
        phyState.forceY= phyState.forceY - dampY
        if phyState.forceY < 0 then
            phyState.forceY = 0
        end
    end
    
    if phyState.forceY < 0 then
        phyState.forceY = phyState.forceY + dampY
        if phyState.forceY > 0 then
            phyState.forceY = 0
        end
    end
end

return PhysicsSystem]]

P['core/ui/button.lua'] = [[require('core.ui.ui_element')

---@class UIButton : UIElement
UIButton = class('UIButton',UIElement)

---create
---@param content string
---@param callback function
---@return UIButton
function UIButton:create(content,parent,callback,context)
    local button = UIElement:create(UIButton,"ScriptDialogButton",parent,0,context)
    local text = Frame:getByName("ScriptDialogButtonText",context)
    button.buttonText = text
    button.trigger = buttonTrigger
    button:setText(content)
    button:registerClick(callback)
    return button
end

function UIButton:registerClick(callback)
    if callback == nil then 
        return
    end
    self.buttonTrigger = Trigger:create()
    self.buttonTrigger:registerFrameEvent(self,FrameEventType.ControlClick)
    self.buttonTrigger:addAction(callback)
end

return UIButton]]

P['core/ui/label.lua'] = [[require('core.ui.ui_element')

---@class UILabel : Frame
---@field button  Frame
---@field buttonText Frame
UILabel = class('UILabel',UIElement)

LabelType = 
{
    Title = 'TitleTextTemplate',
    Content = 'ContentTextTemplate'
}

function UILabel:create(type,content,parent,context)
    local label = nil
    label = UIElement:create(UILabel,type,parent,0,context)
    label:setText(content)
    return label
end

return UILabel]]

P['core/ui/panel.lua'] = [[require('core.ui.ui_element')

---@class UIPanel : UIElement
UIPanel = class('UIPanel',UIElement)

HorionzontalAlignment = {
    Left = 0.0,
    Center = 0.5,
    Right = 1.0
}

VerticalAlignment = {
    Top = 0.0,
    Center = -0.5,
    Bottom = -1.0
}


function UIPanel:constructor(ud)
    self.children = {}
    self.hAlign = HorionzontalAlignment.Center
    self.vAlign = VerticalAlignment.Center
    self.hPadding = 0.0
    self.vPadding = 0.0
    self.vGap = 0.005
end

---@param child Frame
function UIPanel:addChild(child)
    table.insert(self.children,child)
    child:setParent(self)
end

function UIPanel:size()
    local width = 0.0
    local height = 0.0
    self.maxChildWidth = 0.0
    self.maxChildHeight = 0.0
    for i = 1,#self.children do
        local child = self.children[i]
        width = width + child:getWidth()
        height = height + child:getHeight()
        if child:getWidth() > self.maxChildWidth then
            self.maxChildWidth = child:getWidth()
        end
        if child:getHeight() > self.maxChildHeight then
            self.maxChildHeight = child:getHeight()
        end
    end
    self.contentWidth = width
    self.contentHeight = height
end

function UIPanel:layout()
    self:size()
    local offsetX = 0.0
    local offsetY = 0.0
    offsetX = self.hPadding + (self:getWidth() - self.maxChildWidth) * self.hAlign
    offsetY = self.vPadding + (self:getHeight() - self.contentHeight - (#self.children - 1) * self.vGap ) * self.vAlign
    for i = 1,#self.children do
        local child = self.children[i]
        child:setPoint(FramePointType.Topleft,self,FramePointType.Topleft,offsetX,offsetY)
        offsetY = offsetY - child:getHeight()
    end
end

return UIPanel]]

P['core/ui/ui_element.lua'] = [[
---@class UIElement : Frame
---@field context  number
UIElement = class("UIElement",Frame)


function UIElement:constructor(ud)
    self.context = 0
end

---@generic T : UIElement
---@param type T
---@return T
function UIElement:create(type,name,parent,priority,context)
    local obj = type:fromUd(Native.BlzCreateFrame(name, getUd(parent), priority, context) )
    obj.context = context
    return obj
end

---@generic T : UIElement
---@param type T
---@return T
function UIElement:get(type,name)
    local obj = type:fromUd(Native.BlzGetFrameByName(name,self.context))
    obj.context = self.context
    return obj
end

return UIElement]]

P['core/ui/ui_manager.lua'] = [[
---@class UIManager
---@field views UIPanel[]
UIManager = class("UIManager")
UIManager.views = {}


UIDef =
{
    MainView = "MainView",
    SelectHeroView = "HeroSelectView",
}
---@return UIPanel
function UIManager:showView(type,name)
    local view = UIManager.views[name]
    if view == nil then
        view = UIElement:create(type,name,_UI.GameUI,0,UIView.viewNum)
        view:setSize(0,0)
        view:onInit()
        UIManager.views[name] = view
    end
    view:setVisible(true)
    return view
end

function UIManager:sendMessage(viewName,message,data)
    local view = UIManager.views[viewName]
    if view ~= nil then
        local func = view[message]
        if type(func) == 'function' then
            func(view,data)
        end
    end
end

---@generic T : UIElement
---@param type T
---@return T
function UIManager:getView(type,name)
    return type:fromUd(UIManager.views[name]:getUd())
end

function UIManager:hideView(name)
    local panel = UIManager.views[name]
    if panel ~= nil then
        panel:setVisible(false)
    end
end



function UIManager:registerClickEvent(callback)
    local buttonTrigger = Trigger:create()
    buttonTrigger:registerFrameEvent(self,FrameEventType.ControlClick)
    buttonTrigger:addAction(callback)
end]]

P['core/ui/view.lua'] = [[require('core.ui.ui_element')

---@class UIView : UIElement
UIView = class('UIView',UIElement)
UIView.viewNum = 0

function UIView:constructor(ud)
    UIView.viewNum = UIView.viewNum + 1
end

function UIView:onInit()
    
end

return UIView]]

P['core/unit/unit_base.lua'] = [[---@class Unit : Widget
---@field physicsState PhysicsState
---@field unitType UnitType
---@field owner Player
---
---


function Unit:addForce(x,y,z)
    self.physicsState.forceX = self.physicsState.forceX + x
    self.physicsState.forceY = self.physicsState.forceY + y
end]]

P['core/unit/unit_ext.lua'] = [[function Group:enumEnemyUnits(player,x,y,radius)
    self:enumUnitsInRange(x,y,radius,function (u)
        if u:isEnemy(player) == false then
            return false;
        end
        --幻象
        if u:isType(UnitType.Structure) then
            return false
        end        
        if u:isDead() then 
            return false
        end
        return true
    end)
    return self
end

function math.smoothDamp(current, target, currentVelocity, smoothTime, maxSpeed, deltaTime)
    smoothTime = math.max(0.0001, smoothTime);
    local num1 = 2 / smoothTime;
    local num2 = num1 * deltaTime;
    local num3 = (1.0 / (1.0 + num2 + 0.479999989271164 * num2 * num2 + 0.234999999403954 * num2 * num2 * num2));
    local num4 = current - target;
    local num5 = target;
    local max = maxSpeed * smoothTime;
    local num6 = math.clamp(num4, -max, max);
    target = current - num6;
    local num7 = (currentVelocity + num1 * num6) * deltaTime;
    currentVelocity = (currentVelocity - num1 * num7) * num3;
    local num8 = target + (num6 + num7) * num3;
    if ( (num5 -  current > 0.0) ==( num8 > num5)) then
    
        num8 = num5;
        currentVelocity = (num8 - num5) / deltaTime;
    end
    
    return num8
end

function Group:isIn(widget)
    for i = 0 , self:getSize() - 1 do
        if widget == self:unitAt(i) then
            return true
        end
    end
    return false
end


function Group:forEachOnce(callback)
    if self.done == nil then
        self.done = Group:create()
    end
    for i = 0 , self:getSize() - 1 do
        local enum = self:unitAt(i)
        if self.done:isIn(enum) then
            return
        else
            self.done:addUnit(enum)
            callback(enum)
        end
    end
end

function Unit:damageUnitSimple(enemy,val)
    self:damageTarget(enemy, val,false, false, AttackType.Hero, DamageType.Magic, WeaponType.Whoknows)
end]]

P['core/unit/unit_system.lua'] = [[

local UnitType = require('core.unit.unit_type')
local AbilityType = require('core.ability.ability_type')
require('core.unit.unit_base')
require('core.unit.unit_ext')

---@class UnitSystem
---@field unitTypes UnitType[]

---@type UnitSystem
local UnitSystem = class("UnitSystem")


function UnitSystem:constructor()
    self.unitTypes = {}
    self.moveTrigger = Trigger:create()
end

function UnitSystem:init()
    local tmpGroup = Group:create()
    tmpGroup:enumUnitsInRect(MKCore.MapRect,
    function(unit)
        return true
    end
    )
    self.moveTrigger:addAction(function()      
        Event.getTriggerUnit().targetX = Event.getOrderPointX()
        Event.getTriggerUnit().targetY = Event.getOrderPointY()        
    end)

    local UnitType = require('core.unit.unit_type')

    tmpGroup:forEach(function(u)
        local unit = Unit:fromUd(getUd(u))
        self:registerUnit(unit)     
    end)
end

---@return UnitType
function UnitSystem:registerUnitType(typeName)
    local id = FourCC(typeName)
    local key = ToStr(id)
    local type = UnitType:create(typeName)
    self.unitTypes[key] = type
    return type
end

---@param unit Unit
function UnitSystem:registerUnit(unit)
    local UnitType = require('core.unit.unit_type')
    local unitType = UnitType:fromUd(unit:getTypeId())

    self.moveTrigger:registerUnitEvent(unit,UnitEvent.IssuedPointOrder)
    
    unit.unitType = unitType
    if unitType.defaultPhysics ~= nil then
        MKCore.PhySys:registerUnit(unit)
    end
    if unitType.canSelect == false then
        unit:addAbility(FourCC('Aloc'))        
        unit:setPosition(unit:getX(),unit:getY())
    end 
    if unit:isType(UnitType.Hero) then
        MKCore.AbilitySys:registerUnit(unit)
    end
end

---@param unitType UnitType
---@return Unit
function UnitSystem:createUnit(unitType,player,x,y,angle)

    local rect = Rect:fromUd(gg_rct_RebornRect)    
    ---@type Unit
    local unit = Unit:fromUd(Native.CreateUnit(getUd(player), getUd(unitType), x, y, angle))
    
    self:registerUnit(unit)
    return unit
end

return UnitSystem]]

P['core/unit/unit_type.lua'] = [[local PhysicsState = require('core.physics.physics_state')

---@class UnitType
---@field defaultPhysics PhysicsState
---@field canSelect boolean
---@field onBlockOther fun(unit:Unit,other:Unit):void
---@field onOverlapOther fun(unit:Unit,other:Unit):void
---
---@type UnitType
local UnitType = class('UnitType',Agent)

function UnitType:create(typeName)
    local type = UnitType:fromUd(FourCC(typeName))
    type.defaultPhysics = PhysicsState:new()
    type.canSelect = true
    return type
end

UnitType.onBlockOther = function(unit,other)
    
end

UnitType.onOverlapOther = function(unit,other)
    
end

return UnitType]]

P['core/utils.lua'] = [[
function ToStr(id)
    return ('>I4'):pack(id)
end

function ToID(str)
    return ('>I4'):unpack(str)
end

function math.clamp(v, minValue, maxValue)  
    if v < minValue then
        return minValue
    end
    if( v > maxValue) then
        return maxValue
    end
    return v 
end

---@generic T 
---@param type T
---@return T
function fromUd(type,ud)
    return type:fromUd(ud)
end


return Utils]]

P['lib/console/console.lua'] = [=[local Native = require('lib.stdlib.native')
local Frame = require('lib.stdlib.oop.frame')
local Trigger = require('lib.stdlib.oop.trigger')
local Event = require('lib.stdlib.oop.event')
local Player = require('lib.stdlib.oop.player')

local OriginFrameType = require('lib.stdlib.enum.originframetype')
local FramePointType = require('lib.stdlib.enum.framepointtype')
local FrameEventType = require('lib.stdlib.enum.frameeventtype')
local OsKeyType = require('lib.stdlib.enum.oskeytype')

local Console = {}

function Console:init()
    print('|cff00ff00Console Loaded!!!|r press |cffff0000Alt+F1|r to toggle')

    self:initUi()
    self:initTrig()
    self:initHook()
    self.history = {}
    self.historyIndex = 0
end

function Console:initUi()
    if not Native.BlzLoadTOCFile([[war3mapImported\UI\_console.toc]]) then
        print('|cffff0000Load console toc failed|r')
        return
    end

    local gameUi = Frame:getOrigin(OriginFrameType.GameUi, 0)

    local frameHash = 0

    self.console = Frame:create('__console', gameUi, 10, frameHash)
    if not self.console then
        print('|cffff0000Create console failed|r')
        return
    end

    self.console:hide()
    self.console:setPoint(FramePointType.Topleft, gameUi, FramePointType.Topleft, 0, 0)
    self.console:setPoint(FramePointType.Topright, gameUi, FramePointType.Topright, 0, 0)

    self.editBox = Frame:getByName('__consoleEditBox', frameHash)
    self.textArea = Frame:getByName('__consoleTextArea', frameHash)
end

function Console:initTrig()
    self.enterTrig = Trigger:create()
    self.enterTrig:registerFrameEvent(self.editBox, FrameEventType.EditboxEnter)
    self.enterTrig:addAction(function()
        local script = Event:getTriggerFrameText()
        if not script or script:trim() == '' then
            return
        end

        local f, err = load(script)
        if not f then
            self:addText(err)
            return
        end
        local ok, r = pcall(f)
        if not ok then
            self:addText(r)
            return
        end

        table.insert(self.history, 1, script)
        self.historyIndex = 0
        self.editBox:setFocus()
        self.editBox:setText('')
    end)

    self.showTrig = Trigger:create()
    self.showTrig:registerPlayerKeyEvent(Player:getLocal(), OsKeyType.F1, 4, true)
    self.showTrig:addAction(function()
        self:toggle()
    end)

    self.hideTrig = Trigger:create()
    self.hideTrig:registerPlayerKeyEvent(Player:getLocal(), OsKeyType.Escape, 0, true)
    self.hideTrig:addAction(function()
        self.console:hide()
    end)

    self.historyTrig = Trigger:create()
    self.historyTrig:registerFrameEvent(self.editBox, FrameEventType.MouseWheel)
    self.historyTrig:addAction(function()
        if not Event:getTriggerPlayer():isLocal() then
            return
        end
        if Event:getTriggerFrameValue() > 0 then
            if self.historyIndex < #self.history then
                self.historyIndex = self.historyIndex + 1
                self.editBox:setText(self.history[self.historyIndex])
            end
        elseif self.historyIndex > 1 and #self.history > 0 then
            self.historyIndex = self.historyIndex - 1
            self.editBox:setText(self.history[self.historyIndex])
        end
    end)
end

function Console:initHook()
    if self.textArea then
        _G.print = function(...)
            local sb = {}
            for i = 1, select('#', ...) do
                sb[i] = tostring(select(i, ...))
            end
            self:addText(table.concat(sb, '    '))
        end

        if seterrorhandler then
            seterrorhandler(function(msg)
                self:addText('|cffff0000error: ' .. msg .. '|r')
            end)
        end
    end
end

---addText
---@param text string
---@return void
function Console:addText(text)
    if self.textArea then
        self.textArea:addText(text)
    end
end

function Console:toggle()
    self.console:setVisible(not self.console:isVisible())
end

Console:init()]=]

P['lib/console/init.lua'] = [[
require('lib.console.console')]]

P['lib/init.lua'] = [[Native = require('lib.stdlib.native.init')
require('lib.stdlib.base.init')
require('lib.stdlib.oop.init')
require('lib.stdlib.enum.init')
Message = require('lib.stdlib.utils.message')
require('lib.console.init')]]

P['lib/stdlib/base/class.lua'] = [[-- data.lua
-- @Author : DengSir (tdaddon@163.com)
-- @Link   : https://dengsir.github.io
-- @Date   : 3/11/2019, 10:53:10 PM

local type, rawget, rawequal, setmetatable = type, rawget, rawequal, setmetatable
local shallowcopy = table.shallowcopy

local function constructor(obj, cls, ...)
    if not cls then
        return
    end
    constructor(obj, cls:metaSuper(), ...)

    local ctor = rawget(cls, 'constructor')
    if type(ctor) == 'function' then
        ctor(obj, ...)
    end
    return obj
end

local function inherit(cls, super)
    if not super then
        return
    end
    inherit(cls, super:metaSuper())

    local inh = rawget(super, 'inherit')
    if type(inh) == 'function' then
        inh(cls)
    end
end

---@class object
object = {}

object.meta = { __index = object, __type = object, __name = 'object' }

---metaSuper
---@return object
function object:metaSuper()
    return self.meta.__super
end

---metaType
---@return object
function object:metaType()
    return self.meta.__type
end

local function new(cls, ...)
    if not isClass(cls) then
        error('bad argument #self to `new` (class expected)', 2)
    end
    return constructor(setmetatable({}, cls.meta), cls, ...)
end

---new
---@generic T
---@vararg any
---@return T
function object:new(...)
    if not isClass(self) then
        error('bad argument #self to `new` (class expected)', 2)
    end

    local destructor = rawget(self, 'destructor')
    if destructor then
        self.meta.__gc = destructor
    end
    self.new = new
    return new(self, ...)
end

local mtDestroyed = {
    __index = function()
        error('object destroyed', 2)
    end,
    __newindex = function()
        error('object destroyed', 2)
    end
}

---delete
---@return void
function object:delete()
    local destructor = rawget(self:metaType(), 'destructor')
    if destructor then
        destructor(self)
    end

    table.wipe(self)
    setmetatable(self, mtDestroyed)
end

---isClass
---@param cls any
---@return boolean
function isClass(cls)
    if type(cls) ~= 'table' then
        return false
    end
    local meta = rawget(cls, 'meta')
    if not meta then
        return false
    end
    return meta.__type == cls
end

---isObject
---@param obj any
---@return boolean
function isObject(obj)
    if type(obj) ~= 'table' then
        return false
    end
    if rawget(obj, 'meta') then
        return false
    end
    local meta = obj.meta
    if not meta then
        return false
    end
    return isClass(meta.__type)
end

---isInheritOf
---@param cls object
---@param base object
function isInheritOf(cls, base)
    if not isClass(cls) then
        return false
    end
    if not isClass(base) then
        return false
    end
    local super = cls:metaSuper()
    if rawequal(super, base) then
        return true
    end
    return isInheritOf(super, base)
end

---isInstanceOf
---@param obj any
---@param cls object
---@return boolean
function isInstanceOf(obj, cls)
    if not isObject(obj) then
        return false
    end
    if not isClass(cls) then
        return false
    end
    if rawequal(obj:metaType(), cls) then
        return true
    end
    return isInheritOf(obj:metaType(), cls)
end

---class
---@param name string
---@param super object
---@return object
function class(name, super)
    if type(name) ~= 'string' then
        error('bad argument #1 to `class` (string expected)', 2)
    end
    if super and not isClass(super) then
        error('bad argument #2 to `class` (class expected)', 2)
    end
    super = super or object
    local cls = setmetatable({}, super.meta)
    local meta = shallowcopy(super.meta)

    cls.meta = meta
    meta.__gc = nil
    meta.__super = super
    meta.__index = cls
    meta.__type = cls
    meta.__name = name

    inherit(cls, super)
    return cls
end]]

P['lib/stdlib/base/debug.lua'] = [=[-- debug.lua
-- @Author : Dencer (tdaddon@163.com)
-- @Link   : https://dengsir.github.io
-- @Date   : 7/4/2019, 4:35:09 AM
local function errorhandler(msg)
    local h = geterrorhandler()
    if h then
        h(msg)
    end
end

local _type = type
local function type(value)
    local t = _type(value)
    if t ~= 'number' then
        return t
    end
    return math.type(value)
end

local function isValidType(obj, checkType)
    local t = type(obj)
    if t == checkType then
        return true
    end

    if checkType == 'float' and t == 'integer' then
        return true
    end
    if checkType == 'function' and t == 'nil' then
        return true
    end
    return false
end

---deprecated
---@param msg string
---@return void
function deprecated(name, to)
    return xpcall(function()
        error(string.format('%s deprecated, see %s', name, to or ''), 5)
    end, errorhandler)
end

---checktype
---@param value any
---@param checkType string
---@param apiName string
---@param argIndex integer
function checktype(value, checkType, apiName, argIndex)
    if not isValidType(value, checkType) then
        error(string.format([[bad argument #%s to '%s' (%s expected, got %s)]], argIndex, apiName, checkType,
                            type(value)), 3)
    end
end

---checkobject
---@param obj object
---@param cls object
---@param apiName string
---@param argIndex integer
function checkobject(obj, cls, apiName, argIndex)
    if obj == nil then
        return
    end
    if not isInstanceOf(obj, cls) then
        local e = isObject(obj) and obj.meta.__name or type(obj)
        error(string.format([[bad argument #%s to '%s' (%s expected, got %s)]], argIndex, apiName, cls.meta.__name, e),
              3)
    end
end

---checkclass
---@param obj object
---@param cls object
---@param apiName string
---@param argIndex integer
function checkclass(value, cls, apiName, argIndex)
    if value ~= cls then
        local e = isObject(value) and 'object' or isClass(value) and value.meta.__name or type(value)
        error(string.format([[bad argument #%s to '%s' (%s expected, got %s)]], argIndex, apiName, cls.meta.__name, e),
              3)
    end
end

---checkuserdata
---@param value any
---@param checkType string
---@param apiName string
---@param argIndex integer
function checkuserdata(value, checkType, apiName, argIndex)
    if not tostring(value):startswith(checkType) then
        error(string.format([[bad argument #%s to '%s' (%s expected, got %s)]], argIndex, apiName, checkType,
                            tostring(value)), 3)
    end
end]=]

P['lib/stdlib/base/init.lua'] = [[-- init.lua
-- @Author : DengSir (tdaddon@163.com)
-- @Link   : https://dengsir.github.io
-- @Date   : 4/11/2019 2:14 PM
require('lib.stdlib.base.table')
require('lib.stdlib.base.string')
require('lib.stdlib.base.class')
-- @debug
require('lib.stdlib.base.debug')
-- @end-debug@]]

P['lib/stdlib/base/string.lua'] = [[-- string.lua
-- @Author : Dencer (tdaddon@163.com)
-- @Link   : https://dengsir.github.io
-- @Date   : 4/1/2019 4:15 PM

local string, table = string, table

---trimleft
---@param s string
---@return string
function string.trimleft(s)
    return (s:gsub('^%s+', ''))
end

---trimright
---@param s string
---@return string
function string.trimright(s)
    return (s:gsub('%s+$', ''))
end

---trim
---@param s string
---@return string
function string.trim(s)
    return s:trimleft():trimright()
end

---split
---@param s string
---@param pattern string
---@param plain boolean
---@param maxTokens integer
---@return string[]
function string.split(s, pattern, plain, maxTokens)
    local pos = 0
    local start, stop
    local r = {}

    while true do
        start, stop = s:find(pattern, pos, plain)
        if not start then
            break
        end

        table.insert(r, s:sub(pos, start - 1))
        pos = stop + 1

        if maxTokens then
            maxTokens = maxTokens - 1
            if maxTokens == 0 then
                break
            end
        end
    end
    table.insert(r, s:sub(pos))
    return r
end

---startswith
---@param s string
---@param pattern string
---@param plain boolean
---@return boolean
function string.startswith(s, pattern, plain)
    if plain then
        pattern = pattern:escapepattern()
    end
    pattern = '^' .. pattern
    return not not s:find(pattern)
end

---endswith
---@param s string
---@param pattern string
---@param plain boolean
---@return boolean
function string.endswith(s, pattern, plain)
    if plain then
        pattern = pattern:escapepattern()
    end
    pattern = pattern .. '$'
    return not not s:find(pattern)
end

---escapepattern
---@param s string
---@return string
function string.escapepattern(s)
    return s:gsub('[%(%)%.%%%+%-%*%?%[%]%^%$]', '%%%0')
end]]

P['lib/stdlib/base/table.lua'] = [[-- table.lua
-- @Author : Dencer (tdaddon@163.com)
-- @Link   : https://dengsir.github.io
-- @Date   : 4/1/2019 2:47 PM

local pairs, ipairs, select, type = pairs, ipairs, select, type
local table = table

---@class integer: number
---@class float: number

---@generic V
---@alias array V[]|table<integer, V>

local function riter(t, i)
    i = i - 1
    if i > 0 then
        return i, t[i]
    end
end

---ripairs
---@generic V
---@param t array
---@return fun(t:array):number,V
function ripairs(t)
    return riter, t, #t + 1
end

---spairs
---@generic V
---@param t table<string, V>|V[]
---@return fun(tbl: table<string, V>):string, V
function spairs(t)
    local i = 0
    local keys = table.keys(t)
    table.sort(keys)

    return function()
        i = i + 1
        local k = keys[i]
        if k then
            return k, t[k]
        end
    end
end

---vipairs
---@generic V
---@param t array
---@return fun(t:array):V
function vipairs(t)
    local i = 0
    return function()
        i = i + 1
        return t[i]
    end
end

---vpairs
---@generic K
---@generic V
---@param t table<K, V>
---@return fun(): V
function vpairs(t)
    local k
    return function()
        k = next(t, k)
        if not k then
            return
        end
        return t[k]
    end
end

---wipe
---@param t T
---@return T
function table.wipe(t)
    for k, v in pairs(t) do
        t[k] = nil
    end
    return t
end

---reduce
---@generic V, T
---@param t array
---@param callback fun(r:any, v:V, i:integer, t:array):T
---@param initialValue T
---@return T
function table.reduce(t, callback, initialValue)
    local r = initialValue
    for i, v in ipairs(t) do
        r = callback(r, v, i, t) or r
    end
    return r
end

---filter
---@generic V
---@param t array
---@param callback fun(v:V, i:integer, t:array):boolean
---@return array
function table.filter(t, callback)
    return table.reduce(t, function(r, v, i, _t)
        if callback(v, i, _t) then
            table.insert(r, v)
        end
    end, {})
end

---map
---@generic V, O
---@param t array
---@param callback fun(v:V, i:integer, t:array):O
---@return O[]|table<integer,O>
function table.map(t, callback)
    return table.reduce(t, function(r, v, i, _t)
        r[i] = callback(v, i, _t)
    end, {})
end

---every
---@generic V
---@param t array
---@param callback fun(v:V, i:integer, t:array):boolean
---@return boolean
function table.every(t, callback)
    for i, v in ipairs(t) do
        if not callback(v, i, t) then
            return false
        end
    end
    return true
end

---shallowcopy
---@generic T
---@param t T
---@return T
function table.shallowcopy(t)
    local r = {}
    for k, v in pairs(t) do
        r[k] = v
    end
    return r
end

---arraycopy
---@generic T
---@param t T
---@return T
function table.arraycopy(t)
    local r = {}
    for i, v in ipairs(t) do
        r[i] = v
    end
    return r
end

---indexof
---@generic V
---@param t array
---@param item V
---@return integer|nil
function table.indexof(t, item)
    for i, v in ipairs(t) do
        if v == item then
            return i
        end
    end
end

---contains
---@generic V
---@param t array
---@param item V
---@return boolean
function table.contains(t, item)
    return not not table.indexof(t, item)
end

---isempty
---@param t table
---@return boolean
function table.isempty(t)
    return next(t) == nil
end

---keys
---@param t table
function table.keys(t)
    local r = {}
    for k in pairs(t) do
        table.insert(r, k)
    end
    return r
end

---join
---@generic T
---@vararg T
---@return T
function table.join(...)
    local r = {}
    local t

    for i = 1, select('#', ...) do
        t = select(i, ...)
        if type(t) == 'table' then
            for _, v in ipairs(t) do
                table.insert(r, v)
            end
        else
            table.insert(r, t)
        end
    end
    return r
end

---merge
---@vararg table
---@return table
function table.merge(...)
    local r = {}
    for i = 1, select('#', ...) do
        for k, v in pairs(select(i, ...)) do
            r[k] = v
        end
    end
    return r
end

---random
---@generic T
---@param t T[]
---@return T
function table.random(t)
    if #t == 1 then
        return t[1]
    end
    return t[math.random(1, #t)]
end]]

P['lib/stdlib/enum/abilitybooleanfield.lua'] = [[local Native = require('lib.stdlib.native')

---@class AbilityBooleanField
local AbilityBooleanField = {
    HeroAbility = Native.ConvertAbilityBooleanField(0x61686572), --ABILITY_BF_HERO_ABILITY
    ItemAbility = Native.ConvertAbilityBooleanField(0x61697465), --ABILITY_BF_ITEM_ABILITY
    CheckDependencies = Native.ConvertAbilityBooleanField(0x61636864), --ABILITY_BF_CHECK_DEPENDENCIES
}
return AbilityBooleanField]]

P['lib/stdlib/enum/abilitybooleanlevelarrayfield.lua'] = [[local Native = require('lib.stdlib.native')

---@class AbilityBooleanLevelArrayField
local AbilityBooleanLevelArrayField = {
}
return AbilityBooleanLevelArrayField]]

P['lib/stdlib/enum/abilitybooleanlevelfield.lua'] = [[local Native = require('lib.stdlib.native')

---@class AbilityBooleanLevelField
local AbilityBooleanLevelField = {
    PercentBonusHab2 = Native.ConvertAbilityBooleanLevelField(0x48616232), --ABILITY_BLF_PERCENT_BONUS_HAB2
    UseTeleportClusteringHmt3 = Native.ConvertAbilityBooleanLevelField(0x486D7433), --ABILITY_BLF_USE_TELEPORT_CLUSTERING_HMT3
    NeverMissOcr5 = Native.ConvertAbilityBooleanLevelField(0x4F637235), --ABILITY_BLF_NEVER_MISS_OCR5
    ExcludeItemDamage = Native.ConvertAbilityBooleanLevelField(0x4F637236), --ABILITY_BLF_EXCLUDE_ITEM_DAMAGE
    BackstabDamage = Native.ConvertAbilityBooleanLevelField(0x4F776B34), --ABILITY_BLF_BACKSTAB_DAMAGE
    InheritUpgradesUan3 = Native.ConvertAbilityBooleanLevelField(0x55616E33), --ABILITY_BLF_INHERIT_UPGRADES_UAN3
    ManaConversionAsPercent = Native.ConvertAbilityBooleanLevelField(0x55647033), --ABILITY_BLF_MANA_CONVERSION_AS_PERCENT
    LifeConversionAsPercent = Native.ConvertAbilityBooleanLevelField(0x55647034), --ABILITY_BLF_LIFE_CONVERSION_AS_PERCENT
    LeaveTargetAlive = Native.ConvertAbilityBooleanLevelField(0x55647035), --ABILITY_BLF_LEAVE_TARGET_ALIVE
    PercentBonusUau3 = Native.ConvertAbilityBooleanLevelField(0x55617533), --ABILITY_BLF_PERCENT_BONUS_UAU3
    DamageIsPercentReceived = Native.ConvertAbilityBooleanLevelField(0x45616832), --ABILITY_BLF_DAMAGE_IS_PERCENT_RECEIVED
    MeleeBonus = Native.ConvertAbilityBooleanLevelField(0x45617232), --ABILITY_BLF_MELEE_BONUS
    RangedBonus = Native.ConvertAbilityBooleanLevelField(0x45617233), --ABILITY_BLF_RANGED_BONUS
    FlatBonus = Native.ConvertAbilityBooleanLevelField(0x45617234), --ABILITY_BLF_FLAT_BONUS
    NeverMissHbh5 = Native.ConvertAbilityBooleanLevelField(0x48626835), --ABILITY_BLF_NEVER_MISS_HBH5
    PercentBonusHad2 = Native.ConvertAbilityBooleanLevelField(0x48616432), --ABILITY_BLF_PERCENT_BONUS_HAD2
    CanDeactivate = Native.ConvertAbilityBooleanLevelField(0x48647331), --ABILITY_BLF_CAN_DEACTIVATE
    RaisedUnitsAreInvulnerable = Native.ConvertAbilityBooleanLevelField(0x48726532), --ABILITY_BLF_RAISED_UNITS_ARE_INVULNERABLE
    PercentageOar2 = Native.ConvertAbilityBooleanLevelField(0x4F617232), --ABILITY_BLF_PERCENTAGE_OAR2
    SummonBusyUnits = Native.ConvertAbilityBooleanLevelField(0x42746C32), --ABILITY_BLF_SUMMON_BUSY_UNITS
    CreatesBlight = Native.ConvertAbilityBooleanLevelField(0x426C6932), --ABILITY_BLF_CREATES_BLIGHT
    ExplodesOnDeath = Native.ConvertAbilityBooleanLevelField(0x53647336), --ABILITY_BLF_EXPLODES_ON_DEATH
    AlwaysAutocastFae2 = Native.ConvertAbilityBooleanLevelField(0x46616532), --ABILITY_BLF_ALWAYS_AUTOCAST_FAE2
    RegenerateOnlyAtNight = Native.ConvertAbilityBooleanLevelField(0x4D627435), --ABILITY_BLF_REGENERATE_ONLY_AT_NIGHT
    ShowSelectUnitButton = Native.ConvertAbilityBooleanLevelField(0x4E657533), --ABILITY_BLF_SHOW_SELECT_UNIT_BUTTON
    ShowUnitIndicator = Native.ConvertAbilityBooleanLevelField(0x4E657534), --ABILITY_BLF_SHOW_UNIT_INDICATOR
    ChargeOwningPlayer = Native.ConvertAbilityBooleanLevelField(0x416E7336), --ABILITY_BLF_CHARGE_OWNING_PLAYER
    PercentageArm2 = Native.ConvertAbilityBooleanLevelField(0x41726D32), --ABILITY_BLF_PERCENTAGE_ARM2
    TargetIsInvulnerable = Native.ConvertAbilityBooleanLevelField(0x506F7333), --ABILITY_BLF_TARGET_IS_INVULNERABLE
    TargetIsMagicImmune = Native.ConvertAbilityBooleanLevelField(0x506F7334), --ABILITY_BLF_TARGET_IS_MAGIC_IMMUNE
    KillOnCasterDeath = Native.ConvertAbilityBooleanLevelField(0x55636236), --ABILITY_BLF_KILL_ON_CASTER_DEATH
    NoTargetRequiredRej4 = Native.ConvertAbilityBooleanLevelField(0x52656A34), --ABILITY_BLF_NO_TARGET_REQUIRED_REJ4
    AcceptsGold = Native.ConvertAbilityBooleanLevelField(0x52746E31), --ABILITY_BLF_ACCEPTS_GOLD
    AcceptsLumber = Native.ConvertAbilityBooleanLevelField(0x52746E32), --ABILITY_BLF_ACCEPTS_LUMBER
    PreferHostilesRoa5 = Native.ConvertAbilityBooleanLevelField(0x526F6135), --ABILITY_BLF_PREFER_HOSTILES_ROA5
    PreferFriendliesRoa6 = Native.ConvertAbilityBooleanLevelField(0x526F6136), --ABILITY_BLF_PREFER_FRIENDLIES_ROA6
    RootedTurning = Native.ConvertAbilityBooleanLevelField(0x526F6F33), --ABILITY_BLF_ROOTED_TURNING
    AlwaysAutocastSlo3 = Native.ConvertAbilityBooleanLevelField(0x536C6F33), --ABILITY_BLF_ALWAYS_AUTOCAST_SLO3
    HideButton = Native.ConvertAbilityBooleanLevelField(0x49686964), --ABILITY_BLF_HIDE_BUTTON
    UseTeleportClusteringItp2 = Native.ConvertAbilityBooleanLevelField(0x49747032), --ABILITY_BLF_USE_TELEPORT_CLUSTERING_ITP2
    ImmuneToMorphEffects = Native.ConvertAbilityBooleanLevelField(0x45746831), --ABILITY_BLF_IMMUNE_TO_MORPH_EFFECTS
    DoesNotBlockBuildings = Native.ConvertAbilityBooleanLevelField(0x45746832), --ABILITY_BLF_DOES_NOT_BLOCK_BUILDINGS
    AutoAcquireAttackTargets = Native.ConvertAbilityBooleanLevelField(0x47686F31), --ABILITY_BLF_AUTO_ACQUIRE_ATTACK_TARGETS
    ImmuneToMorphEffectsGho2 = Native.ConvertAbilityBooleanLevelField(0x47686F32), --ABILITY_BLF_IMMUNE_TO_MORPH_EFFECTS_GHO2
    DoNotBlockBuildings = Native.ConvertAbilityBooleanLevelField(0x47686F33), --ABILITY_BLF_DO_NOT_BLOCK_BUILDINGS
    IncludeRangedDamage = Native.ConvertAbilityBooleanLevelField(0x53736B34), --ABILITY_BLF_INCLUDE_RANGED_DAMAGE
    IncludeMeleeDamage = Native.ConvertAbilityBooleanLevelField(0x53736B35), --ABILITY_BLF_INCLUDE_MELEE_DAMAGE
    MoveToPartner = Native.ConvertAbilityBooleanLevelField(0x636F6132), --ABILITY_BLF_MOVE_TO_PARTNER
    CanBeDispelled = Native.ConvertAbilityBooleanLevelField(0x63796331), --ABILITY_BLF_CAN_BE_DISPELLED
    IgnoreFriendlyBuffs = Native.ConvertAbilityBooleanLevelField(0x64766D36), --ABILITY_BLF_IGNORE_FRIENDLY_BUFFS
    DropItemsOnDeath = Native.ConvertAbilityBooleanLevelField(0x696E7632), --ABILITY_BLF_DROP_ITEMS_ON_DEATH
    CanUseItems = Native.ConvertAbilityBooleanLevelField(0x696E7633), --ABILITY_BLF_CAN_USE_ITEMS
    CanGetItems = Native.ConvertAbilityBooleanLevelField(0x696E7634), --ABILITY_BLF_CAN_GET_ITEMS
    CanDropItems = Native.ConvertAbilityBooleanLevelField(0x696E7635), --ABILITY_BLF_CAN_DROP_ITEMS
    RepairsAllowed = Native.ConvertAbilityBooleanLevelField(0x6C697134), --ABILITY_BLF_REPAIRS_ALLOWED
    CasterOnlySplash = Native.ConvertAbilityBooleanLevelField(0x6D666C36), --ABILITY_BLF_CASTER_ONLY_SPLASH
    NoTargetRequiredIrl4 = Native.ConvertAbilityBooleanLevelField(0x69726C34), --ABILITY_BLF_NO_TARGET_REQUIRED_IRL4
    DispelOnAttack = Native.ConvertAbilityBooleanLevelField(0x69726C35), --ABILITY_BLF_DISPEL_ON_ATTACK
    AmountIsRawValue = Native.ConvertAbilityBooleanLevelField(0x69707633), --ABILITY_BLF_AMOUNT_IS_RAW_VALUE
    SharedSpellCooldown = Native.ConvertAbilityBooleanLevelField(0x73706232), --ABILITY_BLF_SHARED_SPELL_COOLDOWN
    SleepOnce = Native.ConvertAbilityBooleanLevelField(0x736C6131), --ABILITY_BLF_SLEEP_ONCE
    AllowOnAnyPlayerSlot = Native.ConvertAbilityBooleanLevelField(0x736C6132), --ABILITY_BLF_ALLOW_ON_ANY_PLAYER_SLOT
    DisableOtherAbilities = Native.ConvertAbilityBooleanLevelField(0x4E636C35), --ABILITY_BLF_DISABLE_OTHER_ABILITIES
    AllowBounty = Native.ConvertAbilityBooleanLevelField(0x4E746D34), --ABILITY_BLF_ALLOW_BOUNTY
}
return AbilityBooleanLevelField]]

P['lib/stdlib/enum/abilityintegerfield.lua'] = [[local Native = require('lib.stdlib.native')

---@class AbilityIntegerField
local AbilityIntegerField = {
    ButtonPositionNormalX = Native.ConvertAbilityIntegerField(0x61627078), --ABILITY_IF_BUTTON_POSITION_NORMAL_X
    ButtonPositionNormalY = Native.ConvertAbilityIntegerField(0x61627079), --ABILITY_IF_BUTTON_POSITION_NORMAL_Y
    ButtonPositionActivatedX = Native.ConvertAbilityIntegerField(0x61756278), --ABILITY_IF_BUTTON_POSITION_ACTIVATED_X
    ButtonPositionActivatedY = Native.ConvertAbilityIntegerField(0x61756279), --ABILITY_IF_BUTTON_POSITION_ACTIVATED_Y
    ButtonPositionResearchX = Native.ConvertAbilityIntegerField(0x61727078), --ABILITY_IF_BUTTON_POSITION_RESEARCH_X
    ButtonPositionResearchY = Native.ConvertAbilityIntegerField(0x61727079), --ABILITY_IF_BUTTON_POSITION_RESEARCH_Y
    MissileSpeed = Native.ConvertAbilityIntegerField(0x616D7370), --ABILITY_IF_MISSILE_SPEED
    TargetAttachments = Native.ConvertAbilityIntegerField(0x61746163), --ABILITY_IF_TARGET_ATTACHMENTS
    CasterAttachments = Native.ConvertAbilityIntegerField(0x61636163), --ABILITY_IF_CASTER_ATTACHMENTS
    Priority = Native.ConvertAbilityIntegerField(0x61707269), --ABILITY_IF_PRIORITY
    Levels = Native.ConvertAbilityIntegerField(0x616C6576), --ABILITY_IF_LEVELS
    RequiredLevel = Native.ConvertAbilityIntegerField(0x61726C76), --ABILITY_IF_REQUIRED_LEVEL
    LevelSkipRequirement = Native.ConvertAbilityIntegerField(0x616C736B), --ABILITY_IF_LEVEL_SKIP_REQUIREMENT
}
return AbilityIntegerField]]

P['lib/stdlib/enum/abilityintegerlevelarrayfield.lua'] = [[local Native = require('lib.stdlib.native')

---@class AbilityIntegerLevelArrayField
local AbilityIntegerLevelArrayField = {
}
return AbilityIntegerLevelArrayField]]

P['lib/stdlib/enum/abilityintegerlevelfield.lua'] = [[local Native = require('lib.stdlib.native')

---@class AbilityIntegerLevelField
local AbilityIntegerLevelField = {
    ManaCost = Native.ConvertAbilityIntegerLevelField(0x616D6373), --ABILITY_ILF_MANA_COST
    NumberOfWaves = Native.ConvertAbilityIntegerLevelField(0x48627A31), --ABILITY_ILF_NUMBER_OF_WAVES
    NumberOfShards = Native.ConvertAbilityIntegerLevelField(0x48627A33), --ABILITY_ILF_NUMBER_OF_SHARDS
    NumberOfUnitsTeleported = Native.ConvertAbilityIntegerLevelField(0x486D7431), --ABILITY_ILF_NUMBER_OF_UNITS_TELEPORTED
    SummonedUnitCountHwe2 = Native.ConvertAbilityIntegerLevelField(0x48776532), --ABILITY_ILF_SUMMONED_UNIT_COUNT_HWE2
    NumberOfImages = Native.ConvertAbilityIntegerLevelField(0x4F6D6931), --ABILITY_ILF_NUMBER_OF_IMAGES
    NumberOfCorpsesRaisedUan1 = Native.ConvertAbilityIntegerLevelField(0x55616E31), --ABILITY_ILF_NUMBER_OF_CORPSES_RAISED_UAN1
    MorphingFlags = Native.ConvertAbilityIntegerLevelField(0x456D6532), --ABILITY_ILF_MORPHING_FLAGS
    StrengthBonusNrg5 = Native.ConvertAbilityIntegerLevelField(0x4E726735), --ABILITY_ILF_STRENGTH_BONUS_NRG5
    DefenseBonusNrg6 = Native.ConvertAbilityIntegerLevelField(0x4E726736), --ABILITY_ILF_DEFENSE_BONUS_NRG6
    NumberOfTargetsHit = Native.ConvertAbilityIntegerLevelField(0x4F636C32), --ABILITY_ILF_NUMBER_OF_TARGETS_HIT
    DetectionTypeOfs1 = Native.ConvertAbilityIntegerLevelField(0x4F667331), --ABILITY_ILF_DETECTION_TYPE_OFS1
    NumberOfSummonedUnitsOsf2 = Native.ConvertAbilityIntegerLevelField(0x4F736632), --ABILITY_ILF_NUMBER_OF_SUMMONED_UNITS_OSF2
    NumberOfSummonedUnitsEfn1 = Native.ConvertAbilityIntegerLevelField(0x45666E31), --ABILITY_ILF_NUMBER_OF_SUMMONED_UNITS_EFN1
    NumberOfCorpsesRaisedHre1 = Native.ConvertAbilityIntegerLevelField(0x48726531), --ABILITY_ILF_NUMBER_OF_CORPSES_RAISED_HRE1
    StackFlags = Native.ConvertAbilityIntegerLevelField(0x48636134), --ABILITY_ILF_STACK_FLAGS
    MinimumNumberOfUnits = Native.ConvertAbilityIntegerLevelField(0x4E647032), --ABILITY_ILF_MINIMUM_NUMBER_OF_UNITS
    MaximumNumberOfUnitsNdp3 = Native.ConvertAbilityIntegerLevelField(0x4E647033), --ABILITY_ILF_MAXIMUM_NUMBER_OF_UNITS_NDP3
    NumberOfUnitsCreatedNrc2 = Native.ConvertAbilityIntegerLevelField(0x4E726332), --ABILITY_ILF_NUMBER_OF_UNITS_CREATED_NRC2
    ShieldLife = Native.ConvertAbilityIntegerLevelField(0x416D7333), --ABILITY_ILF_SHIELD_LIFE
    ManaLossAms4 = Native.ConvertAbilityIntegerLevelField(0x416D7334), --ABILITY_ILF_MANA_LOSS_AMS4
    GoldPerIntervalBgm1 = Native.ConvertAbilityIntegerLevelField(0x42676D31), --ABILITY_ILF_GOLD_PER_INTERVAL_BGM1
    MaxNumberOfMiners = Native.ConvertAbilityIntegerLevelField(0x42676D33), --ABILITY_ILF_MAX_NUMBER_OF_MINERS
    CargoCapacity = Native.ConvertAbilityIntegerLevelField(0x43617231), --ABILITY_ILF_CARGO_CAPACITY
    MaximumCreepLevelDev3 = Native.ConvertAbilityIntegerLevelField(0x44657633), --ABILITY_ILF_MAXIMUM_CREEP_LEVEL_DEV3
    MaxCreepLevelDev1 = Native.ConvertAbilityIntegerLevelField(0x44657631), --ABILITY_ILF_MAX_CREEP_LEVEL_DEV1
    GoldPerIntervalEgm1 = Native.ConvertAbilityIntegerLevelField(0x45676D31), --ABILITY_ILF_GOLD_PER_INTERVAL_EGM1
    DefenseReduction = Native.ConvertAbilityIntegerLevelField(0x46616531), --ABILITY_ILF_DEFENSE_REDUCTION
    DetectionTypeFla1 = Native.ConvertAbilityIntegerLevelField(0x466C6131), --ABILITY_ILF_DETECTION_TYPE_FLA1
    FlareCount = Native.ConvertAbilityIntegerLevelField(0x466C6133), --ABILITY_ILF_FLARE_COUNT
    MaxGold = Native.ConvertAbilityIntegerLevelField(0x476C6431), --ABILITY_ILF_MAX_GOLD
    MiningCapacity = Native.ConvertAbilityIntegerLevelField(0x476C6433), --ABILITY_ILF_MINING_CAPACITY
    MaximumNumberOfCorpsesGyd1 = Native.ConvertAbilityIntegerLevelField(0x47796431), --ABILITY_ILF_MAXIMUM_NUMBER_OF_CORPSES_GYD1
    DamageToTree = Native.ConvertAbilityIntegerLevelField(0x48617231), --ABILITY_ILF_DAMAGE_TO_TREE
    LumberCapacity = Native.ConvertAbilityIntegerLevelField(0x48617232), --ABILITY_ILF_LUMBER_CAPACITY
    GoldCapacity = Native.ConvertAbilityIntegerLevelField(0x48617233), --ABILITY_ILF_GOLD_CAPACITY
    DefenseIncreaseInf2 = Native.ConvertAbilityIntegerLevelField(0x496E6632), --ABILITY_ILF_DEFENSE_INCREASE_INF2
    InteractionType = Native.ConvertAbilityIntegerLevelField(0x4E657532), --ABILITY_ILF_INTERACTION_TYPE
    GoldCostNdt1 = Native.ConvertAbilityIntegerLevelField(0x4E647431), --ABILITY_ILF_GOLD_COST_NDT1
    LumberCostNdt2 = Native.ConvertAbilityIntegerLevelField(0x4E647432), --ABILITY_ILF_LUMBER_COST_NDT2
    DetectionTypeNdt3 = Native.ConvertAbilityIntegerLevelField(0x4E647433), --ABILITY_ILF_DETECTION_TYPE_NDT3
    StackingTypePoi4 = Native.ConvertAbilityIntegerLevelField(0x506F6934), --ABILITY_ILF_STACKING_TYPE_POI4
    StackingTypePoa5 = Native.ConvertAbilityIntegerLevelField(0x506F6135), --ABILITY_ILF_STACKING_TYPE_POA5
    MaximumCreepLevelPly1 = Native.ConvertAbilityIntegerLevelField(0x506C7931), --ABILITY_ILF_MAXIMUM_CREEP_LEVEL_PLY1
    MaximumCreepLevelPos1 = Native.ConvertAbilityIntegerLevelField(0x506F7331), --ABILITY_ILF_MAXIMUM_CREEP_LEVEL_POS1
    MovementUpdateFrequencyPrg1 = Native.ConvertAbilityIntegerLevelField(0x50726731), --ABILITY_ILF_MOVEMENT_UPDATE_FREQUENCY_PRG1
    AttackUpdateFrequencyPrg2 = Native.ConvertAbilityIntegerLevelField(0x50726732), --ABILITY_ILF_ATTACK_UPDATE_FREQUENCY_PRG2
    ManaLossPrg6 = Native.ConvertAbilityIntegerLevelField(0x50726736), --ABILITY_ILF_MANA_LOSS_PRG6
    UnitsSummonedTypeOne = Native.ConvertAbilityIntegerLevelField(0x52616931), --ABILITY_ILF_UNITS_SUMMONED_TYPE_ONE
    UnitsSummonedTypeTwo = Native.ConvertAbilityIntegerLevelField(0x52616932), --ABILITY_ILF_UNITS_SUMMONED_TYPE_TWO
    MaxUnitsSummoned = Native.ConvertAbilityIntegerLevelField(0x55636235), --ABILITY_ILF_MAX_UNITS_SUMMONED
    AllowWhenFullRej3 = Native.ConvertAbilityIntegerLevelField(0x52656A33), --ABILITY_ILF_ALLOW_WHEN_FULL_REJ3
    MaximumUnitsChargedToCaster = Native.ConvertAbilityIntegerLevelField(0x52706235), --ABILITY_ILF_MAXIMUM_UNITS_CHARGED_TO_CASTER
    MaximumUnitsAffected = Native.ConvertAbilityIntegerLevelField(0x52706236), --ABILITY_ILF_MAXIMUM_UNITS_AFFECTED
    DefenseIncreaseRoa2 = Native.ConvertAbilityIntegerLevelField(0x526F6132), --ABILITY_ILF_DEFENSE_INCREASE_ROA2
    MaxUnitsRoa7 = Native.ConvertAbilityIntegerLevelField(0x526F6137), --ABILITY_ILF_MAX_UNITS_ROA7
    RootedWeapons = Native.ConvertAbilityIntegerLevelField(0x526F6F31), --ABILITY_ILF_ROOTED_WEAPONS
    UprootedWeapons = Native.ConvertAbilityIntegerLevelField(0x526F6F32), --ABILITY_ILF_UPROOTED_WEAPONS
    UprootedDefenseType = Native.ConvertAbilityIntegerLevelField(0x526F6F34), --ABILITY_ILF_UPROOTED_DEFENSE_TYPE
    AccumulationStep = Native.ConvertAbilityIntegerLevelField(0x53616C32), --ABILITY_ILF_ACCUMULATION_STEP
    NumberOfOwls = Native.ConvertAbilityIntegerLevelField(0x45736E34), --ABILITY_ILF_NUMBER_OF_OWLS
    StackingTypeSpo4 = Native.ConvertAbilityIntegerLevelField(0x53706F34), --ABILITY_ILF_STACKING_TYPE_SPO4
    NumberOfUnits = Native.ConvertAbilityIntegerLevelField(0x536F6431), --ABILITY_ILF_NUMBER_OF_UNITS
    SpiderCapacity = Native.ConvertAbilityIntegerLevelField(0x53706131), --ABILITY_ILF_SPIDER_CAPACITY
    IntervalsBeforeChangingTrees = Native.ConvertAbilityIntegerLevelField(0x57686132), --ABILITY_ILF_INTERVALS_BEFORE_CHANGING_TREES
    AgilityBonus = Native.ConvertAbilityIntegerLevelField(0x49616769), --ABILITY_ILF_AGILITY_BONUS
    IntelligenceBonus = Native.ConvertAbilityIntegerLevelField(0x49696E74), --ABILITY_ILF_INTELLIGENCE_BONUS
    StrengthBonusIstr = Native.ConvertAbilityIntegerLevelField(0x49737472), --ABILITY_ILF_STRENGTH_BONUS_ISTR
    AttackBonus = Native.ConvertAbilityIntegerLevelField(0x49617474), --ABILITY_ILF_ATTACK_BONUS
    DefenseBonusIdef = Native.ConvertAbilityIntegerLevelField(0x49646566), --ABILITY_ILF_DEFENSE_BONUS_IDEF
    Summon1Amount = Native.ConvertAbilityIntegerLevelField(0x49736E31), --ABILITY_ILF_SUMMON_1_AMOUNT
    Summon2Amount = Native.ConvertAbilityIntegerLevelField(0x49736E32), --ABILITY_ILF_SUMMON_2_AMOUNT
    ExperienceGained = Native.ConvertAbilityIntegerLevelField(0x49787067), --ABILITY_ILF_EXPERIENCE_GAINED
    HitPointsGainedIhpg = Native.ConvertAbilityIntegerLevelField(0x49687067), --ABILITY_ILF_HIT_POINTS_GAINED_IHPG
    ManaPointsGainedImpg = Native.ConvertAbilityIntegerLevelField(0x496D7067), --ABILITY_ILF_MANA_POINTS_GAINED_IMPG
    HitPointsGainedIhp2 = Native.ConvertAbilityIntegerLevelField(0x49687032), --ABILITY_ILF_HIT_POINTS_GAINED_IHP2
    ManaPointsGainedImp2 = Native.ConvertAbilityIntegerLevelField(0x496D7032), --ABILITY_ILF_MANA_POINTS_GAINED_IMP2
    DamageBonusDice = Native.ConvertAbilityIntegerLevelField(0x49646963), --ABILITY_ILF_DAMAGE_BONUS_DICE
    ArmorPenaltyIarp = Native.ConvertAbilityIntegerLevelField(0x49617270), --ABILITY_ILF_ARMOR_PENALTY_IARP
    EnabledAttackIndexIob5 = Native.ConvertAbilityIntegerLevelField(0x496F6235), --ABILITY_ILF_ENABLED_ATTACK_INDEX_IOB5
    LevelsGained = Native.ConvertAbilityIntegerLevelField(0x496C6576), --ABILITY_ILF_LEVELS_GAINED
    MaxLifeGained = Native.ConvertAbilityIntegerLevelField(0x496C6966), --ABILITY_ILF_MAX_LIFE_GAINED
    MaxManaGained = Native.ConvertAbilityIntegerLevelField(0x496D616E), --ABILITY_ILF_MAX_MANA_GAINED
    GoldGiven = Native.ConvertAbilityIntegerLevelField(0x49676F6C), --ABILITY_ILF_GOLD_GIVEN
    LumberGiven = Native.ConvertAbilityIntegerLevelField(0x496C756D), --ABILITY_ILF_LUMBER_GIVEN
    DetectionTypeIfa1 = Native.ConvertAbilityIntegerLevelField(0x49666131), --ABILITY_ILF_DETECTION_TYPE_IFA1
    MaximumCreepLevelIcre = Native.ConvertAbilityIntegerLevelField(0x49637265), --ABILITY_ILF_MAXIMUM_CREEP_LEVEL_ICRE
    MovementSpeedBonus = Native.ConvertAbilityIntegerLevelField(0x496D7662), --ABILITY_ILF_MOVEMENT_SPEED_BONUS
    HitPointsRegeneratedPerSecond = Native.ConvertAbilityIntegerLevelField(0x49687072), --ABILITY_ILF_HIT_POINTS_REGENERATED_PER_SECOND
    SightRangeBonus = Native.ConvertAbilityIntegerLevelField(0x49736962), --ABILITY_ILF_SIGHT_RANGE_BONUS
    DamagePerDuration = Native.ConvertAbilityIntegerLevelField(0x49636664), --ABILITY_ILF_DAMAGE_PER_DURATION
    ManaUsedPerSecond = Native.ConvertAbilityIntegerLevelField(0x4963666D), --ABILITY_ILF_MANA_USED_PER_SECOND
    ExtraManaRequired = Native.ConvertAbilityIntegerLevelField(0x49636678), --ABILITY_ILF_EXTRA_MANA_REQUIRED
    DetectionRadiusIdet = Native.ConvertAbilityIntegerLevelField(0x49646574), --ABILITY_ILF_DETECTION_RADIUS_IDET
    ManaLossPerUnitIdim = Native.ConvertAbilityIntegerLevelField(0x4964696D), --ABILITY_ILF_MANA_LOSS_PER_UNIT_IDIM
    DamageToSummonedUnitsIdid = Native.ConvertAbilityIntegerLevelField(0x49646964), --ABILITY_ILF_DAMAGE_TO_SUMMONED_UNITS_IDID
    MaximumNumberOfUnitsIrec = Native.ConvertAbilityIntegerLevelField(0x49726563), --ABILITY_ILF_MAXIMUM_NUMBER_OF_UNITS_IREC
    DelayAfterDeathSeconds = Native.ConvertAbilityIntegerLevelField(0x49726364), --ABILITY_ILF_DELAY_AFTER_DEATH_SECONDS
    RestoredLife = Native.ConvertAbilityIntegerLevelField(0x69726332), --ABILITY_ILF_RESTORED_LIFE
    RestoredMana1ForCurrent = Native.ConvertAbilityIntegerLevelField(0x69726333), --ABILITY_ILF_RESTORED_MANA__1_FOR_CURRENT
    HitPointsRestored = Native.ConvertAbilityIntegerLevelField(0x49687073), --ABILITY_ILF_HIT_POINTS_RESTORED
    ManaPointsRestored = Native.ConvertAbilityIntegerLevelField(0x496D7073), --ABILITY_ILF_MANA_POINTS_RESTORED
    MaximumNumberOfUnitsItpm = Native.ConvertAbilityIntegerLevelField(0x4974706D), --ABILITY_ILF_MAXIMUM_NUMBER_OF_UNITS_ITPM
    NumberOfCorpsesRaisedCad1 = Native.ConvertAbilityIntegerLevelField(0x43616431), --ABILITY_ILF_NUMBER_OF_CORPSES_RAISED_CAD1
    TerrainDeformationDurationMs = Native.ConvertAbilityIntegerLevelField(0x57727333), --ABILITY_ILF_TERRAIN_DEFORMATION_DURATION_MS
    MaximumUnits = Native.ConvertAbilityIntegerLevelField(0x55647331), --ABILITY_ILF_MAXIMUM_UNITS
    DetectionTypeDet1 = Native.ConvertAbilityIntegerLevelField(0x44657431), --ABILITY_ILF_DETECTION_TYPE_DET1
    GoldCostPerStructure = Native.ConvertAbilityIntegerLevelField(0x4E737031), --ABILITY_ILF_GOLD_COST_PER_STRUCTURE
    LumberCostPerUse = Native.ConvertAbilityIntegerLevelField(0x4E737032), --ABILITY_ILF_LUMBER_COST_PER_USE
    DetectionTypeNsp3 = Native.ConvertAbilityIntegerLevelField(0x4E737033), --ABILITY_ILF_DETECTION_TYPE_NSP3
    NumberOfSwarmUnits = Native.ConvertAbilityIntegerLevelField(0x556C7331), --ABILITY_ILF_NUMBER_OF_SWARM_UNITS
    MaxSwarmUnitsPerTarget = Native.ConvertAbilityIntegerLevelField(0x556C7333), --ABILITY_ILF_MAX_SWARM_UNITS_PER_TARGET
    NumberOfSummonedUnitsNba2 = Native.ConvertAbilityIntegerLevelField(0x4E626132), --ABILITY_ILF_NUMBER_OF_SUMMONED_UNITS_NBA2
    MaximumCreepLevelNch1 = Native.ConvertAbilityIntegerLevelField(0x4E636831), --ABILITY_ILF_MAXIMUM_CREEP_LEVEL_NCH1
    AttacksPrevented = Native.ConvertAbilityIntegerLevelField(0x4E736931), --ABILITY_ILF_ATTACKS_PREVENTED
    MaximumNumberOfTargetsEfk3 = Native.ConvertAbilityIntegerLevelField(0x45666B33), --ABILITY_ILF_MAXIMUM_NUMBER_OF_TARGETS_EFK3
    NumberOfSummonedUnitsEsv1 = Native.ConvertAbilityIntegerLevelField(0x45737631), --ABILITY_ILF_NUMBER_OF_SUMMONED_UNITS_ESV1
    MaximumNumberOfCorpsesExh1 = Native.ConvertAbilityIntegerLevelField(0x65786831), --ABILITY_ILF_MAXIMUM_NUMBER_OF_CORPSES_EXH1
    ItemCapacity = Native.ConvertAbilityIntegerLevelField(0x696E7631), --ABILITY_ILF_ITEM_CAPACITY
    MaximumNumberOfTargetsSpl2 = Native.ConvertAbilityIntegerLevelField(0x73706C32), --ABILITY_ILF_MAXIMUM_NUMBER_OF_TARGETS_SPL2
    AllowWhenFullIrl3 = Native.ConvertAbilityIntegerLevelField(0x69726C33), --ABILITY_ILF_ALLOW_WHEN_FULL_IRL3
    MaximumDispelledUnits = Native.ConvertAbilityIntegerLevelField(0x69646333), --ABILITY_ILF_MAXIMUM_DISPELLED_UNITS
    NumberOfLures = Native.ConvertAbilityIntegerLevelField(0x696D6F31), --ABILITY_ILF_NUMBER_OF_LURES
    NewTimeOfDayHour = Native.ConvertAbilityIntegerLevelField(0x69637431), --ABILITY_ILF_NEW_TIME_OF_DAY_HOUR
    NewTimeOfDayMinute = Native.ConvertAbilityIntegerLevelField(0x69637432), --ABILITY_ILF_NEW_TIME_OF_DAY_MINUTE
    NumberOfUnitsCreatedMec1 = Native.ConvertAbilityIntegerLevelField(0x6D656331), --ABILITY_ILF_NUMBER_OF_UNITS_CREATED_MEC1
    MinimumSpells = Native.ConvertAbilityIntegerLevelField(0x73706233), --ABILITY_ILF_MINIMUM_SPELLS
    MaximumSpells = Native.ConvertAbilityIntegerLevelField(0x73706234), --ABILITY_ILF_MAXIMUM_SPELLS
    DisabledAttackIndex = Native.ConvertAbilityIntegerLevelField(0x67726133), --ABILITY_ILF_DISABLED_ATTACK_INDEX
    EnabledAttackIndexGra4 = Native.ConvertAbilityIntegerLevelField(0x67726134), --ABILITY_ILF_ENABLED_ATTACK_INDEX_GRA4
    MaximumAttacks = Native.ConvertAbilityIntegerLevelField(0x67726135), --ABILITY_ILF_MAXIMUM_ATTACKS
    BuildingTypesAllowedNpr1 = Native.ConvertAbilityIntegerLevelField(0x4E707231), --ABILITY_ILF_BUILDING_TYPES_ALLOWED_NPR1
    BuildingTypesAllowedNsa1 = Native.ConvertAbilityIntegerLevelField(0x4E736131), --ABILITY_ILF_BUILDING_TYPES_ALLOWED_NSA1
    AttackModification = Native.ConvertAbilityIntegerLevelField(0x49616131), --ABILITY_ILF_ATTACK_MODIFICATION
    SummonedUnitCountNpa5 = Native.ConvertAbilityIntegerLevelField(0x4E706135), --ABILITY_ILF_SUMMONED_UNIT_COUNT_NPA5
    UpgradeLevels = Native.ConvertAbilityIntegerLevelField(0x49676C31), --ABILITY_ILF_UPGRADE_LEVELS
    NumberOfSummonedUnitsNdo2 = Native.ConvertAbilityIntegerLevelField(0x4E646F32), --ABILITY_ILF_NUMBER_OF_SUMMONED_UNITS_NDO2
    BeastsPerSecond = Native.ConvertAbilityIntegerLevelField(0x4E737431), --ABILITY_ILF_BEASTS_PER_SECOND
    TargetType = Native.ConvertAbilityIntegerLevelField(0x4E636C32), --ABILITY_ILF_TARGET_TYPE
    Options = Native.ConvertAbilityIntegerLevelField(0x4E636C33), --ABILITY_ILF_OPTIONS
    ArmorPenaltyNab3 = Native.ConvertAbilityIntegerLevelField(0x4E616233), --ABILITY_ILF_ARMOR_PENALTY_NAB3
    WaveCountNhs6 = Native.ConvertAbilityIntegerLevelField(0x4E687336), --ABILITY_ILF_WAVE_COUNT_NHS6
    MaxCreepLevelNtm3 = Native.ConvertAbilityIntegerLevelField(0x4E746D33), --ABILITY_ILF_MAX_CREEP_LEVEL_NTM3
    MissileCount = Native.ConvertAbilityIntegerLevelField(0x4E637333), --ABILITY_ILF_MISSILE_COUNT
    SplitAttackCount = Native.ConvertAbilityIntegerLevelField(0x4E6C6D33), --ABILITY_ILF_SPLIT_ATTACK_COUNT
    GenerationCount = Native.ConvertAbilityIntegerLevelField(0x4E6C6D36), --ABILITY_ILF_GENERATION_COUNT
    RockRingCount = Native.ConvertAbilityIntegerLevelField(0x4E766331), --ABILITY_ILF_ROCK_RING_COUNT
    WaveCountNvc2 = Native.ConvertAbilityIntegerLevelField(0x4E766332), --ABILITY_ILF_WAVE_COUNT_NVC2
    PreferHostilesTau1 = Native.ConvertAbilityIntegerLevelField(0x54617531), --ABILITY_ILF_PREFER_HOSTILES_TAU1
    PreferFriendliesTau2 = Native.ConvertAbilityIntegerLevelField(0x54617532), --ABILITY_ILF_PREFER_FRIENDLIES_TAU2
    MaxUnitsTau3 = Native.ConvertAbilityIntegerLevelField(0x54617533), --ABILITY_ILF_MAX_UNITS_TAU3
    NumberOfPulses = Native.ConvertAbilityIntegerLevelField(0x54617534), --ABILITY_ILF_NUMBER_OF_PULSES
    SummonedUnitTypeHwe1 = Native.ConvertAbilityIntegerLevelField(0x48776531), --ABILITY_ILF_SUMMONED_UNIT_TYPE_HWE1
    SummonedUnitUin4 = Native.ConvertAbilityIntegerLevelField(0x55696E34), --ABILITY_ILF_SUMMONED_UNIT_UIN4
    SummonedUnitOsf1 = Native.ConvertAbilityIntegerLevelField(0x4F736631), --ABILITY_ILF_SUMMONED_UNIT_OSF1
    SummonedUnitTypeEfnu = Native.ConvertAbilityIntegerLevelField(0x45666E75), --ABILITY_ILF_SUMMONED_UNIT_TYPE_EFNU
    SummonedUnitTypeNbau = Native.ConvertAbilityIntegerLevelField(0x4E626175), --ABILITY_ILF_SUMMONED_UNIT_TYPE_NBAU
    SummonedUnitTypeNtou = Native.ConvertAbilityIntegerLevelField(0x4E746F75), --ABILITY_ILF_SUMMONED_UNIT_TYPE_NTOU
    SummonedUnitTypeEsvu = Native.ConvertAbilityIntegerLevelField(0x45737675), --ABILITY_ILF_SUMMONED_UNIT_TYPE_ESVU
    SummonedUnitTypes = Native.ConvertAbilityIntegerLevelField(0x4E656631), --ABILITY_ILF_SUMMONED_UNIT_TYPES
    SummonedUnitTypeNdou = Native.ConvertAbilityIntegerLevelField(0x4E646F75), --ABILITY_ILF_SUMMONED_UNIT_TYPE_NDOU
    AlternateFormUnitEmeu = Native.ConvertAbilityIntegerLevelField(0x456D6575), --ABILITY_ILF_ALTERNATE_FORM_UNIT_EMEU
    PlagueWardUnitType = Native.ConvertAbilityIntegerLevelField(0x41706C75), --ABILITY_ILF_PLAGUE_WARD_UNIT_TYPE
    AllowedUnitTypeBtl1 = Native.ConvertAbilityIntegerLevelField(0x42746C31), --ABILITY_ILF_ALLOWED_UNIT_TYPE_BTL1
    NewUnitType = Native.ConvertAbilityIntegerLevelField(0x43686131), --ABILITY_ILF_NEW_UNIT_TYPE
    ResultingUnitTypeEnt1 = Native.ConvertAbilityIntegerLevelField(0x656E7431), --ABILITY_ILF_RESULTING_UNIT_TYPE_ENT1
    CorpseUnitType = Native.ConvertAbilityIntegerLevelField(0x47796475), --ABILITY_ILF_CORPSE_UNIT_TYPE
    AllowedUnitTypeLoa1 = Native.ConvertAbilityIntegerLevelField(0x4C6F6131), --ABILITY_ILF_ALLOWED_UNIT_TYPE_LOA1
    UnitTypeForLimitCheck = Native.ConvertAbilityIntegerLevelField(0x52616975), --ABILITY_ILF_UNIT_TYPE_FOR_LIMIT_CHECK
    WardUnitTypeStau = Native.ConvertAbilityIntegerLevelField(0x53746175), --ABILITY_ILF_WARD_UNIT_TYPE_STAU
    EffectAbility = Native.ConvertAbilityIntegerLevelField(0x496F6275), --ABILITY_ILF_EFFECT_ABILITY
    ConversionUnit = Native.ConvertAbilityIntegerLevelField(0x4E646332), --ABILITY_ILF_CONVERSION_UNIT
    UnitToPreserve = Native.ConvertAbilityIntegerLevelField(0x4E736C31), --ABILITY_ILF_UNIT_TO_PRESERVE
    UnitTypeAllowed = Native.ConvertAbilityIntegerLevelField(0x43686C31), --ABILITY_ILF_UNIT_TYPE_ALLOWED
    SwarmUnitType = Native.ConvertAbilityIntegerLevelField(0x556C7375), --ABILITY_ILF_SWARM_UNIT_TYPE
    ResultingUnitTypeCoau = Native.ConvertAbilityIntegerLevelField(0x636F6175), --ABILITY_ILF_RESULTING_UNIT_TYPE_COAU
    UnitTypeExhu = Native.ConvertAbilityIntegerLevelField(0x65786875), --ABILITY_ILF_UNIT_TYPE_EXHU
    WardUnitTypeHwdu = Native.ConvertAbilityIntegerLevelField(0x68776475), --ABILITY_ILF_WARD_UNIT_TYPE_HWDU
    LureUnitType = Native.ConvertAbilityIntegerLevelField(0x696D6F75), --ABILITY_ILF_LURE_UNIT_TYPE
    UnitTypeIpmu = Native.ConvertAbilityIntegerLevelField(0x69706D75), --ABILITY_ILF_UNIT_TYPE_IPMU
    FactoryUnitId = Native.ConvertAbilityIntegerLevelField(0x4E737975), --ABILITY_ILF_FACTORY_UNIT_ID
    SpawnUnitIdNfyu = Native.ConvertAbilityIntegerLevelField(0x4E667975), --ABILITY_ILF_SPAWN_UNIT_ID_NFYU
    DestructibleId = Native.ConvertAbilityIntegerLevelField(0x4E766375), --ABILITY_ILF_DESTRUCTIBLE_ID
    UpgradeType = Native.ConvertAbilityIntegerLevelField(0x49676C75), --ABILITY_ILF_UPGRADE_TYPE
}
return AbilityIntegerLevelField]]

P['lib/stdlib/enum/abilityrealfield.lua'] = [[local Native = require('lib.stdlib.native')

---@class AbilityRealField
local AbilityRealField = {
    ArfMissileArc = Native.ConvertAbilityRealField(0x616D6163), --ABILITY_RF_ARF_MISSILE_ARC
}
return AbilityRealField]]

P['lib/stdlib/enum/abilityreallevelarrayfield.lua'] = [[local Native = require('lib.stdlib.native')

---@class AbilityRealLevelArrayField
local AbilityRealLevelArrayField = {
}
return AbilityRealLevelArrayField]]

P['lib/stdlib/enum/abilityreallevelfield.lua'] = [[local Native = require('lib.stdlib.native')

---@class AbilityRealLevelField
local AbilityRealLevelField = {
    CastingTime = Native.ConvertAbilityRealLevelField(0x61636173), --ABILITY_RLF_CASTING_TIME
    DurationNormal = Native.ConvertAbilityRealLevelField(0x61647572), --ABILITY_RLF_DURATION_NORMAL
    DurationHero = Native.ConvertAbilityRealLevelField(0x61686475), --ABILITY_RLF_DURATION_HERO
    Cooldown = Native.ConvertAbilityRealLevelField(0x6163646E), --ABILITY_RLF_COOLDOWN
    AreaOfEffect = Native.ConvertAbilityRealLevelField(0x61617265), --ABILITY_RLF_AREA_OF_EFFECT
    CastRange = Native.ConvertAbilityRealLevelField(0x6172616E), --ABILITY_RLF_CAST_RANGE
    DamageHbz2 = Native.ConvertAbilityRealLevelField(0x48627A32), --ABILITY_RLF_DAMAGE_HBZ2
    BuildingReductionHbz4 = Native.ConvertAbilityRealLevelField(0x48627A34), --ABILITY_RLF_BUILDING_REDUCTION_HBZ4
    DamagePerSecondHbz5 = Native.ConvertAbilityRealLevelField(0x48627A35), --ABILITY_RLF_DAMAGE_PER_SECOND_HBZ5
    MaximumDamagePerWave = Native.ConvertAbilityRealLevelField(0x48627A36), --ABILITY_RLF_MAXIMUM_DAMAGE_PER_WAVE
    ManaRegenerationIncrease = Native.ConvertAbilityRealLevelField(0x48616231), --ABILITY_RLF_MANA_REGENERATION_INCREASE
    CastingDelay = Native.ConvertAbilityRealLevelField(0x486D7432), --ABILITY_RLF_CASTING_DELAY
    DamagePerSecondOww1 = Native.ConvertAbilityRealLevelField(0x4F777731), --ABILITY_RLF_DAMAGE_PER_SECOND_OWW1
    MagicDamageReductionOww2 = Native.ConvertAbilityRealLevelField(0x4F777732), --ABILITY_RLF_MAGIC_DAMAGE_REDUCTION_OWW2
    ChanceToCriticalStrike = Native.ConvertAbilityRealLevelField(0x4F637231), --ABILITY_RLF_CHANCE_TO_CRITICAL_STRIKE
    DamageMultiplierOcr2 = Native.ConvertAbilityRealLevelField(0x4F637232), --ABILITY_RLF_DAMAGE_MULTIPLIER_OCR2
    DamageBonusOcr3 = Native.ConvertAbilityRealLevelField(0x4F637233), --ABILITY_RLF_DAMAGE_BONUS_OCR3
    ChanceToEvadeOcr4 = Native.ConvertAbilityRealLevelField(0x4F637234), --ABILITY_RLF_CHANCE_TO_EVADE_OCR4
    DamageDealtPercentOmi2 = Native.ConvertAbilityRealLevelField(0x4F6D6932), --ABILITY_RLF_DAMAGE_DEALT_PERCENT_OMI2
    DamageTakenPercentOmi3 = Native.ConvertAbilityRealLevelField(0x4F6D6933), --ABILITY_RLF_DAMAGE_TAKEN_PERCENT_OMI3
    AnimationDelay = Native.ConvertAbilityRealLevelField(0x4F6D6934), --ABILITY_RLF_ANIMATION_DELAY
    TransitionTime = Native.ConvertAbilityRealLevelField(0x4F776B31), --ABILITY_RLF_TRANSITION_TIME
    MovementSpeedIncreasePercentOwk2 = Native.ConvertAbilityRealLevelField(0x4F776B32), --ABILITY_RLF_MOVEMENT_SPEED_INCREASE_PERCENT_OWK2
    BackstabDamage = Native.ConvertAbilityRealLevelField(0x4F776B33), --ABILITY_RLF_BACKSTAB_DAMAGE
    AmountHealedDamagedUdc1 = Native.ConvertAbilityRealLevelField(0x55646331), --ABILITY_RLF_AMOUNT_HEALED_DAMAGED_UDC1
    LifeConvertedToMana = Native.ConvertAbilityRealLevelField(0x55647031), --ABILITY_RLF_LIFE_CONVERTED_TO_MANA
    LifeConvertedToLife = Native.ConvertAbilityRealLevelField(0x55647032), --ABILITY_RLF_LIFE_CONVERTED_TO_LIFE
    MovementSpeedIncreasePercentUau1 = Native.ConvertAbilityRealLevelField(0x55617531), --ABILITY_RLF_MOVEMENT_SPEED_INCREASE_PERCENT_UAU1
    LifeRegenerationIncreasePercent = Native.ConvertAbilityRealLevelField(0x55617532), --ABILITY_RLF_LIFE_REGENERATION_INCREASE_PERCENT
    ChanceToEvadeEev1 = Native.ConvertAbilityRealLevelField(0x45657631), --ABILITY_RLF_CHANCE_TO_EVADE_EEV1
    DamagePerInterval = Native.ConvertAbilityRealLevelField(0x45696D31), --ABILITY_RLF_DAMAGE_PER_INTERVAL
    ManaDrainedPerSecondEim2 = Native.ConvertAbilityRealLevelField(0x45696D32), --ABILITY_RLF_MANA_DRAINED_PER_SECOND_EIM2
    BufferManaRequired = Native.ConvertAbilityRealLevelField(0x45696D33), --ABILITY_RLF_BUFFER_MANA_REQUIRED
    MaxManaDrained = Native.ConvertAbilityRealLevelField(0x456D6231), --ABILITY_RLF_MAX_MANA_DRAINED
    BoltDelay = Native.ConvertAbilityRealLevelField(0x456D6232), --ABILITY_RLF_BOLT_DELAY
    BoltLifetime = Native.ConvertAbilityRealLevelField(0x456D6233), --ABILITY_RLF_BOLT_LIFETIME
    AltitudeAdjustmentDuration = Native.ConvertAbilityRealLevelField(0x456D6533), --ABILITY_RLF_ALTITUDE_ADJUSTMENT_DURATION
    LandingDelayTime = Native.ConvertAbilityRealLevelField(0x456D6534), --ABILITY_RLF_LANDING_DELAY_TIME
    AlternateFormHitPointBonus = Native.ConvertAbilityRealLevelField(0x456D6535), --ABILITY_RLF_ALTERNATE_FORM_HIT_POINT_BONUS
    MoveSpeedBonusInfoPanelOnly = Native.ConvertAbilityRealLevelField(0x4E637235), --ABILITY_RLF_MOVE_SPEED_BONUS_INFO_PANEL_ONLY
    AttackSpeedBonusInfoPanelOnly = Native.ConvertAbilityRealLevelField(0x4E637236), --ABILITY_RLF_ATTACK_SPEED_BONUS_INFO_PANEL_ONLY
    LifeRegenerationRatePerSecond = Native.ConvertAbilityRealLevelField(0x61766535), --ABILITY_RLF_LIFE_REGENERATION_RATE_PER_SECOND
    StunDurationUsl1 = Native.ConvertAbilityRealLevelField(0x55736C31), --ABILITY_RLF_STUN_DURATION_USL1
    AttackDamageStolenPercent = Native.ConvertAbilityRealLevelField(0x55617631), --ABILITY_RLF_ATTACK_DAMAGE_STOLEN_PERCENT
    DamageUcs1 = Native.ConvertAbilityRealLevelField(0x55637331), --ABILITY_RLF_DAMAGE_UCS1
    MaxDamageUcs2 = Native.ConvertAbilityRealLevelField(0x55637332), --ABILITY_RLF_MAX_DAMAGE_UCS2
    DistanceUcs3 = Native.ConvertAbilityRealLevelField(0x55637333), --ABILITY_RLF_DISTANCE_UCS3
    FinalAreaUcs4 = Native.ConvertAbilityRealLevelField(0x55637334), --ABILITY_RLF_FINAL_AREA_UCS4
    DamageUin1 = Native.ConvertAbilityRealLevelField(0x55696E31), --ABILITY_RLF_DAMAGE_UIN1
    Duration = Native.ConvertAbilityRealLevelField(0x55696E32), --ABILITY_RLF_DURATION
    ImpactDelay = Native.ConvertAbilityRealLevelField(0x55696E33), --ABILITY_RLF_IMPACT_DELAY
    DamagePerTargetOcl1 = Native.ConvertAbilityRealLevelField(0x4F636C31), --ABILITY_RLF_DAMAGE_PER_TARGET_OCL1
    DamageReductionPerTarget = Native.ConvertAbilityRealLevelField(0x4F636C33), --ABILITY_RLF_DAMAGE_REDUCTION_PER_TARGET
    EffectDelayOeq1 = Native.ConvertAbilityRealLevelField(0x4F657131), --ABILITY_RLF_EFFECT_DELAY_OEQ1
    DamagePerSecondToBuildings = Native.ConvertAbilityRealLevelField(0x4F657132), --ABILITY_RLF_DAMAGE_PER_SECOND_TO_BUILDINGS
    UnitsSlowedPercent = Native.ConvertAbilityRealLevelField(0x4F657133), --ABILITY_RLF_UNITS_SLOWED_PERCENT
    FinalAreaOeq4 = Native.ConvertAbilityRealLevelField(0x4F657134), --ABILITY_RLF_FINAL_AREA_OEQ4
    DamagePerSecondEer1 = Native.ConvertAbilityRealLevelField(0x45657231), --ABILITY_RLF_DAMAGE_PER_SECOND_EER1
    DamageDealtToAttackers = Native.ConvertAbilityRealLevelField(0x45616831), --ABILITY_RLF_DAMAGE_DEALT_TO_ATTACKERS
    LifeHealed = Native.ConvertAbilityRealLevelField(0x45747131), --ABILITY_RLF_LIFE_HEALED
    HealInterval = Native.ConvertAbilityRealLevelField(0x45747132), --ABILITY_RLF_HEAL_INTERVAL
    BuildingReductionEtq3 = Native.ConvertAbilityRealLevelField(0x45747133), --ABILITY_RLF_BUILDING_REDUCTION_ETQ3
    InitialImmunityDuration = Native.ConvertAbilityRealLevelField(0x45747134), --ABILITY_RLF_INITIAL_IMMUNITY_DURATION
    MaxLifeDrainedPerSecondPercent = Native.ConvertAbilityRealLevelField(0x55646431), --ABILITY_RLF_MAX_LIFE_DRAINED_PER_SECOND_PERCENT
    BuildingReductionUdd2 = Native.ConvertAbilityRealLevelField(0x55646432), --ABILITY_RLF_BUILDING_REDUCTION_UDD2
    ArmorDuration = Native.ConvertAbilityRealLevelField(0x55666131), --ABILITY_RLF_ARMOR_DURATION
    ArmorBonusUfa2 = Native.ConvertAbilityRealLevelField(0x55666132), --ABILITY_RLF_ARMOR_BONUS_UFA2
    AreaOfEffectDamage = Native.ConvertAbilityRealLevelField(0x55666E31), --ABILITY_RLF_AREA_OF_EFFECT_DAMAGE
    SpecificTargetDamageUfn2 = Native.ConvertAbilityRealLevelField(0x55666E32), --ABILITY_RLF_SPECIFIC_TARGET_DAMAGE_UFN2
    DamageBonusHfa1 = Native.ConvertAbilityRealLevelField(0x48666131), --ABILITY_RLF_DAMAGE_BONUS_HFA1
    DamageDealtEsf1 = Native.ConvertAbilityRealLevelField(0x45736631), --ABILITY_RLF_DAMAGE_DEALT_ESF1
    DamageIntervalEsf2 = Native.ConvertAbilityRealLevelField(0x45736632), --ABILITY_RLF_DAMAGE_INTERVAL_ESF2
    BuildingReductionEsf3 = Native.ConvertAbilityRealLevelField(0x45736633), --ABILITY_RLF_BUILDING_REDUCTION_ESF3
    DamageBonusPercent = Native.ConvertAbilityRealLevelField(0x45617231), --ABILITY_RLF_DAMAGE_BONUS_PERCENT
    DefenseBonusHav1 = Native.ConvertAbilityRealLevelField(0x48617631), --ABILITY_RLF_DEFENSE_BONUS_HAV1
    HitPointBonus = Native.ConvertAbilityRealLevelField(0x48617632), --ABILITY_RLF_HIT_POINT_BONUS
    DamageBonusHav3 = Native.ConvertAbilityRealLevelField(0x48617633), --ABILITY_RLF_DAMAGE_BONUS_HAV3
    MagicDamageReductionHav4 = Native.ConvertAbilityRealLevelField(0x48617634), --ABILITY_RLF_MAGIC_DAMAGE_REDUCTION_HAV4
    ChanceToBash = Native.ConvertAbilityRealLevelField(0x48626831), --ABILITY_RLF_CHANCE_TO_BASH
    DamageMultiplierHbh2 = Native.ConvertAbilityRealLevelField(0x48626832), --ABILITY_RLF_DAMAGE_MULTIPLIER_HBH2
    DamageBonusHbh3 = Native.ConvertAbilityRealLevelField(0x48626833), --ABILITY_RLF_DAMAGE_BONUS_HBH3
    ChanceToMissHbh4 = Native.ConvertAbilityRealLevelField(0x48626834), --ABILITY_RLF_CHANCE_TO_MISS_HBH4
    DamageHtb1 = Native.ConvertAbilityRealLevelField(0x48746231), --ABILITY_RLF_DAMAGE_HTB1
    AoeDamage = Native.ConvertAbilityRealLevelField(0x48746331), --ABILITY_RLF_AOE_DAMAGE
    SpecificTargetDamageHtc2 = Native.ConvertAbilityRealLevelField(0x48746332), --ABILITY_RLF_SPECIFIC_TARGET_DAMAGE_HTC2
    MovementSpeedReductionPercentHtc3 = Native.ConvertAbilityRealLevelField(0x48746333), --ABILITY_RLF_MOVEMENT_SPEED_REDUCTION_PERCENT_HTC3
    AttackSpeedReductionPercentHtc4 = Native.ConvertAbilityRealLevelField(0x48746334), --ABILITY_RLF_ATTACK_SPEED_REDUCTION_PERCENT_HTC4
    ArmorBonusHad1 = Native.ConvertAbilityRealLevelField(0x48616431), --ABILITY_RLF_ARMOR_BONUS_HAD1
    AmountHealedDamagedHhb1 = Native.ConvertAbilityRealLevelField(0x48686231), --ABILITY_RLF_AMOUNT_HEALED_DAMAGED_HHB1
    ExtraDamageHca1 = Native.ConvertAbilityRealLevelField(0x48636131), --ABILITY_RLF_EXTRA_DAMAGE_HCA1
    MovementSpeedFactorHca2 = Native.ConvertAbilityRealLevelField(0x48636132), --ABILITY_RLF_MOVEMENT_SPEED_FACTOR_HCA2
    AttackSpeedFactorHca3 = Native.ConvertAbilityRealLevelField(0x48636133), --ABILITY_RLF_ATTACK_SPEED_FACTOR_HCA3
    MovementSpeedIncreasePercentOae1 = Native.ConvertAbilityRealLevelField(0x4F616531), --ABILITY_RLF_MOVEMENT_SPEED_INCREASE_PERCENT_OAE1
    AttackSpeedIncreasePercentOae2 = Native.ConvertAbilityRealLevelField(0x4F616532), --ABILITY_RLF_ATTACK_SPEED_INCREASE_PERCENT_OAE2
    ReincarnationDelay = Native.ConvertAbilityRealLevelField(0x4F726531), --ABILITY_RLF_REINCARNATION_DELAY
    DamageOsh1 = Native.ConvertAbilityRealLevelField(0x4F736831), --ABILITY_RLF_DAMAGE_OSH1
    MaximumDamageOsh2 = Native.ConvertAbilityRealLevelField(0x4F736832), --ABILITY_RLF_MAXIMUM_DAMAGE_OSH2
    DistanceOsh3 = Native.ConvertAbilityRealLevelField(0x4F736833), --ABILITY_RLF_DISTANCE_OSH3
    FinalAreaOsh4 = Native.ConvertAbilityRealLevelField(0x4F736834), --ABILITY_RLF_FINAL_AREA_OSH4
    GraphicDelayNfd1 = Native.ConvertAbilityRealLevelField(0x4E666431), --ABILITY_RLF_GRAPHIC_DELAY_NFD1
    GraphicDurationNfd2 = Native.ConvertAbilityRealLevelField(0x4E666432), --ABILITY_RLF_GRAPHIC_DURATION_NFD2
    DamageNfd3 = Native.ConvertAbilityRealLevelField(0x4E666433), --ABILITY_RLF_DAMAGE_NFD3
    SummonedUnitDamageAms1 = Native.ConvertAbilityRealLevelField(0x416D7331), --ABILITY_RLF_SUMMONED_UNIT_DAMAGE_AMS1
    MagicDamageReductionAms2 = Native.ConvertAbilityRealLevelField(0x416D7332), --ABILITY_RLF_MAGIC_DAMAGE_REDUCTION_AMS2
    AuraDuration = Native.ConvertAbilityRealLevelField(0x41706C31), --ABILITY_RLF_AURA_DURATION
    DamagePerSecondApl2 = Native.ConvertAbilityRealLevelField(0x41706C32), --ABILITY_RLF_DAMAGE_PER_SECOND_APL2
    DurationOfPlagueWard = Native.ConvertAbilityRealLevelField(0x41706C33), --ABILITY_RLF_DURATION_OF_PLAGUE_WARD
    AmountOfHitPointsRegenerated = Native.ConvertAbilityRealLevelField(0x4F617231), --ABILITY_RLF_AMOUNT_OF_HIT_POINTS_REGENERATED
    AttackDamageIncreaseAkb1 = Native.ConvertAbilityRealLevelField(0x416B6231), --ABILITY_RLF_ATTACK_DAMAGE_INCREASE_AKB1
    ManaLossAdm1 = Native.ConvertAbilityRealLevelField(0x41646D31), --ABILITY_RLF_MANA_LOSS_ADM1
    SummonedUnitDamageAdm2 = Native.ConvertAbilityRealLevelField(0x41646D32), --ABILITY_RLF_SUMMONED_UNIT_DAMAGE_ADM2
    ExpansionAmount = Native.ConvertAbilityRealLevelField(0x426C6931), --ABILITY_RLF_EXPANSION_AMOUNT
    IntervalDurationBgm2 = Native.ConvertAbilityRealLevelField(0x42676D32), --ABILITY_RLF_INTERVAL_DURATION_BGM2
    RadiusOfMiningRing = Native.ConvertAbilityRealLevelField(0x42676D34), --ABILITY_RLF_RADIUS_OF_MINING_RING
    AttackSpeedIncreasePercentBlo1 = Native.ConvertAbilityRealLevelField(0x426C6F31), --ABILITY_RLF_ATTACK_SPEED_INCREASE_PERCENT_BLO1
    MovementSpeedIncreasePercentBlo2 = Native.ConvertAbilityRealLevelField(0x426C6F32), --ABILITY_RLF_MOVEMENT_SPEED_INCREASE_PERCENT_BLO2
    ScalingFactor = Native.ConvertAbilityRealLevelField(0x426C6F33), --ABILITY_RLF_SCALING_FACTOR
    HitPointsPerSecondCan1 = Native.ConvertAbilityRealLevelField(0x43616E31), --ABILITY_RLF_HIT_POINTS_PER_SECOND_CAN1
    MaxHitPoints = Native.ConvertAbilityRealLevelField(0x43616E32), --ABILITY_RLF_MAX_HIT_POINTS
    DamagePerSecondDev2 = Native.ConvertAbilityRealLevelField(0x44657632), --ABILITY_RLF_DAMAGE_PER_SECOND_DEV2
    MovementUpdateFrequencyChd1 = Native.ConvertAbilityRealLevelField(0x43686431), --ABILITY_RLF_MOVEMENT_UPDATE_FREQUENCY_CHD1
    AttackUpdateFrequencyChd2 = Native.ConvertAbilityRealLevelField(0x43686432), --ABILITY_RLF_ATTACK_UPDATE_FREQUENCY_CHD2
    SummonedUnitDamageChd3 = Native.ConvertAbilityRealLevelField(0x43686433), --ABILITY_RLF_SUMMONED_UNIT_DAMAGE_CHD3
    MovementSpeedReductionPercentCri1 = Native.ConvertAbilityRealLevelField(0x43726931), --ABILITY_RLF_MOVEMENT_SPEED_REDUCTION_PERCENT_CRI1
    AttackSpeedReductionPercentCri2 = Native.ConvertAbilityRealLevelField(0x43726932), --ABILITY_RLF_ATTACK_SPEED_REDUCTION_PERCENT_CRI2
    DamageReductionCri3 = Native.ConvertAbilityRealLevelField(0x43726933), --ABILITY_RLF_DAMAGE_REDUCTION_CRI3
    ChanceToMissCrs = Native.ConvertAbilityRealLevelField(0x43727331), --ABILITY_RLF_CHANCE_TO_MISS_CRS
    FullDamageRadiusDda1 = Native.ConvertAbilityRealLevelField(0x44646131), --ABILITY_RLF_FULL_DAMAGE_RADIUS_DDA1
    FullDamageAmountDda2 = Native.ConvertAbilityRealLevelField(0x44646132), --ABILITY_RLF_FULL_DAMAGE_AMOUNT_DDA2
    PartialDamageRadius = Native.ConvertAbilityRealLevelField(0x44646133), --ABILITY_RLF_PARTIAL_DAMAGE_RADIUS
    PartialDamageAmount = Native.ConvertAbilityRealLevelField(0x44646134), --ABILITY_RLF_PARTIAL_DAMAGE_AMOUNT
    BuildingDamageFactorSds1 = Native.ConvertAbilityRealLevelField(0x53647331), --ABILITY_RLF_BUILDING_DAMAGE_FACTOR_SDS1
    MaxDamageUco5 = Native.ConvertAbilityRealLevelField(0x55636F35), --ABILITY_RLF_MAX_DAMAGE_UCO5
    MoveSpeedBonusUco6 = Native.ConvertAbilityRealLevelField(0x55636F36), --ABILITY_RLF_MOVE_SPEED_BONUS_UCO6
    DamageTakenPercentDef1 = Native.ConvertAbilityRealLevelField(0x44656631), --ABILITY_RLF_DAMAGE_TAKEN_PERCENT_DEF1
    DamageDealtPercentDef2 = Native.ConvertAbilityRealLevelField(0x44656632), --ABILITY_RLF_DAMAGE_DEALT_PERCENT_DEF2
    MovementSpeedFactorDef3 = Native.ConvertAbilityRealLevelField(0x44656633), --ABILITY_RLF_MOVEMENT_SPEED_FACTOR_DEF3
    AttackSpeedFactorDef4 = Native.ConvertAbilityRealLevelField(0x44656634), --ABILITY_RLF_ATTACK_SPEED_FACTOR_DEF4
    MagicDamageReductionDef5 = Native.ConvertAbilityRealLevelField(0x44656635), --ABILITY_RLF_MAGIC_DAMAGE_REDUCTION_DEF5
    ChanceToDeflect = Native.ConvertAbilityRealLevelField(0x44656636), --ABILITY_RLF_CHANCE_TO_DEFLECT
    DeflectDamageTakenPiercing = Native.ConvertAbilityRealLevelField(0x44656637), --ABILITY_RLF_DEFLECT_DAMAGE_TAKEN_PIERCING
    DeflectDamageTakenSpells = Native.ConvertAbilityRealLevelField(0x44656638), --ABILITY_RLF_DEFLECT_DAMAGE_TAKEN_SPELLS
    RipDelay = Native.ConvertAbilityRealLevelField(0x45617431), --ABILITY_RLF_RIP_DELAY
    EatDelay = Native.ConvertAbilityRealLevelField(0x45617432), --ABILITY_RLF_EAT_DELAY
    HitPointsGainedEat3 = Native.ConvertAbilityRealLevelField(0x45617433), --ABILITY_RLF_HIT_POINTS_GAINED_EAT3
    AirUnitLowerDuration = Native.ConvertAbilityRealLevelField(0x456E7331), --ABILITY_RLF_AIR_UNIT_LOWER_DURATION
    AirUnitHeight = Native.ConvertAbilityRealLevelField(0x456E7332), --ABILITY_RLF_AIR_UNIT_HEIGHT
    MeleeAttackRange = Native.ConvertAbilityRealLevelField(0x456E7333), --ABILITY_RLF_MELEE_ATTACK_RANGE
    IntervalDurationEgm2 = Native.ConvertAbilityRealLevelField(0x45676D32), --ABILITY_RLF_INTERVAL_DURATION_EGM2
    EffectDelayFla2 = Native.ConvertAbilityRealLevelField(0x466C6132), --ABILITY_RLF_EFFECT_DELAY_FLA2
    MiningDuration = Native.ConvertAbilityRealLevelField(0x476C6432), --ABILITY_RLF_MINING_DURATION
    RadiusOfGravestones = Native.ConvertAbilityRealLevelField(0x47796432), --ABILITY_RLF_RADIUS_OF_GRAVESTONES
    RadiusOfCorpses = Native.ConvertAbilityRealLevelField(0x47796433), --ABILITY_RLF_RADIUS_OF_CORPSES
    HitPointsGainedHea1 = Native.ConvertAbilityRealLevelField(0x48656131), --ABILITY_RLF_HIT_POINTS_GAINED_HEA1
    DamageIncreasePercentInf1 = Native.ConvertAbilityRealLevelField(0x496E6631), --ABILITY_RLF_DAMAGE_INCREASE_PERCENT_INF1
    AutocastRange = Native.ConvertAbilityRealLevelField(0x496E6633), --ABILITY_RLF_AUTOCAST_RANGE
    LifeRegenRate = Native.ConvertAbilityRealLevelField(0x496E6634), --ABILITY_RLF_LIFE_REGEN_RATE
    GraphicDelayLit1 = Native.ConvertAbilityRealLevelField(0x4C697431), --ABILITY_RLF_GRAPHIC_DELAY_LIT1
    GraphicDurationLit2 = Native.ConvertAbilityRealLevelField(0x4C697432), --ABILITY_RLF_GRAPHIC_DURATION_LIT2
    DamagePerSecondLsh1 = Native.ConvertAbilityRealLevelField(0x4C736831), --ABILITY_RLF_DAMAGE_PER_SECOND_LSH1
    ManaGained = Native.ConvertAbilityRealLevelField(0x4D627431), --ABILITY_RLF_MANA_GAINED
    HitPointsGainedMbt2 = Native.ConvertAbilityRealLevelField(0x4D627432), --ABILITY_RLF_HIT_POINTS_GAINED_MBT2
    AutocastRequirement = Native.ConvertAbilityRealLevelField(0x4D627433), --ABILITY_RLF_AUTOCAST_REQUIREMENT
    WaterHeight = Native.ConvertAbilityRealLevelField(0x4D627434), --ABILITY_RLF_WATER_HEIGHT
    ActivationDelayMin1 = Native.ConvertAbilityRealLevelField(0x4D696E31), --ABILITY_RLF_ACTIVATION_DELAY_MIN1
    InvisibilityTransitionTime = Native.ConvertAbilityRealLevelField(0x4D696E32), --ABILITY_RLF_INVISIBILITY_TRANSITION_TIME
    ActivationRadius = Native.ConvertAbilityRealLevelField(0x4E657531), --ABILITY_RLF_ACTIVATION_RADIUS
    AmountRegenerated = Native.ConvertAbilityRealLevelField(0x41726D31), --ABILITY_RLF_AMOUNT_REGENERATED
    DamagePerSecondPoi1 = Native.ConvertAbilityRealLevelField(0x506F6931), --ABILITY_RLF_DAMAGE_PER_SECOND_POI1
    AttackSpeedFactorPoi2 = Native.ConvertAbilityRealLevelField(0x506F6932), --ABILITY_RLF_ATTACK_SPEED_FACTOR_POI2
    MovementSpeedFactorPoi3 = Native.ConvertAbilityRealLevelField(0x506F6933), --ABILITY_RLF_MOVEMENT_SPEED_FACTOR_POI3
    ExtraDamagePoa1 = Native.ConvertAbilityRealLevelField(0x506F6131), --ABILITY_RLF_EXTRA_DAMAGE_POA1
    DamagePerSecondPoa2 = Native.ConvertAbilityRealLevelField(0x506F6132), --ABILITY_RLF_DAMAGE_PER_SECOND_POA2
    AttackSpeedFactorPoa3 = Native.ConvertAbilityRealLevelField(0x506F6133), --ABILITY_RLF_ATTACK_SPEED_FACTOR_POA3
    MovementSpeedFactorPoa4 = Native.ConvertAbilityRealLevelField(0x506F6134), --ABILITY_RLF_MOVEMENT_SPEED_FACTOR_POA4
    DamageAmplification = Native.ConvertAbilityRealLevelField(0x506F7332), --ABILITY_RLF_DAMAGE_AMPLIFICATION
    ChanceToStompPercent = Native.ConvertAbilityRealLevelField(0x57617231), --ABILITY_RLF_CHANCE_TO_STOMP_PERCENT
    DamageDealtWar2 = Native.ConvertAbilityRealLevelField(0x57617232), --ABILITY_RLF_DAMAGE_DEALT_WAR2
    FullDamageRadiusWar3 = Native.ConvertAbilityRealLevelField(0x57617233), --ABILITY_RLF_FULL_DAMAGE_RADIUS_WAR3
    HalfDamageRadiusWar4 = Native.ConvertAbilityRealLevelField(0x57617234), --ABILITY_RLF_HALF_DAMAGE_RADIUS_WAR4
    SummonedUnitDamagePrg3 = Native.ConvertAbilityRealLevelField(0x50726733), --ABILITY_RLF_SUMMONED_UNIT_DAMAGE_PRG3
    UnitPauseDuration = Native.ConvertAbilityRealLevelField(0x50726734), --ABILITY_RLF_UNIT_PAUSE_DURATION
    HeroPauseDuration = Native.ConvertAbilityRealLevelField(0x50726735), --ABILITY_RLF_HERO_PAUSE_DURATION
    HitPointsGainedRej1 = Native.ConvertAbilityRealLevelField(0x52656A31), --ABILITY_RLF_HIT_POINTS_GAINED_REJ1
    ManaPointsGainedRej2 = Native.ConvertAbilityRealLevelField(0x52656A32), --ABILITY_RLF_MANA_POINTS_GAINED_REJ2
    MinimumLifeRequired = Native.ConvertAbilityRealLevelField(0x52706233), --ABILITY_RLF_MINIMUM_LIFE_REQUIRED
    MinimumManaRequired = Native.ConvertAbilityRealLevelField(0x52706234), --ABILITY_RLF_MINIMUM_MANA_REQUIRED
    RepairCostRatio = Native.ConvertAbilityRealLevelField(0x52657031), --ABILITY_RLF_REPAIR_COST_RATIO
    RepairTimeRatio = Native.ConvertAbilityRealLevelField(0x52657032), --ABILITY_RLF_REPAIR_TIME_RATIO
    PowerbuildCost = Native.ConvertAbilityRealLevelField(0x52657033), --ABILITY_RLF_POWERBUILD_COST
    PowerbuildRate = Native.ConvertAbilityRealLevelField(0x52657034), --ABILITY_RLF_POWERBUILD_RATE
    NavalRangeBonus = Native.ConvertAbilityRealLevelField(0x52657035), --ABILITY_RLF_NAVAL_RANGE_BONUS
    DamageIncreasePercentRoa1 = Native.ConvertAbilityRealLevelField(0x526F6131), --ABILITY_RLF_DAMAGE_INCREASE_PERCENT_ROA1
    LifeRegenerationRate = Native.ConvertAbilityRealLevelField(0x526F6133), --ABILITY_RLF_LIFE_REGENERATION_RATE
    ManaRegen = Native.ConvertAbilityRealLevelField(0x526F6134), --ABILITY_RLF_MANA_REGEN
    DamageIncrease = Native.ConvertAbilityRealLevelField(0x4E627231), --ABILITY_RLF_DAMAGE_INCREASE
    SalvageCostRatio = Native.ConvertAbilityRealLevelField(0x53616C31), --ABILITY_RLF_SALVAGE_COST_RATIO
    InFlightSightRadius = Native.ConvertAbilityRealLevelField(0x45736E31), --ABILITY_RLF_IN_FLIGHT_SIGHT_RADIUS
    HoveringSightRadius = Native.ConvertAbilityRealLevelField(0x45736E32), --ABILITY_RLF_HOVERING_SIGHT_RADIUS
    HoveringHeight = Native.ConvertAbilityRealLevelField(0x45736E33), --ABILITY_RLF_HOVERING_HEIGHT
    DurationOfOwls = Native.ConvertAbilityRealLevelField(0x45736E35), --ABILITY_RLF_DURATION_OF_OWLS
    FadeDuration = Native.ConvertAbilityRealLevelField(0x53686D31), --ABILITY_RLF_FADE_DURATION
    DayNightDuration = Native.ConvertAbilityRealLevelField(0x53686D32), --ABILITY_RLF_DAY_NIGHT_DURATION
    ActionDuration = Native.ConvertAbilityRealLevelField(0x53686D33), --ABILITY_RLF_ACTION_DURATION
    MovementSpeedFactorSlo1 = Native.ConvertAbilityRealLevelField(0x536C6F31), --ABILITY_RLF_MOVEMENT_SPEED_FACTOR_SLO1
    AttackSpeedFactorSlo2 = Native.ConvertAbilityRealLevelField(0x536C6F32), --ABILITY_RLF_ATTACK_SPEED_FACTOR_SLO2
    DamagePerSecondSpo1 = Native.ConvertAbilityRealLevelField(0x53706F31), --ABILITY_RLF_DAMAGE_PER_SECOND_SPO1
    MovementSpeedFactorSpo2 = Native.ConvertAbilityRealLevelField(0x53706F32), --ABILITY_RLF_MOVEMENT_SPEED_FACTOR_SPO2
    AttackSpeedFactorSpo3 = Native.ConvertAbilityRealLevelField(0x53706F33), --ABILITY_RLF_ATTACK_SPEED_FACTOR_SPO3
    ActivationDelaySta1 = Native.ConvertAbilityRealLevelField(0x53746131), --ABILITY_RLF_ACTIVATION_DELAY_STA1
    DetectionRadiusSta2 = Native.ConvertAbilityRealLevelField(0x53746132), --ABILITY_RLF_DETECTION_RADIUS_STA2
    DetonationRadius = Native.ConvertAbilityRealLevelField(0x53746133), --ABILITY_RLF_DETONATION_RADIUS
    StunDurationSta4 = Native.ConvertAbilityRealLevelField(0x53746134), --ABILITY_RLF_STUN_DURATION_STA4
    AttackSpeedBonusPercent = Native.ConvertAbilityRealLevelField(0x55686631), --ABILITY_RLF_ATTACK_SPEED_BONUS_PERCENT
    DamagePerSecondUhf2 = Native.ConvertAbilityRealLevelField(0x55686632), --ABILITY_RLF_DAMAGE_PER_SECOND_UHF2
    LumberPerInterval = Native.ConvertAbilityRealLevelField(0x57686131), --ABILITY_RLF_LUMBER_PER_INTERVAL
    ArtAttachmentHeight = Native.ConvertAbilityRealLevelField(0x57686133), --ABILITY_RLF_ART_ATTACHMENT_HEIGHT
    TeleportAreaWidth = Native.ConvertAbilityRealLevelField(0x57727031), --ABILITY_RLF_TELEPORT_AREA_WIDTH
    TeleportAreaHeight = Native.ConvertAbilityRealLevelField(0x57727032), --ABILITY_RLF_TELEPORT_AREA_HEIGHT
    LifeStolenPerAttack = Native.ConvertAbilityRealLevelField(0x4976616D), --ABILITY_RLF_LIFE_STOLEN_PER_ATTACK
    DamageBonusIdam = Native.ConvertAbilityRealLevelField(0x4964616D), --ABILITY_RLF_DAMAGE_BONUS_IDAM
    ChanceToHitUnitsPercent = Native.ConvertAbilityRealLevelField(0x496F6232), --ABILITY_RLF_CHANCE_TO_HIT_UNITS_PERCENT
    ChanceToHitHerosPercent = Native.ConvertAbilityRealLevelField(0x496F6233), --ABILITY_RLF_CHANCE_TO_HIT_HEROS_PERCENT
    ChanceToHitSummonsPercent = Native.ConvertAbilityRealLevelField(0x496F6234), --ABILITY_RLF_CHANCE_TO_HIT_SUMMONS_PERCENT
    DelayForTargetEffect = Native.ConvertAbilityRealLevelField(0x4964656C), --ABILITY_RLF_DELAY_FOR_TARGET_EFFECT
    DamageDealtPercentOfNormal = Native.ConvertAbilityRealLevelField(0x49696C64), --ABILITY_RLF_DAMAGE_DEALT_PERCENT_OF_NORMAL
    DamageReceivedMultiplier = Native.ConvertAbilityRealLevelField(0x49696C77), --ABILITY_RLF_DAMAGE_RECEIVED_MULTIPLIER
    ManaRegenerationBonusAsFractionOfNormal = Native.ConvertAbilityRealLevelField(0x496D7270), --ABILITY_RLF_MANA_REGENERATION_BONUS_AS_FRACTION_OF_NORMAL
    MovementSpeedIncreaseIspi = Native.ConvertAbilityRealLevelField(0x49737069), --ABILITY_RLF_MOVEMENT_SPEED_INCREASE_ISPI
    DamagePerSecondIdps = Native.ConvertAbilityRealLevelField(0x49647073), --ABILITY_RLF_DAMAGE_PER_SECOND_IDPS
    AttackDamageIncreaseCac1 = Native.ConvertAbilityRealLevelField(0x43616331), --ABILITY_RLF_ATTACK_DAMAGE_INCREASE_CAC1
    DamagePerSecondCor1 = Native.ConvertAbilityRealLevelField(0x436F7231), --ABILITY_RLF_DAMAGE_PER_SECOND_COR1
    AttackSpeedIncreaseIsx1 = Native.ConvertAbilityRealLevelField(0x49737831), --ABILITY_RLF_ATTACK_SPEED_INCREASE_ISX1
    DamageWrs1 = Native.ConvertAbilityRealLevelField(0x57727331), --ABILITY_RLF_DAMAGE_WRS1
    TerrainDeformationAmplitude = Native.ConvertAbilityRealLevelField(0x57727332), --ABILITY_RLF_TERRAIN_DEFORMATION_AMPLITUDE
    DamageCtc1 = Native.ConvertAbilityRealLevelField(0x43746331), --ABILITY_RLF_DAMAGE_CTC1
    ExtraDamageToTarget = Native.ConvertAbilityRealLevelField(0x43746332), --ABILITY_RLF_EXTRA_DAMAGE_TO_TARGET
    MovementSpeedReductionCtc3 = Native.ConvertAbilityRealLevelField(0x43746333), --ABILITY_RLF_MOVEMENT_SPEED_REDUCTION_CTC3
    AttackSpeedReductionCtc4 = Native.ConvertAbilityRealLevelField(0x43746334), --ABILITY_RLF_ATTACK_SPEED_REDUCTION_CTC4
    DamageCtb1 = Native.ConvertAbilityRealLevelField(0x43746231), --ABILITY_RLF_DAMAGE_CTB1
    CastingDelaySeconds = Native.ConvertAbilityRealLevelField(0x55647332), --ABILITY_RLF_CASTING_DELAY_SECONDS
    ManaLossPerUnitDtn1 = Native.ConvertAbilityRealLevelField(0x44746E31), --ABILITY_RLF_MANA_LOSS_PER_UNIT_DTN1
    DamageToSummonedUnitsDtn2 = Native.ConvertAbilityRealLevelField(0x44746E32), --ABILITY_RLF_DAMAGE_TO_SUMMONED_UNITS_DTN2
    TransitionTimeSeconds = Native.ConvertAbilityRealLevelField(0x49767331), --ABILITY_RLF_TRANSITION_TIME_SECONDS
    ManaDrainedPerSecondNmr1 = Native.ConvertAbilityRealLevelField(0x4E6D7231), --ABILITY_RLF_MANA_DRAINED_PER_SECOND_NMR1
    ChanceToReduceDamagePercent = Native.ConvertAbilityRealLevelField(0x53736B31), --ABILITY_RLF_CHANCE_TO_REDUCE_DAMAGE_PERCENT
    MinimumDamage = Native.ConvertAbilityRealLevelField(0x53736B32), --ABILITY_RLF_MINIMUM_DAMAGE
    IgnoredDamage = Native.ConvertAbilityRealLevelField(0x53736B33), --ABILITY_RLF_IGNORED_DAMAGE
    FullDamageDealt = Native.ConvertAbilityRealLevelField(0x48667331), --ABILITY_RLF_FULL_DAMAGE_DEALT
    FullDamageInterval = Native.ConvertAbilityRealLevelField(0x48667332), --ABILITY_RLF_FULL_DAMAGE_INTERVAL
    HalfDamageDealt = Native.ConvertAbilityRealLevelField(0x48667333), --ABILITY_RLF_HALF_DAMAGE_DEALT
    HalfDamageInterval = Native.ConvertAbilityRealLevelField(0x48667334), --ABILITY_RLF_HALF_DAMAGE_INTERVAL
    BuildingReductionHfs5 = Native.ConvertAbilityRealLevelField(0x48667335), --ABILITY_RLF_BUILDING_REDUCTION_HFS5
    MaximumDamageHfs6 = Native.ConvertAbilityRealLevelField(0x48667336), --ABILITY_RLF_MAXIMUM_DAMAGE_HFS6
    ManaPerHitPoint = Native.ConvertAbilityRealLevelField(0x4E6D7331), --ABILITY_RLF_MANA_PER_HIT_POINT
    DamageAbsorbedPercent = Native.ConvertAbilityRealLevelField(0x4E6D7332), --ABILITY_RLF_DAMAGE_ABSORBED_PERCENT
    WaveDistance = Native.ConvertAbilityRealLevelField(0x55696D31), --ABILITY_RLF_WAVE_DISTANCE
    WaveTimeSeconds = Native.ConvertAbilityRealLevelField(0x55696D32), --ABILITY_RLF_WAVE_TIME_SECONDS
    DamageDealtUim3 = Native.ConvertAbilityRealLevelField(0x55696D33), --ABILITY_RLF_DAMAGE_DEALT_UIM3
    AirTimeSecondsUim4 = Native.ConvertAbilityRealLevelField(0x55696D34), --ABILITY_RLF_AIR_TIME_SECONDS_UIM4
    UnitReleaseIntervalSeconds = Native.ConvertAbilityRealLevelField(0x556C7332), --ABILITY_RLF_UNIT_RELEASE_INTERVAL_SECONDS
    DamageReturnFactor = Native.ConvertAbilityRealLevelField(0x556C7334), --ABILITY_RLF_DAMAGE_RETURN_FACTOR
    DamageReturnThreshold = Native.ConvertAbilityRealLevelField(0x556C7335), --ABILITY_RLF_DAMAGE_RETURN_THRESHOLD
    ReturnedDamageFactor = Native.ConvertAbilityRealLevelField(0x55747331), --ABILITY_RLF_RETURNED_DAMAGE_FACTOR
    ReceivedDamageFactor = Native.ConvertAbilityRealLevelField(0x55747332), --ABILITY_RLF_RECEIVED_DAMAGE_FACTOR
    DefenseBonusUts3 = Native.ConvertAbilityRealLevelField(0x55747333), --ABILITY_RLF_DEFENSE_BONUS_UTS3
    DamageBonusNba1 = Native.ConvertAbilityRealLevelField(0x4E626131), --ABILITY_RLF_DAMAGE_BONUS_NBA1
    SummonedUnitDurationSecondsNba3 = Native.ConvertAbilityRealLevelField(0x4E626133), --ABILITY_RLF_SUMMONED_UNIT_DURATION_SECONDS_NBA3
    ManaPerSummonedHitpoint = Native.ConvertAbilityRealLevelField(0x436D6732), --ABILITY_RLF_MANA_PER_SUMMONED_HITPOINT
    ChargeForCurrentLife = Native.ConvertAbilityRealLevelField(0x436D6733), --ABILITY_RLF_CHARGE_FOR_CURRENT_LIFE
    HitPointsDrained = Native.ConvertAbilityRealLevelField(0x4E647231), --ABILITY_RLF_HIT_POINTS_DRAINED
    ManaPointsDrained = Native.ConvertAbilityRealLevelField(0x4E647232), --ABILITY_RLF_MANA_POINTS_DRAINED
    DrainIntervalSeconds = Native.ConvertAbilityRealLevelField(0x4E647233), --ABILITY_RLF_DRAIN_INTERVAL_SECONDS
    LifeTransferredPerSecond = Native.ConvertAbilityRealLevelField(0x4E647234), --ABILITY_RLF_LIFE_TRANSFERRED_PER_SECOND
    ManaTransferredPerSecond = Native.ConvertAbilityRealLevelField(0x4E647235), --ABILITY_RLF_MANA_TRANSFERRED_PER_SECOND
    BonusLifeFactor = Native.ConvertAbilityRealLevelField(0x4E647236), --ABILITY_RLF_BONUS_LIFE_FACTOR
    BonusLifeDecay = Native.ConvertAbilityRealLevelField(0x4E647237), --ABILITY_RLF_BONUS_LIFE_DECAY
    BonusManaFactor = Native.ConvertAbilityRealLevelField(0x4E647238), --ABILITY_RLF_BONUS_MANA_FACTOR
    BonusManaDecay = Native.ConvertAbilityRealLevelField(0x4E647239), --ABILITY_RLF_BONUS_MANA_DECAY
    ChanceToMissPercent = Native.ConvertAbilityRealLevelField(0x4E736932), --ABILITY_RLF_CHANCE_TO_MISS_PERCENT
    MovementSpeedModifier = Native.ConvertAbilityRealLevelField(0x4E736933), --ABILITY_RLF_MOVEMENT_SPEED_MODIFIER
    AttackSpeedModifier = Native.ConvertAbilityRealLevelField(0x4E736934), --ABILITY_RLF_ATTACK_SPEED_MODIFIER
    DamagePerSecondTdg1 = Native.ConvertAbilityRealLevelField(0x54646731), --ABILITY_RLF_DAMAGE_PER_SECOND_TDG1
    MediumDamageRadiusTdg2 = Native.ConvertAbilityRealLevelField(0x54646732), --ABILITY_RLF_MEDIUM_DAMAGE_RADIUS_TDG2
    MediumDamagePerSecond = Native.ConvertAbilityRealLevelField(0x54646733), --ABILITY_RLF_MEDIUM_DAMAGE_PER_SECOND
    SmallDamageRadiusTdg4 = Native.ConvertAbilityRealLevelField(0x54646734), --ABILITY_RLF_SMALL_DAMAGE_RADIUS_TDG4
    SmallDamagePerSecond = Native.ConvertAbilityRealLevelField(0x54646735), --ABILITY_RLF_SMALL_DAMAGE_PER_SECOND
    AirTimeSecondsTsp1 = Native.ConvertAbilityRealLevelField(0x54737031), --ABILITY_RLF_AIR_TIME_SECONDS_TSP1
    MinimumHitIntervalSeconds = Native.ConvertAbilityRealLevelField(0x54737032), --ABILITY_RLF_MINIMUM_HIT_INTERVAL_SECONDS
    DamagePerSecondNbf5 = Native.ConvertAbilityRealLevelField(0x4E626635), --ABILITY_RLF_DAMAGE_PER_SECOND_NBF5
    MaximumRange = Native.ConvertAbilityRealLevelField(0x45626C31), --ABILITY_RLF_MAXIMUM_RANGE
    MinimumRange = Native.ConvertAbilityRealLevelField(0x45626C32), --ABILITY_RLF_MINIMUM_RANGE
    DamagePerTargetEfk1 = Native.ConvertAbilityRealLevelField(0x45666B31), --ABILITY_RLF_DAMAGE_PER_TARGET_EFK1
    MaximumTotalDamage = Native.ConvertAbilityRealLevelField(0x45666B32), --ABILITY_RLF_MAXIMUM_TOTAL_DAMAGE
    MaximumSpeedAdjustment = Native.ConvertAbilityRealLevelField(0x45666B34), --ABILITY_RLF_MAXIMUM_SPEED_ADJUSTMENT
    DecayingDamage = Native.ConvertAbilityRealLevelField(0x45736831), --ABILITY_RLF_DECAYING_DAMAGE
    MovementSpeedFactorEsh2 = Native.ConvertAbilityRealLevelField(0x45736832), --ABILITY_RLF_MOVEMENT_SPEED_FACTOR_ESH2
    AttackSpeedFactorEsh3 = Native.ConvertAbilityRealLevelField(0x45736833), --ABILITY_RLF_ATTACK_SPEED_FACTOR_ESH3
    DecayPower = Native.ConvertAbilityRealLevelField(0x45736834), --ABILITY_RLF_DECAY_POWER
    InitialDamageEsh5 = Native.ConvertAbilityRealLevelField(0x45736835), --ABILITY_RLF_INITIAL_DAMAGE_ESH5
    MaximumLifeAbsorbed = Native.ConvertAbilityRealLevelField(0x61627331), --ABILITY_RLF_MAXIMUM_LIFE_ABSORBED
    MaximumManaAbsorbed = Native.ConvertAbilityRealLevelField(0x61627332), --ABILITY_RLF_MAXIMUM_MANA_ABSORBED
    MovementSpeedIncreaseBsk1 = Native.ConvertAbilityRealLevelField(0x62736B31), --ABILITY_RLF_MOVEMENT_SPEED_INCREASE_BSK1
    AttackSpeedIncreaseBsk2 = Native.ConvertAbilityRealLevelField(0x62736B32), --ABILITY_RLF_ATTACK_SPEED_INCREASE_BSK2
    DamageTakenIncrease = Native.ConvertAbilityRealLevelField(0x62736B33), --ABILITY_RLF_DAMAGE_TAKEN_INCREASE
    LifePerUnit = Native.ConvertAbilityRealLevelField(0x64766D31), --ABILITY_RLF_LIFE_PER_UNIT
    ManaPerUnit = Native.ConvertAbilityRealLevelField(0x64766D32), --ABILITY_RLF_MANA_PER_UNIT
    LifePerBuff = Native.ConvertAbilityRealLevelField(0x64766D33), --ABILITY_RLF_LIFE_PER_BUFF
    ManaPerBuff = Native.ConvertAbilityRealLevelField(0x64766D34), --ABILITY_RLF_MANA_PER_BUFF
    SummonedUnitDamageDvm5 = Native.ConvertAbilityRealLevelField(0x64766D35), --ABILITY_RLF_SUMMONED_UNIT_DAMAGE_DVM5
    DamageBonusFak1 = Native.ConvertAbilityRealLevelField(0x66616B31), --ABILITY_RLF_DAMAGE_BONUS_FAK1
    MediumDamageFactorFak2 = Native.ConvertAbilityRealLevelField(0x66616B32), --ABILITY_RLF_MEDIUM_DAMAGE_FACTOR_FAK2
    SmallDamageFactorFak3 = Native.ConvertAbilityRealLevelField(0x66616B33), --ABILITY_RLF_SMALL_DAMAGE_FACTOR_FAK3
    FullDamageRadiusFak4 = Native.ConvertAbilityRealLevelField(0x66616B34), --ABILITY_RLF_FULL_DAMAGE_RADIUS_FAK4
    HalfDamageRadiusFak5 = Native.ConvertAbilityRealLevelField(0x66616B35), --ABILITY_RLF_HALF_DAMAGE_RADIUS_FAK5
    ExtraDamagePerSecond = Native.ConvertAbilityRealLevelField(0x6C697131), --ABILITY_RLF_EXTRA_DAMAGE_PER_SECOND
    MovementSpeedReductionLiq2 = Native.ConvertAbilityRealLevelField(0x6C697132), --ABILITY_RLF_MOVEMENT_SPEED_REDUCTION_LIQ2
    AttackSpeedReductionLiq3 = Native.ConvertAbilityRealLevelField(0x6C697133), --ABILITY_RLF_ATTACK_SPEED_REDUCTION_LIQ3
    MagicDamageFactor = Native.ConvertAbilityRealLevelField(0x6D696D31), --ABILITY_RLF_MAGIC_DAMAGE_FACTOR
    UnitDamagePerManaPoint = Native.ConvertAbilityRealLevelField(0x6D666C31), --ABILITY_RLF_UNIT_DAMAGE_PER_MANA_POINT
    HeroDamagePerManaPoint = Native.ConvertAbilityRealLevelField(0x6D666C32), --ABILITY_RLF_HERO_DAMAGE_PER_MANA_POINT
    UnitMaximumDamage = Native.ConvertAbilityRealLevelField(0x6D666C33), --ABILITY_RLF_UNIT_MAXIMUM_DAMAGE
    HeroMaximumDamage = Native.ConvertAbilityRealLevelField(0x6D666C34), --ABILITY_RLF_HERO_MAXIMUM_DAMAGE
    DamageCooldown = Native.ConvertAbilityRealLevelField(0x6D666C35), --ABILITY_RLF_DAMAGE_COOLDOWN
    DistributedDamageFactorSpl1 = Native.ConvertAbilityRealLevelField(0x73706C31), --ABILITY_RLF_DISTRIBUTED_DAMAGE_FACTOR_SPL1
    LifeRegenerated = Native.ConvertAbilityRealLevelField(0x69726C31), --ABILITY_RLF_LIFE_REGENERATED
    ManaRegenerated = Native.ConvertAbilityRealLevelField(0x69726C32), --ABILITY_RLF_MANA_REGENERATED
    ManaLossPerUnitIdc1 = Native.ConvertAbilityRealLevelField(0x69646331), --ABILITY_RLF_MANA_LOSS_PER_UNIT_IDC1
    SummonedUnitDamageIdc2 = Native.ConvertAbilityRealLevelField(0x69646332), --ABILITY_RLF_SUMMONED_UNIT_DAMAGE_IDC2
    ActivationDelayImo2 = Native.ConvertAbilityRealLevelField(0x696D6F32), --ABILITY_RLF_ACTIVATION_DELAY_IMO2
    LureIntervalSeconds = Native.ConvertAbilityRealLevelField(0x696D6F33), --ABILITY_RLF_LURE_INTERVAL_SECONDS
    DamageBonusIsr1 = Native.ConvertAbilityRealLevelField(0x69737231), --ABILITY_RLF_DAMAGE_BONUS_ISR1
    DamageReductionIsr2 = Native.ConvertAbilityRealLevelField(0x69737232), --ABILITY_RLF_DAMAGE_REDUCTION_ISR2
    DamageBonusIpv1 = Native.ConvertAbilityRealLevelField(0x69707631), --ABILITY_RLF_DAMAGE_BONUS_IPV1
    LifeStealAmount = Native.ConvertAbilityRealLevelField(0x69707632), --ABILITY_RLF_LIFE_STEAL_AMOUNT
    LifeRestoredFactor = Native.ConvertAbilityRealLevelField(0x61737431), --ABILITY_RLF_LIFE_RESTORED_FACTOR
    ManaRestoredFactor = Native.ConvertAbilityRealLevelField(0x61737432), --ABILITY_RLF_MANA_RESTORED_FACTOR
    AttachDelay = Native.ConvertAbilityRealLevelField(0x67726131), --ABILITY_RLF_ATTACH_DELAY
    RemoveDelay = Native.ConvertAbilityRealLevelField(0x67726132), --ABILITY_RLF_REMOVE_DELAY
    HeroRegenerationDelay = Native.ConvertAbilityRealLevelField(0x4E736132), --ABILITY_RLF_HERO_REGENERATION_DELAY
    UnitRegenerationDelay = Native.ConvertAbilityRealLevelField(0x4E736133), --ABILITY_RLF_UNIT_REGENERATION_DELAY
    MagicDamageReductionNsa4 = Native.ConvertAbilityRealLevelField(0x4E736134), --ABILITY_RLF_MAGIC_DAMAGE_REDUCTION_NSA4
    HitPointsPerSecondNsa5 = Native.ConvertAbilityRealLevelField(0x4E736135), --ABILITY_RLF_HIT_POINTS_PER_SECOND_NSA5
    DamageToSummonedUnitsIxs1 = Native.ConvertAbilityRealLevelField(0x49787331), --ABILITY_RLF_DAMAGE_TO_SUMMONED_UNITS_IXS1
    MagicDamageReductionIxs2 = Native.ConvertAbilityRealLevelField(0x49787332), --ABILITY_RLF_MAGIC_DAMAGE_REDUCTION_IXS2
    SummonedUnitDuration = Native.ConvertAbilityRealLevelField(0x4E706136), --ABILITY_RLF_SUMMONED_UNIT_DURATION
    ShieldCooldownTime = Native.ConvertAbilityRealLevelField(0x4E736531), --ABILITY_RLF_SHIELD_COOLDOWN_TIME
    DamagePerSecondNdo1 = Native.ConvertAbilityRealLevelField(0x4E646F31), --ABILITY_RLF_DAMAGE_PER_SECOND_NDO1
    SummonedUnitDurationSecondsNdo3 = Native.ConvertAbilityRealLevelField(0x4E646F33), --ABILITY_RLF_SUMMONED_UNIT_DURATION_SECONDS_NDO3
    MediumDamageRadiusFlk1 = Native.ConvertAbilityRealLevelField(0x666C6B31), --ABILITY_RLF_MEDIUM_DAMAGE_RADIUS_FLK1
    SmallDamageRadiusFlk2 = Native.ConvertAbilityRealLevelField(0x666C6B32), --ABILITY_RLF_SMALL_DAMAGE_RADIUS_FLK2
    FullDamageAmountFlk3 = Native.ConvertAbilityRealLevelField(0x666C6B33), --ABILITY_RLF_FULL_DAMAGE_AMOUNT_FLK3
    MediumDamageAmount = Native.ConvertAbilityRealLevelField(0x666C6B34), --ABILITY_RLF_MEDIUM_DAMAGE_AMOUNT
    SmallDamageAmount = Native.ConvertAbilityRealLevelField(0x666C6B35), --ABILITY_RLF_SMALL_DAMAGE_AMOUNT
    MovementSpeedReductionPercentHbn1 = Native.ConvertAbilityRealLevelField(0x48626E31), --ABILITY_RLF_MOVEMENT_SPEED_REDUCTION_PERCENT_HBN1
    AttackSpeedReductionPercentHbn2 = Native.ConvertAbilityRealLevelField(0x48626E32), --ABILITY_RLF_ATTACK_SPEED_REDUCTION_PERCENT_HBN2
    MaxManaDrainedUnits = Native.ConvertAbilityRealLevelField(0x66626B31), --ABILITY_RLF_MAX_MANA_DRAINED_UNITS
    DamageRatioUnitsPercent = Native.ConvertAbilityRealLevelField(0x66626B32), --ABILITY_RLF_DAMAGE_RATIO_UNITS_PERCENT
    MaxManaDrainedHeros = Native.ConvertAbilityRealLevelField(0x66626B33), --ABILITY_RLF_MAX_MANA_DRAINED_HEROS
    DamageRatioHerosPercent = Native.ConvertAbilityRealLevelField(0x66626B34), --ABILITY_RLF_DAMAGE_RATIO_HEROS_PERCENT
    SummonedDamage = Native.ConvertAbilityRealLevelField(0x66626B35), --ABILITY_RLF_SUMMONED_DAMAGE
    DistributedDamageFactorNca1 = Native.ConvertAbilityRealLevelField(0x6E636131), --ABILITY_RLF_DISTRIBUTED_DAMAGE_FACTOR_NCA1
    InitialDamagePxf1 = Native.ConvertAbilityRealLevelField(0x70786631), --ABILITY_RLF_INITIAL_DAMAGE_PXF1
    DamagePerSecondPxf2 = Native.ConvertAbilityRealLevelField(0x70786632), --ABILITY_RLF_DAMAGE_PER_SECOND_PXF2
    DamagePerSecondMls1 = Native.ConvertAbilityRealLevelField(0x6D6C7331), --ABILITY_RLF_DAMAGE_PER_SECOND_MLS1
    BeastCollisionRadius = Native.ConvertAbilityRealLevelField(0x4E737432), --ABILITY_RLF_BEAST_COLLISION_RADIUS
    DamageAmountNst3 = Native.ConvertAbilityRealLevelField(0x4E737433), --ABILITY_RLF_DAMAGE_AMOUNT_NST3
    DamageRadius = Native.ConvertAbilityRealLevelField(0x4E737434), --ABILITY_RLF_DAMAGE_RADIUS
    DamageDelay = Native.ConvertAbilityRealLevelField(0x4E737435), --ABILITY_RLF_DAMAGE_DELAY
    FollowThroughTime = Native.ConvertAbilityRealLevelField(0x4E636C31), --ABILITY_RLF_FOLLOW_THROUGH_TIME
    ArtDuration = Native.ConvertAbilityRealLevelField(0x4E636C34), --ABILITY_RLF_ART_DURATION
    MovementSpeedReductionPercentNab1 = Native.ConvertAbilityRealLevelField(0x4E616231), --ABILITY_RLF_MOVEMENT_SPEED_REDUCTION_PERCENT_NAB1
    AttackSpeedReductionPercentNab2 = Native.ConvertAbilityRealLevelField(0x4E616232), --ABILITY_RLF_ATTACK_SPEED_REDUCTION_PERCENT_NAB2
    PrimaryDamage = Native.ConvertAbilityRealLevelField(0x4E616234), --ABILITY_RLF_PRIMARY_DAMAGE
    SecondaryDamage = Native.ConvertAbilityRealLevelField(0x4E616235), --ABILITY_RLF_SECONDARY_DAMAGE
    DamageIntervalNab6 = Native.ConvertAbilityRealLevelField(0x4E616236), --ABILITY_RLF_DAMAGE_INTERVAL_NAB6
    GoldCostFactor = Native.ConvertAbilityRealLevelField(0x4E746D31), --ABILITY_RLF_GOLD_COST_FACTOR
    LumberCostFactor = Native.ConvertAbilityRealLevelField(0x4E746D32), --ABILITY_RLF_LUMBER_COST_FACTOR
    MoveSpeedBonusNeg1 = Native.ConvertAbilityRealLevelField(0x4E656731), --ABILITY_RLF_MOVE_SPEED_BONUS_NEG1
    DamageBonusNeg2 = Native.ConvertAbilityRealLevelField(0x4E656732), --ABILITY_RLF_DAMAGE_BONUS_NEG2
    DamageAmountNcs1 = Native.ConvertAbilityRealLevelField(0x4E637331), --ABILITY_RLF_DAMAGE_AMOUNT_NCS1
    DamageIntervalNcs2 = Native.ConvertAbilityRealLevelField(0x4E637332), --ABILITY_RLF_DAMAGE_INTERVAL_NCS2
    MaxDamageNcs4 = Native.ConvertAbilityRealLevelField(0x4E637334), --ABILITY_RLF_MAX_DAMAGE_NCS4
    BuildingDamageFactorNcs5 = Native.ConvertAbilityRealLevelField(0x4E637335), --ABILITY_RLF_BUILDING_DAMAGE_FACTOR_NCS5
    EffectDuration = Native.ConvertAbilityRealLevelField(0x4E637336), --ABILITY_RLF_EFFECT_DURATION
    SpawnIntervalNsy1 = Native.ConvertAbilityRealLevelField(0x4E737931), --ABILITY_RLF_SPAWN_INTERVAL_NSY1
    SpawnUnitDuration = Native.ConvertAbilityRealLevelField(0x4E737933), --ABILITY_RLF_SPAWN_UNIT_DURATION
    SpawnUnitOffset = Native.ConvertAbilityRealLevelField(0x4E737934), --ABILITY_RLF_SPAWN_UNIT_OFFSET
    LeashRangeNsy5 = Native.ConvertAbilityRealLevelField(0x4E737935), --ABILITY_RLF_LEASH_RANGE_NSY5
    SpawnIntervalNfy1 = Native.ConvertAbilityRealLevelField(0x4E667931), --ABILITY_RLF_SPAWN_INTERVAL_NFY1
    LeashRangeNfy2 = Native.ConvertAbilityRealLevelField(0x4E667932), --ABILITY_RLF_LEASH_RANGE_NFY2
    ChanceToDemolish = Native.ConvertAbilityRealLevelField(0x4E646531), --ABILITY_RLF_CHANCE_TO_DEMOLISH
    DamageMultiplierBuildings = Native.ConvertAbilityRealLevelField(0x4E646532), --ABILITY_RLF_DAMAGE_MULTIPLIER_BUILDINGS
    DamageMultiplierUnits = Native.ConvertAbilityRealLevelField(0x4E646533), --ABILITY_RLF_DAMAGE_MULTIPLIER_UNITS
    DamageMultiplierHeroes = Native.ConvertAbilityRealLevelField(0x4E646534), --ABILITY_RLF_DAMAGE_MULTIPLIER_HEROES
    BonusDamageMultiplier = Native.ConvertAbilityRealLevelField(0x4E696331), --ABILITY_RLF_BONUS_DAMAGE_MULTIPLIER
    DeathDamageFullAmount = Native.ConvertAbilityRealLevelField(0x4E696332), --ABILITY_RLF_DEATH_DAMAGE_FULL_AMOUNT
    DeathDamageFullArea = Native.ConvertAbilityRealLevelField(0x4E696333), --ABILITY_RLF_DEATH_DAMAGE_FULL_AREA
    DeathDamageHalfAmount = Native.ConvertAbilityRealLevelField(0x4E696334), --ABILITY_RLF_DEATH_DAMAGE_HALF_AMOUNT
    DeathDamageHalfArea = Native.ConvertAbilityRealLevelField(0x4E696335), --ABILITY_RLF_DEATH_DAMAGE_HALF_AREA
    DeathDamageDelay = Native.ConvertAbilityRealLevelField(0x4E696336), --ABILITY_RLF_DEATH_DAMAGE_DELAY
    DamageAmountNso1 = Native.ConvertAbilityRealLevelField(0x4E736F31), --ABILITY_RLF_DAMAGE_AMOUNT_NSO1
    DamagePeriod = Native.ConvertAbilityRealLevelField(0x4E736F32), --ABILITY_RLF_DAMAGE_PERIOD
    DamagePenalty = Native.ConvertAbilityRealLevelField(0x4E736F33), --ABILITY_RLF_DAMAGE_PENALTY
    MovementSpeedReductionPercentNso4 = Native.ConvertAbilityRealLevelField(0x4E736F34), --ABILITY_RLF_MOVEMENT_SPEED_REDUCTION_PERCENT_NSO4
    AttackSpeedReductionPercentNso5 = Native.ConvertAbilityRealLevelField(0x4E736F35), --ABILITY_RLF_ATTACK_SPEED_REDUCTION_PERCENT_NSO5
    SplitDelay = Native.ConvertAbilityRealLevelField(0x4E6C6D32), --ABILITY_RLF_SPLIT_DELAY
    MaxHitpointFactor = Native.ConvertAbilityRealLevelField(0x4E6C6D34), --ABILITY_RLF_MAX_HITPOINT_FACTOR
    LifeDurationSplitBonus = Native.ConvertAbilityRealLevelField(0x4E6C6D35), --ABILITY_RLF_LIFE_DURATION_SPLIT_BONUS
    WaveInterval = Native.ConvertAbilityRealLevelField(0x4E766333), --ABILITY_RLF_WAVE_INTERVAL
    BuildingDamageFactorNvc4 = Native.ConvertAbilityRealLevelField(0x4E766334), --ABILITY_RLF_BUILDING_DAMAGE_FACTOR_NVC4
    FullDamageAmountNvc5 = Native.ConvertAbilityRealLevelField(0x4E766335), --ABILITY_RLF_FULL_DAMAGE_AMOUNT_NVC5
    HalfDamageFactor = Native.ConvertAbilityRealLevelField(0x4E766336), --ABILITY_RLF_HALF_DAMAGE_FACTOR
    IntervalBetweenPulses = Native.ConvertAbilityRealLevelField(0x54617535), --ABILITY_RLF_INTERVAL_BETWEEN_PULSES
}
return AbilityRealLevelField]]

P['lib/stdlib/enum/abilitystringfield.lua'] = [[local Native = require('lib.stdlib.native')

---@class AbilityStringField
local AbilityStringField = {
    Name = Native.ConvertAbilityStringField(0x616E616D), --ABILITY_SF_NAME
    IconActivated = Native.ConvertAbilityStringField(0x61756172), --ABILITY_SF_ICON_ACTIVATED
    IconResearch = Native.ConvertAbilityStringField(0x61726172), --ABILITY_SF_ICON_RESEARCH
    EffectSound = Native.ConvertAbilityStringField(0x61656673), --ABILITY_SF_EFFECT_SOUND
    EffectSoundLooping = Native.ConvertAbilityStringField(0x6165666C), --ABILITY_SF_EFFECT_SOUND_LOOPING
}
return AbilityStringField]]

P['lib/stdlib/enum/abilitystringlevelarrayfield.lua'] = [[local Native = require('lib.stdlib.native')

---@class AbilityStringLevelArrayField
local AbilityStringLevelArrayField = {
}
return AbilityStringLevelArrayField]]

P['lib/stdlib/enum/abilitystringlevelfield.lua'] = [[local Native = require('lib.stdlib.native')

---@class AbilityStringLevelField
local AbilityStringLevelField = {
    IconNormal = Native.ConvertAbilityStringLevelField(0x61617274), --ABILITY_SLF_ICON_NORMAL
    Caster = Native.ConvertAbilityStringLevelField(0x61636174), --ABILITY_SLF_CASTER
    Target = Native.ConvertAbilityStringLevelField(0x61746174), --ABILITY_SLF_TARGET
    Special = Native.ConvertAbilityStringLevelField(0x61736174), --ABILITY_SLF_SPECIAL
    Effect = Native.ConvertAbilityStringLevelField(0x61656174), --ABILITY_SLF_EFFECT
    AreaEffect = Native.ConvertAbilityStringLevelField(0x61616561), --ABILITY_SLF_AREA_EFFECT
    LightningEffects = Native.ConvertAbilityStringLevelField(0x616C6967), --ABILITY_SLF_LIGHTNING_EFFECTS
    MissileArt = Native.ConvertAbilityStringLevelField(0x616D6174), --ABILITY_SLF_MISSILE_ART
    TooltipLearn = Native.ConvertAbilityStringLevelField(0x61726574), --ABILITY_SLF_TOOLTIP_LEARN
    TooltipLearnExtended = Native.ConvertAbilityStringLevelField(0x61727574), --ABILITY_SLF_TOOLTIP_LEARN_EXTENDED
    TooltipNormal = Native.ConvertAbilityStringLevelField(0x61747031), --ABILITY_SLF_TOOLTIP_NORMAL
    TooltipTurnOff = Native.ConvertAbilityStringLevelField(0x61757431), --ABILITY_SLF_TOOLTIP_TURN_OFF
    TooltipNormalExtended = Native.ConvertAbilityStringLevelField(0x61756231), --ABILITY_SLF_TOOLTIP_NORMAL_EXTENDED
    TooltipTurnOffExtended = Native.ConvertAbilityStringLevelField(0x61757531), --ABILITY_SLF_TOOLTIP_TURN_OFF_EXTENDED
    NormalFormUnitEme1 = Native.ConvertAbilityStringLevelField(0x456D6531), --ABILITY_SLF_NORMAL_FORM_UNIT_EME1
    SpawnedUnits = Native.ConvertAbilityStringLevelField(0x4E647031), --ABILITY_SLF_SPAWNED_UNITS
    AbilityForUnitCreation = Native.ConvertAbilityStringLevelField(0x4E726331), --ABILITY_SLF_ABILITY_FOR_UNIT_CREATION
    NormalFormUnitMil1 = Native.ConvertAbilityStringLevelField(0x4D696C31), --ABILITY_SLF_NORMAL_FORM_UNIT_MIL1
    AlternateFormUnitMil2 = Native.ConvertAbilityStringLevelField(0x4D696C32), --ABILITY_SLF_ALTERNATE_FORM_UNIT_MIL2
    BaseOrderIdAns5 = Native.ConvertAbilityStringLevelField(0x416E7335), --ABILITY_SLF_BASE_ORDER_ID_ANS5
    MorphUnitsGround = Native.ConvertAbilityStringLevelField(0x506C7932), --ABILITY_SLF_MORPH_UNITS_GROUND
    MorphUnitsAir = Native.ConvertAbilityStringLevelField(0x506C7933), --ABILITY_SLF_MORPH_UNITS_AIR
    MorphUnitsAmphibious = Native.ConvertAbilityStringLevelField(0x506C7934), --ABILITY_SLF_MORPH_UNITS_AMPHIBIOUS
    MorphUnitsWater = Native.ConvertAbilityStringLevelField(0x506C7935), --ABILITY_SLF_MORPH_UNITS_WATER
    UnitTypeOne = Native.ConvertAbilityStringLevelField(0x52616933), --ABILITY_SLF_UNIT_TYPE_ONE
    UnitTypeTwo = Native.ConvertAbilityStringLevelField(0x52616934), --ABILITY_SLF_UNIT_TYPE_TWO
    UnitTypeSod2 = Native.ConvertAbilityStringLevelField(0x536F6432), --ABILITY_SLF_UNIT_TYPE_SOD2
    Summon1UnitType = Native.ConvertAbilityStringLevelField(0x49737431), --ABILITY_SLF_SUMMON_1_UNIT_TYPE
    Summon2UnitType = Native.ConvertAbilityStringLevelField(0x49737432), --ABILITY_SLF_SUMMON_2_UNIT_TYPE
    RaceToConvert = Native.ConvertAbilityStringLevelField(0x4E646331), --ABILITY_SLF_RACE_TO_CONVERT
    PartnerUnitType = Native.ConvertAbilityStringLevelField(0x636F6131), --ABILITY_SLF_PARTNER_UNIT_TYPE
    PartnerUnitTypeOne = Native.ConvertAbilityStringLevelField(0x64637031), --ABILITY_SLF_PARTNER_UNIT_TYPE_ONE
    PartnerUnitTypeTwo = Native.ConvertAbilityStringLevelField(0x64637032), --ABILITY_SLF_PARTNER_UNIT_TYPE_TWO
    RequiredUnitType = Native.ConvertAbilityStringLevelField(0x74706931), --ABILITY_SLF_REQUIRED_UNIT_TYPE
    ConvertedUnitType = Native.ConvertAbilityStringLevelField(0x74706932), --ABILITY_SLF_CONVERTED_UNIT_TYPE
    SpellList = Native.ConvertAbilityStringLevelField(0x73706231), --ABILITY_SLF_SPELL_LIST
    BaseOrderIdSpb5 = Native.ConvertAbilityStringLevelField(0x73706235), --ABILITY_SLF_BASE_ORDER_ID_SPB5
    BaseOrderIdNcl6 = Native.ConvertAbilityStringLevelField(0x4E636C36), --ABILITY_SLF_BASE_ORDER_ID_NCL6
    AbilityUpgrade1 = Native.ConvertAbilityStringLevelField(0x4E656733), --ABILITY_SLF_ABILITY_UPGRADE_1
    AbilityUpgrade2 = Native.ConvertAbilityStringLevelField(0x4E656734), --ABILITY_SLF_ABILITY_UPGRADE_2
    AbilityUpgrade3 = Native.ConvertAbilityStringLevelField(0x4E656735), --ABILITY_SLF_ABILITY_UPGRADE_3
    AbilityUpgrade4 = Native.ConvertAbilityStringLevelField(0x4E656736), --ABILITY_SLF_ABILITY_UPGRADE_4
    SpawnUnitIdNsy2 = Native.ConvertAbilityStringLevelField(0x4E737932), --ABILITY_SLF_SPAWN_UNIT_ID_NSY2
}
return AbilityStringLevelField]]

P['lib/stdlib/enum/aidifficulty.lua'] = [[local Native = require('lib.stdlib.native')

---@class AiDifficulty
local AiDifficulty = {
    Newbie = Native.ConvertAIDifficulty(0), --AI_DIFFICULTY_NEWBIE
    Normal = Native.ConvertAIDifficulty(1), --AI_DIFFICULTY_NORMAL
    Insane = Native.ConvertAIDifficulty(2), --AI_DIFFICULTY_INSANE
}
return AiDifficulty]]

P['lib/stdlib/enum/alliancetype.lua'] = [[local Native = require('lib.stdlib.native')

---@class AllianceType
local AllianceType = {
    Passive = Native.ConvertAllianceType(0), --ALLIANCE_PASSIVE
    HelpRequest = Native.ConvertAllianceType(1), --ALLIANCE_HELP_REQUEST
    HelpResponse = Native.ConvertAllianceType(2), --ALLIANCE_HELP_RESPONSE
    SharedXp = Native.ConvertAllianceType(3), --ALLIANCE_SHARED_XP
    SharedSpells = Native.ConvertAllianceType(4), --ALLIANCE_SHARED_SPELLS
    SharedVision = Native.ConvertAllianceType(5), --ALLIANCE_SHARED_VISION
    SharedControl = Native.ConvertAllianceType(6), --ALLIANCE_SHARED_CONTROL
    SharedAdvancedControl = Native.ConvertAllianceType(7), --ALLIANCE_SHARED_ADVANCED_CONTROL
    Rescuable = Native.ConvertAllianceType(8), --ALLIANCE_RESCUABLE
    SharedVisionForced = Native.ConvertAllianceType(9), --ALLIANCE_SHARED_VISION_FORCED
}
return AllianceType]]

P['lib/stdlib/enum/animtype.lua'] = [[local Native = require('lib.stdlib.native')

---@class AnimType
local AnimType = {
    Birth = Native.ConvertAnimType(0), --ANIM_TYPE_BIRTH
    Death = Native.ConvertAnimType(1), --ANIM_TYPE_DEATH
    Decay = Native.ConvertAnimType(2), --ANIM_TYPE_DECAY
    Dissipate = Native.ConvertAnimType(3), --ANIM_TYPE_DISSIPATE
    Stand = Native.ConvertAnimType(4), --ANIM_TYPE_STAND
    Walk = Native.ConvertAnimType(5), --ANIM_TYPE_WALK
    Attack = Native.ConvertAnimType(6), --ANIM_TYPE_ATTACK
    Morph = Native.ConvertAnimType(7), --ANIM_TYPE_MORPH
    Sleep = Native.ConvertAnimType(8), --ANIM_TYPE_SLEEP
    Spell = Native.ConvertAnimType(9), --ANIM_TYPE_SPELL
    Portrait = Native.ConvertAnimType(10), --ANIM_TYPE_PORTRAIT
}
return AnimType]]

P['lib/stdlib/enum/armortype.lua'] = [[local Native = require('lib.stdlib.native')

---@class ArmorType
local ArmorType = {
    Whoknows = Native.ConvertArmorType(0), --ARMOR_TYPE_WHOKNOWS
    Flesh = Native.ConvertArmorType(1), --ARMOR_TYPE_FLESH
    Metal = Native.ConvertArmorType(2), --ARMOR_TYPE_METAL
    Wood = Native.ConvertArmorType(3), --ARMOR_TYPE_WOOD
    Ethreal = Native.ConvertArmorType(4), --ARMOR_TYPE_ETHREAL
    Stone = Native.ConvertArmorType(5), --ARMOR_TYPE_STONE
}
return ArmorType]]

P['lib/stdlib/enum/attacktype.lua'] = [[local Native = require('lib.stdlib.native')

---@class AttackType
local AttackType = {
    Normal = Native.ConvertAttackType(0), --ATTACK_TYPE_NORMAL
    Melee = Native.ConvertAttackType(1), --ATTACK_TYPE_MELEE
    Pierce = Native.ConvertAttackType(2), --ATTACK_TYPE_PIERCE
    Siege = Native.ConvertAttackType(3), --ATTACK_TYPE_SIEGE
    Magic = Native.ConvertAttackType(4), --ATTACK_TYPE_MAGIC
    Chaos = Native.ConvertAttackType(5), --ATTACK_TYPE_CHAOS
    Hero = Native.ConvertAttackType(6), --ATTACK_TYPE_HERO
}
return AttackType]]

P['lib/stdlib/enum/blendmode.lua'] = [[local Native = require('lib.stdlib.native')

---@class BlendMode
local BlendMode = {
    None = Native.ConvertBlendMode(0), --BLEND_MODE_NONE
    DontCare = Native.ConvertBlendMode(0), --BLEND_MODE_DONT_CARE
    Keyalpha = Native.ConvertBlendMode(1), --BLEND_MODE_KEYALPHA
    Blend = Native.ConvertBlendMode(2), --BLEND_MODE_BLEND
    Additive = Native.ConvertBlendMode(3), --BLEND_MODE_ADDITIVE
    Modulate = Native.ConvertBlendMode(4), --BLEND_MODE_MODULATE
    Modulate2X = Native.ConvertBlendMode(5), --BLEND_MODE_MODULATE_2X
}
return BlendMode]]

P['lib/stdlib/enum/camerafield.lua'] = [[local Native = require('lib.stdlib.native')

---@class CameraField
local CameraField = {
    TargetDistance = Native.ConvertCameraField(0), --CAMERA_FIELD_TARGET_DISTANCE
    Farz = Native.ConvertCameraField(1), --CAMERA_FIELD_FARZ
    AngleOfAttack = Native.ConvertCameraField(2), --CAMERA_FIELD_ANGLE_OF_ATTACK
    FieldOfView = Native.ConvertCameraField(3), --CAMERA_FIELD_FIELD_OF_VIEW
    Roll = Native.ConvertCameraField(4), --CAMERA_FIELD_ROLL
    Rotation = Native.ConvertCameraField(5), --CAMERA_FIELD_ROTATION
    Zoffset = Native.ConvertCameraField(6), --CAMERA_FIELD_ZOFFSET
    Nearz = Native.ConvertCameraField(7), --CAMERA_FIELD_NEARZ
    LocalPitch = Native.ConvertCameraField(8), --CAMERA_FIELD_LOCAL_PITCH
    LocalYaw = Native.ConvertCameraField(9), --CAMERA_FIELD_LOCAL_YAW
    LocalRoll = Native.ConvertCameraField(10), --CAMERA_FIELD_LOCAL_ROLL
}
return CameraField]]

P['lib/stdlib/enum/commandbuttoneffect.lua'] = [[local Native = require('lib.stdlib.native')

---@class commandbuttoneffect
local commandbuttoneffect = {
}
return commandbuttoneffect]]

P['lib/stdlib/enum/damagetype.lua'] = [[local Native = require('lib.stdlib.native')

---@class DamageType
local DamageType = {
    Unknown = Native.ConvertDamageType(0), --DAMAGE_TYPE_UNKNOWN
    Normal = Native.ConvertDamageType(4), --DAMAGE_TYPE_NORMAL
    Enhanced = Native.ConvertDamageType(5), --DAMAGE_TYPE_ENHANCED
    Fire = Native.ConvertDamageType(8), --DAMAGE_TYPE_FIRE
    Cold = Native.ConvertDamageType(9), --DAMAGE_TYPE_COLD
    Lightning = Native.ConvertDamageType(10), --DAMAGE_TYPE_LIGHTNING
    Poison = Native.ConvertDamageType(11), --DAMAGE_TYPE_POISON
    Disease = Native.ConvertDamageType(12), --DAMAGE_TYPE_DISEASE
    Divine = Native.ConvertDamageType(13), --DAMAGE_TYPE_DIVINE
    Magic = Native.ConvertDamageType(14), --DAMAGE_TYPE_MAGIC
    Sonic = Native.ConvertDamageType(15), --DAMAGE_TYPE_SONIC
    Acid = Native.ConvertDamageType(16), --DAMAGE_TYPE_ACID
    Force = Native.ConvertDamageType(17), --DAMAGE_TYPE_FORCE
    Death = Native.ConvertDamageType(18), --DAMAGE_TYPE_DEATH
    Mind = Native.ConvertDamageType(19), --DAMAGE_TYPE_MIND
    Plant = Native.ConvertDamageType(20), --DAMAGE_TYPE_PLANT
    Defensive = Native.ConvertDamageType(21), --DAMAGE_TYPE_DEFENSIVE
    Demolition = Native.ConvertDamageType(22), --DAMAGE_TYPE_DEMOLITION
    SlowPoison = Native.ConvertDamageType(23), --DAMAGE_TYPE_SLOW_POISON
    SpiritLink = Native.ConvertDamageType(24), --DAMAGE_TYPE_SPIRIT_LINK
    ShadowStrike = Native.ConvertDamageType(25), --DAMAGE_TYPE_SHADOW_STRIKE
    Universal = Native.ConvertDamageType(26), --DAMAGE_TYPE_UNIVERSAL
}
return DamageType]]

P['lib/stdlib/enum/defensetype.lua'] = [[local Native = require('lib.stdlib.native')

---@class DefenseType
local DefenseType = {
    Light = Native.ConvertDefenseType(0), --DEFENSE_TYPE_LIGHT
    Medium = Native.ConvertDefenseType(1), --DEFENSE_TYPE_MEDIUM
    Large = Native.ConvertDefenseType(2), --DEFENSE_TYPE_LARGE
    Fort = Native.ConvertDefenseType(3), --DEFENSE_TYPE_FORT
    Normal = Native.ConvertDefenseType(4), --DEFENSE_TYPE_NORMAL
    Hero = Native.ConvertDefenseType(5), --DEFENSE_TYPE_HERO
    Divine = Native.ConvertDefenseType(6), --DEFENSE_TYPE_DIVINE
    None = Native.ConvertDefenseType(7), --DEFENSE_TYPE_NONE
}
return DefenseType]]

P['lib/stdlib/enum/dialogevent.lua'] = [[local Native = require('lib.stdlib.native')

---@class DialogEvent
local DialogEvent = {
    ButtonClick = Native.ConvertDialogEvent(90), --EVENT_DIALOG_BUTTON_CLICK
    Click = Native.ConvertDialogEvent(91), --EVENT_DIALOG_CLICK
}
return DialogEvent]]

P['lib/stdlib/enum/effecttype.lua'] = [[local Native = require('lib.stdlib.native')

---@class EffectType
local EffectType = {
    Effect = Native.ConvertEffectType(0), --EFFECT_TYPE_EFFECT
    Target = Native.ConvertEffectType(1), --EFFECT_TYPE_TARGET
    Caster = Native.ConvertEffectType(2), --EFFECT_TYPE_CASTER
    Special = Native.ConvertEffectType(3), --EFFECT_TYPE_SPECIAL
    AreaEffect = Native.ConvertEffectType(4), --EFFECT_TYPE_AREA_EFFECT
    Missile = Native.ConvertEffectType(5), --EFFECT_TYPE_MISSILE
    Lightning = Native.ConvertEffectType(6), --EFFECT_TYPE_LIGHTNING
}
return EffectType]]

P['lib/stdlib/enum/eventid.lua'] = [[local Native = require('lib.stdlib.native')

---@class EventId
local EventId = {
}
return EventId]]

P['lib/stdlib/enum/fgamestate.lua'] = [[local Native = require('lib.stdlib.native')

---@class FGameState
local FGameState = {
    TimeOfDay = Native.ConvertFGameState(2), --GAME_STATE_TIME_OF_DAY
}
return FGameState]]

P['lib/stdlib/enum/fogstate.lua'] = [[local Native = require('lib.stdlib.native')

---@class FogState
local FogState = {
    Masked = Native.ConvertFogState(1), --FOG_OF_WAR_MASKED
    Fogged = Native.ConvertFogState(2), --FOG_OF_WAR_FOGGED
    Visible = Native.ConvertFogState(4), --FOG_OF_WAR_VISIBLE
}
return FogState]]

P['lib/stdlib/enum/frameeventtype.lua'] = [[local Native = require('lib.stdlib.native')

---@class FrameEventType
local FrameEventType = {
    ControlClick = Native.ConvertFrameEventType(1), --FRAMEEVENT_CONTROL_CLICK
    MouseEnter = Native.ConvertFrameEventType(2), --FRAMEEVENT_MOUSE_ENTER
    MouseLeave = Native.ConvertFrameEventType(3), --FRAMEEVENT_MOUSE_LEAVE
    MouseUp = Native.ConvertFrameEventType(4), --FRAMEEVENT_MOUSE_UP
    MouseDown = Native.ConvertFrameEventType(5), --FRAMEEVENT_MOUSE_DOWN
    MouseWheel = Native.ConvertFrameEventType(6), --FRAMEEVENT_MOUSE_WHEEL
    CheckboxChecked = Native.ConvertFrameEventType(7), --FRAMEEVENT_CHECKBOX_CHECKED
    CheckboxUnchecked = Native.ConvertFrameEventType(8), --FRAMEEVENT_CHECKBOX_UNCHECKED
    EditboxTextChanged = Native.ConvertFrameEventType(9), --FRAMEEVENT_EDITBOX_TEXT_CHANGED
    PopupmenuItemChanged = Native.ConvertFrameEventType(10), --FRAMEEVENT_POPUPMENU_ITEM_CHANGED
    MouseDoubleclick = Native.ConvertFrameEventType(11), --FRAMEEVENT_MOUSE_DOUBLECLICK
    SpriteAnimUpdate = Native.ConvertFrameEventType(12), --FRAMEEVENT_SPRITE_ANIM_UPDATE
    SliderValueChanged = Native.ConvertFrameEventType(13), --FRAMEEVENT_SLIDER_VALUE_CHANGED
    DialogCancel = Native.ConvertFrameEventType(14), --FRAMEEVENT_DIALOG_CANCEL
    DialogAccept = Native.ConvertFrameEventType(15), --FRAMEEVENT_DIALOG_ACCEPT
    EditboxEnter = Native.ConvertFrameEventType(16), --FRAMEEVENT_EDITBOX_ENTER
}
return FrameEventType]]

P['lib/stdlib/enum/framepointtype.lua'] = [[local Native = require('lib.stdlib.native')

---@class FramePointType
local FramePointType = {
    Topleft = Native.ConvertFramePointType(0), --FRAMEPOINT_TOPLEFT
    Top = Native.ConvertFramePointType(1), --FRAMEPOINT_TOP
    Topright = Native.ConvertFramePointType(2), --FRAMEPOINT_TOPRIGHT
    Left = Native.ConvertFramePointType(3), --FRAMEPOINT_LEFT
    Center = Native.ConvertFramePointType(4), --FRAMEPOINT_CENTER
    Right = Native.ConvertFramePointType(5), --FRAMEPOINT_RIGHT
    Bottomleft = Native.ConvertFramePointType(6), --FRAMEPOINT_BOTTOMLEFT
    Bottom = Native.ConvertFramePointType(7), --FRAMEPOINT_BOTTOM
    Bottomright = Native.ConvertFramePointType(8), --FRAMEPOINT_BOTTOMRIGHT
}
return FramePointType]]

P['lib/stdlib/enum/gamedifficulty.lua'] = [[local Native = require('lib.stdlib.native')

---@class GameDifficulty
local GameDifficulty = {
    Easy = Native.ConvertGameDifficulty(0), --MAP_DIFFICULTY_EASY
    Normal = Native.ConvertGameDifficulty(1), --MAP_DIFFICULTY_NORMAL
    Hard = Native.ConvertGameDifficulty(2), --MAP_DIFFICULTY_HARD
    Insane = Native.ConvertGameDifficulty(3), --MAP_DIFFICULTY_INSANE
}
return GameDifficulty]]

P['lib/stdlib/enum/gameevent.lua'] = [[local Native = require('lib.stdlib.native')

---@class GameEvent
local GameEvent = {
    Victory = Native.ConvertGameEvent(0), --EVENT_GAME_VICTORY
    EndLevel = Native.ConvertGameEvent(1), --EVENT_GAME_END_LEVEL
    VariableLimit = Native.ConvertGameEvent(2), --EVENT_GAME_VARIABLE_LIMIT
    StateLimit = Native.ConvertGameEvent(3), --EVENT_GAME_STATE_LIMIT
    TimerExpired = Native.ConvertGameEvent(4), --EVENT_GAME_TIMER_EXPIRED
    EnterRegion = Native.ConvertGameEvent(5), --EVENT_GAME_ENTER_REGION
    LeaveRegion = Native.ConvertGameEvent(6), --EVENT_GAME_LEAVE_REGION
    TrackableHit = Native.ConvertGameEvent(7), --EVENT_GAME_TRACKABLE_HIT
    TrackableTrack = Native.ConvertGameEvent(8), --EVENT_GAME_TRACKABLE_TRACK
    ShowSkill = Native.ConvertGameEvent(9), --EVENT_GAME_SHOW_SKILL
    BuildSubmenu = Native.ConvertGameEvent(10), --EVENT_GAME_BUILD_SUBMENU
    Loaded = Native.ConvertGameEvent(256), --EVENT_GAME_LOADED
    TournamentFinishSoon = Native.ConvertGameEvent(257), --EVENT_GAME_TOURNAMENT_FINISH_SOON
    TournamentFinishNow = Native.ConvertGameEvent(258), --EVENT_GAME_TOURNAMENT_FINISH_NOW
    Save = Native.ConvertGameEvent(259), --EVENT_GAME_SAVE
    CustomUiFrame = Native.ConvertGameEvent(310), --EVENT_GAME_CUSTOM_UI_FRAME
}
return GameEvent]]

P['lib/stdlib/enum/gamespeed.lua'] = [[local Native = require('lib.stdlib.native')

---@class GameSpeed
local GameSpeed = {
    Slowest = Native.ConvertGameSpeed(0), --MAP_SPEED_SLOWEST
    Slow = Native.ConvertGameSpeed(1), --MAP_SPEED_SLOW
    Normal = Native.ConvertGameSpeed(2), --MAP_SPEED_NORMAL
    Fast = Native.ConvertGameSpeed(3), --MAP_SPEED_FAST
    Fastest = Native.ConvertGameSpeed(4), --MAP_SPEED_FASTEST
}
return GameSpeed]]

P['lib/stdlib/enum/gamestate.lua'] = [[local Native = require('lib.stdlib.native')

---@class GameState
local GameState = {
}
return GameState]]

P['lib/stdlib/enum/gametype.lua'] = [[local Native = require('lib.stdlib.native')

---@class GameType
local GameType = {
    Melee = Native.ConvertGameType(1), --GAME_TYPE_MELEE
    Ffa = Native.ConvertGameType(2), --GAME_TYPE_FFA
    UseMapSettings = Native.ConvertGameType(4), --GAME_TYPE_USE_MAP_SETTINGS
    Bliz = Native.ConvertGameType(8), --GAME_TYPE_BLIZ
    OneOnOne = Native.ConvertGameType(16), --GAME_TYPE_ONE_ON_ONE
    TwoTeamPlay = Native.ConvertGameType(32), --GAME_TYPE_TWO_TEAM_PLAY
    ThreeTeamPlay = Native.ConvertGameType(64), --GAME_TYPE_THREE_TEAM_PLAY
    FourTeamPlay = Native.ConvertGameType(128), --GAME_TYPE_FOUR_TEAM_PLAY
}
return GameType]]

P['lib/stdlib/enum/heroattribute.lua'] = [[local Native = require('lib.stdlib.native')

---@class HeroAttribute
local HeroAttribute = {
    Str = Native.ConvertHeroAttribute(1), --HERO_ATTRIBUTE_STR
    Int = Native.ConvertHeroAttribute(2), --HERO_ATTRIBUTE_INT
    Agi = Native.ConvertHeroAttribute(3), --HERO_ATTRIBUTE_AGI
}
return HeroAttribute]]

P['lib/stdlib/enum/igamestate.lua'] = [[local Native = require('lib.stdlib.native')

---@class IGameState
local IGameState = {
    VineIntervention = Native.ConvertIGameState(0), --GAME_STATE_DIVINE_INTERVENTION
    Sconnected = Native.ConvertIGameState(1), --GAME_STATE_DISCONNECTED
}
return IGameState]]

P['lib/stdlib/enum/init.lua'] = [[AbilityBooleanField = require('lib.stdlib.enum.abilitybooleanfield')
AbilityBooleanLevelArrayField = require('lib.stdlib.enum.abilitybooleanlevelarrayfield')
AbilityBooleanLevelField = require('lib.stdlib.enum.abilitybooleanlevelfield')
AbilityIntegerField = require('lib.stdlib.enum.abilityintegerfield')
AbilityIntegerLevelArrayField = require('lib.stdlib.enum.abilityintegerlevelarrayfield')
AbilityIntegerLevelField = require('lib.stdlib.enum.abilityintegerlevelfield')
AbilityRealField = require('lib.stdlib.enum.abilityrealfield')
AbilityRealLevelArrayField = require('lib.stdlib.enum.abilityreallevelarrayfield')
AbilityRealLevelField = require('lib.stdlib.enum.abilityreallevelfield')
AbilityStringField = require('lib.stdlib.enum.abilitystringfield')
AbilityStringLevelArrayField = require('lib.stdlib.enum.abilitystringlevelarrayfield')
AbilityStringLevelField = require('lib.stdlib.enum.abilitystringlevelfield')
AiDifficulty = require('lib.stdlib.enum.aidifficulty')
AllianceType = require('lib.stdlib.enum.alliancetype')
AnimType = require('lib.stdlib.enum.animtype')
ArmorType = require('lib.stdlib.enum.armortype')
AttackType = require('lib.stdlib.enum.attacktype')
BlendMode = require('lib.stdlib.enum.blendmode')
CameraField = require('lib.stdlib.enum.camerafield')
DamageType = require('lib.stdlib.enum.damagetype')
DefenseType = require('lib.stdlib.enum.defensetype')
DialogEvent = require('lib.stdlib.enum.dialogevent')
EffectType = require('lib.stdlib.enum.effecttype')
EventId = require('lib.stdlib.enum.eventid')
FGameState = require('lib.stdlib.enum.fgamestate')
FogState = require('lib.stdlib.enum.fogstate')
FrameEventType = require('lib.stdlib.enum.frameeventtype')
FramePointType = require('lib.stdlib.enum.framepointtype')
GameDifficulty = require('lib.stdlib.enum.gamedifficulty')
GameEvent = require('lib.stdlib.enum.gameevent')
GameSpeed = require('lib.stdlib.enum.gamespeed')
GameState = require('lib.stdlib.enum.gamestate')
GameType = require('lib.stdlib.enum.gametype')
HeroAttribute = require('lib.stdlib.enum.heroattribute')
IGameState = require('lib.stdlib.enum.igamestate')
ItemBooleanField = require('lib.stdlib.enum.itembooleanfield')
ItemIntegerField = require('lib.stdlib.enum.itemintegerfield')
ItemRealField = require('lib.stdlib.enum.itemrealfield')
ItemStringField = require('lib.stdlib.enum.itemstringfield')
ItemType = require('lib.stdlib.enum.itemtype')
LimitOp = require('lib.stdlib.enum.limitop')
MapControl = require('lib.stdlib.enum.mapcontrol')
MapDensity = require('lib.stdlib.enum.mapdensity')
MapFlag = require('lib.stdlib.enum.mapflag')
MapSetting = require('lib.stdlib.enum.mapsetting')
MapVisibility = require('lib.stdlib.enum.mapvisibility')
MouseButtonType = require('lib.stdlib.enum.mousebuttontype')
MoveType = require('lib.stdlib.enum.movetype')
OriginFrameType = require('lib.stdlib.enum.originframetype')
OsKeyType = require('lib.stdlib.enum.oskeytype')
PathingFlag = require('lib.stdlib.enum.pathingflag')
PathingType = require('lib.stdlib.enum.pathingtype')
Placement = require('lib.stdlib.enum.placement')
PlayerColor = require('lib.stdlib.enum.playercolor')
PlayerEvent = require('lib.stdlib.enum.playerevent')
PlayerGameresult = require('lib.stdlib.enum.playergameresult')
PlayerScore = require('lib.stdlib.enum.playerscore')
PlayerSlotState = require('lib.stdlib.enum.playerslotstate')
PlayerState = require('lib.stdlib.enum.playerstate')
PlayerUnitEvent = require('lib.stdlib.enum.playerunitevent')
Race = require('lib.stdlib.enum.race')
RacePreference = require('lib.stdlib.enum.racepreference')
RarityControl = require('lib.stdlib.enum.raritycontrol')
RegenType = require('lib.stdlib.enum.regentype')
SoundType = require('lib.stdlib.enum.soundtype')
StartLocprio = require('lib.stdlib.enum.startlocprio')
SubAnimType = require('lib.stdlib.enum.subanimtype')
TargetFlag = require('lib.stdlib.enum.targetflag')
TexmapFlags = require('lib.stdlib.enum.texmapflags')
TextAlignType = require('lib.stdlib.enum.textaligntype')
TriggerAction = require('lib.stdlib.enum.triggeraction')
UnitBooleanField = require('lib.stdlib.enum.unitbooleanfield')
UnitCategory = require('lib.stdlib.enum.unitcategory')
UnitEvent = require('lib.stdlib.enum.unitevent')
UnitIntegerField = require('lib.stdlib.enum.unitintegerfield')
UnitRealField = require('lib.stdlib.enum.unitrealfield')
UnitState = require('lib.stdlib.enum.unitstate')
UnitStringField = require('lib.stdlib.enum.unitstringfield')
UnitType = require('lib.stdlib.enum.unittype')
UnitWeaponBooleanField = require('lib.stdlib.enum.unitweaponbooleanfield')
UnitWeaponIntegerField = require('lib.stdlib.enum.unitweaponintegerfield')
UnitWeaponRealField = require('lib.stdlib.enum.unitweaponrealfield')
UnitWeaponStringField = require('lib.stdlib.enum.unitweaponstringfield')
Version = require('lib.stdlib.enum.version')
VolumeGroup = require('lib.stdlib.enum.volumegroup')
WeaponType = require('lib.stdlib.enum.weapontype')
WidgetEvent = require('lib.stdlib.enum.widgetevent')

ReplaceUnitStateMethod = require('lib.stdlib.enum.replaceunitstatemethod')
SpecialOrder = require('lib.stdlib.enum.specialorder')
Order = require('lib.stdlib.enum.order')]]

P['lib/stdlib/enum/itembooleanfield.lua'] = [[local Native = require('lib.stdlib.native')

---@class ItemBooleanField
local ItemBooleanField = {
    DroppedWhenCarrierDies = Native.ConvertItemBooleanField(0x69647270), --ITEM_BF_DROPPED_WHEN_CARRIER_DIES
    CanBeDropped = Native.ConvertItemBooleanField(0x6964726F), --ITEM_BF_CAN_BE_DROPPED
    Perishable = Native.ConvertItemBooleanField(0x69706572), --ITEM_BF_PERISHABLE
    IncludeAsRandomChoice = Native.ConvertItemBooleanField(0x6970726E), --ITEM_BF_INCLUDE_AS_RANDOM_CHOICE
    UseAutomaticallyWhenAcquired = Native.ConvertItemBooleanField(0x69706F77), --ITEM_BF_USE_AUTOMATICALLY_WHEN_ACQUIRED
    CanBeSoldToMerchants = Native.ConvertItemBooleanField(0x69706177), --ITEM_BF_CAN_BE_SOLD_TO_MERCHANTS
    ActivelyUsed = Native.ConvertItemBooleanField(0x69757361), --ITEM_BF_ACTIVELY_USED
}
return ItemBooleanField]]

P['lib/stdlib/enum/itemintegerfield.lua'] = [[local Native = require('lib.stdlib.native')

---@class ItemIntegerField
local ItemIntegerField = {
    Level = Native.ConvertItemIntegerField(0x696C6576), --ITEM_IF_LEVEL
    NumberOfCharges = Native.ConvertItemIntegerField(0x69757365), --ITEM_IF_NUMBER_OF_CHARGES
    CooldownGroup = Native.ConvertItemIntegerField(0x69636964), --ITEM_IF_COOLDOWN_GROUP
    MaxHitPoints = Native.ConvertItemIntegerField(0x69687470), --ITEM_IF_MAX_HIT_POINTS
    HitPoints = Native.ConvertItemIntegerField(0x69687063), --ITEM_IF_HIT_POINTS
    Priority = Native.ConvertItemIntegerField(0x69707269), --ITEM_IF_PRIORITY
    ArmorType = Native.ConvertItemIntegerField(0x6961726D), --ITEM_IF_ARMOR_TYPE
    TintingColorRed = Native.ConvertItemIntegerField(0x69636C72), --ITEM_IF_TINTING_COLOR_RED
    TintingColorGreen = Native.ConvertItemIntegerField(0x69636C67), --ITEM_IF_TINTING_COLOR_GREEN
    TintingColorBlue = Native.ConvertItemIntegerField(0x69636C62), --ITEM_IF_TINTING_COLOR_BLUE
    TintingColorAlpha = Native.ConvertItemIntegerField(0x6963616C), --ITEM_IF_TINTING_COLOR_ALPHA
}
return ItemIntegerField]]

P['lib/stdlib/enum/itemrealfield.lua'] = [[local Native = require('lib.stdlib.native')

---@class ItemRealField
local ItemRealField = {
    ScalingValue = Native.ConvertItemRealField(0x69736361), --ITEM_RF_SCALING_VALUE
}
return ItemRealField]]

P['lib/stdlib/enum/itemstringfield.lua'] = [[local Native = require('lib.stdlib.native')

---@class ItemStringField
local ItemStringField = {
    ModelUsed = Native.ConvertItemStringField(0x6966696C), --ITEM_SF_MODEL_USED
}
return ItemStringField]]

P['lib/stdlib/enum/itemtype.lua'] = [[local Native = require('lib.stdlib.native')

---@class ItemType
local ItemType = {
    Permanent = Native.ConvertItemType(0), --ITEM_TYPE_PERMANENT
    Charged = Native.ConvertItemType(1), --ITEM_TYPE_CHARGED
    Powerup = Native.ConvertItemType(2), --ITEM_TYPE_POWERUP
    Artifact = Native.ConvertItemType(3), --ITEM_TYPE_ARTIFACT
    Purchasable = Native.ConvertItemType(4), --ITEM_TYPE_PURCHASABLE
    Campaign = Native.ConvertItemType(5), --ITEM_TYPE_CAMPAIGN
    Miscellaneous = Native.ConvertItemType(6), --ITEM_TYPE_MISCELLANEOUS
    Unknown = Native.ConvertItemType(7), --ITEM_TYPE_UNKNOWN
    Any = Native.ConvertItemType(8), --ITEM_TYPE_ANY
    Tome = Native.ConvertItemType(2), --ITEM_TYPE_TOME
}
return ItemType]]

P['lib/stdlib/enum/limitop.lua'] = [[local Native = require('lib.stdlib.native')

---@class LimitOp
local LimitOp = {
    LessThan = Native.ConvertLimitOp(0), --LESS_THAN
    LessThanOrEqual = Native.ConvertLimitOp(1), --LESS_THAN_OR_EQUAL
    Equal = Native.ConvertLimitOp(2), --EQUAL
    GreaterThanOrEqual = Native.ConvertLimitOp(3), --GREATER_THAN_OR_EQUAL
    GreaterThan = Native.ConvertLimitOp(4), --GREATER_THAN
    NotEqual = Native.ConvertLimitOp(5), --NOT_EQUAL
}
return LimitOp]]

P['lib/stdlib/enum/mapcontrol.lua'] = [[local Native = require('lib.stdlib.native')

---@class MapControl
local MapControl = {
    User = Native.ConvertMapControl(0), --MAP_CONTROL_USER
    Computer = Native.ConvertMapControl(1), --MAP_CONTROL_COMPUTER
    Rescuable = Native.ConvertMapControl(2), --MAP_CONTROL_RESCUABLE
    Neutral = Native.ConvertMapControl(3), --MAP_CONTROL_NEUTRAL
    Creep = Native.ConvertMapControl(4), --MAP_CONTROL_CREEP
    None = Native.ConvertMapControl(5), --MAP_CONTROL_NONE
}
return MapControl]]

P['lib/stdlib/enum/mapdensity.lua'] = [[local Native = require('lib.stdlib.native')

---@class MapDensity
local MapDensity = {
    None = Native.ConvertMapDensity(0), --MAP_DENSITY_NONE
    Light = Native.ConvertMapDensity(1), --MAP_DENSITY_LIGHT
    Medium = Native.ConvertMapDensity(2), --MAP_DENSITY_MEDIUM
    Heavy = Native.ConvertMapDensity(3), --MAP_DENSITY_HEAVY
}
return MapDensity]]

P['lib/stdlib/enum/mapflag.lua'] = [[local Native = require('lib.stdlib.native')

---@class MapFlag
local MapFlag = {
    FogHideTerrain = Native.ConvertMapFlag(1), --MAP_FOG_HIDE_TERRAIN
    FogMapExplored = Native.ConvertMapFlag(2), --MAP_FOG_MAP_EXPLORED
    FogAlwaysVisible = Native.ConvertMapFlag(4), --MAP_FOG_ALWAYS_VISIBLE
    UseHandicaps = Native.ConvertMapFlag(8), --MAP_USE_HANDICAPS
    Observers = Native.ConvertMapFlag(16), --MAP_OBSERVERS
    ObserversOnDeath = Native.ConvertMapFlag(32), --MAP_OBSERVERS_ON_DEATH
    FixedColors = Native.ConvertMapFlag(128), --MAP_FIXED_COLORS
    LockResourceTrading = Native.ConvertMapFlag(256), --MAP_LOCK_RESOURCE_TRADING
    ResourceTradingAlliesOnly = Native.ConvertMapFlag(512), --MAP_RESOURCE_TRADING_ALLIES_ONLY
    LockAllianceChanges = Native.ConvertMapFlag(1024), --MAP_LOCK_ALLIANCE_CHANGES
    AllianceChangesHidden = Native.ConvertMapFlag(2048), --MAP_ALLIANCE_CHANGES_HIDDEN
    Cheats = Native.ConvertMapFlag(4096), --MAP_CHEATS
    CheatsHidden = Native.ConvertMapFlag(8192), --MAP_CHEATS_HIDDEN
    LockSpeed = Native.ConvertMapFlag(8192*2), --MAP_LOCK_SPEED
    LockRandomSeed = Native.ConvertMapFlag(8192*4), --MAP_LOCK_RANDOM_SEED
    SharedAdvancedControl = Native.ConvertMapFlag(8192*8), --MAP_SHARED_ADVANCED_CONTROL
    RandomHero = Native.ConvertMapFlag(8192*16), --MAP_RANDOM_HERO
    RandomRaces = Native.ConvertMapFlag(8192*32), --MAP_RANDOM_RACES
    Reloaded = Native.ConvertMapFlag(8192*64), --MAP_RELOADED
}
return MapFlag]]

P['lib/stdlib/enum/mapsetting.lua'] = [[local Native = require('lib.stdlib.native')

---@class MapSetting
local MapSetting = {
}
return MapSetting]]

P['lib/stdlib/enum/mapvisibility.lua'] = [[local Native = require('lib.stdlib.native')

---@class MapVisibility
local MapVisibility = {
}
return MapVisibility]]

P['lib/stdlib/enum/minimapicon.lua'] = [[local Native = require('lib.stdlib.native')

---@class minimapicon
local minimapicon = {
}
return minimapicon]]

P['lib/stdlib/enum/mousebuttontype.lua'] = [[local Native = require('lib.stdlib.native')

---@class MouseButtonType
local MouseButtonType = {
    Left = Native.ConvertMouseButtonType(1), --MOUSE_BUTTON_TYPE_LEFT
    Middle = Native.ConvertMouseButtonType(2), --MOUSE_BUTTON_TYPE_MIDDLE
    Right = Native.ConvertMouseButtonType(3), --MOUSE_BUTTON_TYPE_RIGHT
}
return MouseButtonType]]

P['lib/stdlib/enum/movetype.lua'] = [[local Native = require('lib.stdlib.native')

---@class MoveType
local MoveType = {
    Unknown = Native.ConvertMoveType(0), --MOVE_TYPE_UNKNOWN
    Foot = Native.ConvertMoveType(1), --MOVE_TYPE_FOOT
    Fly = Native.ConvertMoveType(2), --MOVE_TYPE_FLY
    Horse = Native.ConvertMoveType(4), --MOVE_TYPE_HORSE
    Hover = Native.ConvertMoveType(8), --MOVE_TYPE_HOVER
    Float = Native.ConvertMoveType(16), --MOVE_TYPE_FLOAT
    Amphibious = Native.ConvertMoveType(32), --MOVE_TYPE_AMPHIBIOUS
    Unbuildable = Native.ConvertMoveType(64), --MOVE_TYPE_UNBUILDABLE
}
return MoveType]]

P['lib/stdlib/enum/order.lua'] = [[-- order.lua
-- @Author : Dencer (tdaddon@163.com)
-- @Link   : https://dengsir.github.io
-- @Date   : 7/4/2019, 3:25:54 AM

-- From https://github.com/wurstscript/WurstStdlib2/blob/master/wurst/_wurst/assets/Orders.wurst
-- Credits Shadow Daemon for cj_order.j from cJass

local SpecialOrder = require('lib.stdlib.enum.specialorder')

---@class Order: SpecialOrder
local Order = {
    absorb = 852529,
    acidbomb = 852662,
    acolyteharvest = 852185,
    ambush = 852131,
    ancestralspirit = 852490,
    ancestralspirittarget = 852491,
    animatedead = 852217,
    antimagicshell = 852186,
    attack = 851983,
    attackground = 851984,
    attackonce = 851985,
    attributemodskill = 852576,
    auraunholy = 852215,
    auravampiric = 852216,
    autodispel = 852132,
    autodispeloff = 852134,
    autodispelon = 852133,
    autoentangle = 852505,
    autoentangleinstant = 852506,
    autoharvestgold = 852021,
    autoharvestlumber = 852022,
    avatar = 852086,
    avengerform = 852531,
    awaken = 852466,
    banish = 852486,
    barkskin = 852135,
    barkskinoff = 852137,
    barkskinon = 852136,
    battleroar = 852599,
    battlestations = 852099,
    bearform = 852138,
    berserk = 852100,
    blackarrow = 852577,
    blackarrowoff = 852579,
    blackarrowon = 852578,
    blight = 852187,
    blink = 852525,
    blizzard = 852089,
    bloodlust = 852101,
    bloodlustoff = 852103,
    bloodluston = 852102,
    board = 852043,
    breathoffire = 852580,
    breathoffrost = 852560,
    build = 851994,
    burrow = 852533,
    cannibalize = 852188,
    carrionscarabs = 852551,
    carrionscarabsinstant = 852554,
    carrionscarabsoff = 852553,
    carrionscarabson = 852552,
    carrionswarm = 852218,
    chainlightning = 852119,
    channel = 852600,
    charm = 852581,
    chemicalrage = 852663,
    cloudoffog = 852473,
    clusterrockets = 852652,
    coldarrows = 852244,
    coldarrowstarg = 852243,
    controlmagic = 852474,
    corporealform = 852493,
    corrosivebreath = 852140,
    coupleinstant = 852508,
    coupletarget = 852507,
    creepanimatedead = 852246,
    creepdevour = 852247,
    creepheal = 852248,
    creephealoff = 852250,
    creephealon = 852249,
    creepthunderbolt = 852252,
    creepthunderclap = 852253,
    cripple = 852189,
    curse = 852190,
    curseoff = 852192,
    curseon = 852191,
    cyclone = 852144,
    darkconversion = 852228,
    darkportal = 852229,
    darkritual = 852219,
    darksummoning = 852220,
    deathanddecay = 852221,
    deathcoil = 852222,
    deathpact = 852223,
    decouple = 852509,
    defend = 852055,
    detectaoe = 852015,
    detonate = 852145,
    devour = 852104,
    devourmagic = 852536,
    disassociate = 852240,
    disenchant = 852495,
    dismount = 852470,
    dispel = 852057,
    divineshield = 852090,
    doom = 852583,
    drain = 852487,
    dreadlordinferno = 852224,
    dropitem = 852001,
    drunkenhaze = 852585,
    earthquake = 852121,
    eattree = 852146,
    elementalfury = 852586,
    ensnare = 852106,
    ensnareoff = 852108,
    ensnareon = 852107,
    entangle = 852147,
    entangleinstant = 852148,
    entanglingroots = 852171,
    etherealform = 852496,
    evileye = 852105,
    faeriefire = 852149,
    faeriefireoff = 852151,
    faeriefireon = 852150,
    fanofknives = 852526,
    farsight = 852122,
    fingerofdeath = 852230,
    firebolt = 852231,
    flamestrike = 852488,
    flamingarrows = 852174,
    flamingarrowstarg = 852173,
    flamingattack = 852540,
    flamingattacktarg = 852539,
    flare = 852060,
    forceboard = 852044,
    forceofnature = 852176,
    forkedlightning = 852587,
    freezingbreath = 852195,
    frenzy = 852561,
    frenzyoff = 852563,
    frenzyon = 852562,
    frostarmor = 852225,
    frostarmoroff = 852459,
    frostarmoron = 852458,
    frostnova = 852226,
    getitem = 851981,
    gold2lumber = 852233,
    grabtree = 852511,
    harvest = 852018,
    heal = 852063,
    healingspray = 852664,
    healingward = 852109,
    healingwave = 852501,
    healoff = 852065,
    healon = 852064,
    hex = 852502,
    holdposition = 851993,
    holybolt = 852092,
    howlofterror = 852588,
    humanbuild = 851995,
    immolation = 852177,
    impale = 852555,
    incineratearrow = 852670,
    incineratearrowoff = 852672,
    incineratearrowon = 852671,
    inferno = 852232,
    innerfire = 852066,
    innerfireoff = 852068,
    innerfireon = 852067,
    instant = 852200,
    invisibility = 852069,
    lavamonster = 852667,
    lightningshield = 852110,
    load = 852046,
    loadarcher = 852142,
    loadcorpse = 852050,
    loadcorpseinstant = 852053,
    locustswarm = 852556,
    lumber2gold = 852234,
    magicdefense = 852478,
    magicleash = 852480,
    magicundefense = 852479,
    manaburn = 852179,
    manaflareoff = 852513,
    manaflareon = 852512,
    manashieldoff = 852590,
    manashieldon = 852589,
    massteleport = 852093,
    mechanicalcritter = 852564,
    metamorphosis = 852180,
    militia = 852072,
    militiaconvert = 852071,
    militiaoff = 852073,
    militiaunconvert = 852651,
    mindrot = 852565,
    mirrorimage = 852123,
    monsoon = 852591,
    mount = 852469,
    mounthippogryph = 852143,
    move = 851986,
    moveAI = 851988,
    nagabuild = 852467,
    neutraldetectaoe = 852023,
    neutralinteract = 852566,
    neutralspell = 852630,
    nightelfbuild = 851997,
    orcbuild = 851996,
    parasite = 852601,
    parasiteoff = 852603,
    parasiteon = 852602,
    patrol = 851990,
    phaseshift = 852514,
    phaseshiftinstant = 852517,
    phaseshiftoff = 852516,
    phaseshifton = 852515,
    phoenixfire = 852481,
    phoenixmorph = 852482,
    poisonarrows = 852255,
    poisonarrowstarg = 852254,
    polymorph = 852074,
    possession = 852196,
    preservation = 852568,
    purge = 852111,
    rainofchaos = 852237,
    rainoffire = 852238,
    raisedead = 852197,
    raisedeadoff = 852199,
    raisedeadon = 852198,
    ravenform = 852155,
    recharge = 852157,
    rechargeoff = 852159,
    rechargeon = 852158,
    rejuvination = 852160,
    renew = 852161,
    renewoff = 852163,
    renewon = 852162,
    repair = 852024,
    repairoff = 852026,
    repairon = 852025,
    replenish = 852542,
    replenishlife = 852545,
    replenishlifeoff = 852547,
    replenishlifeon = 852546,
    replenishmana = 852548,
    replenishmanaoff = 852550,
    replenishmanaon = 852549,
    replenishoff = 852544,
    replenishon = 852543,
    request_hero = 852239,
    requestsacrifice = 852201,
    restoration = 852202,
    restorationoff = 852204,
    restorationon = 852203,
    resumebuild = 851999,
    resumeharvesting = 852017,
    resurrection = 852094,
    returnresources = 852020,
    revenge = 852241,
    revive = 852039,
    roar = 852164,
    robogoblin = 852656,
    root = 852165,
    sacrifice = 852205,
    sanctuary = 852569,
    scout = 852181,
    selfdestruct = 852040,
    selfdestructoff = 852042,
    selfdestructon = 852041,
    sentinel = 852182,
    setrally = 851980,
    shadowsight = 852570,
    shadowstrike = 852527,
    shockwave = 852125,
    silence = 852592,
    sleep = 852227,
    slow = 852075,
    slowoff = 852077,
    slowon = 852076,
    soulburn = 852668,
    soulpreservation = 852242,
    spellshield = 852571,
    spellshieldaoe = 852572,
    spellsteal = 852483,
    spellstealoff = 852485,
    spellstealon = 852484,
    spies = 852235,
    spiritlink = 852499,
    spiritofvengeance = 852528,
    spirittroll = 852573,
    spiritwolf = 852126,
    stampede = 852593,
    standdown = 852113,
    starfall = 852183,
    stasistrap = 852114,
    steal = 852574,
    stomp = 852127,
    stoneform = 852206,
    stop = 851972,
    submerge = 852604,
    summonfactory = 852658,
    summongrizzly = 852594,
    summonphoenix = 852489,
    summonquillbeast = 852595,
    summonwareagle = 852596,
    tankdroppilot = 852079,
    tankloadpilot = 852080,
    tankpilot = 852081,
    taunt = 852520,
    thunderbolt = 852095,
    thunderclap = 852096,
    tornado = 852597,
    townbelloff = 852083,
    townbellon = 852082,
    tranquility = 852184,
    transmute = 852665,
    unavatar = 852087,
    unavengerform = 852532,
    unbearform = 852139,
    unburrow = 852534,
    uncoldarrows = 852245,
    uncorporealform = 852494,
    undeadbuild = 851998,
    undefend = 852056,
    undivineshield = 852091,
    unetherealform = 852497,
    unflamingarrows = 852175,
    unflamingattack = 852541,
    unholyfrenzy = 852209,
    unimmolation = 852178,
    unload = 852047,
    unloadall = 852048,
    unloadallcorpses = 852054,
    unloadallinstant = 852049,
    unpoisonarrows = 852256,
    unravenform = 852156,
    unrobogoblin = 852657,
    unroot = 852166,
    unstableconcoction = 852500,
    unstoneform = 852207,
    unsubmerge = 852605,
    unsummon = 852210,
    unwindwalk = 852130,
    vengeance = 852521,
    vengeanceinstant = 852524,
    vengeanceoff = 852523,
    vengeanceon = 852522,
    volcano = 852669,
    voodoo = 852503,
    ward = 852504,
    waterelemental = 852097,
    wateryminion = 852598,
    web = 852211,
    weboff = 852213,
    webon = 852212,
    whirlwind = 852128,
    windwalk = 852129,
    wispharvest = 852214,
}

Order = table.merge(SpecialOrder, Order)

return Order]]

P['lib/stdlib/enum/originframetype.lua'] = [[local Native = require('lib.stdlib.native')

---@class OriginFrameType
local OriginFrameType = {
    GameUi = Native.ConvertOriginFrameType(0), --ORIGIN_FRAME_GAME_UI
    CommandButton = Native.ConvertOriginFrameType(1), --ORIGIN_FRAME_COMMAND_BUTTON
    HeroBar = Native.ConvertOriginFrameType(2), --ORIGIN_FRAME_HERO_BAR
    HeroButton = Native.ConvertOriginFrameType(3), --ORIGIN_FRAME_HERO_BUTTON
    HeroHpBar = Native.ConvertOriginFrameType(4), --ORIGIN_FRAME_HERO_HP_BAR
    HeroManaBar = Native.ConvertOriginFrameType(5), --ORIGIN_FRAME_HERO_MANA_BAR
    HeroButtonIndicator = Native.ConvertOriginFrameType(6), --ORIGIN_FRAME_HERO_BUTTON_INDICATOR
    ItemButton = Native.ConvertOriginFrameType(7), --ORIGIN_FRAME_ITEM_BUTTON
    Minimap = Native.ConvertOriginFrameType(8), --ORIGIN_FRAME_MINIMAP
    MinimapButton = Native.ConvertOriginFrameType(9), --ORIGIN_FRAME_MINIMAP_BUTTON
    SystemButton = Native.ConvertOriginFrameType(10), --ORIGIN_FRAME_SYSTEM_BUTTON
    Tooltip = Native.ConvertOriginFrameType(11), --ORIGIN_FRAME_TOOLTIP
    Ubertooltip = Native.ConvertOriginFrameType(12), --ORIGIN_FRAME_UBERTOOLTIP
    ChatMsg = Native.ConvertOriginFrameType(13), --ORIGIN_FRAME_CHAT_MSG
    UnitMsg = Native.ConvertOriginFrameType(14), --ORIGIN_FRAME_UNIT_MSG
    TopMsg = Native.ConvertOriginFrameType(15), --ORIGIN_FRAME_TOP_MSG
    Portrait = Native.ConvertOriginFrameType(16), --ORIGIN_FRAME_PORTRAIT
    WorldFrame = Native.ConvertOriginFrameType(17), --ORIGIN_FRAME_WORLD_FRAME
    SimpleUiParent = Native.ConvertOriginFrameType(18), --ORIGIN_FRAME_SIMPLE_UI_PARENT
    PortraitHpText = Native.ConvertOriginFrameType(19), --ORIGIN_FRAME_PORTRAIT_HP_TEXT
    PortraitManaText = Native.ConvertOriginFrameType(20), --ORIGIN_FRAME_PORTRAIT_MANA_TEXT
    UnitPanelBuffBar = Native.ConvertOriginFrameType(21), --ORIGIN_FRAME_UNIT_PANEL_BUFF_BAR
    UnitPanelBuffBarLabel = Native.ConvertOriginFrameType(22), --ORIGIN_FRAME_UNIT_PANEL_BUFF_BAR_LABEL
}
return OriginFrameType]]

P['lib/stdlib/enum/oskeytype.lua'] = [[local Native = require('lib.stdlib.native')

---@class OsKeyType
local OsKeyType = {
    Backspace = Native.ConvertOsKeyType(0x08), --OSKEY_BACKSPACE
    Tab = Native.ConvertOsKeyType(0x09), --OSKEY_TAB
    Clear = Native.ConvertOsKeyType(0x0C), --OSKEY_CLEAR
    Return = Native.ConvertOsKeyType(0x0D), --OSKEY_RETURN
    Shift = Native.ConvertOsKeyType(0x10), --OSKEY_SHIFT
    Control = Native.ConvertOsKeyType(0x11), --OSKEY_CONTROL
    Alt = Native.ConvertOsKeyType(0x12), --OSKEY_ALT
    Pause = Native.ConvertOsKeyType(0x13), --OSKEY_PAUSE
    Capslock = Native.ConvertOsKeyType(0x14), --OSKEY_CAPSLOCK
    Kana = Native.ConvertOsKeyType(0x15), --OSKEY_KANA
    Hangul = Native.ConvertOsKeyType(0x15), --OSKEY_HANGUL
    Junja = Native.ConvertOsKeyType(0x17), --OSKEY_JUNJA
    Final = Native.ConvertOsKeyType(0x18), --OSKEY_FINAL
    Hanja = Native.ConvertOsKeyType(0x19), --OSKEY_HANJA
    Kanji = Native.ConvertOsKeyType(0x19), --OSKEY_KANJI
    Escape = Native.ConvertOsKeyType(0x1B), --OSKEY_ESCAPE
    Convert = Native.ConvertOsKeyType(0x1C), --OSKEY_CONVERT
    Nonconvert = Native.ConvertOsKeyType(0x1D), --OSKEY_NONCONVERT
    Accept = Native.ConvertOsKeyType(0x1E), --OSKEY_ACCEPT
    Modechange = Native.ConvertOsKeyType(0x1F), --OSKEY_MODECHANGE
    Space = Native.ConvertOsKeyType(0x20), --OSKEY_SPACE
    Pageup = Native.ConvertOsKeyType(0x21), --OSKEY_PAGEUP
    Pagedown = Native.ConvertOsKeyType(0x22), --OSKEY_PAGEDOWN
    End = Native.ConvertOsKeyType(0x23), --OSKEY_END
    Home = Native.ConvertOsKeyType(0x24), --OSKEY_HOME
    Left = Native.ConvertOsKeyType(0x25), --OSKEY_LEFT
    Up = Native.ConvertOsKeyType(0x26), --OSKEY_UP
    Right = Native.ConvertOsKeyType(0x27), --OSKEY_RIGHT
    Down = Native.ConvertOsKeyType(0x28), --OSKEY_DOWN
    Select = Native.ConvertOsKeyType(0x29), --OSKEY_SELECT
    Print = Native.ConvertOsKeyType(0x2A), --OSKEY_PRINT
    Execute = Native.ConvertOsKeyType(0x2B), --OSKEY_EXECUTE
    Printscreen = Native.ConvertOsKeyType(0x2C), --OSKEY_PRINTSCREEN
    Insert = Native.ConvertOsKeyType(0x2D), --OSKEY_INSERT
    Delete = Native.ConvertOsKeyType(0x2E), --OSKEY_DELETE
    Help = Native.ConvertOsKeyType(0x2F), --OSKEY_HELP
    Key0 = Native.ConvertOsKeyType(0x30), --OSKEY_0
    Key1 = Native.ConvertOsKeyType(0x31), --OSKEY_1
    Key2 = Native.ConvertOsKeyType(0x32), --OSKEY_2
    Key3 = Native.ConvertOsKeyType(0x33), --OSKEY_3
    Key4 = Native.ConvertOsKeyType(0x34), --OSKEY_4
    Key5 = Native.ConvertOsKeyType(0x35), --OSKEY_5
    Key6 = Native.ConvertOsKeyType(0x36), --OSKEY_6
    Key7 = Native.ConvertOsKeyType(0x37), --OSKEY_7
    Key8 = Native.ConvertOsKeyType(0x38), --OSKEY_8
    Key9 = Native.ConvertOsKeyType(0x39), --OSKEY_9
    A = Native.ConvertOsKeyType(0x41), --OSKEY_A
    B = Native.ConvertOsKeyType(0x42), --OSKEY_B
    C = Native.ConvertOsKeyType(0x43), --OSKEY_C
    D = Native.ConvertOsKeyType(0x44), --OSKEY_D
    E = Native.ConvertOsKeyType(0x45), --OSKEY_E
    F = Native.ConvertOsKeyType(0x46), --OSKEY_F
    G = Native.ConvertOsKeyType(0x47), --OSKEY_G
    H = Native.ConvertOsKeyType(0x48), --OSKEY_H
    I = Native.ConvertOsKeyType(0x49), --OSKEY_I
    J = Native.ConvertOsKeyType(0x4A), --OSKEY_J
    K = Native.ConvertOsKeyType(0x4B), --OSKEY_K
    L = Native.ConvertOsKeyType(0x4C), --OSKEY_L
    M = Native.ConvertOsKeyType(0x4D), --OSKEY_M
    N = Native.ConvertOsKeyType(0x4E), --OSKEY_N
    O = Native.ConvertOsKeyType(0x4F), --OSKEY_O
    P = Native.ConvertOsKeyType(0x50), --OSKEY_P
    Q = Native.ConvertOsKeyType(0x51), --OSKEY_Q
    R = Native.ConvertOsKeyType(0x52), --OSKEY_R
    S = Native.ConvertOsKeyType(0x53), --OSKEY_S
    T = Native.ConvertOsKeyType(0x54), --OSKEY_T
    U = Native.ConvertOsKeyType(0x55), --OSKEY_U
    V = Native.ConvertOsKeyType(0x56), --OSKEY_V
    W = Native.ConvertOsKeyType(0x57), --OSKEY_W
    X = Native.ConvertOsKeyType(0x58), --OSKEY_X
    Y = Native.ConvertOsKeyType(0x59), --OSKEY_Y
    Z = Native.ConvertOsKeyType(0x5A), --OSKEY_Z
    Lmeta = Native.ConvertOsKeyType(0x5B), --OSKEY_LMETA
    Rmeta = Native.ConvertOsKeyType(0x5C), --OSKEY_RMETA
    Apps = Native.ConvertOsKeyType(0x5D), --OSKEY_APPS
    Sleep = Native.ConvertOsKeyType(0x5F), --OSKEY_SLEEP
    Numpad0 = Native.ConvertOsKeyType(0x60), --OSKEY_NUMPAD0
    Numpad1 = Native.ConvertOsKeyType(0x61), --OSKEY_NUMPAD1
    Numpad2 = Native.ConvertOsKeyType(0x62), --OSKEY_NUMPAD2
    Numpad3 = Native.ConvertOsKeyType(0x63), --OSKEY_NUMPAD3
    Numpad4 = Native.ConvertOsKeyType(0x64), --OSKEY_NUMPAD4
    Numpad5 = Native.ConvertOsKeyType(0x65), --OSKEY_NUMPAD5
    Numpad6 = Native.ConvertOsKeyType(0x66), --OSKEY_NUMPAD6
    Numpad7 = Native.ConvertOsKeyType(0x67), --OSKEY_NUMPAD7
    Numpad8 = Native.ConvertOsKeyType(0x68), --OSKEY_NUMPAD8
    Numpad9 = Native.ConvertOsKeyType(0x69), --OSKEY_NUMPAD9
    Multiply = Native.ConvertOsKeyType(0x6A), --OSKEY_MULTIPLY
    Add = Native.ConvertOsKeyType(0x6B), --OSKEY_ADD
    Separator = Native.ConvertOsKeyType(0x6C), --OSKEY_SEPARATOR
    Subtract = Native.ConvertOsKeyType(0x6D), --OSKEY_SUBTRACT
    Decimal = Native.ConvertOsKeyType(0x6E), --OSKEY_DECIMAL
    Divide = Native.ConvertOsKeyType(0x6F), --OSKEY_DIVIDE
    F1 = Native.ConvertOsKeyType(0x70), --OSKEY_F1
    F2 = Native.ConvertOsKeyType(0x71), --OSKEY_F2
    F3 = Native.ConvertOsKeyType(0x72), --OSKEY_F3
    F4 = Native.ConvertOsKeyType(0x73), --OSKEY_F4
    F5 = Native.ConvertOsKeyType(0x74), --OSKEY_F5
    F6 = Native.ConvertOsKeyType(0x75), --OSKEY_F6
    F7 = Native.ConvertOsKeyType(0x76), --OSKEY_F7
    F8 = Native.ConvertOsKeyType(0x77), --OSKEY_F8
    F9 = Native.ConvertOsKeyType(0x78), --OSKEY_F9
    F10 = Native.ConvertOsKeyType(0x79), --OSKEY_F10
    F11 = Native.ConvertOsKeyType(0x7A), --OSKEY_F11
    F12 = Native.ConvertOsKeyType(0x7B), --OSKEY_F12
    F13 = Native.ConvertOsKeyType(0x7C), --OSKEY_F13
    F14 = Native.ConvertOsKeyType(0x7D), --OSKEY_F14
    F15 = Native.ConvertOsKeyType(0x7E), --OSKEY_F15
    F16 = Native.ConvertOsKeyType(0x7F), --OSKEY_F16
    F17 = Native.ConvertOsKeyType(0x80), --OSKEY_F17
    F18 = Native.ConvertOsKeyType(0x81), --OSKEY_F18
    F19 = Native.ConvertOsKeyType(0x82), --OSKEY_F19
    F20 = Native.ConvertOsKeyType(0x83), --OSKEY_F20
    F21 = Native.ConvertOsKeyType(0x84), --OSKEY_F21
    F22 = Native.ConvertOsKeyType(0x85), --OSKEY_F22
    F23 = Native.ConvertOsKeyType(0x86), --OSKEY_F23
    F24 = Native.ConvertOsKeyType(0x87), --OSKEY_F24
    Numlock = Native.ConvertOsKeyType(0x90), --OSKEY_NUMLOCK
    Scrolllock = Native.ConvertOsKeyType(0x91), --OSKEY_SCROLLLOCK
    OemNecEqual = Native.ConvertOsKeyType(0x92), --OSKEY_OEM_NEC_EQUAL
    OemFjJisho = Native.ConvertOsKeyType(0x92), --OSKEY_OEM_FJ_JISHO
    OemFjMasshou = Native.ConvertOsKeyType(0x93), --OSKEY_OEM_FJ_MASSHOU
    OemFjTouroku = Native.ConvertOsKeyType(0x94), --OSKEY_OEM_FJ_TOUROKU
    OemFjLoya = Native.ConvertOsKeyType(0x95), --OSKEY_OEM_FJ_LOYA
    OemFjRoya = Native.ConvertOsKeyType(0x96), --OSKEY_OEM_FJ_ROYA
    Lshift = Native.ConvertOsKeyType(0xA0), --OSKEY_LSHIFT
    Rshift = Native.ConvertOsKeyType(0xA1), --OSKEY_RSHIFT
    Lcontrol = Native.ConvertOsKeyType(0xA2), --OSKEY_LCONTROL
    Rcontrol = Native.ConvertOsKeyType(0xA3), --OSKEY_RCONTROL
    Lalt = Native.ConvertOsKeyType(0xA4), --OSKEY_LALT
    Ralt = Native.ConvertOsKeyType(0xA5), --OSKEY_RALT
    BrowserBack = Native.ConvertOsKeyType(0xA6), --OSKEY_BROWSER_BACK
    BrowserForward = Native.ConvertOsKeyType(0xA7), --OSKEY_BROWSER_FORWARD
    BrowserRefresh = Native.ConvertOsKeyType(0xA8), --OSKEY_BROWSER_REFRESH
    BrowserStop = Native.ConvertOsKeyType(0xA9), --OSKEY_BROWSER_STOP
    BrowserSearch = Native.ConvertOsKeyType(0xAA), --OSKEY_BROWSER_SEARCH
    BrowserFavorites = Native.ConvertOsKeyType(0xAB), --OSKEY_BROWSER_FAVORITES
    BrowserHome = Native.ConvertOsKeyType(0xAC), --OSKEY_BROWSER_HOME
    VolumeMute = Native.ConvertOsKeyType(0xAD), --OSKEY_VOLUME_MUTE
    VolumeDown = Native.ConvertOsKeyType(0xAE), --OSKEY_VOLUME_DOWN
    VolumeUp = Native.ConvertOsKeyType(0xAF), --OSKEY_VOLUME_UP
    MediaNextTrack = Native.ConvertOsKeyType(0xB0), --OSKEY_MEDIA_NEXT_TRACK
    MediaPrevTrack = Native.ConvertOsKeyType(0xB1), --OSKEY_MEDIA_PREV_TRACK
    MediaStop = Native.ConvertOsKeyType(0xB2), --OSKEY_MEDIA_STOP
    MediaPlayPause = Native.ConvertOsKeyType(0xB3), --OSKEY_MEDIA_PLAY_PAUSE
    LaunchMail = Native.ConvertOsKeyType(0xB4), --OSKEY_LAUNCH_MAIL
    LaunchMediaSelect = Native.ConvertOsKeyType(0xB5), --OSKEY_LAUNCH_MEDIA_SELECT
    LaunchApp1 = Native.ConvertOsKeyType(0xB6), --OSKEY_LAUNCH_APP1
    LaunchApp2 = Native.ConvertOsKeyType(0xB7), --OSKEY_LAUNCH_APP2
    Oem1 = Native.ConvertOsKeyType(0xBA), --OSKEY_OEM_1
    OemPlus = Native.ConvertOsKeyType(0xBB), --OSKEY_OEM_PLUS
    OemComma = Native.ConvertOsKeyType(0xBC), --OSKEY_OEM_COMMA
    OemMinus = Native.ConvertOsKeyType(0xBD), --OSKEY_OEM_MINUS
    OemPeriod = Native.ConvertOsKeyType(0xBE), --OSKEY_OEM_PERIOD
    Oem2 = Native.ConvertOsKeyType(0xBF), --OSKEY_OEM_2
    Oem3 = Native.ConvertOsKeyType(0xC0), --OSKEY_OEM_3
    Oem4 = Native.ConvertOsKeyType(0xDB), --OSKEY_OEM_4
    Oem5 = Native.ConvertOsKeyType(0xDC), --OSKEY_OEM_5
    Oem6 = Native.ConvertOsKeyType(0xDD), --OSKEY_OEM_6
    Oem7 = Native.ConvertOsKeyType(0xDE), --OSKEY_OEM_7
    Oem8 = Native.ConvertOsKeyType(0xDF), --OSKEY_OEM_8
    OemAx = Native.ConvertOsKeyType(0xE1), --OSKEY_OEM_AX
    Oem102 = Native.ConvertOsKeyType(0xE2), --OSKEY_OEM_102
    IcoHelp = Native.ConvertOsKeyType(0xE3), --OSKEY_ICO_HELP
    Ico00 = Native.ConvertOsKeyType(0xE4), --OSKEY_ICO_00
    Processkey = Native.ConvertOsKeyType(0xE5), --OSKEY_PROCESSKEY
    IcoClear = Native.ConvertOsKeyType(0xE6), --OSKEY_ICO_CLEAR
    Packet = Native.ConvertOsKeyType(0xE7), --OSKEY_PACKET
    OemReset = Native.ConvertOsKeyType(0xE9), --OSKEY_OEM_RESET
    OemJump = Native.ConvertOsKeyType(0xEA), --OSKEY_OEM_JUMP
    OemPa1 = Native.ConvertOsKeyType(0xEB), --OSKEY_OEM_PA1
    OemPa2 = Native.ConvertOsKeyType(0xEC), --OSKEY_OEM_PA2
    OemPa3 = Native.ConvertOsKeyType(0xED), --OSKEY_OEM_PA3
    OemWsctrl = Native.ConvertOsKeyType(0xEE), --OSKEY_OEM_WSCTRL
    OemCusel = Native.ConvertOsKeyType(0xEF), --OSKEY_OEM_CUSEL
    OemAttn = Native.ConvertOsKeyType(0xF0), --OSKEY_OEM_ATTN
    OemFinish = Native.ConvertOsKeyType(0xF1), --OSKEY_OEM_FINISH
    OemCopy = Native.ConvertOsKeyType(0xF2), --OSKEY_OEM_COPY
    OemAuto = Native.ConvertOsKeyType(0xF3), --OSKEY_OEM_AUTO
    OemEnlw = Native.ConvertOsKeyType(0xF4), --OSKEY_OEM_ENLW
    OemBacktab = Native.ConvertOsKeyType(0xF5), --OSKEY_OEM_BACKTAB
    Attn = Native.ConvertOsKeyType(0xF6), --OSKEY_ATTN
    Crsel = Native.ConvertOsKeyType(0xF7), --OSKEY_CRSEL
    Exsel = Native.ConvertOsKeyType(0xF8), --OSKEY_EXSEL
    Ereof = Native.ConvertOsKeyType(0xF9), --OSKEY_EREOF
    Play = Native.ConvertOsKeyType(0xFA), --OSKEY_PLAY
    Zoom = Native.ConvertOsKeyType(0xFB), --OSKEY_ZOOM
    Noname = Native.ConvertOsKeyType(0xFC), --OSKEY_NONAME
    Pa1 = Native.ConvertOsKeyType(0xFD), --OSKEY_PA1
    OemClear = Native.ConvertOsKeyType(0xFE), --OSKEY_OEM_CLEAR
}
return OsKeyType]]

P['lib/stdlib/enum/pathingflag.lua'] = [[local Native = require('lib.stdlib.native')

---@class PathingFlag
local PathingFlag = {
    Unwalkable = Native.ConvertPathingFlag(2), --PATHING_FLAG_UNWALKABLE
    Unflyable = Native.ConvertPathingFlag(4), --PATHING_FLAG_UNFLYABLE
    Unbuildable = Native.ConvertPathingFlag(8), --PATHING_FLAG_UNBUILDABLE
    Unpeonharvest = Native.ConvertPathingFlag(16), --PATHING_FLAG_UNPEONHARVEST
    Blighted = Native.ConvertPathingFlag(32), --PATHING_FLAG_BLIGHTED
    Unfloatable = Native.ConvertPathingFlag(64), --PATHING_FLAG_UNFLOATABLE
    Unamphibious = Native.ConvertPathingFlag(128), --PATHING_FLAG_UNAMPHIBIOUS
    Unitemplacable = Native.ConvertPathingFlag(256), --PATHING_FLAG_UNITEMPLACABLE
}
return PathingFlag]]

P['lib/stdlib/enum/pathingtype.lua'] = [[local Native = require('lib.stdlib.native')

---@class PathingType
local PathingType = {
    Any = Native.ConvertPathingType(0), --PATHING_TYPE_ANY
    Walkability = Native.ConvertPathingType(1), --PATHING_TYPE_WALKABILITY
    Flyability = Native.ConvertPathingType(2), --PATHING_TYPE_FLYABILITY
    Buildability = Native.ConvertPathingType(3), --PATHING_TYPE_BUILDABILITY
    Peonharvestpathing = Native.ConvertPathingType(4), --PATHING_TYPE_PEONHARVESTPATHING
    Blightpathing = Native.ConvertPathingType(5), --PATHING_TYPE_BLIGHTPATHING
    Floatability = Native.ConvertPathingType(6), --PATHING_TYPE_FLOATABILITY
    Amphibiouspathing = Native.ConvertPathingType(7), --PATHING_TYPE_AMPHIBIOUSPATHING
}
return PathingType]]

P['lib/stdlib/enum/placement.lua'] = [[local Native = require('lib.stdlib.native')

---@class Placement
local Placement = {
    Random = Native.ConvertPlacement(0), --MAP_PLACEMENT_RANDOM
    Fixed = Native.ConvertPlacement(1), --MAP_PLACEMENT_FIXED
    UseMapSettings = Native.ConvertPlacement(2), --MAP_PLACEMENT_USE_MAP_SETTINGS
    TeamsTogether = Native.ConvertPlacement(3), --MAP_PLACEMENT_TEAMS_TOGETHER
}
return Placement]]

P['lib/stdlib/enum/playercolor.lua'] = [[local Native = require('lib.stdlib.native')

---@class PlayerColor
local PlayerColor = {
    Red = Native.ConvertPlayerColor(0), --PLAYER_COLOR_RED
    Blue = Native.ConvertPlayerColor(1), --PLAYER_COLOR_BLUE
    Cyan = Native.ConvertPlayerColor(2), --PLAYER_COLOR_CYAN
    Purple = Native.ConvertPlayerColor(3), --PLAYER_COLOR_PURPLE
    Yellow = Native.ConvertPlayerColor(4), --PLAYER_COLOR_YELLOW
    Orange = Native.ConvertPlayerColor(5), --PLAYER_COLOR_ORANGE
    Green = Native.ConvertPlayerColor(6), --PLAYER_COLOR_GREEN
    Pink = Native.ConvertPlayerColor(7), --PLAYER_COLOR_PINK
    LightGray = Native.ConvertPlayerColor(8), --PLAYER_COLOR_LIGHT_GRAY
    LightBlue = Native.ConvertPlayerColor(9), --PLAYER_COLOR_LIGHT_BLUE
    Aqua = Native.ConvertPlayerColor(10), --PLAYER_COLOR_AQUA
    Brown = Native.ConvertPlayerColor(11), --PLAYER_COLOR_BROWN
    Maroon = Native.ConvertPlayerColor(12), --PLAYER_COLOR_MAROON
    Navy = Native.ConvertPlayerColor(13), --PLAYER_COLOR_NAVY
    Turquoise = Native.ConvertPlayerColor(14), --PLAYER_COLOR_TURQUOISE
    Violet = Native.ConvertPlayerColor(15), --PLAYER_COLOR_VIOLET
    Wheat = Native.ConvertPlayerColor(16), --PLAYER_COLOR_WHEAT
    Peach = Native.ConvertPlayerColor(17), --PLAYER_COLOR_PEACH
    Mint = Native.ConvertPlayerColor(18), --PLAYER_COLOR_MINT
    Lavender = Native.ConvertPlayerColor(19), --PLAYER_COLOR_LAVENDER
    Coal = Native.ConvertPlayerColor(20), --PLAYER_COLOR_COAL
    Snow = Native.ConvertPlayerColor(21), --PLAYER_COLOR_SNOW
    Emerald = Native.ConvertPlayerColor(22), --PLAYER_COLOR_EMERALD
    Peanut = Native.ConvertPlayerColor(23), --PLAYER_COLOR_PEANUT
}
return PlayerColor]]

P['lib/stdlib/enum/playerevent.lua'] = [[local Native = require('lib.stdlib.native')

---@class PlayerEvent
local PlayerEvent = {
    StateLimit = Native.ConvertPlayerEvent(11), --EVENT_PLAYER_STATE_LIMIT
    AllianceChanged = Native.ConvertPlayerEvent(12), --EVENT_PLAYER_ALLIANCE_CHANGED
    Defeat = Native.ConvertPlayerEvent(13), --EVENT_PLAYER_DEFEAT
    Victory = Native.ConvertPlayerEvent(14), --EVENT_PLAYER_VICTORY
    Leave = Native.ConvertPlayerEvent(15), --EVENT_PLAYER_LEAVE
    Chat = Native.ConvertPlayerEvent(16), --EVENT_PLAYER_CHAT
    EndCinematic = Native.ConvertPlayerEvent(17), --EVENT_PLAYER_END_CINEMATIC
    ArrowLeftDown = Native.ConvertPlayerEvent(261), --EVENT_PLAYER_ARROW_LEFT_DOWN
    ArrowLeftUp = Native.ConvertPlayerEvent(262), --EVENT_PLAYER_ARROW_LEFT_UP
    ArrowRightDown = Native.ConvertPlayerEvent(263), --EVENT_PLAYER_ARROW_RIGHT_DOWN
    ArrowRightUp = Native.ConvertPlayerEvent(264), --EVENT_PLAYER_ARROW_RIGHT_UP
    ArrowDownDown = Native.ConvertPlayerEvent(265), --EVENT_PLAYER_ARROW_DOWN_DOWN
    ArrowDownUp = Native.ConvertPlayerEvent(266), --EVENT_PLAYER_ARROW_DOWN_UP
    ArrowUpDown = Native.ConvertPlayerEvent(267), --EVENT_PLAYER_ARROW_UP_DOWN
    ArrowUpUp = Native.ConvertPlayerEvent(268), --EVENT_PLAYER_ARROW_UP_UP
    MouseDown = Native.ConvertPlayerEvent(305), --EVENT_PLAYER_MOUSE_DOWN
    MouseUp = Native.ConvertPlayerEvent(306), --EVENT_PLAYER_MOUSE_UP
    MouseMove = Native.ConvertPlayerEvent(307), --EVENT_PLAYER_MOUSE_MOVE
    SyncData = Native.ConvertPlayerEvent(309), --EVENT_PLAYER_SYNC_DATA
    Key = Native.ConvertPlayerEvent(311), --EVENT_PLAYER_KEY
    KeyDown = Native.ConvertPlayerEvent(312), --EVENT_PLAYER_KEY_DOWN
    KeyUp = Native.ConvertPlayerEvent(313), --EVENT_PLAYER_KEY_UP
}
return PlayerEvent]]

P['lib/stdlib/enum/playergameresult.lua'] = [[local Native = require('lib.stdlib.native')

---@class PlayerGameResult
local PlayerGameResult = {
    Victory = Native.ConvertPlayerGameResult(0), --PLAYER_GAME_RESULT_VICTORY
    Defeat = Native.ConvertPlayerGameResult(1), --PLAYER_GAME_RESULT_DEFEAT
    Tie = Native.ConvertPlayerGameResult(2), --PLAYER_GAME_RESULT_TIE
    Neutral = Native.ConvertPlayerGameResult(3), --PLAYER_GAME_RESULT_NEUTRAL
}
return PlayerGameResult]]

P['lib/stdlib/enum/playerscore.lua'] = [[local Native = require('lib.stdlib.native')

---@class PlayerScore
local PlayerScore = {
    UnitsTrained = Native.ConvertPlayerScore(0), --PLAYER_SCORE_UNITS_TRAINED
    UnitsKilled = Native.ConvertPlayerScore(1), --PLAYER_SCORE_UNITS_KILLED
    StructBuilt = Native.ConvertPlayerScore(2), --PLAYER_SCORE_STRUCT_BUILT
    StructRazed = Native.ConvertPlayerScore(3), --PLAYER_SCORE_STRUCT_RAZED
    TechPercent = Native.ConvertPlayerScore(4), --PLAYER_SCORE_TECH_PERCENT
    FoodMaxprod = Native.ConvertPlayerScore(5), --PLAYER_SCORE_FOOD_MAXPROD
    FoodMaxused = Native.ConvertPlayerScore(6), --PLAYER_SCORE_FOOD_MAXUSED
    HeroesKilled = Native.ConvertPlayerScore(7), --PLAYER_SCORE_HEROES_KILLED
    ItemsGained = Native.ConvertPlayerScore(8), --PLAYER_SCORE_ITEMS_GAINED
    MercsHired = Native.ConvertPlayerScore(9), --PLAYER_SCORE_MERCS_HIRED
    GoldMinedTotal = Native.ConvertPlayerScore(10), --PLAYER_SCORE_GOLD_MINED_TOTAL
    GoldMinedUpkeep = Native.ConvertPlayerScore(11), --PLAYER_SCORE_GOLD_MINED_UPKEEP
    GoldLostUpkeep = Native.ConvertPlayerScore(12), --PLAYER_SCORE_GOLD_LOST_UPKEEP
    GoldLostTax = Native.ConvertPlayerScore(13), --PLAYER_SCORE_GOLD_LOST_TAX
    GoldGiven = Native.ConvertPlayerScore(14), --PLAYER_SCORE_GOLD_GIVEN
    GoldReceived = Native.ConvertPlayerScore(15), --PLAYER_SCORE_GOLD_RECEIVED
    LumberTotal = Native.ConvertPlayerScore(16), --PLAYER_SCORE_LUMBER_TOTAL
    LumberLostUpkeep = Native.ConvertPlayerScore(17), --PLAYER_SCORE_LUMBER_LOST_UPKEEP
    LumberLostTax = Native.ConvertPlayerScore(18), --PLAYER_SCORE_LUMBER_LOST_TAX
    LumberGiven = Native.ConvertPlayerScore(19), --PLAYER_SCORE_LUMBER_GIVEN
    LumberReceived = Native.ConvertPlayerScore(20), --PLAYER_SCORE_LUMBER_RECEIVED
    UnitTotal = Native.ConvertPlayerScore(21), --PLAYER_SCORE_UNIT_TOTAL
    HeroTotal = Native.ConvertPlayerScore(22), --PLAYER_SCORE_HERO_TOTAL
    ResourceTotal = Native.ConvertPlayerScore(23), --PLAYER_SCORE_RESOURCE_TOTAL
    Total = Native.ConvertPlayerScore(24), --PLAYER_SCORE_TOTAL
}
return PlayerScore]]

P['lib/stdlib/enum/playerslotstate.lua'] = [[local Native = require('lib.stdlib.native')

---@class PlayerSlotState
local PlayerSlotState = {
    Empty = Native.ConvertPlayerSlotState(0), --PLAYER_SLOT_STATE_EMPTY
    Playing = Native.ConvertPlayerSlotState(1), --PLAYER_SLOT_STATE_PLAYING
    Left = Native.ConvertPlayerSlotState(2), --PLAYER_SLOT_STATE_LEFT
}
return PlayerSlotState]]

P['lib/stdlib/enum/playerstate.lua'] = [[local Native = require('lib.stdlib.native')

---@class PlayerState
local PlayerState = {
    GameResult = Native.ConvertPlayerState(0), --PLAYER_STATE_GAME_RESULT
    ResourceGold = Native.ConvertPlayerState(1), --PLAYER_STATE_RESOURCE_GOLD
    ResourceLumber = Native.ConvertPlayerState(2), --PLAYER_STATE_RESOURCE_LUMBER
    ResourceHeroTokens = Native.ConvertPlayerState(3), --PLAYER_STATE_RESOURCE_HERO_TOKENS
    ResourceFoodCap = Native.ConvertPlayerState(4), --PLAYER_STATE_RESOURCE_FOOD_CAP
    ResourceFoodUsed = Native.ConvertPlayerState(5), --PLAYER_STATE_RESOURCE_FOOD_USED
    FoodCapCeiling = Native.ConvertPlayerState(6), --PLAYER_STATE_FOOD_CAP_CEILING
    GivesBounty = Native.ConvertPlayerState(7), --PLAYER_STATE_GIVES_BOUNTY
    AlliedVictory = Native.ConvertPlayerState(8), --PLAYER_STATE_ALLIED_VICTORY
    Placed = Native.ConvertPlayerState(9), --PLAYER_STATE_PLACED
    ObserverOnDeath = Native.ConvertPlayerState(10), --PLAYER_STATE_OBSERVER_ON_DEATH
    Observer = Native.ConvertPlayerState(11), --PLAYER_STATE_OBSERVER
    Unfollowable = Native.ConvertPlayerState(12), --PLAYER_STATE_UNFOLLOWABLE
    GoldUpkeepRate = Native.ConvertPlayerState(13), --PLAYER_STATE_GOLD_UPKEEP_RATE
    LumberUpkeepRate = Native.ConvertPlayerState(14), --PLAYER_STATE_LUMBER_UPKEEP_RATE
    GoldGathered = Native.ConvertPlayerState(15), --PLAYER_STATE_GOLD_GATHERED
    LumberGathered = Native.ConvertPlayerState(16), --PLAYER_STATE_LUMBER_GATHERED
    NoCreepSleep = Native.ConvertPlayerState(25), --PLAYER_STATE_NO_CREEP_SLEEP
}
return PlayerState]]

P['lib/stdlib/enum/playerunitevent.lua'] = [[local Native = require('lib.stdlib.native')

---@class PlayerUnitEvent
local PlayerUnitEvent = {
    UnitAttacked = Native.ConvertPlayerUnitEvent(18), --EVENT_PLAYER_UNIT_ATTACKED
    UnitRescued = Native.ConvertPlayerUnitEvent(19), --EVENT_PLAYER_UNIT_RESCUED
    UnitDeath = Native.ConvertPlayerUnitEvent(20), --EVENT_PLAYER_UNIT_DEATH
    UnitDecay = Native.ConvertPlayerUnitEvent(21), --EVENT_PLAYER_UNIT_DECAY
    UnitDetected = Native.ConvertPlayerUnitEvent(22), --EVENT_PLAYER_UNIT_DETECTED
    UnitHidden = Native.ConvertPlayerUnitEvent(23), --EVENT_PLAYER_UNIT_HIDDEN
    UnitSelected = Native.ConvertPlayerUnitEvent(24), --EVENT_PLAYER_UNIT_SELECTED
    UnitDeselected = Native.ConvertPlayerUnitEvent(25), --EVENT_PLAYER_UNIT_DESELECTED
    UnitConstructStart = Native.ConvertPlayerUnitEvent(26), --EVENT_PLAYER_UNIT_CONSTRUCT_START
    UnitConstructCancel = Native.ConvertPlayerUnitEvent(27), --EVENT_PLAYER_UNIT_CONSTRUCT_CANCEL
    UnitConstructFinish = Native.ConvertPlayerUnitEvent(28), --EVENT_PLAYER_UNIT_CONSTRUCT_FINISH
    UnitUpgradeStart = Native.ConvertPlayerUnitEvent(29), --EVENT_PLAYER_UNIT_UPGRADE_START
    UnitUpgradeCancel = Native.ConvertPlayerUnitEvent(30), --EVENT_PLAYER_UNIT_UPGRADE_CANCEL
    UnitUpgradeFinish = Native.ConvertPlayerUnitEvent(31), --EVENT_PLAYER_UNIT_UPGRADE_FINISH
    UnitTrainStart = Native.ConvertPlayerUnitEvent(32), --EVENT_PLAYER_UNIT_TRAIN_START
    UnitTrainCancel = Native.ConvertPlayerUnitEvent(33), --EVENT_PLAYER_UNIT_TRAIN_CANCEL
    UnitTrainFinish = Native.ConvertPlayerUnitEvent(34), --EVENT_PLAYER_UNIT_TRAIN_FINISH
    UnitResearchStart = Native.ConvertPlayerUnitEvent(35), --EVENT_PLAYER_UNIT_RESEARCH_START
    UnitResearchCancel = Native.ConvertPlayerUnitEvent(36), --EVENT_PLAYER_UNIT_RESEARCH_CANCEL
    UnitResearchFinish = Native.ConvertPlayerUnitEvent(37), --EVENT_PLAYER_UNIT_RESEARCH_FINISH
    UnitIssuedOrder = Native.ConvertPlayerUnitEvent(38), --EVENT_PLAYER_UNIT_ISSUED_ORDER
    UnitIssuedPointOrder = Native.ConvertPlayerUnitEvent(39), --EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER
    UnitIssuedTargetOrder = Native.ConvertPlayerUnitEvent(40), --EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER
    UnitIssuedUnitOrder = Native.ConvertPlayerUnitEvent(40), --EVENT_PLAYER_UNIT_ISSUED_UNIT_ORDER
    HeroLevel = Native.ConvertPlayerUnitEvent(41), --EVENT_PLAYER_HERO_LEVEL
    HeroSkill = Native.ConvertPlayerUnitEvent(42), --EVENT_PLAYER_HERO_SKILL
    HeroRevivable = Native.ConvertPlayerUnitEvent(43), --EVENT_PLAYER_HERO_REVIVABLE
    HeroReviveStart = Native.ConvertPlayerUnitEvent(44), --EVENT_PLAYER_HERO_REVIVE_START
    HeroReviveCancel = Native.ConvertPlayerUnitEvent(45), --EVENT_PLAYER_HERO_REVIVE_CANCEL
    HeroReviveFinish = Native.ConvertPlayerUnitEvent(46), --EVENT_PLAYER_HERO_REVIVE_FINISH
    UnitSummon = Native.ConvertPlayerUnitEvent(47), --EVENT_PLAYER_UNIT_SUMMON
    UnitDropItem = Native.ConvertPlayerUnitEvent(48), --EVENT_PLAYER_UNIT_DROP_ITEM
    UnitPickupItem = Native.ConvertPlayerUnitEvent(49), --EVENT_PLAYER_UNIT_PICKUP_ITEM
    UnitUseItem = Native.ConvertPlayerUnitEvent(50), --EVENT_PLAYER_UNIT_USE_ITEM
    UnitLoaded = Native.ConvertPlayerUnitEvent(51), --EVENT_PLAYER_UNIT_LOADED
    UnitDamaged = Native.ConvertPlayerUnitEvent(308), --EVENT_PLAYER_UNIT_DAMAGED
    UnitDamaging = Native.ConvertPlayerUnitEvent(315), --EVENT_PLAYER_UNIT_DAMAGING
    UnitSell = Native.ConvertPlayerUnitEvent(269), --EVENT_PLAYER_UNIT_SELL
    UnitChangeOwner = Native.ConvertPlayerUnitEvent(270), --EVENT_PLAYER_UNIT_CHANGE_OWNER
    UnitSellItem = Native.ConvertPlayerUnitEvent(271), --EVENT_PLAYER_UNIT_SELL_ITEM
    UnitSpellChannel = Native.ConvertPlayerUnitEvent(272), --EVENT_PLAYER_UNIT_SPELL_CHANNEL
    UnitSpellCast = Native.ConvertPlayerUnitEvent(273), --EVENT_PLAYER_UNIT_SPELL_CAST
    UnitSpellEffect = Native.ConvertPlayerUnitEvent(274), --EVENT_PLAYER_UNIT_SPELL_EFFECT
    UnitSpellFinish = Native.ConvertPlayerUnitEvent(275), --EVENT_PLAYER_UNIT_SPELL_FINISH
    UnitSpellEndcast = Native.ConvertPlayerUnitEvent(276), --EVENT_PLAYER_UNIT_SPELL_ENDCAST
    UnitPawnItem = Native.ConvertPlayerUnitEvent(277), --EVENT_PLAYER_UNIT_PAWN_ITEM
}
return PlayerUnitEvent]]

P['lib/stdlib/enum/race.lua'] = [[local Native = require('lib.stdlib.native')

---@class Race
local Race = {
    Human = Native.ConvertRace(1), --RACE_HUMAN
    Orc = Native.ConvertRace(2), --RACE_ORC
    Undead = Native.ConvertRace(3), --RACE_UNDEAD
    Nightelf = Native.ConvertRace(4), --RACE_NIGHTELF
    Demon = Native.ConvertRace(5), --RACE_DEMON
    Other = Native.ConvertRace(7), --RACE_OTHER
}
return Race]]

P['lib/stdlib/enum/racepreference.lua'] = [[local Native = require('lib.stdlib.native')

---@class RacePreference
local RacePreference = {
    Human = Native.ConvertRacePref(1), --RACE_PREF_HUMAN
    Orc = Native.ConvertRacePref(2), --RACE_PREF_ORC
    Nightelf = Native.ConvertRacePref(4), --RACE_PREF_NIGHTELF
    Undead = Native.ConvertRacePref(8), --RACE_PREF_UNDEAD
    Demon = Native.ConvertRacePref(16), --RACE_PREF_DEMON
    Random = Native.ConvertRacePref(32), --RACE_PREF_RANDOM
    UserSelectable = Native.ConvertRacePref(64), --RACE_PREF_USER_SELECTABLE
}
return RacePreference]]

P['lib/stdlib/enum/raritycontrol.lua'] = [[local Native = require('lib.stdlib.native')

---@class RarityControl
local RarityControl = {
    Frequent = Native.ConvertRarityControl(0), --RARITY_FREQUENT
    Rare = Native.ConvertRarityControl(1), --RARITY_RARE
}
return RarityControl]]

P['lib/stdlib/enum/regentype.lua'] = [[local Native = require('lib.stdlib.native')

---@class RegenType
local RegenType = {
    None = Native.ConvertRegenType(0), --REGENERATION_TYPE_NONE
    Always = Native.ConvertRegenType(1), --REGENERATION_TYPE_ALWAYS
    Blight = Native.ConvertRegenType(2), --REGENERATION_TYPE_BLIGHT
    Day = Native.ConvertRegenType(3), --REGENERATION_TYPE_DAY
    Night = Native.ConvertRegenType(4), --REGENERATION_TYPE_NIGHT
}
return RegenType]]

P['lib/stdlib/enum/replaceunitstatemethod.lua'] = [[-- replaceunitstatemethod.lua
-- @Author : Dencer (tdaddon@163.com)
-- @Link   : https://dengsir.github.io
-- @Date   : 7/1/2019, 9:33:18 PM

---@class ReplaceUnitStateMethod
local ReplaceUnitStateMethod = {
    Absolute = 0, --
    Relative = 1, --
    Defaults = 2, --
    Maximum = 3, --
}

return ReplaceUnitStateMethod]]

P['lib/stdlib/enum/soundtype.lua'] = [[local Native = require('lib.stdlib.native')

---@class SoundType
local SoundType = {
    Effect = Native.ConvertSoundType(0), --SOUND_TYPE_EFFECT
    EffectLooped = Native.ConvertSoundType(1), --SOUND_TYPE_EFFECT_LOOPED
}
return SoundType]]

P['lib/stdlib/enum/specialorder.lua'] = [[-- specialorder.lua
-- @Author : Dencer (tdaddon@163.com)
-- @Link   : https://dengsir.github.io
-- @Date   : 7/4/2019, 3:26:37 AM

-- From https://github.com/wurstscript/WurstStdlib2/blob/master/wurst/_wurst/assets/Orders.wurst
-- Credits Shadow Daemon for cj_order.j from cJass

---@class SpecialOrder
local SpecialOrder = {

    -- This is an order with no target that opens up the build menu of a unit that can build structures.
    buildmenu = 851994,
    -- 851976 (cancel): This is an order with no target that is like a click on a cancel button.
    -- We used to be able to catch cancel clicks with this id back then but this id doesn't seem to work any more.
    cancel = 851976,
    -- An item targeted order that move the target item to a certain inventory slot of the ordered hero.
    itemdrag00 = 852002,
    -- An item targeted order that move the target item to a certain inventory slot of the ordered hero.
    itemdrag01 = 852003,
    -- An item targeted order that move the target item to a certain inventory slot of the ordered hero.
    itemdrag02 = 852004,
    -- An item targeted order that move the target item to a certain inventory slot of the ordered hero.
    itemdrag03 = 852005,
    -- An item targeted order that move the target item to a certain inventory slot of the ordered hero.
    itemdrag04 = 852006,
    -- An item targeted order that move the target item to a certain inventory slot of the ordered hero.
    itemdrag05 = 852007,
    -- An order that will make the ordered hero use the item in a certain inventory slot.
    -- If it's an order with no target or object or point targeted depends on the type of item.
    itemuse00 = 852008,
    -- An order that will make the ordered hero use the item in a certain inventory slot.
    -- If it's an order with no target or object or point targeted depends on the type of item.
    itemuse01 = 852009,
    -- An order that will make the ordered hero use the item in a certain inventory slot.
    -- If it's an order with no target or object or point targeted depends on the type of item.
    itemuse02 = 852010,
    -- An order that will make the ordered hero use the item in a certain inventory slot.
    -- If it's an order with no target or object or point targeted depends on the type of item.
    itemuse03 = 852011,
    -- An order that will make the ordered hero use the item in a certain inventory slot.
    -- If it's an order with no target or object or point targeted depends on the type of item.
    itemuse04 = 852012,
    -- An order that will make the ordered hero use the item in a certain inventory slot.
    -- If it's an order with no target or object or point targeted depends on the type of item.
    itemuse05 = 852013,
    -- Order for AIaa ability, which blizzard made for tome of attack, but never used it. But it can actually change caster's base attack!
    tomeOfAttack = 852259,
    -- This is a point or object targeted order that is like a right click.
    smart = 851971,
    -- This is an order with no target that opens the skill menu of heroes.
    -- If it is issued for a normal unit with triggers it will black out the command card for this unit, the command card will revert to normal after reselecting the unit.
    skillmenu = 852000,
    -- This order is issued to units that get stunned by a spell, for example War Stomp (AOws).
    -- This is probably a hold position + hold fire order. The ordered unit will be unable to move and attack.
    stunned = 851973,
    wandOfIllusion = 852274,
}

return SpecialOrder]]

P['lib/stdlib/enum/startlocprio.lua'] = [[local Native = require('lib.stdlib.native')

---@class StartLocprio
local StartLocprio = {
    Low = Native.ConvertStartLocPrio(0), --MAP_LOC_PRIO_LOW
    High = Native.ConvertStartLocPrio(1), --MAP_LOC_PRIO_HIGH
    Not = Native.ConvertStartLocPrio(2), --MAP_LOC_PRIO_NOT
}
return StartLocprio]]

P['lib/stdlib/enum/subanimtype.lua'] = [[local Native = require('lib.stdlib.native')

---@class SubAnimType
local SubAnimType = {
    Rooted = Native.ConvertSubAnimType(11), --SUBANIM_TYPE_ROOTED
    AlternateEx = Native.ConvertSubAnimType(12), --SUBANIM_TYPE_ALTERNATE_EX
    Looping = Native.ConvertSubAnimType(13), --SUBANIM_TYPE_LOOPING
    Slam = Native.ConvertSubAnimType(14), --SUBANIM_TYPE_SLAM
    Throw = Native.ConvertSubAnimType(15), --SUBANIM_TYPE_THROW
    Spiked = Native.ConvertSubAnimType(16), --SUBANIM_TYPE_SPIKED
    Fast = Native.ConvertSubAnimType(17), --SUBANIM_TYPE_FAST
    Spin = Native.ConvertSubAnimType(18), --SUBANIM_TYPE_SPIN
    Ready = Native.ConvertSubAnimType(19), --SUBANIM_TYPE_READY
    Channel = Native.ConvertSubAnimType(20), --SUBANIM_TYPE_CHANNEL
    Defend = Native.ConvertSubAnimType(21), --SUBANIM_TYPE_DEFEND
    Victory = Native.ConvertSubAnimType(22), --SUBANIM_TYPE_VICTORY
    Turn = Native.ConvertSubAnimType(23), --SUBANIM_TYPE_TURN
    Left = Native.ConvertSubAnimType(24), --SUBANIM_TYPE_LEFT
    Right = Native.ConvertSubAnimType(25), --SUBANIM_TYPE_RIGHT
    Fire = Native.ConvertSubAnimType(26), --SUBANIM_TYPE_FIRE
    Flesh = Native.ConvertSubAnimType(27), --SUBANIM_TYPE_FLESH
    Hit = Native.ConvertSubAnimType(28), --SUBANIM_TYPE_HIT
    Wounded = Native.ConvertSubAnimType(29), --SUBANIM_TYPE_WOUNDED
    Light = Native.ConvertSubAnimType(30), --SUBANIM_TYPE_LIGHT
    Moderate = Native.ConvertSubAnimType(31), --SUBANIM_TYPE_MODERATE
    Severe = Native.ConvertSubAnimType(32), --SUBANIM_TYPE_SEVERE
    Critical = Native.ConvertSubAnimType(33), --SUBANIM_TYPE_CRITICAL
    Complete = Native.ConvertSubAnimType(34), --SUBANIM_TYPE_COMPLETE
    Gold = Native.ConvertSubAnimType(35), --SUBANIM_TYPE_GOLD
    Lumber = Native.ConvertSubAnimType(36), --SUBANIM_TYPE_LUMBER
    Work = Native.ConvertSubAnimType(37), --SUBANIM_TYPE_WORK
    Talk = Native.ConvertSubAnimType(38), --SUBANIM_TYPE_TALK
    First = Native.ConvertSubAnimType(39), --SUBANIM_TYPE_FIRST
    Second = Native.ConvertSubAnimType(40), --SUBANIM_TYPE_SECOND
    Third = Native.ConvertSubAnimType(41), --SUBANIM_TYPE_THIRD
    Fourth = Native.ConvertSubAnimType(42), --SUBANIM_TYPE_FOURTH
    Fifth = Native.ConvertSubAnimType(43), --SUBANIM_TYPE_FIFTH
    One = Native.ConvertSubAnimType(44), --SUBANIM_TYPE_ONE
    Two = Native.ConvertSubAnimType(45), --SUBANIM_TYPE_TWO
    Three = Native.ConvertSubAnimType(46), --SUBANIM_TYPE_THREE
    Four = Native.ConvertSubAnimType(47), --SUBANIM_TYPE_FOUR
    Five = Native.ConvertSubAnimType(48), --SUBANIM_TYPE_FIVE
    Small = Native.ConvertSubAnimType(49), --SUBANIM_TYPE_SMALL
    Medium = Native.ConvertSubAnimType(50), --SUBANIM_TYPE_MEDIUM
    Large = Native.ConvertSubAnimType(51), --SUBANIM_TYPE_LARGE
    Upgrade = Native.ConvertSubAnimType(52), --SUBANIM_TYPE_UPGRADE
    Drain = Native.ConvertSubAnimType(53), --SUBANIM_TYPE_DRAIN
    Fill = Native.ConvertSubAnimType(54), --SUBANIM_TYPE_FILL
    Chainlightning = Native.ConvertSubAnimType(55), --SUBANIM_TYPE_CHAINLIGHTNING
    Eattree = Native.ConvertSubAnimType(56), --SUBANIM_TYPE_EATTREE
    Puke = Native.ConvertSubAnimType(57), --SUBANIM_TYPE_PUKE
    Flail = Native.ConvertSubAnimType(58), --SUBANIM_TYPE_FLAIL
    Off = Native.ConvertSubAnimType(59), --SUBANIM_TYPE_OFF
    Swim = Native.ConvertSubAnimType(60), --SUBANIM_TYPE_SWIM
    Entangle = Native.ConvertSubAnimType(61), --SUBANIM_TYPE_ENTANGLE
    Berserk = Native.ConvertSubAnimType(62), --SUBANIM_TYPE_BERSERK
}
return SubAnimType]]

P['lib/stdlib/enum/targetflag.lua'] = [[local Native = require('lib.stdlib.native')

---@class TargetFlag
local TargetFlag = {
    None = Native.ConvertTargetFlag(1), --TARGET_FLAG_NONE
    Ground = Native.ConvertTargetFlag(2), --TARGET_FLAG_GROUND
    Air = Native.ConvertTargetFlag(4), --TARGET_FLAG_AIR
    Structure = Native.ConvertTargetFlag(8), --TARGET_FLAG_STRUCTURE
    Ward = Native.ConvertTargetFlag(16), --TARGET_FLAG_WARD
    Item = Native.ConvertTargetFlag(32), --TARGET_FLAG_ITEM
    Tree = Native.ConvertTargetFlag(64), --TARGET_FLAG_TREE
    Wall = Native.ConvertTargetFlag(128), --TARGET_FLAG_WALL
    Debris = Native.ConvertTargetFlag(256), --TARGET_FLAG_DEBRIS
    Decoration = Native.ConvertTargetFlag(512), --TARGET_FLAG_DECORATION
    Bridge = Native.ConvertTargetFlag(1024), --TARGET_FLAG_BRIDGE
}
return TargetFlag]]

P['lib/stdlib/enum/texmapflags.lua'] = [[local Native = require('lib.stdlib.native')

---@class TexmapFlags
local TexmapFlags = {
    None = Native.ConvertTexMapFlags(0), --TEXMAP_FLAG_NONE
    WrapU = Native.ConvertTexMapFlags(1), --TEXMAP_FLAG_WRAP_U
    WrapV = Native.ConvertTexMapFlags(2), --TEXMAP_FLAG_WRAP_V
    WrapUv = Native.ConvertTexMapFlags(3), --TEXMAP_FLAG_WRAP_UV
}
return TexmapFlags]]

P['lib/stdlib/enum/textaligntype.lua'] = [[local Native = require('lib.stdlib.native')

---@class TextAlignType
local TextAlignType = {
    Top = Native.ConvertTextAlignType(0), --TEXT_JUSTIFY_TOP
    Middle = Native.ConvertTextAlignType(1), --TEXT_JUSTIFY_MIDDLE
    Bottom = Native.ConvertTextAlignType(2), --TEXT_JUSTIFY_BOTTOM
    Left = Native.ConvertTextAlignType(3), --TEXT_JUSTIFY_LEFT
    Center = Native.ConvertTextAlignType(4), --TEXT_JUSTIFY_CENTER
    Right = Native.ConvertTextAlignType(5), --TEXT_JUSTIFY_RIGHT
}
return TextAlignType]]

P['lib/stdlib/enum/triggeraction.lua'] = [[local Native = require('lib.stdlib.native')

---@class TriggerAction
local TriggerAction = {
}
return TriggerAction]]

P['lib/stdlib/enum/unitbooleanfield.lua'] = [[local Native = require('lib.stdlib.native')

---@class UnitBooleanField
local UnitBooleanField = {
    Raisable = Native.ConvertUnitBooleanField(0x75726169), --UNIT_BF_RAISABLE
    Decayable = Native.ConvertUnitBooleanField(0x75646563), --UNIT_BF_DECAYABLE
    IsABuilding = Native.ConvertUnitBooleanField(0x75626467), --UNIT_BF_IS_A_BUILDING
    UseExtendedLineOfSight = Native.ConvertUnitBooleanField(0x756C6F73), --UNIT_BF_USE_EXTENDED_LINE_OF_SIGHT
    NeutralBuildingShowsMinimapIcon = Native.ConvertUnitBooleanField(0x756E626D), --UNIT_BF_NEUTRAL_BUILDING_SHOWS_MINIMAP_ICON
    HeroHideHeroInterfaceIcon = Native.ConvertUnitBooleanField(0x75686862), --UNIT_BF_HERO_HIDE_HERO_INTERFACE_ICON
    HeroHideHeroMinimapDisplay = Native.ConvertUnitBooleanField(0x7568686D), --UNIT_BF_HERO_HIDE_HERO_MINIMAP_DISPLAY
    HeroHideHeroDeathMessage = Native.ConvertUnitBooleanField(0x75686864), --UNIT_BF_HERO_HIDE_HERO_DEATH_MESSAGE
    HideMinimapDisplay = Native.ConvertUnitBooleanField(0x75686F6D), --UNIT_BF_HIDE_MINIMAP_DISPLAY
    ScaleProjectiles = Native.ConvertUnitBooleanField(0x75736362), --UNIT_BF_SCALE_PROJECTILES
    SelectionCircleOnWater = Native.ConvertUnitBooleanField(0x75736577), --UNIT_BF_SELECTION_CIRCLE_ON_WATER
    HasWaterShadow = Native.ConvertUnitBooleanField(0x75736872), --UNIT_BF_HAS_WATER_SHADOW
}
return UnitBooleanField]]

P['lib/stdlib/enum/unitcategory.lua'] = [[local Native = require('lib.stdlib.native')

---@class UnitCategory
local UnitCategory = {
    Giant = Native.ConvertUnitCategory(1), --UNIT_CATEGORY_GIANT
    Undead = Native.ConvertUnitCategory(2), --UNIT_CATEGORY_UNDEAD
    Summoned = Native.ConvertUnitCategory(4), --UNIT_CATEGORY_SUMMONED
    Mechanical = Native.ConvertUnitCategory(8), --UNIT_CATEGORY_MECHANICAL
    Peon = Native.ConvertUnitCategory(16), --UNIT_CATEGORY_PEON
    Sapper = Native.ConvertUnitCategory(32), --UNIT_CATEGORY_SAPPER
    Townhall = Native.ConvertUnitCategory(64), --UNIT_CATEGORY_TOWNHALL
    Ancient = Native.ConvertUnitCategory(128), --UNIT_CATEGORY_ANCIENT
    Neutral = Native.ConvertUnitCategory(256), --UNIT_CATEGORY_NEUTRAL
    Ward = Native.ConvertUnitCategory(512), --UNIT_CATEGORY_WARD
    Standon = Native.ConvertUnitCategory(1024), --UNIT_CATEGORY_STANDON
    Tauren = Native.ConvertUnitCategory(2048), --UNIT_CATEGORY_TAUREN
}
return UnitCategory]]

P['lib/stdlib/enum/unitevent.lua'] = [[local Native = require('lib.stdlib.native')

---@class UnitEvent
local UnitEvent = {
    Damaged = Native.ConvertUnitEvent(52), --EVENT_UNIT_DAMAGED
    Damaging = Native.ConvertUnitEvent(314), --EVENT_UNIT_DAMAGING
    Death = Native.ConvertUnitEvent(53), --EVENT_UNIT_DEATH
    Decay = Native.ConvertUnitEvent(54), --EVENT_UNIT_DECAY
    Detected = Native.ConvertUnitEvent(55), --EVENT_UNIT_DETECTED
    Hidden = Native.ConvertUnitEvent(56), --EVENT_UNIT_HIDDEN
    Selected = Native.ConvertUnitEvent(57), --EVENT_UNIT_SELECTED
    Deselected = Native.ConvertUnitEvent(58), --EVENT_UNIT_DESELECTED
    StateLimit = Native.ConvertUnitEvent(59), --EVENT_UNIT_STATE_LIMIT
    AcquiredTarget = Native.ConvertUnitEvent(60), --EVENT_UNIT_ACQUIRED_TARGET
    TargetInRange = Native.ConvertUnitEvent(61), --EVENT_UNIT_TARGET_IN_RANGE
    Attacked = Native.ConvertUnitEvent(62), --EVENT_UNIT_ATTACKED
    Rescued = Native.ConvertUnitEvent(63), --EVENT_UNIT_RESCUED
    ConstructCancel = Native.ConvertUnitEvent(64), --EVENT_UNIT_CONSTRUCT_CANCEL
    ConstructFinish = Native.ConvertUnitEvent(65), --EVENT_UNIT_CONSTRUCT_FINISH
    UpgradeStart = Native.ConvertUnitEvent(66), --EVENT_UNIT_UPGRADE_START
    UpgradeCancel = Native.ConvertUnitEvent(67), --EVENT_UNIT_UPGRADE_CANCEL
    UpgradeFinish = Native.ConvertUnitEvent(68), --EVENT_UNIT_UPGRADE_FINISH
    TrainStart = Native.ConvertUnitEvent(69), --EVENT_UNIT_TRAIN_START
    TrainCancel = Native.ConvertUnitEvent(70), --EVENT_UNIT_TRAIN_CANCEL
    TrainFinish = Native.ConvertUnitEvent(71), --EVENT_UNIT_TRAIN_FINISH
    ResearchStart = Native.ConvertUnitEvent(72), --EVENT_UNIT_RESEARCH_START
    ResearchCancel = Native.ConvertUnitEvent(73), --EVENT_UNIT_RESEARCH_CANCEL
    ResearchFinish = Native.ConvertUnitEvent(74), --EVENT_UNIT_RESEARCH_FINISH
    IssuedOrder = Native.ConvertUnitEvent(75), --EVENT_UNIT_ISSUED_ORDER
    IssuedPointOrder = Native.ConvertUnitEvent(76), --EVENT_UNIT_ISSUED_POINT_ORDER
    IssuedTargetOrder = Native.ConvertUnitEvent(77), --EVENT_UNIT_ISSUED_TARGET_ORDER
    HeroLevel = Native.ConvertUnitEvent(78), --EVENT_UNIT_HERO_LEVEL
    HeroSkill = Native.ConvertUnitEvent(79), --EVENT_UNIT_HERO_SKILL
    HeroRevivable = Native.ConvertUnitEvent(80), --EVENT_UNIT_HERO_REVIVABLE
    HeroReviveStart = Native.ConvertUnitEvent(81), --EVENT_UNIT_HERO_REVIVE_START
    HeroReviveCancel = Native.ConvertUnitEvent(82), --EVENT_UNIT_HERO_REVIVE_CANCEL
    HeroReviveFinish = Native.ConvertUnitEvent(83), --EVENT_UNIT_HERO_REVIVE_FINISH
    Summon = Native.ConvertUnitEvent(84), --EVENT_UNIT_SUMMON
    DropItem = Native.ConvertUnitEvent(85), --EVENT_UNIT_DROP_ITEM
    PickupItem = Native.ConvertUnitEvent(86), --EVENT_UNIT_PICKUP_ITEM
    UseItem = Native.ConvertUnitEvent(87), --EVENT_UNIT_USE_ITEM
    Loaded = Native.ConvertUnitEvent(88), --EVENT_UNIT_LOADED
    Sell = Native.ConvertUnitEvent(286), --EVENT_UNIT_SELL
    ChangeOwner = Native.ConvertUnitEvent(287), --EVENT_UNIT_CHANGE_OWNER
    SellItem = Native.ConvertUnitEvent(288), --EVENT_UNIT_SELL_ITEM
    SpellChannel = Native.ConvertUnitEvent(289), --EVENT_UNIT_SPELL_CHANNEL
    SpellCast = Native.ConvertUnitEvent(290), --EVENT_UNIT_SPELL_CAST
    SpellEffect = Native.ConvertUnitEvent(291), --EVENT_UNIT_SPELL_EFFECT
    SpellFinish = Native.ConvertUnitEvent(292), --EVENT_UNIT_SPELL_FINISH
    SpellEndcast = Native.ConvertUnitEvent(293), --EVENT_UNIT_SPELL_ENDCAST
    PawnItem = Native.ConvertUnitEvent(294), --EVENT_UNIT_PAWN_ITEM
}
return UnitEvent]]

P['lib/stdlib/enum/unitintegerfield.lua'] = [[local Native = require('lib.stdlib.native')

---@class UnitIntegerField
local UnitIntegerField = {
    DefenseType = Native.ConvertUnitIntegerField(0x75647479), --UNIT_IF_DEFENSE_TYPE
    ArmorType = Native.ConvertUnitIntegerField(0x7561726D), --UNIT_IF_ARMOR_TYPE
    LoopingFadeInRate = Native.ConvertUnitIntegerField(0x756C6669), --UNIT_IF_LOOPING_FADE_IN_RATE
    LoopingFadeOutRate = Native.ConvertUnitIntegerField(0x756C666F), --UNIT_IF_LOOPING_FADE_OUT_RATE
    Agility = Native.ConvertUnitIntegerField(0x75616763), --UNIT_IF_AGILITY
    Intelligence = Native.ConvertUnitIntegerField(0x75696E63), --UNIT_IF_INTELLIGENCE
    Strength = Native.ConvertUnitIntegerField(0x75737463), --UNIT_IF_STRENGTH
    AgilityPermanent = Native.ConvertUnitIntegerField(0x7561676D), --UNIT_IF_AGILITY_PERMANENT
    IntelligencePermanent = Native.ConvertUnitIntegerField(0x75696E6D), --UNIT_IF_INTELLIGENCE_PERMANENT
    StrengthPermanent = Native.ConvertUnitIntegerField(0x7573746D), --UNIT_IF_STRENGTH_PERMANENT
    AgilityWithBonus = Native.ConvertUnitIntegerField(0x75616762), --UNIT_IF_AGILITY_WITH_BONUS
    IntelligenceWithBonus = Native.ConvertUnitIntegerField(0x75696E62), --UNIT_IF_INTELLIGENCE_WITH_BONUS
    StrengthWithBonus = Native.ConvertUnitIntegerField(0x75737462), --UNIT_IF_STRENGTH_WITH_BONUS
    GoldBountyAwardedNumberOfDice = Native.ConvertUnitIntegerField(0x75626469), --UNIT_IF_GOLD_BOUNTY_AWARDED_NUMBER_OF_DICE
    GoldBountyAwardedBase = Native.ConvertUnitIntegerField(0x75626261), --UNIT_IF_GOLD_BOUNTY_AWARDED_BASE
    GoldBountyAwardedSidesPerDie = Native.ConvertUnitIntegerField(0x75627369), --UNIT_IF_GOLD_BOUNTY_AWARDED_SIDES_PER_DIE
    LumberBountyAwardedNumberOfDice = Native.ConvertUnitIntegerField(0x756C6264), --UNIT_IF_LUMBER_BOUNTY_AWARDED_NUMBER_OF_DICE
    LumberBountyAwardedBase = Native.ConvertUnitIntegerField(0x756C6261), --UNIT_IF_LUMBER_BOUNTY_AWARDED_BASE
    LumberBountyAwardedSidesPerDie = Native.ConvertUnitIntegerField(0x756C6273), --UNIT_IF_LUMBER_BOUNTY_AWARDED_SIDES_PER_DIE
    Level = Native.ConvertUnitIntegerField(0x756C6576), --UNIT_IF_LEVEL
    FormationRank = Native.ConvertUnitIntegerField(0x75666F72), --UNIT_IF_FORMATION_RANK
    OrientationInterpolation = Native.ConvertUnitIntegerField(0x756F7269), --UNIT_IF_ORIENTATION_INTERPOLATION
    ElevationSamplePoints = Native.ConvertUnitIntegerField(0x75657074), --UNIT_IF_ELEVATION_SAMPLE_POINTS
    TintingColorRed = Native.ConvertUnitIntegerField(0x75636C72), --UNIT_IF_TINTING_COLOR_RED
    TintingColorGreen = Native.ConvertUnitIntegerField(0x75636C67), --UNIT_IF_TINTING_COLOR_GREEN
    TintingColorBlue = Native.ConvertUnitIntegerField(0x75636C62), --UNIT_IF_TINTING_COLOR_BLUE
    TintingColorAlpha = Native.ConvertUnitIntegerField(0x7563616C), --UNIT_IF_TINTING_COLOR_ALPHA
    MoveType = Native.ConvertUnitIntegerField(0x756D7674), --UNIT_IF_MOVE_TYPE
    TargetedAs = Native.ConvertUnitIntegerField(0x75746172), --UNIT_IF_TARGETED_AS
    UnitClassification = Native.ConvertUnitIntegerField(0x75747970), --UNIT_IF_UNIT_CLASSIFICATION
    HitPointsRegenerationType = Native.ConvertUnitIntegerField(0x75687274), --UNIT_IF_HIT_POINTS_REGENERATION_TYPE
    PlacementPreventedBy = Native.ConvertUnitIntegerField(0x75706172), --UNIT_IF_PLACEMENT_PREVENTED_BY
    PrimaryAttribute = Native.ConvertUnitIntegerField(0x75707261), --UNIT_IF_PRIMARY_ATTRIBUTE
}
return UnitIntegerField]]

P['lib/stdlib/enum/unitrealfield.lua'] = [[local Native = require('lib.stdlib.native')

---@class UnitRealField
local UnitRealField = {
    StrengthPerLevel = Native.ConvertUnitRealField(0x75737470), --UNIT_RF_STRENGTH_PER_LEVEL
    AgilityPerLevel = Native.ConvertUnitRealField(0x75616770), --UNIT_RF_AGILITY_PER_LEVEL
    IntelligencePerLevel = Native.ConvertUnitRealField(0x75696E70), --UNIT_RF_INTELLIGENCE_PER_LEVEL
    HitPointsRegenerationRate = Native.ConvertUnitRealField(0x75687072), --UNIT_RF_HIT_POINTS_REGENERATION_RATE
    ManaRegeneration = Native.ConvertUnitRealField(0x756D7072), --UNIT_RF_MANA_REGENERATION
    DeathTime = Native.ConvertUnitRealField(0x7564746D), --UNIT_RF_DEATH_TIME
    FlyHeight = Native.ConvertUnitRealField(0x75667968), --UNIT_RF_FLY_HEIGHT
    TurnRate = Native.ConvertUnitRealField(0x756D7672), --UNIT_RF_TURN_RATE
    ElevationSampleRadius = Native.ConvertUnitRealField(0x75657264), --UNIT_RF_ELEVATION_SAMPLE_RADIUS
    FogOfWarSampleRadius = Native.ConvertUnitRealField(0x75667264), --UNIT_RF_FOG_OF_WAR_SAMPLE_RADIUS
    MaximumPitchAngleDegrees = Native.ConvertUnitRealField(0x756D7870), --UNIT_RF_MAXIMUM_PITCH_ANGLE_DEGREES
    MaximumRollAngleDegrees = Native.ConvertUnitRealField(0x756D7872), --UNIT_RF_MAXIMUM_ROLL_ANGLE_DEGREES
    ScalingValue = Native.ConvertUnitRealField(0x75736361), --UNIT_RF_SCALING_VALUE
    AnimationRunSpeed = Native.ConvertUnitRealField(0x7572756E), --UNIT_RF_ANIMATION_RUN_SPEED
    SelectionScale = Native.ConvertUnitRealField(0x75737363), --UNIT_RF_SELECTION_SCALE
    SelectionCircleHeight = Native.ConvertUnitRealField(0x75736C7A), --UNIT_RF_SELECTION_CIRCLE_HEIGHT
    ShadowImageHeight = Native.ConvertUnitRealField(0x75736868), --UNIT_RF_SHADOW_IMAGE_HEIGHT
    ShadowImageWidth = Native.ConvertUnitRealField(0x75736877), --UNIT_RF_SHADOW_IMAGE_WIDTH
    ShadowImageCenterX = Native.ConvertUnitRealField(0x75736878), --UNIT_RF_SHADOW_IMAGE_CENTER_X
    ShadowImageCenterY = Native.ConvertUnitRealField(0x75736879), --UNIT_RF_SHADOW_IMAGE_CENTER_Y
    AnimationWalkSpeed = Native.ConvertUnitRealField(0x7577616C), --UNIT_RF_ANIMATION_WALK_SPEED
    Defense = Native.ConvertUnitRealField(0x75646663), --UNIT_RF_DEFENSE
    SightRadius = Native.ConvertUnitRealField(0x75736972), --UNIT_RF_SIGHT_RADIUS
    Priority = Native.ConvertUnitRealField(0x75707269), --UNIT_RF_PRIORITY
    Speed = Native.ConvertUnitRealField(0x756D7663), --UNIT_RF_SPEED
    OccluderHeight = Native.ConvertUnitRealField(0x756F6363), --UNIT_RF_OCCLUDER_HEIGHT
    Hp = Native.ConvertUnitRealField(0x75687063), --UNIT_RF_HP
    Mana = Native.ConvertUnitRealField(0x756D7063), --UNIT_RF_MANA
    AcquisitionRange = Native.ConvertUnitRealField(0x75616371), --UNIT_RF_ACQUISITION_RANGE
    CastBackSwing = Native.ConvertUnitRealField(0x75636273), --UNIT_RF_CAST_BACK_SWING
    CastPoint = Native.ConvertUnitRealField(0x75637074), --UNIT_RF_CAST_POINT
    MinimumAttackRange = Native.ConvertUnitRealField(0x75616D6E), --UNIT_RF_MINIMUM_ATTACK_RANGE
}
return UnitRealField]]

P['lib/stdlib/enum/unitstate.lua'] = [[local Native = require('lib.stdlib.native')

---@class UnitState
local UnitState = {
    Life = Native.ConvertUnitState(0), --UNIT_STATE_LIFE
    MaxLife = Native.ConvertUnitState(1), --UNIT_STATE_MAX_LIFE
    Mana = Native.ConvertUnitState(2), --UNIT_STATE_MANA
    MaxMana = Native.ConvertUnitState(3), --UNIT_STATE_MAX_MANA
}
return UnitState]]

P['lib/stdlib/enum/unitstringfield.lua'] = [[local Native = require('lib.stdlib.native')

---@class UnitStringField
local UnitStringField = {
    Name = Native.ConvertUnitStringField(0x756E616D), --UNIT_SF_NAME
    ProperNames = Native.ConvertUnitStringField(0x7570726F), --UNIT_SF_PROPER_NAMES
    GroundTexture = Native.ConvertUnitStringField(0x75756273), --UNIT_SF_GROUND_TEXTURE
    ShadowImageUnit = Native.ConvertUnitStringField(0x75736875), --UNIT_SF_SHADOW_IMAGE_UNIT
}
return UnitStringField]]

P['lib/stdlib/enum/unittype.lua'] = [[local Native = require('lib.stdlib.native')

---@class UnitType
local UnitType = {
    Hero = Native.ConvertUnitType(0), --UNIT_TYPE_HERO
    Dead = Native.ConvertUnitType(1), --UNIT_TYPE_DEAD
    Structure = Native.ConvertUnitType(2), --UNIT_TYPE_STRUCTURE
    Flying = Native.ConvertUnitType(3), --UNIT_TYPE_FLYING
    Ground = Native.ConvertUnitType(4), --UNIT_TYPE_GROUND
    AttacksFlying = Native.ConvertUnitType(5), --UNIT_TYPE_ATTACKS_FLYING
    AttacksGround = Native.ConvertUnitType(6), --UNIT_TYPE_ATTACKS_GROUND
    MeleeAttacker = Native.ConvertUnitType(7), --UNIT_TYPE_MELEE_ATTACKER
    RangedAttacker = Native.ConvertUnitType(8), --UNIT_TYPE_RANGED_ATTACKER
    Giant = Native.ConvertUnitType(9), --UNIT_TYPE_GIANT
    Summoned = Native.ConvertUnitType(10), --UNIT_TYPE_SUMMONED
    Stunned = Native.ConvertUnitType(11), --UNIT_TYPE_STUNNED
    Plagued = Native.ConvertUnitType(12), --UNIT_TYPE_PLAGUED
    Snared = Native.ConvertUnitType(13), --UNIT_TYPE_SNARED
    Undead = Native.ConvertUnitType(14), --UNIT_TYPE_UNDEAD
    Mechanical = Native.ConvertUnitType(15), --UNIT_TYPE_MECHANICAL
    Peon = Native.ConvertUnitType(16), --UNIT_TYPE_PEON
    Sapper = Native.ConvertUnitType(17), --UNIT_TYPE_SAPPER
    Townhall = Native.ConvertUnitType(18), --UNIT_TYPE_TOWNHALL
    Ancient = Native.ConvertUnitType(19), --UNIT_TYPE_ANCIENT
    Tauren = Native.ConvertUnitType(20), --UNIT_TYPE_TAUREN
    Poisoned = Native.ConvertUnitType(21), --UNIT_TYPE_POISONED
    Polymorphed = Native.ConvertUnitType(22), --UNIT_TYPE_POLYMORPHED
    Sleeping = Native.ConvertUnitType(23), --UNIT_TYPE_SLEEPING
    Resistant = Native.ConvertUnitType(24), --UNIT_TYPE_RESISTANT
    Ethereal = Native.ConvertUnitType(25), --UNIT_TYPE_ETHEREAL
    MagicImmune = Native.ConvertUnitType(26), --UNIT_TYPE_MAGIC_IMMUNE
}
return UnitType]]

P['lib/stdlib/enum/unitweaponbooleanfield.lua'] = [[local Native = require('lib.stdlib.native')

---@class UnitWeaponBooleanField
local UnitWeaponBooleanField = {
    ShowUi = Native.ConvertUnitWeaponBooleanField(0x75777531), --UNIT_WEAPON_BF_ATTACK_SHOW_UI
    SEnabled = Native.ConvertUnitWeaponBooleanField(0x7561656E), --UNIT_WEAPON_BF_ATTACKS_ENABLED
    ProjectileHomingEnabled = Native.ConvertUnitWeaponBooleanField(0x756D6831), --UNIT_WEAPON_BF_ATTACK_PROJECTILE_HOMING_ENABLED
}
return UnitWeaponBooleanField]]

P['lib/stdlib/enum/unitweaponintegerfield.lua'] = [[local Native = require('lib.stdlib.native')

---@class UnitWeaponIntegerField
local UnitWeaponIntegerField = {
    DamageNumberOfDice = Native.ConvertUnitWeaponIntegerField(0x75613164), --UNIT_WEAPON_IF_ATTACK_DAMAGE_NUMBER_OF_DICE
    DamageBase = Native.ConvertUnitWeaponIntegerField(0x75613162), --UNIT_WEAPON_IF_ATTACK_DAMAGE_BASE
    DamageSidesPerDie = Native.ConvertUnitWeaponIntegerField(0x75613173), --UNIT_WEAPON_IF_ATTACK_DAMAGE_SIDES_PER_DIE
    MaximumNumberOfTargets = Native.ConvertUnitWeaponIntegerField(0x75746331), --UNIT_WEAPON_IF_ATTACK_MAXIMUM_NUMBER_OF_TARGETS
    AttackType = Native.ConvertUnitWeaponIntegerField(0x75613174), --UNIT_WEAPON_IF_ATTACK_ATTACK_TYPE
    WeaponSound = Native.ConvertUnitWeaponIntegerField(0x75637331), --UNIT_WEAPON_IF_ATTACK_WEAPON_SOUND
    AreaOfEffectTargets = Native.ConvertUnitWeaponIntegerField(0x75613170), --UNIT_WEAPON_IF_ATTACK_AREA_OF_EFFECT_TARGETS
    TargetsAllowed = Native.ConvertUnitWeaponIntegerField(0x75613167), --UNIT_WEAPON_IF_ATTACK_TARGETS_ALLOWED
}
return UnitWeaponIntegerField]]

P['lib/stdlib/enum/unitweaponrealfield.lua'] = [[local Native = require('lib.stdlib.native')

---@class UnitWeaponRealField
local UnitWeaponRealField = {
    BackswingPoint = Native.ConvertUnitWeaponRealField(0x75627331), --UNIT_WEAPON_RF_ATTACK_BACKSWING_POINT
    DamagePoint = Native.ConvertUnitWeaponRealField(0x75647031), --UNIT_WEAPON_RF_ATTACK_DAMAGE_POINT
    BaseCooldown = Native.ConvertUnitWeaponRealField(0x75613163), --UNIT_WEAPON_RF_ATTACK_BASE_COOLDOWN
    DamageLossFactor = Native.ConvertUnitWeaponRealField(0x75646C31), --UNIT_WEAPON_RF_ATTACK_DAMAGE_LOSS_FACTOR
    DamageFactorMedium = Native.ConvertUnitWeaponRealField(0x75686431), --UNIT_WEAPON_RF_ATTACK_DAMAGE_FACTOR_MEDIUM
    DamageFactorSmall = Native.ConvertUnitWeaponRealField(0x75716431), --UNIT_WEAPON_RF_ATTACK_DAMAGE_FACTOR_SMALL
    DamageSpillDistance = Native.ConvertUnitWeaponRealField(0x75736431), --UNIT_WEAPON_RF_ATTACK_DAMAGE_SPILL_DISTANCE
    DamageSpillRadius = Native.ConvertUnitWeaponRealField(0x75737231), --UNIT_WEAPON_RF_ATTACK_DAMAGE_SPILL_RADIUS
    ProjectileSpeed = Native.ConvertUnitWeaponRealField(0x7561317A), --UNIT_WEAPON_RF_ATTACK_PROJECTILE_SPEED
    ProjectileArc = Native.ConvertUnitWeaponRealField(0x756D6131), --UNIT_WEAPON_RF_ATTACK_PROJECTILE_ARC
    AreaOfEffectFullDamage = Native.ConvertUnitWeaponRealField(0x75613166), --UNIT_WEAPON_RF_ATTACK_AREA_OF_EFFECT_FULL_DAMAGE
    AreaOfEffectMediumDamage = Native.ConvertUnitWeaponRealField(0x75613168), --UNIT_WEAPON_RF_ATTACK_AREA_OF_EFFECT_MEDIUM_DAMAGE
    AreaOfEffectSmallDamage = Native.ConvertUnitWeaponRealField(0x75613171), --UNIT_WEAPON_RF_ATTACK_AREA_OF_EFFECT_SMALL_DAMAGE
    Range = Native.ConvertUnitWeaponRealField(0x75613172), --UNIT_WEAPON_RF_ATTACK_RANGE
}
return UnitWeaponRealField]]

P['lib/stdlib/enum/unitweaponstringfield.lua'] = [[local Native = require('lib.stdlib.native')

---@class UnitWeaponStringField
local UnitWeaponStringField = {
    AttackProjectileArt = Native.ConvertUnitWeaponStringField(0x7561316D), --UNIT_WEAPON_SF_ATTACK_PROJECTILE_ART
}
return UnitWeaponStringField]]

P['lib/stdlib/enum/version.lua'] = [[local Native = require('lib.stdlib.native')

---@class Version
local Version = {
    ReignOfChaos = Native.ConvertVersion(0), --VERSION_REIGN_OF_CHAOS
    FrozenThrone = Native.ConvertVersion(1), --VERSION_FROZEN_THRONE
}
return Version]]

P['lib/stdlib/enum/volumegroup.lua'] = [[local Native = require('lib.stdlib.native')

---@class VolumeGroup
local VolumeGroup = {
    Unitmovement = Native.ConvertVolumeGroup(0), --SOUND_VOLUMEGROUP_UNITMOVEMENT
    Unitsounds = Native.ConvertVolumeGroup(1), --SOUND_VOLUMEGROUP_UNITSOUNDS
    Combat = Native.ConvertVolumeGroup(2), --SOUND_VOLUMEGROUP_COMBAT
    Spells = Native.ConvertVolumeGroup(3), --SOUND_VOLUMEGROUP_SPELLS
    Ui = Native.ConvertVolumeGroup(4), --SOUND_VOLUMEGROUP_UI
    Music = Native.ConvertVolumeGroup(5), --SOUND_VOLUMEGROUP_MUSIC
    Ambientsounds = Native.ConvertVolumeGroup(6), --SOUND_VOLUMEGROUP_AMBIENTSOUNDS
    Fire = Native.ConvertVolumeGroup(7), --SOUND_VOLUMEGROUP_FIRE
}
return VolumeGroup]]

P['lib/stdlib/enum/weapontype.lua'] = [[local Native = require('lib.stdlib.native')

---@class WeaponType
local WeaponType = {
    Whoknows = Native.ConvertWeaponType(0), --WEAPON_TYPE_WHOKNOWS
    MetalLightChop = Native.ConvertWeaponType(1), --WEAPON_TYPE_METAL_LIGHT_CHOP
    MetalMediumChop = Native.ConvertWeaponType(2), --WEAPON_TYPE_METAL_MEDIUM_CHOP
    MetalHeavyChop = Native.ConvertWeaponType(3), --WEAPON_TYPE_METAL_HEAVY_CHOP
    MetalLightSlice = Native.ConvertWeaponType(4), --WEAPON_TYPE_METAL_LIGHT_SLICE
    MetalMediumSlice = Native.ConvertWeaponType(5), --WEAPON_TYPE_METAL_MEDIUM_SLICE
    MetalHeavySlice = Native.ConvertWeaponType(6), --WEAPON_TYPE_METAL_HEAVY_SLICE
    MetalMediumBash = Native.ConvertWeaponType(7), --WEAPON_TYPE_METAL_MEDIUM_BASH
    MetalHeavyBash = Native.ConvertWeaponType(8), --WEAPON_TYPE_METAL_HEAVY_BASH
    MetalMediumStab = Native.ConvertWeaponType(9), --WEAPON_TYPE_METAL_MEDIUM_STAB
    MetalHeavyStab = Native.ConvertWeaponType(10), --WEAPON_TYPE_METAL_HEAVY_STAB
    WoodLightSlice = Native.ConvertWeaponType(11), --WEAPON_TYPE_WOOD_LIGHT_SLICE
    WoodMediumSlice = Native.ConvertWeaponType(12), --WEAPON_TYPE_WOOD_MEDIUM_SLICE
    WoodHeavySlice = Native.ConvertWeaponType(13), --WEAPON_TYPE_WOOD_HEAVY_SLICE
    WoodLightBash = Native.ConvertWeaponType(14), --WEAPON_TYPE_WOOD_LIGHT_BASH
    WoodMediumBash = Native.ConvertWeaponType(15), --WEAPON_TYPE_WOOD_MEDIUM_BASH
    WoodHeavyBash = Native.ConvertWeaponType(16), --WEAPON_TYPE_WOOD_HEAVY_BASH
    WoodLightStab = Native.ConvertWeaponType(17), --WEAPON_TYPE_WOOD_LIGHT_STAB
    WoodMediumStab = Native.ConvertWeaponType(18), --WEAPON_TYPE_WOOD_MEDIUM_STAB
    ClawLightSlice = Native.ConvertWeaponType(19), --WEAPON_TYPE_CLAW_LIGHT_SLICE
    ClawMediumSlice = Native.ConvertWeaponType(20), --WEAPON_TYPE_CLAW_MEDIUM_SLICE
    ClawHeavySlice = Native.ConvertWeaponType(21), --WEAPON_TYPE_CLAW_HEAVY_SLICE
    AxeMediumChop = Native.ConvertWeaponType(22), --WEAPON_TYPE_AXE_MEDIUM_CHOP
    RockHeavyBash = Native.ConvertWeaponType(23), --WEAPON_TYPE_ROCK_HEAVY_BASH
}
return WeaponType]]

P['lib/stdlib/enum/widgetevent.lua'] = [[local Native = require('lib.stdlib.native')

---@class WidgetEvent
local WidgetEvent = {
    Death = Native.ConvertWidgetEvent(89), --EVENT_WIDGET_DEATH
}
return WidgetEvent]]

P['lib/stdlib/native/_generated/_globals.lua'] = [[return {
    'ConvertRace',
    'ConvertAllianceType',
    'ConvertRacePref',
    'ConvertIGameState',
    'ConvertFGameState',
    'ConvertPlayerState',
    'ConvertPlayerScore',
    'ConvertPlayerGameResult',
    'ConvertUnitState',
    'ConvertAIDifficulty',
    'ConvertGameEvent',
    'ConvertPlayerEvent',
    'ConvertPlayerUnitEvent',
    'ConvertWidgetEvent',
    'ConvertDialogEvent',
    'ConvertUnitEvent',
    'ConvertLimitOp',
    'ConvertUnitType',
    'ConvertGameSpeed',
    'ConvertPlacement',
    'ConvertStartLocPrio',
    'ConvertGameDifficulty',
    'ConvertGameType',
    'ConvertMapFlag',
    'ConvertMapVisibility',
    'ConvertMapSetting',
    'ConvertMapDensity',
    'ConvertMapControl',
    'ConvertPlayerColor',
    'ConvertPlayerSlotState',
    'ConvertVolumeGroup',
    'ConvertCameraField',
    'ConvertBlendMode',
    'ConvertRarityControl',
    'ConvertTexMapFlags',
    'ConvertFogState',
    'ConvertEffectType',
    'ConvertVersion',
    'ConvertItemType',
    'ConvertAttackType',
    'ConvertDamageType',
    'ConvertWeaponType',
    'ConvertSoundType',
    'ConvertPathingType',
    'ConvertMouseButtonType',
    'ConvertAnimType',
    'ConvertSubAnimType',
    'ConvertOriginFrameType',
    'ConvertFramePointType',
    'ConvertTextAlignType',
    'ConvertFrameEventType',
    'ConvertOsKeyType',
    'ConvertAbilityIntegerField',
    'ConvertAbilityRealField',
    'ConvertAbilityBooleanField',
    'ConvertAbilityStringField',
    'ConvertAbilityIntegerLevelField',
    'ConvertAbilityRealLevelField',
    'ConvertAbilityBooleanLevelField',
    'ConvertAbilityStringLevelField',
    'ConvertAbilityIntegerLevelArrayField',
    'ConvertAbilityRealLevelArrayField',
    'ConvertAbilityBooleanLevelArrayField',
    'ConvertAbilityStringLevelArrayField',
    'ConvertUnitIntegerField',
    'ConvertUnitRealField',
    'ConvertUnitBooleanField',
    'ConvertUnitStringField',
    'ConvertUnitWeaponIntegerField',
    'ConvertUnitWeaponRealField',
    'ConvertUnitWeaponBooleanField',
    'ConvertUnitWeaponStringField',
    'ConvertItemIntegerField',
    'ConvertItemRealField',
    'ConvertItemBooleanField',
    'ConvertItemStringField',
    'ConvertMoveType',
    'ConvertTargetFlag',
    'ConvertArmorType',
    'ConvertHeroAttribute',
    'ConvertDefenseType',
    'ConvertRegenType',
    'ConvertUnitCategory',
    'ConvertPathingFlag',
    'OrderId',
    'OrderId2String',
    'UnitId',
    'UnitId2String',
    'AbilityId',
    'AbilityId2String',
    'GetObjectName',
    'GetBJMaxPlayers',
    'GetBJPlayerNeutralVictim',
    'GetBJPlayerNeutralExtra',
    'GetBJMaxPlayerSlots',
    'GetPlayerNeutralPassive',
    'GetPlayerNeutralAggressive',
    'Deg2Rad',
    'Rad2Deg',
    'Sin',
    'Cos',
    'Tan',
    'Asin',
    'Acos',
    'Atan',
    'Atan2',
    'SquareRoot',
    'Pow',
    'MathRound',
    'I2R',
    'R2I',
    'I2S',
    'R2S',
    'R2SW',
    'S2I',
    'S2R',
    'GetHandleId',
    'SubString',
    'StringLength',
    'StringCase',
    'StringHash',
    'GetLocalizedString',
    'GetLocalizedHotkey',
    'SetMapName',
    'SetMapDescription',
    'SetTeams',
    'SetPlayers',
    'DefineStartLocation',
    'DefineStartLocationLoc',
    'SetStartLocPrioCount',
    'SetStartLocPrio',
    'GetStartLocPrioSlot',
    'GetStartLocPrio',
    'SetEnemyStartLocPrioCount',
    'SetEnemyStartLocPrio',
    'SetGameTypeSupported',
    'SetMapFlag',
    'SetGamePlacement',
    'SetGameSpeed',
    'SetGameDifficulty',
    'SetResourceDensity',
    'SetCreatureDensity',
    'GetTeams',
    'GetPlayers',
    'IsGameTypeSupported',
    'GetGameTypeSelected',
    'IsMapFlagSet',
    'GetGamePlacement',
    'GetGameSpeed',
    'GetGameDifficulty',
    'GetResourceDensity',
    'GetCreatureDensity',
    'GetStartLocationX',
    'GetStartLocationY',
    'GetStartLocationLoc',
    'SetPlayerTeam',
    'SetPlayerStartLocation',
    'ForcePlayerStartLocation',
    'SetPlayerColor',
    'SetPlayerAlliance',
    'SetPlayerTaxRate',
    'SetPlayerRacePreference',
    'SetPlayerRaceSelectable',
    'SetPlayerController',
    'SetPlayerName',
    'SetPlayerOnScoreScreen',
    'GetPlayerTeam',
    'GetPlayerStartLocation',
    'GetPlayerColor',
    'GetPlayerSelectable',
    'GetPlayerController',
    'GetPlayerSlotState',
    'GetPlayerTaxRate',
    'IsPlayerRacePrefSet',
    'GetPlayerName',
    'CreateTimer',
    'DestroyTimer',
    'TimerStart',
    'TimerGetElapsed',
    'TimerGetRemaining',
    'TimerGetTimeout',
    'PauseTimer',
    'ResumeTimer',
    'GetExpiredTimer',
    'CreateGroup',
    'DestroyGroup',
    'GroupAddUnit',
    'GroupRemoveUnit',
    'BlzGroupAddGroupFast',
    'BlzGroupRemoveGroupFast',
    'GroupClear',
    'BlzGroupGetSize',
    'BlzGroupUnitAt',
    'GroupEnumUnitsOfType',
    'GroupEnumUnitsOfPlayer',
    'GroupEnumUnitsOfTypeCounted',
    'GroupEnumUnitsInRect',
    'GroupEnumUnitsInRectCounted',
    'GroupEnumUnitsInRange',
    'GroupEnumUnitsInRangeOfLoc',
    'GroupEnumUnitsInRangeCounted',
    'GroupEnumUnitsInRangeOfLocCounted',
    'GroupEnumUnitsSelected',
    'GroupImmediateOrder',
    'GroupImmediateOrderById',
    'GroupPointOrder',
    'GroupPointOrderLoc',
    'GroupPointOrderById',
    'GroupPointOrderByIdLoc',
    'GroupTargetOrder',
    'GroupTargetOrderById',
    'ForGroup',
    'FirstOfGroup',
    'CreateForce',
    'DestroyForce',
    'ForceAddPlayer',
    'ForceRemovePlayer',
    'BlzForceHasPlayer',
    'ForceClear',
    'ForceEnumPlayers',
    'ForceEnumPlayersCounted',
    'ForceEnumAllies',
    'ForceEnumEnemies',
    'ForForce',
    'Rect',
    'RectFromLoc',
    'RemoveRect',
    'SetRect',
    'SetRectFromLoc',
    'MoveRectTo',
    'MoveRectToLoc',
    'GetRectCenterX',
    'GetRectCenterY',
    'GetRectMinX',
    'GetRectMinY',
    'GetRectMaxX',
    'GetRectMaxY',
    'CreateRegion',
    'RemoveRegion',
    'RegionAddRect',
    'RegionClearRect',
    'RegionAddCell',
    'RegionAddCellAtLoc',
    'RegionClearCell',
    'RegionClearCellAtLoc',
    'Location',
    'RemoveLocation',
    'MoveLocation',
    'GetLocationX',
    'GetLocationY',
    'GetLocationZ',
    'IsUnitInRegion',
    'IsPointInRegion',
    'IsLocationInRegion',
    'GetWorldBounds',
    'CreateTrigger',
    'DestroyTrigger',
    'ResetTrigger',
    'EnableTrigger',
    'DisableTrigger',
    'IsTriggerEnabled',
    'TriggerWaitOnSleeps',
    'IsTriggerWaitOnSleeps',
    'GetFilterUnit',
    'GetEnumUnit',
    'GetFilterDestructable',
    'GetEnumDestructable',
    'GetFilterItem',
    'GetEnumItem',
    'ParseTags',
    'GetFilterPlayer',
    'GetEnumPlayer',
    'GetTriggeringTrigger',
    'GetTriggerEventId',
    'GetTriggerEvalCount',
    'GetTriggerExecCount',
    'ExecuteFunc',
    'And',
    'Or',
    'Not',
    'Condition',
    'DestroyCondition',
    'Filter',
    'DestroyFilter',
    'DestroyBoolExpr',
    'TriggerRegisterVariableEvent',
    'TriggerRegisterTimerEvent',
    'TriggerRegisterTimerExpireEvent',
    'TriggerRegisterGameStateEvent',
    'TriggerRegisterDialogEvent',
    'TriggerRegisterDialogButtonEvent',
    'GetEventGameState',
    'TriggerRegisterGameEvent',
    'GetWinningPlayer',
    'TriggerRegisterEnterRegion',
    'GetTriggeringRegion',
    'GetEnteringUnit',
    'TriggerRegisterLeaveRegion',
    'GetLeavingUnit',
    'TriggerRegisterTrackableHitEvent',
    'TriggerRegisterTrackableTrackEvent',
    'TriggerRegisterCommandEvent',
    'TriggerRegisterUpgradeCommandEvent',
    'GetTriggeringTrackable',
    'GetClickedButton',
    'GetClickedDialog',
    'GetTournamentFinishSoonTimeRemaining',
    'GetTournamentFinishNowRule',
    'GetTournamentFinishNowPlayer',
    'GetTournamentScore',
    'GetSaveBasicFilename',
    'TriggerRegisterPlayerEvent',
    'GetTriggerPlayer',
    'TriggerRegisterPlayerUnitEvent',
    'GetLevelingUnit',
    'GetLearningUnit',
    'GetLearnedSkill',
    'GetLearnedSkillLevel',
    'GetRevivableUnit',
    'GetRevivingUnit',
    'GetAttacker',
    'GetRescuer',
    'GetDyingUnit',
    'GetKillingUnit',
    'GetDecayingUnit',
    'GetConstructingStructure',
    'GetCancelledStructure',
    'GetConstructedStructure',
    'GetResearchingUnit',
    'GetResearched',
    'GetTrainedUnitType',
    'GetTrainedUnit',
    'GetDetectedUnit',
    'GetSummoningUnit',
    'GetSummonedUnit',
    'GetTransportUnit',
    'GetLoadedUnit',
    'GetSellingUnit',
    'GetSoldUnit',
    'GetBuyingUnit',
    'GetSoldItem',
    'GetChangingUnit',
    'GetChangingUnitPrevOwner',
    'GetManipulatingUnit',
    'GetManipulatedItem',
    'GetOrderedUnit',
    'GetIssuedOrderId',
    'GetOrderPointX',
    'GetOrderPointY',
    'GetOrderPointLoc',
    'GetOrderTarget',
    'GetOrderTargetDestructable',
    'GetOrderTargetItem',
    'GetOrderTargetUnit',
    'GetSpellAbilityUnit',
    'GetSpellAbilityId',
    'GetSpellAbility',
    'GetSpellTargetLoc',
    'GetSpellTargetX',
    'GetSpellTargetY',
    'GetSpellTargetDestructable',
    'GetSpellTargetItem',
    'GetSpellTargetUnit',
    'TriggerRegisterPlayerAllianceChange',
    'TriggerRegisterPlayerStateEvent',
    'GetEventPlayerState',
    'TriggerRegisterPlayerChatEvent',
    'GetEventPlayerChatString',
    'GetEventPlayerChatStringMatched',
    'TriggerRegisterDeathEvent',
    'GetTriggerUnit',
    'TriggerRegisterUnitStateEvent',
    'GetEventUnitState',
    'TriggerRegisterUnitEvent',
    'GetEventDamage',
    'GetEventDamageSource',
    'GetEventDetectingPlayer',
    'TriggerRegisterFilterUnitEvent',
    'GetEventTargetUnit',
    'TriggerRegisterUnitInRange',
    'TriggerAddCondition',
    'TriggerRemoveCondition',
    'TriggerClearConditions',
    'TriggerAddAction',
    'TriggerRemoveAction',
    'TriggerClearActions',
    'TriggerSleepAction',
    'TriggerWaitForSound',
    'TriggerEvaluate',
    'TriggerExecute',
    'TriggerExecuteWait',
    'TriggerSyncStart',
    'TriggerSyncReady',
    'GetWidgetLife',
    'SetWidgetLife',
    'GetWidgetX',
    'GetWidgetY',
    'GetTriggerWidget',
    'CreateDestructable',
    'CreateDestructableZ',
    'CreateDeadDestructable',
    'CreateDeadDestructableZ',
    'RemoveDestructable',
    'KillDestructable',
    'SetDestructableInvulnerable',
    'IsDestructableInvulnerable',
    'EnumDestructablesInRect',
    'GetDestructableTypeId',
    'GetDestructableX',
    'GetDestructableY',
    'SetDestructableLife',
    'GetDestructableLife',
    'SetDestructableMaxLife',
    'GetDestructableMaxLife',
    'DestructableRestoreLife',
    'QueueDestructableAnimation',
    'SetDestructableAnimation',
    'SetDestructableAnimationSpeed',
    'ShowDestructable',
    'GetDestructableOccluderHeight',
    'SetDestructableOccluderHeight',
    'GetDestructableName',
    'GetTriggerDestructable',
    'CreateItem',
    'RemoveItem',
    'GetItemPlayer',
    'GetItemTypeId',
    'GetItemX',
    'GetItemY',
    'SetItemPosition',
    'SetItemDropOnDeath',
    'SetItemDroppable',
    'SetItemPawnable',
    'SetItemPlayer',
    'SetItemInvulnerable',
    'IsItemInvulnerable',
    'SetItemVisible',
    'IsItemVisible',
    'IsItemOwned',
    'IsItemPowerup',
    'IsItemSellable',
    'IsItemPawnable',
    'IsItemIdPowerup',
    'IsItemIdSellable',
    'IsItemIdPawnable',
    'EnumItemsInRect',
    'GetItemLevel',
    'GetItemType',
    'SetItemDropID',
    'GetItemName',
    'GetItemCharges',
    'SetItemCharges',
    'GetItemUserData',
    'SetItemUserData',
    'CreateUnit',
    'CreateUnitByName',
    'CreateUnitAtLoc',
    'CreateUnitAtLocByName',
    'CreateCorpse',
    'KillUnit',
    'RemoveUnit',
    'ShowUnit',
    'SetUnitState',
    'SetUnitX',
    'SetUnitY',
    'SetUnitPosition',
    'SetUnitPositionLoc',
    'SetUnitFacing',
    'SetUnitFacingTimed',
    'SetUnitMoveSpeed',
    'SetUnitFlyHeight',
    'SetUnitTurnSpeed',
    'SetUnitPropWindow',
    'SetUnitAcquireRange',
    'SetUnitCreepGuard',
    'GetUnitAcquireRange',
    'GetUnitTurnSpeed',
    'GetUnitPropWindow',
    'GetUnitFlyHeight',
    'GetUnitDefaultAcquireRange',
    'GetUnitDefaultTurnSpeed',
    'GetUnitDefaultPropWindow',
    'GetUnitDefaultFlyHeight',
    'SetUnitOwner',
    'SetUnitColor',
    'SetUnitScale',
    'SetUnitTimeScale',
    'SetUnitBlendTime',
    'SetUnitVertexColor',
    'QueueUnitAnimation',
    'SetUnitAnimation',
    'SetUnitAnimationByIndex',
    'SetUnitAnimationWithRarity',
    'AddUnitAnimationProperties',
    'SetUnitLookAt',
    'ResetUnitLookAt',
    'SetUnitRescuable',
    'SetUnitRescueRange',
    'SetHeroStr',
    'SetHeroAgi',
    'SetHeroInt',
    'GetHeroStr',
    'GetHeroAgi',
    'GetHeroInt',
    'UnitStripHeroLevel',
    'GetHeroXP',
    'SetHeroXP',
    'GetHeroSkillPoints',
    'UnitModifySkillPoints',
    'AddHeroXP',
    'SetHeroLevel',
    'GetHeroLevel',
    'GetUnitLevel',
    'GetHeroProperName',
    'SuspendHeroXP',
    'IsSuspendedXP',
    'SelectHeroSkill',
    'GetUnitAbilityLevel',
    'DecUnitAbilityLevel',
    'IncUnitAbilityLevel',
    'SetUnitAbilityLevel',
    'ReviveHero',
    'ReviveHeroLoc',
    'SetUnitExploded',
    'SetUnitInvulnerable',
    'PauseUnit',
    'IsUnitPaused',
    'SetUnitPathing',
    'ClearSelection',
    'SelectUnit',
    'GetUnitPointValue',
    'GetUnitPointValueByType',
    'UnitAddItem',
    'UnitAddItemById',
    'UnitAddItemToSlotById',
    'UnitRemoveItem',
    'UnitRemoveItemFromSlot',
    'UnitHasItem',
    'UnitItemInSlot',
    'UnitInventorySize',
    'UnitDropItemPoint',
    'UnitDropItemSlot',
    'UnitDropItemTarget',
    'UnitUseItem',
    'UnitUseItemPoint',
    'UnitUseItemTarget',
    'GetUnitX',
    'GetUnitY',
    'GetUnitLoc',
    'GetUnitFacing',
    'GetUnitMoveSpeed',
    'GetUnitDefaultMoveSpeed',
    'GetUnitState',
    'GetOwningPlayer',
    'GetUnitTypeId',
    'GetUnitRace',
    'GetUnitName',
    'GetUnitFoodUsed',
    'GetUnitFoodMade',
    'GetFoodMade',
    'GetFoodUsed',
    'SetUnitUseFood',
    'GetUnitRallyPoint',
    'GetUnitRallyUnit',
    'GetUnitRallyDestructable',
    'IsUnitInGroup',
    'IsUnitInForce',
    'IsUnitOwnedByPlayer',
    'IsUnitAlly',
    'IsUnitEnemy',
    'IsUnitVisible',
    'IsUnitDetected',
    'IsUnitInvisible',
    'IsUnitFogged',
    'IsUnitMasked',
    'IsUnitSelected',
    'IsUnitRace',
    'IsUnitType',
    'IsUnit',
    'IsUnitInRange',
    'IsUnitInRangeXY',
    'IsUnitInRangeLoc',
    'IsUnitHidden',
    'IsUnitIllusion',
    'IsUnitInTransport',
    'IsUnitLoaded',
    'IsHeroUnitId',
    'IsUnitIdType',
    'UnitShareVision',
    'UnitSuspendDecay',
    'UnitAddType',
    'UnitRemoveType',
    'UnitAddAbility',
    'UnitRemoveAbility',
    'UnitMakeAbilityPermanent',
    'UnitRemoveBuffs',
    'UnitRemoveBuffsEx',
    'UnitHasBuffsEx',
    'UnitCountBuffsEx',
    'UnitAddSleep',
    'UnitCanSleep',
    'UnitAddSleepPerm',
    'UnitCanSleepPerm',
    'UnitIsSleeping',
    'UnitWakeUp',
    'UnitApplyTimedLife',
    'UnitIgnoreAlarm',
    'UnitIgnoreAlarmToggled',
    'UnitResetCooldown',
    'UnitSetConstructionProgress',
    'UnitSetUpgradeProgress',
    'UnitPauseTimedLife',
    'UnitSetUsesAltIcon',
    'UnitDamagePoint',
    'UnitDamageTarget',
    'IssueImmediateOrder',
    'IssueImmediateOrderById',
    'IssuePointOrder',
    'IssuePointOrderLoc',
    'IssuePointOrderById',
    'IssuePointOrderByIdLoc',
    'IssueTargetOrder',
    'IssueTargetOrderById',
    'IssueInstantPointOrder',
    'IssueInstantPointOrderById',
    'IssueInstantTargetOrder',
    'IssueInstantTargetOrderById',
    'IssueBuildOrder',
    'IssueBuildOrderById',
    'IssueNeutralImmediateOrder',
    'IssueNeutralImmediateOrderById',
    'IssueNeutralPointOrder',
    'IssueNeutralPointOrderById',
    'IssueNeutralTargetOrder',
    'IssueNeutralTargetOrderById',
    'GetUnitCurrentOrder',
    'SetResourceAmount',
    'AddResourceAmount',
    'GetResourceAmount',
    'WaygateGetDestinationX',
    'WaygateGetDestinationY',
    'WaygateSetDestination',
    'WaygateActivate',
    'WaygateIsActive',
    'AddItemToAllStock',
    'AddItemToStock',
    'AddUnitToAllStock',
    'AddUnitToStock',
    'RemoveItemFromAllStock',
    'RemoveItemFromStock',
    'RemoveUnitFromAllStock',
    'RemoveUnitFromStock',
    'SetAllItemTypeSlots',
    'SetAllUnitTypeSlots',
    'SetItemTypeSlots',
    'SetUnitTypeSlots',
    'GetUnitUserData',
    'SetUnitUserData',
    'Player',
    'GetLocalPlayer',
    'IsPlayerAlly',
    'IsPlayerEnemy',
    'IsPlayerInForce',
    'IsPlayerObserver',
    'IsVisibleToPlayer',
    'IsLocationVisibleToPlayer',
    'IsFoggedToPlayer',
    'IsLocationFoggedToPlayer',
    'IsMaskedToPlayer',
    'IsLocationMaskedToPlayer',
    'GetPlayerRace',
    'GetPlayerId',
    'GetPlayerUnitCount',
    'GetPlayerTypedUnitCount',
    'GetPlayerStructureCount',
    'GetPlayerState',
    'GetPlayerScore',
    'GetPlayerAlliance',
    'GetPlayerHandicap',
    'GetPlayerHandicapXP',
    'GetPlayerHandicapReviveTime',
    'GetPlayerHandicapDamage',
    'SetPlayerHandicap',
    'SetPlayerHandicapXP',
    'SetPlayerHandicapReviveTime',
    'SetPlayerHandicapDamage',
    'SetPlayerTechMaxAllowed',
    'GetPlayerTechMaxAllowed',
    'AddPlayerTechResearched',
    'SetPlayerTechResearched',
    'GetPlayerTechResearched',
    'GetPlayerTechCount',
    'SetPlayerUnitsOwner',
    'CripplePlayer',
    'SetPlayerAbilityAvailable',
    'SetPlayerState',
    'RemovePlayer',
    'CachePlayerHeroData',
    'SetFogStateRect',
    'SetFogStateRadius',
    'SetFogStateRadiusLoc',
    'FogMaskEnable',
    'IsFogMaskEnabled',
    'FogEnable',
    'IsFogEnabled',
    'CreateFogModifierRect',
    'CreateFogModifierRadius',
    'CreateFogModifierRadiusLoc',
    'DestroyFogModifier',
    'FogModifierStart',
    'FogModifierStop',
    'VersionGet',
    'VersionCompatible',
    'VersionSupported',
    'EndGame',
    'ChangeLevel',
    'RestartGame',
    'ReloadGame',
    'SetCampaignMenuRace',
    'SetCampaignMenuRaceEx',
    'ForceCampaignSelectScreen',
    'LoadGame',
    'SaveGame',
    'RenameSaveDirectory',
    'RemoveSaveDirectory',
    'CopySaveGame',
    'SaveGameExists',
    'SetMaxCheckpointSaves',
    'SaveGameCheckpoint',
    'SyncSelections',
    'SetFloatGameState',
    'GetFloatGameState',
    'SetIntegerGameState',
    'GetIntegerGameState',
    'SetTutorialCleared',
    'SetMissionAvailable',
    'SetCampaignAvailable',
    'SetOpCinematicAvailable',
    'SetEdCinematicAvailable',
    'GetDefaultDifficulty',
    'SetDefaultDifficulty',
    'SetCustomCampaignButtonVisible',
    'GetCustomCampaignButtonVisible',
    'DoNotSaveReplay',
    'DialogCreate',
    'DialogDestroy',
    'DialogClear',
    'DialogSetMessage',
    'DialogAddButton',
    'DialogAddQuitButton',
    'DialogDisplay',
    'ReloadGameCachesFromDisk',
    'InitGameCache',
    'SaveGameCache',
    'StoreInteger',
    'StoreReal',
    'StoreBoolean',
    'StoreUnit',
    'StoreString',
    'SyncStoredInteger',
    'SyncStoredReal',
    'SyncStoredBoolean',
    'SyncStoredUnit',
    'SyncStoredString',
    'HaveStoredInteger',
    'HaveStoredReal',
    'HaveStoredBoolean',
    'HaveStoredUnit',
    'HaveStoredString',
    'FlushGameCache',
    'FlushStoredMission',
    'FlushStoredInteger',
    'FlushStoredReal',
    'FlushStoredBoolean',
    'FlushStoredUnit',
    'FlushStoredString',
    'GetStoredInteger',
    'GetStoredReal',
    'GetStoredBoolean',
    'GetStoredString',
    'RestoreUnit',
    'InitHashtable',
    'SaveInteger',
    'SaveReal',
    'SaveBoolean',
    'SaveStr',
    'SavePlayerHandle',
    'SaveWidgetHandle',
    'SaveDestructableHandle',
    'SaveItemHandle',
    'SaveUnitHandle',
    'SaveAbilityHandle',
    'SaveTimerHandle',
    'SaveTriggerHandle',
    'SaveTriggerConditionHandle',
    'SaveTriggerActionHandle',
    'SaveTriggerEventHandle',
    'SaveForceHandle',
    'SaveGroupHandle',
    'SaveLocationHandle',
    'SaveRectHandle',
    'SaveBooleanExprHandle',
    'SaveSoundHandle',
    'SaveEffectHandle',
    'SaveUnitPoolHandle',
    'SaveItemPoolHandle',
    'SaveQuestHandle',
    'SaveQuestItemHandle',
    'SaveDefeatConditionHandle',
    'SaveTimerDialogHandle',
    'SaveLeaderboardHandle',
    'SaveMultiboardHandle',
    'SaveMultiboardItemHandle',
    'SaveTrackableHandle',
    'SaveDialogHandle',
    'SaveButtonHandle',
    'SaveTextTagHandle',
    'SaveLightningHandle',
    'SaveImageHandle',
    'SaveUbersplatHandle',
    'SaveRegionHandle',
    'SaveFogStateHandle',
    'SaveFogModifierHandle',
    'SaveAgentHandle',
    'SaveHashtableHandle',
    'SaveFrameHandle',
    'LoadInteger',
    'LoadReal',
    'LoadBoolean',
    'LoadStr',
    'LoadPlayerHandle',
    'LoadWidgetHandle',
    'LoadDestructableHandle',
    'LoadItemHandle',
    'LoadUnitHandle',
    'LoadAbilityHandle',
    'LoadTimerHandle',
    'LoadTriggerHandle',
    'LoadTriggerConditionHandle',
    'LoadTriggerActionHandle',
    'LoadTriggerEventHandle',
    'LoadForceHandle',
    'LoadGroupHandle',
    'LoadLocationHandle',
    'LoadRectHandle',
    'LoadBooleanExprHandle',
    'LoadSoundHandle',
    'LoadEffectHandle',
    'LoadUnitPoolHandle',
    'LoadItemPoolHandle',
    'LoadQuestHandle',
    'LoadQuestItemHandle',
    'LoadDefeatConditionHandle',
    'LoadTimerDialogHandle',
    'LoadLeaderboardHandle',
    'LoadMultiboardHandle',
    'LoadMultiboardItemHandle',
    'LoadTrackableHandle',
    'LoadDialogHandle',
    'LoadButtonHandle',
    'LoadTextTagHandle',
    'LoadLightningHandle',
    'LoadImageHandle',
    'LoadUbersplatHandle',
    'LoadRegionHandle',
    'LoadFogStateHandle',
    'LoadFogModifierHandle',
    'LoadHashtableHandle',
    'LoadFrameHandle',
    'HaveSavedInteger',
    'HaveSavedReal',
    'HaveSavedBoolean',
    'HaveSavedString',
    'HaveSavedHandle',
    'RemoveSavedInteger',
    'RemoveSavedReal',
    'RemoveSavedBoolean',
    'RemoveSavedString',
    'RemoveSavedHandle',
    'FlushParentHashtable',
    'FlushChildHashtable',
    'GetRandomInt',
    'GetRandomReal',
    'CreateUnitPool',
    'DestroyUnitPool',
    'UnitPoolAddUnitType',
    'UnitPoolRemoveUnitType',
    'PlaceRandomUnit',
    'CreateItemPool',
    'DestroyItemPool',
    'ItemPoolAddItemType',
    'ItemPoolRemoveItemType',
    'PlaceRandomItem',
    'ChooseRandomCreep',
    'ChooseRandomNPBuilding',
    'ChooseRandomItem',
    'ChooseRandomItemEx',
    'SetRandomSeed',
    'SetTerrainFog',
    'ResetTerrainFog',
    'SetUnitFog',
    'SetTerrainFogEx',
    'DisplayTextToPlayer',
    'DisplayTimedTextToPlayer',
    'DisplayTimedTextFromPlayer',
    'ClearTextMessages',
    'SetDayNightModels',
    'SetPortraitLight',
    'SetSkyModel',
    'EnableUserControl',
    'EnableUserUI',
    'SuspendTimeOfDay',
    'SetTimeOfDayScale',
    'GetTimeOfDayScale',
    'ShowInterface',
    'PauseGame',
    'UnitAddIndicator',
    'AddIndicator',
    'PingMinimap',
    'PingMinimapEx',
    'CreateMinimapIconOnUnit',
    'CreateMinimapIconAtLoc',
    'CreateMinimapIcon',
    'SkinManagerGetLocalPath',
    'DestroyMinimapIcon',
    'SetMinimapIconVisible',
    'SetMinimapIconOrphanDestroy',
    'EnableOcclusion',
    'SetIntroShotText',
    'SetIntroShotModel',
    'EnableWorldFogBoundary',
    'PlayModelCinematic',
    'PlayCinematic',
    'ForceUIKey',
    'ForceUICancel',
    'DisplayLoadDialog',
    'SetAltMinimapIcon',
    'DisableRestartMission',
    'CreateTextTag',
    'DestroyTextTag',
    'SetTextTagText',
    'SetTextTagPos',
    'SetTextTagPosUnit',
    'SetTextTagColor',
    'SetTextTagVelocity',
    'SetTextTagVisibility',
    'SetTextTagSuspended',
    'SetTextTagPermanent',
    'SetTextTagAge',
    'SetTextTagLifespan',
    'SetTextTagFadepoint',
    'SetReservedLocalHeroButtons',
    'GetAllyColorFilterState',
    'SetAllyColorFilterState',
    'GetCreepCampFilterState',
    'SetCreepCampFilterState',
    'EnableMinimapFilterButtons',
    'EnableDragSelect',
    'EnablePreSelect',
    'EnableSelect',
    'CreateTrackable',
    'CreateQuest',
    'DestroyQuest',
    'QuestSetTitle',
    'QuestSetDescription',
    'QuestSetIconPath',
    'QuestSetRequired',
    'QuestSetCompleted',
    'QuestSetDiscovered',
    'QuestSetFailed',
    'QuestSetEnabled',
    'IsQuestRequired',
    'IsQuestCompleted',
    'IsQuestDiscovered',
    'IsQuestFailed',
    'IsQuestEnabled',
    'QuestCreateItem',
    'QuestItemSetDescription',
    'QuestItemSetCompleted',
    'IsQuestItemCompleted',
    'CreateDefeatCondition',
    'DestroyDefeatCondition',
    'DefeatConditionSetDescription',
    'FlashQuestDialogButton',
    'ForceQuestDialogUpdate',
    'CreateTimerDialog',
    'DestroyTimerDialog',
    'TimerDialogSetTitle',
    'TimerDialogSetTitleColor',
    'TimerDialogSetTimeColor',
    'TimerDialogSetSpeed',
    'TimerDialogDisplay',
    'IsTimerDialogDisplayed',
    'TimerDialogSetRealTimeRemaining',
    'CreateLeaderboard',
    'DestroyLeaderboard',
    'LeaderboardDisplay',
    'IsLeaderboardDisplayed',
    'LeaderboardGetItemCount',
    'LeaderboardSetSizeByItemCount',
    'LeaderboardAddItem',
    'LeaderboardRemoveItem',
    'LeaderboardRemovePlayerItem',
    'LeaderboardClear',
    'LeaderboardSortItemsByValue',
    'LeaderboardSortItemsByPlayer',
    'LeaderboardSortItemsByLabel',
    'LeaderboardHasPlayerItem',
    'LeaderboardGetPlayerIndex',
    'LeaderboardSetLabel',
    'LeaderboardGetLabelText',
    'PlayerSetLeaderboard',
    'PlayerGetLeaderboard',
    'LeaderboardSetLabelColor',
    'LeaderboardSetValueColor',
    'LeaderboardSetStyle',
    'LeaderboardSetItemValue',
    'LeaderboardSetItemLabel',
    'LeaderboardSetItemStyle',
    'LeaderboardSetItemLabelColor',
    'LeaderboardSetItemValueColor',
    'CreateMultiboard',
    'DestroyMultiboard',
    'MultiboardDisplay',
    'IsMultiboardDisplayed',
    'MultiboardMinimize',
    'IsMultiboardMinimized',
    'MultiboardClear',
    'MultiboardSetTitleText',
    'MultiboardGetTitleText',
    'MultiboardSetTitleTextColor',
    'MultiboardGetRowCount',
    'MultiboardGetColumnCount',
    'MultiboardSetColumnCount',
    'MultiboardSetRowCount',
    'MultiboardSetItemsStyle',
    'MultiboardSetItemsValue',
    'MultiboardSetItemsValueColor',
    'MultiboardSetItemsWidth',
    'MultiboardSetItemsIcon',
    'MultiboardGetItem',
    'MultiboardReleaseItem',
    'MultiboardSetItemStyle',
    'MultiboardSetItemValue',
    'MultiboardSetItemValueColor',
    'MultiboardSetItemWidth',
    'MultiboardSetItemIcon',
    'MultiboardSuppressDisplay',
    'SetCameraPosition',
    'SetCameraQuickPosition',
    'SetCameraBounds',
    'StopCamera',
    'ResetToGameCamera',
    'PanCameraTo',
    'PanCameraToTimed',
    'PanCameraToWithZ',
    'PanCameraToTimedWithZ',
    'SetCinematicCamera',
    'SetCameraRotateMode',
    'SetCameraField',
    'AdjustCameraField',
    'SetCameraTargetController',
    'SetCameraOrientController',
    'CreateCameraSetup',
    'CameraSetupSetField',
    'CameraSetupGetField',
    'CameraSetupSetDestPosition',
    'CameraSetupGetDestPositionLoc',
    'CameraSetupGetDestPositionX',
    'CameraSetupGetDestPositionY',
    'CameraSetupApply',
    'CameraSetupApplyWithZ',
    'CameraSetupApplyForceDuration',
    'CameraSetupApplyForceDurationWithZ',
    'BlzCameraSetupSetLabel',
    'BlzCameraSetupGetLabel',
    'CameraSetTargetNoise',
    'CameraSetSourceNoise',
    'CameraSetTargetNoiseEx',
    'CameraSetSourceNoiseEx',
    'CameraSetSmoothingFactor',
    'CameraSetFocalDistance',
    'CameraSetDepthOfFieldScale',
    'SetCineFilterTexture',
    'SetCineFilterBlendMode',
    'SetCineFilterTexMapFlags',
    'SetCineFilterStartUV',
    'SetCineFilterEndUV',
    'SetCineFilterStartColor',
    'SetCineFilterEndColor',
    'SetCineFilterDuration',
    'DisplayCineFilter',
    'IsCineFilterDisplayed',
    'SetCinematicScene',
    'EndCinematicScene',
    'ForceCinematicSubtitles',
    'SetCinematicAudio',
    'GetCameraMargin',
    'GetCameraBoundMinX',
    'GetCameraBoundMinY',
    'GetCameraBoundMaxX',
    'GetCameraBoundMaxY',
    'GetCameraField',
    'GetCameraTargetPositionX',
    'GetCameraTargetPositionY',
    'GetCameraTargetPositionZ',
    'GetCameraTargetPositionLoc',
    'GetCameraEyePositionX',
    'GetCameraEyePositionY',
    'GetCameraEyePositionZ',
    'GetCameraEyePositionLoc',
    'NewSoundEnvironment',
    'CreateSound',
    'CreateSoundFilenameWithLabel',
    'CreateSoundFromLabel',
    'CreateMIDISound',
    'SetSoundParamsFromLabel',
    'SetSoundDistanceCutoff',
    'SetSoundChannel',
    'SetSoundVolume',
    'SetSoundPitch',
    'SetSoundPlayPosition',
    'SetSoundDistances',
    'SetSoundConeAngles',
    'SetSoundConeOrientation',
    'SetSoundPosition',
    'SetSoundVelocity',
    'AttachSoundToUnit',
    'StartSound',
    'StopSound',
    'KillSoundWhenDone',
    'SetMapMusic',
    'ClearMapMusic',
    'PlayMusic',
    'PlayMusicEx',
    'StopMusic',
    'ResumeMusic',
    'PlayThematicMusic',
    'PlayThematicMusicEx',
    'EndThematicMusic',
    'SetMusicVolume',
    'SetMusicPlayPosition',
    'SetThematicMusicVolume',
    'SetThematicMusicPlayPosition',
    'SetSoundDuration',
    'GetSoundDuration',
    'GetSoundFileDuration',
    'VolumeGroupSetVolume',
    'VolumeGroupReset',
    'GetSoundIsPlaying',
    'GetSoundIsLoading',
    'RegisterStackedSound',
    'UnregisterStackedSound',
    'SetSoundFacialAnimationLabel',
    'SetSoundFacialAnimationGroupLabel',
    'SetSoundFacialAnimationSetFilepath',
    'SetDialogueSpeakerNameKey',
    'GetDialogueSpeakerNameKey',
    'SetDialogueTextKey',
    'GetDialogueTextKey',
    'AddWeatherEffect',
    'RemoveWeatherEffect',
    'EnableWeatherEffect',
    'TerrainDeformCrater',
    'TerrainDeformRipple',
    'TerrainDeformWave',
    'TerrainDeformRandom',
    'TerrainDeformStop',
    'TerrainDeformStopAll',
    'AddSpecialEffect',
    'AddSpecialEffectLoc',
    'AddSpecialEffectTarget',
    'DestroyEffect',
    'AddSpellEffect',
    'AddSpellEffectLoc',
    'AddSpellEffectById',
    'AddSpellEffectByIdLoc',
    'AddSpellEffectTarget',
    'AddSpellEffectTargetById',
    'AddLightning',
    'AddLightningEx',
    'DestroyLightning',
    'MoveLightning',
    'MoveLightningEx',
    'GetLightningColorA',
    'GetLightningColorR',
    'GetLightningColorG',
    'GetLightningColorB',
    'SetLightningColor',
    'GetAbilityEffect',
    'GetAbilityEffectById',
    'GetAbilitySound',
    'GetAbilitySoundById',
    'GetTerrainCliffLevel',
    'SetWaterBaseColor',
    'SetWaterDeforms',
    'GetTerrainType',
    'GetTerrainVariance',
    'SetTerrainType',
    'IsTerrainPathable',
    'SetTerrainPathable',
    'CreateImage',
    'DestroyImage',
    'ShowImage',
    'SetImageConstantHeight',
    'SetImagePosition',
    'SetImageColor',
    'SetImageRender',
    'SetImageRenderAlways',
    'SetImageAboveWater',
    'SetImageType',
    'CreateUbersplat',
    'DestroyUbersplat',
    'ResetUbersplat',
    'FinishUbersplat',
    'ShowUbersplat',
    'SetUbersplatRender',
    'SetUbersplatRenderAlways',
    'SetBlight',
    'SetBlightRect',
    'SetBlightPoint',
    'SetBlightLoc',
    'CreateBlightedGoldmine',
    'IsPointBlighted',
    'SetDoodadAnimation',
    'SetDoodadAnimationRect',
    'StartMeleeAI',
    'StartCampaignAI',
    'CommandAI',
    'PauseCompAI',
    'GetAIDifficulty',
    'RemoveGuardPosition',
    'RecycleGuardPosition',
    'RemoveAllGuardPositions',
    'Cheat',
    'IsNoVictoryCheat',
    'IsNoDefeatCheat',
    'Preload',
    'PreloadEnd',
    'PreloadStart',
    'PreloadRefresh',
    'PreloadEndEx',
    'PreloadGenClear',
    'PreloadGenStart',
    'PreloadGenEnd',
    'Preloader',
    'BlzHideCinematicPanels',
    'AutomationSetTestType',
    'AutomationTestStart',
    'AutomationTestEnd',
    'AutomationTestingFinished',
    'BlzGetTriggerPlayerMouseX',
    'BlzGetTriggerPlayerMouseY',
    'BlzGetTriggerPlayerMousePosition',
    'BlzGetTriggerPlayerMouseButton',
    'BlzSetAbilityTooltip',
    'BlzSetAbilityActivatedTooltip',
    'BlzSetAbilityExtendedTooltip',
    'BlzSetAbilityActivatedExtendedTooltip',
    'BlzSetAbilityResearchTooltip',
    'BlzSetAbilityResearchExtendedTooltip',
    'BlzGetAbilityTooltip',
    'BlzGetAbilityActivatedTooltip',
    'BlzGetAbilityExtendedTooltip',
    'BlzGetAbilityActivatedExtendedTooltip',
    'BlzGetAbilityResearchTooltip',
    'BlzGetAbilityResearchExtendedTooltip',
    'BlzSetAbilityIcon',
    'BlzGetAbilityIcon',
    'BlzSetAbilityActivatedIcon',
    'BlzGetAbilityActivatedIcon',
    'BlzGetAbilityPosX',
    'BlzGetAbilityPosY',
    'BlzSetAbilityPosX',
    'BlzSetAbilityPosY',
    'BlzGetAbilityActivatedPosX',
    'BlzGetAbilityActivatedPosY',
    'BlzSetAbilityActivatedPosX',
    'BlzSetAbilityActivatedPosY',
    'BlzGetUnitMaxHP',
    'BlzSetUnitMaxHP',
    'BlzGetUnitMaxMana',
    'BlzSetUnitMaxMana',
    'BlzSetItemName',
    'BlzSetItemDescription',
    'BlzGetItemDescription',
    'BlzSetItemTooltip',
    'BlzGetItemTooltip',
    'BlzSetItemExtendedTooltip',
    'BlzGetItemExtendedTooltip',
    'BlzSetItemIconPath',
    'BlzGetItemIconPath',
    'BlzSetUnitName',
    'BlzSetHeroProperName',
    'BlzGetUnitBaseDamage',
    'BlzSetUnitBaseDamage',
    'BlzGetUnitDiceNumber',
    'BlzSetUnitDiceNumber',
    'BlzGetUnitDiceSides',
    'BlzSetUnitDiceSides',
    'BlzGetUnitAttackCooldown',
    'BlzSetUnitAttackCooldown',
    'BlzSetSpecialEffectColorByPlayer',
    'BlzSetSpecialEffectColor',
    'BlzSetSpecialEffectAlpha',
    'BlzSetSpecialEffectScale',
    'BlzSetSpecialEffectPosition',
    'BlzSetSpecialEffectHeight',
    'BlzSetSpecialEffectTimeScale',
    'BlzSetSpecialEffectTime',
    'BlzSetSpecialEffectOrientation',
    'BlzSetSpecialEffectYaw',
    'BlzSetSpecialEffectPitch',
    'BlzSetSpecialEffectRoll',
    'BlzSetSpecialEffectX',
    'BlzSetSpecialEffectY',
    'BlzSetSpecialEffectZ',
    'BlzSetSpecialEffectPositionLoc',
    'BlzGetLocalSpecialEffectX',
    'BlzGetLocalSpecialEffectY',
    'BlzGetLocalSpecialEffectZ',
    'BlzSpecialEffectClearSubAnimations',
    'BlzSpecialEffectRemoveSubAnimation',
    'BlzSpecialEffectAddSubAnimation',
    'BlzPlaySpecialEffect',
    'BlzPlaySpecialEffectWithTimeScale',
    'BlzGetAnimName',
    'BlzGetUnitArmor',
    'BlzSetUnitArmor',
    'BlzUnitHideAbility',
    'BlzUnitDisableAbility',
    'BlzUnitCancelTimedLife',
    'BlzIsUnitSelectable',
    'BlzIsUnitInvulnerable',
    'BlzUnitInterruptAttack',
    'BlzGetUnitCollisionSize',
    'BlzGetAbilityManaCost',
    'BlzGetAbilityCooldown',
    'BlzSetUnitAbilityCooldown',
    'BlzGetUnitAbilityCooldown',
    'BlzGetUnitAbilityCooldownRemaining',
    'BlzEndUnitAbilityCooldown',
    'BlzStartUnitAbilityCooldown',
    'BlzGetUnitAbilityManaCost',
    'BlzSetUnitAbilityManaCost',
    'BlzGetLocalUnitZ',
    'BlzDecPlayerTechResearched',
    'BlzSetEventDamage',
    'BlzGetEventDamageTarget',
    'BlzGetEventAttackType',
    'BlzGetEventDamageType',
    'BlzGetEventWeaponType',
    'BlzSetEventAttackType',
    'BlzSetEventDamageType',
    'BlzSetEventWeaponType',
    'BlzGetEventIsAttack',
    'RequestExtraIntegerData',
    'RequestExtraBooleanData',
    'RequestExtraStringData',
    'RequestExtraRealData',
    'BlzGetUnitZ',
    'BlzEnableSelections',
    'BlzIsSelectionEnabled',
    'BlzIsSelectionCircleEnabled',
    'BlzCameraSetupApplyForceDurationSmooth',
    'BlzEnableTargetIndicator',
    'BlzIsTargetIndicatorEnabled',
    'BlzShowTerrain',
    'BlzShowSkyBox',
    'BlzStartRecording',
    'BlzEndRecording',
    'BlzShowUnitTeamGlow',
    'BlzGetOriginFrame',
    'BlzEnableUIAutoPosition',
    'BlzHideOriginFrames',
    'BlzConvertColor',
    'BlzLoadTOCFile',
    'BlzCreateFrame',
    'BlzCreateSimpleFrame',
    'BlzCreateFrameByType',
    'BlzDestroyFrame',
    'BlzFrameSetPoint',
    'BlzFrameSetAbsPoint',
    'BlzFrameClearAllPoints',
    'BlzFrameSetAllPoints',
    'BlzFrameSetVisible',
    'BlzFrameIsVisible',
    'BlzGetFrameByName',
    'BlzFrameGetName',
    'BlzFrameClick',
    'BlzFrameSetText',
    'BlzFrameGetText',
    'BlzFrameAddText',
    'BlzFrameSetTextSizeLimit',
    'BlzFrameGetTextSizeLimit',
    'BlzFrameSetTextColor',
    'BlzFrameSetFocus',
    'BlzFrameSetModel',
    'BlzFrameSetEnable',
    'BlzFrameGetEnable',
    'BlzFrameSetAlpha',
    'BlzFrameGetAlpha',
    'BlzFrameSetSpriteAnimate',
    'BlzFrameSetTexture',
    'BlzFrameSetScale',
    'BlzFrameSetTooltip',
    'BlzFrameCageMouse',
    'BlzFrameSetValue',
    'BlzFrameGetValue',
    'BlzFrameSetMinMaxValue',
    'BlzFrameSetStepSize',
    'BlzFrameSetSize',
    'BlzFrameSetVertexColor',
    'BlzFrameSetLevel',
    'BlzFrameSetParent',
    'BlzFrameGetParent',
    'BlzFrameGetHeight',
    'BlzFrameGetWidth',
    'BlzFrameSetFont',
    'BlzFrameSetTextAlignment',
    'BlzTriggerRegisterFrameEvent',
    'BlzGetTriggerFrame',
    'BlzGetTriggerFrameEvent',
    'BlzGetTriggerFrameValue',
    'BlzGetTriggerFrameText',
    'BlzTriggerRegisterPlayerSyncEvent',
    'BlzSendSyncData',
    'BlzGetTriggerSyncPrefix',
    'BlzGetTriggerSyncData',
    'BlzTriggerRegisterPlayerKeyEvent',
    'BlzGetTriggerPlayerKey',
    'BlzGetTriggerPlayerMetaKey',
    'BlzGetTriggerPlayerIsKeyDown',
    'BlzEnableCursor',
    'BlzSetMousePos',
    'BlzGetLocalClientWidth',
    'BlzGetLocalClientHeight',
    'BlzIsLocalClientActive',
    'BlzGetMouseFocusUnit',
    'BlzChangeMinimapTerrainTex',
    'BlzGetLocale',
    'BlzGetSpecialEffectScale',
    'BlzSetSpecialEffectMatrixScale',
    'BlzResetSpecialEffectMatrix',
    'BlzGetUnitAbility',
    'BlzGetUnitAbilityByIndex',
    'BlzDisplayChatMessage',
    'BlzPauseUnitEx',
    'BlzSetUnitFacingEx',
    'CreateCommandButtonEffect',
    'CreateUpgradeCommandButtonEffect',
    'CreateLearnCommandButtonEffect',
    'DestroyCommandButtonEffect',
    'BlzBitOr',
    'BlzBitAnd',
    'BlzBitXor',
    'BlzGetAbilityBooleanField',
    'BlzGetAbilityIntegerField',
    'BlzGetAbilityRealField',
    'BlzGetAbilityStringField',
    'BlzGetAbilityBooleanLevelField',
    'BlzGetAbilityIntegerLevelField',
    'BlzGetAbilityRealLevelField',
    'BlzGetAbilityStringLevelField',
    'BlzGetAbilityBooleanLevelArrayField',
    'BlzGetAbilityIntegerLevelArrayField',
    'BlzGetAbilityRealLevelArrayField',
    'BlzGetAbilityStringLevelArrayField',
    'BlzSetAbilityBooleanField',
    'BlzSetAbilityIntegerField',
    'BlzSetAbilityRealField',
    'BlzSetAbilityStringField',
    'BlzSetAbilityBooleanLevelField',
    'BlzSetAbilityIntegerLevelField',
    'BlzSetAbilityRealLevelField',
    'BlzSetAbilityStringLevelField',
    'BlzSetAbilityBooleanLevelArrayField',
    'BlzSetAbilityIntegerLevelArrayField',
    'BlzSetAbilityRealLevelArrayField',
    'BlzSetAbilityStringLevelArrayField',
    'BlzAddAbilityBooleanLevelArrayField',
    'BlzAddAbilityIntegerLevelArrayField',
    'BlzAddAbilityRealLevelArrayField',
    'BlzAddAbilityStringLevelArrayField',
    'BlzRemoveAbilityBooleanLevelArrayField',
    'BlzRemoveAbilityIntegerLevelArrayField',
    'BlzRemoveAbilityRealLevelArrayField',
    'BlzRemoveAbilityStringLevelArrayField',
    'BlzGetItemAbilityByIndex',
    'BlzGetItemAbility',
    'BlzItemAddAbility',
    'BlzGetItemBooleanField',
    'BlzGetItemIntegerField',
    'BlzGetItemRealField',
    'BlzGetItemStringField',
    'BlzSetItemBooleanField',
    'BlzSetItemIntegerField',
    'BlzSetItemRealField',
    'BlzSetItemStringField',
    'BlzItemRemoveAbility',
    'BlzGetUnitBooleanField',
    'BlzGetUnitIntegerField',
    'BlzGetUnitRealField',
    'BlzGetUnitStringField',
    'BlzSetUnitBooleanField',
    'BlzSetUnitIntegerField',
    'BlzSetUnitRealField',
    'BlzSetUnitStringField',
    'BlzGetUnitWeaponBooleanField',
    'BlzGetUnitWeaponIntegerField',
    'BlzGetUnitWeaponRealField',
    'BlzGetUnitWeaponStringField',
    'BlzSetUnitWeaponBooleanField',
    'BlzSetUnitWeaponIntegerField',
    'BlzSetUnitWeaponRealField',
    'BlzSetUnitWeaponStringField',
    'BlzGetUnitSkin',
    'BlzGetItemSkin',
    'BlzSetUnitSkin',
    'BlzSetItemSkin',
    'BlzCreateItemWithSkin',
    'BlzCreateUnitWithSkin',
    'BlzCreateDestructableWithSkin',
    'BlzCreateDestructableZWithSkin',
    'BlzCreateDeadDestructableWithSkin',
    'BlzCreateDeadDestructableZWithSkin',
    'BlzGetPlayerTownHallCount',
    'FALSE',
    'TRUE',
    'JASS_MAX_ARRAY_SIZE',
    'PLAYER_NEUTRAL_PASSIVE',
    'PLAYER_NEUTRAL_AGGRESSIVE',
    'PLAYER_COLOR_RED',
    'PLAYER_COLOR_BLUE',
    'PLAYER_COLOR_CYAN',
    'PLAYER_COLOR_PURPLE',
    'PLAYER_COLOR_YELLOW',
    'PLAYER_COLOR_ORANGE',
    'PLAYER_COLOR_GREEN',
    'PLAYER_COLOR_PINK',
    'PLAYER_COLOR_LIGHT_GRAY',
    'PLAYER_COLOR_LIGHT_BLUE',
    'PLAYER_COLOR_AQUA',
    'PLAYER_COLOR_BROWN',
    'PLAYER_COLOR_MAROON',
    'PLAYER_COLOR_NAVY',
    'PLAYER_COLOR_TURQUOISE',
    'PLAYER_COLOR_VIOLET',
    'PLAYER_COLOR_WHEAT',
    'PLAYER_COLOR_PEACH',
    'PLAYER_COLOR_MINT',
    'PLAYER_COLOR_LAVENDER',
    'PLAYER_COLOR_COAL',
    'PLAYER_COLOR_SNOW',
    'PLAYER_COLOR_EMERALD',
    'PLAYER_COLOR_PEANUT',
    'RACE_HUMAN',
    'RACE_ORC',
    'RACE_UNDEAD',
    'RACE_NIGHTELF',
    'RACE_DEMON',
    'RACE_OTHER',
    'PLAYER_GAME_RESULT_VICTORY',
    'PLAYER_GAME_RESULT_DEFEAT',
    'PLAYER_GAME_RESULT_TIE',
    'PLAYER_GAME_RESULT_NEUTRAL',
    'ALLIANCE_PASSIVE',
    'ALLIANCE_HELP_REQUEST',
    'ALLIANCE_HELP_RESPONSE',
    'ALLIANCE_SHARED_XP',
    'ALLIANCE_SHARED_SPELLS',
    'ALLIANCE_SHARED_VISION',
    'ALLIANCE_SHARED_CONTROL',
    'ALLIANCE_SHARED_ADVANCED_CONTROL',
    'ALLIANCE_RESCUABLE',
    'ALLIANCE_SHARED_VISION_FORCED',
    'VERSION_REIGN_OF_CHAOS',
    'VERSION_FROZEN_THRONE',
    'ATTACK_TYPE_NORMAL',
    'ATTACK_TYPE_MELEE',
    'ATTACK_TYPE_PIERCE',
    'ATTACK_TYPE_SIEGE',
    'ATTACK_TYPE_MAGIC',
    'ATTACK_TYPE_CHAOS',
    'ATTACK_TYPE_HERO',
    'DAMAGE_TYPE_UNKNOWN',
    'DAMAGE_TYPE_NORMAL',
    'DAMAGE_TYPE_ENHANCED',
    'DAMAGE_TYPE_FIRE',
    'DAMAGE_TYPE_COLD',
    'DAMAGE_TYPE_LIGHTNING',
    'DAMAGE_TYPE_POISON',
    'DAMAGE_TYPE_DISEASE',
    'DAMAGE_TYPE_DIVINE',
    'DAMAGE_TYPE_MAGIC',
    'DAMAGE_TYPE_SONIC',
    'DAMAGE_TYPE_ACID',
    'DAMAGE_TYPE_FORCE',
    'DAMAGE_TYPE_DEATH',
    'DAMAGE_TYPE_MIND',
    'DAMAGE_TYPE_PLANT',
    'DAMAGE_TYPE_DEFENSIVE',
    'DAMAGE_TYPE_DEMOLITION',
    'DAMAGE_TYPE_SLOW_POISON',
    'DAMAGE_TYPE_SPIRIT_LINK',
    'DAMAGE_TYPE_SHADOW_STRIKE',
    'DAMAGE_TYPE_UNIVERSAL',
    'WEAPON_TYPE_WHOKNOWS',
    'WEAPON_TYPE_METAL_LIGHT_CHOP',
    'WEAPON_TYPE_METAL_MEDIUM_CHOP',
    'WEAPON_TYPE_METAL_HEAVY_CHOP',
    'WEAPON_TYPE_METAL_LIGHT_SLICE',
    'WEAPON_TYPE_METAL_MEDIUM_SLICE',
    'WEAPON_TYPE_METAL_HEAVY_SLICE',
    'WEAPON_TYPE_METAL_MEDIUM_BASH',
    'WEAPON_TYPE_METAL_HEAVY_BASH',
    'WEAPON_TYPE_METAL_MEDIUM_STAB',
    'WEAPON_TYPE_METAL_HEAVY_STAB',
    'WEAPON_TYPE_WOOD_LIGHT_SLICE',
    'WEAPON_TYPE_WOOD_MEDIUM_SLICE',
    'WEAPON_TYPE_WOOD_HEAVY_SLICE',
    'WEAPON_TYPE_WOOD_LIGHT_BASH',
    'WEAPON_TYPE_WOOD_MEDIUM_BASH',
    'WEAPON_TYPE_WOOD_HEAVY_BASH',
    'WEAPON_TYPE_WOOD_LIGHT_STAB',
    'WEAPON_TYPE_WOOD_MEDIUM_STAB',
    'WEAPON_TYPE_CLAW_LIGHT_SLICE',
    'WEAPON_TYPE_CLAW_MEDIUM_SLICE',
    'WEAPON_TYPE_CLAW_HEAVY_SLICE',
    'WEAPON_TYPE_AXE_MEDIUM_CHOP',
    'WEAPON_TYPE_ROCK_HEAVY_BASH',
    'PATHING_TYPE_ANY',
    'PATHING_TYPE_WALKABILITY',
    'PATHING_TYPE_FLYABILITY',
    'PATHING_TYPE_BUILDABILITY',
    'PATHING_TYPE_PEONHARVESTPATHING',
    'PATHING_TYPE_BLIGHTPATHING',
    'PATHING_TYPE_FLOATABILITY',
    'PATHING_TYPE_AMPHIBIOUSPATHING',
    'MOUSE_BUTTON_TYPE_LEFT',
    'MOUSE_BUTTON_TYPE_MIDDLE',
    'MOUSE_BUTTON_TYPE_RIGHT',
    'ANIM_TYPE_BIRTH',
    'ANIM_TYPE_DEATH',
    'ANIM_TYPE_DECAY',
    'ANIM_TYPE_DISSIPATE',
    'ANIM_TYPE_STAND',
    'ANIM_TYPE_WALK',
    'ANIM_TYPE_ATTACK',
    'ANIM_TYPE_MORPH',
    'ANIM_TYPE_SLEEP',
    'ANIM_TYPE_SPELL',
    'ANIM_TYPE_PORTRAIT',
    'SUBANIM_TYPE_ROOTED',
    'SUBANIM_TYPE_ALTERNATE_EX',
    'SUBANIM_TYPE_LOOPING',
    'SUBANIM_TYPE_SLAM',
    'SUBANIM_TYPE_THROW',
    'SUBANIM_TYPE_SPIKED',
    'SUBANIM_TYPE_FAST',
    'SUBANIM_TYPE_SPIN',
    'SUBANIM_TYPE_READY',
    'SUBANIM_TYPE_CHANNEL',
    'SUBANIM_TYPE_DEFEND',
    'SUBANIM_TYPE_VICTORY',
    'SUBANIM_TYPE_TURN',
    'SUBANIM_TYPE_LEFT',
    'SUBANIM_TYPE_RIGHT',
    'SUBANIM_TYPE_FIRE',
    'SUBANIM_TYPE_FLESH',
    'SUBANIM_TYPE_HIT',
    'SUBANIM_TYPE_WOUNDED',
    'SUBANIM_TYPE_LIGHT',
    'SUBANIM_TYPE_MODERATE',
    'SUBANIM_TYPE_SEVERE',
    'SUBANIM_TYPE_CRITICAL',
    'SUBANIM_TYPE_COMPLETE',
    'SUBANIM_TYPE_GOLD',
    'SUBANIM_TYPE_LUMBER',
    'SUBANIM_TYPE_WORK',
    'SUBANIM_TYPE_TALK',
    'SUBANIM_TYPE_FIRST',
    'SUBANIM_TYPE_SECOND',
    'SUBANIM_TYPE_THIRD',
    'SUBANIM_TYPE_FOURTH',
    'SUBANIM_TYPE_FIFTH',
    'SUBANIM_TYPE_ONE',
    'SUBANIM_TYPE_TWO',
    'SUBANIM_TYPE_THREE',
    'SUBANIM_TYPE_FOUR',
    'SUBANIM_TYPE_FIVE',
    'SUBANIM_TYPE_SMALL',
    'SUBANIM_TYPE_MEDIUM',
    'SUBANIM_TYPE_LARGE',
    'SUBANIM_TYPE_UPGRADE',
    'SUBANIM_TYPE_DRAIN',
    'SUBANIM_TYPE_FILL',
    'SUBANIM_TYPE_CHAINLIGHTNING',
    'SUBANIM_TYPE_EATTREE',
    'SUBANIM_TYPE_PUKE',
    'SUBANIM_TYPE_FLAIL',
    'SUBANIM_TYPE_OFF',
    'SUBANIM_TYPE_SWIM',
    'SUBANIM_TYPE_ENTANGLE',
    'SUBANIM_TYPE_BERSERK',
    'RACE_PREF_HUMAN',
    'RACE_PREF_ORC',
    'RACE_PREF_NIGHTELF',
    'RACE_PREF_UNDEAD',
    'RACE_PREF_DEMON',
    'RACE_PREF_RANDOM',
    'RACE_PREF_USER_SELECTABLE',
    'MAP_CONTROL_USER',
    'MAP_CONTROL_COMPUTER',
    'MAP_CONTROL_RESCUABLE',
    'MAP_CONTROL_NEUTRAL',
    'MAP_CONTROL_CREEP',
    'MAP_CONTROL_NONE',
    'GAME_TYPE_MELEE',
    'GAME_TYPE_FFA',
    'GAME_TYPE_USE_MAP_SETTINGS',
    'GAME_TYPE_BLIZ',
    'GAME_TYPE_ONE_ON_ONE',
    'GAME_TYPE_TWO_TEAM_PLAY',
    'GAME_TYPE_THREE_TEAM_PLAY',
    'GAME_TYPE_FOUR_TEAM_PLAY',
    'MAP_FOG_HIDE_TERRAIN',
    'MAP_FOG_MAP_EXPLORED',
    'MAP_FOG_ALWAYS_VISIBLE',
    'MAP_USE_HANDICAPS',
    'MAP_OBSERVERS',
    'MAP_OBSERVERS_ON_DEATH',
    'MAP_FIXED_COLORS',
    'MAP_LOCK_RESOURCE_TRADING',
    'MAP_RESOURCE_TRADING_ALLIES_ONLY',
    'MAP_LOCK_ALLIANCE_CHANGES',
    'MAP_ALLIANCE_CHANGES_HIDDEN',
    'MAP_CHEATS',
    'MAP_CHEATS_HIDDEN',
    'MAP_LOCK_SPEED',
    'MAP_LOCK_RANDOM_SEED',
    'MAP_SHARED_ADVANCED_CONTROL',
    'MAP_RANDOM_HERO',
    'MAP_RANDOM_RACES',
    'MAP_RELOADED',
    'MAP_PLACEMENT_RANDOM',
    'MAP_PLACEMENT_FIXED',
    'MAP_PLACEMENT_USE_MAP_SETTINGS',
    'MAP_PLACEMENT_TEAMS_TOGETHER',
    'MAP_LOC_PRIO_LOW',
    'MAP_LOC_PRIO_HIGH',
    'MAP_LOC_PRIO_NOT',
    'MAP_DENSITY_NONE',
    'MAP_DENSITY_LIGHT',
    'MAP_DENSITY_MEDIUM',
    'MAP_DENSITY_HEAVY',
    'MAP_DIFFICULTY_EASY',
    'MAP_DIFFICULTY_NORMAL',
    'MAP_DIFFICULTY_HARD',
    'MAP_DIFFICULTY_INSANE',
    'MAP_SPEED_SLOWEST',
    'MAP_SPEED_SLOW',
    'MAP_SPEED_NORMAL',
    'MAP_SPEED_FAST',
    'MAP_SPEED_FASTEST',
    'PLAYER_SLOT_STATE_EMPTY',
    'PLAYER_SLOT_STATE_PLAYING',
    'PLAYER_SLOT_STATE_LEFT',
    'SOUND_VOLUMEGROUP_UNITMOVEMENT',
    'SOUND_VOLUMEGROUP_UNITSOUNDS',
    'SOUND_VOLUMEGROUP_COMBAT',
    'SOUND_VOLUMEGROUP_SPELLS',
    'SOUND_VOLUMEGROUP_UI',
    'SOUND_VOLUMEGROUP_MUSIC',
    'SOUND_VOLUMEGROUP_AMBIENTSOUNDS',
    'SOUND_VOLUMEGROUP_FIRE',
    'GAME_STATE_DIVINE_INTERVENTION',
    'GAME_STATE_DISCONNECTED',
    'GAME_STATE_TIME_OF_DAY',
    'PLAYER_STATE_GAME_RESULT',
    'PLAYER_STATE_RESOURCE_GOLD',
    'PLAYER_STATE_RESOURCE_LUMBER',
    'PLAYER_STATE_RESOURCE_HERO_TOKENS',
    'PLAYER_STATE_RESOURCE_FOOD_CAP',
    'PLAYER_STATE_RESOURCE_FOOD_USED',
    'PLAYER_STATE_FOOD_CAP_CEILING',
    'PLAYER_STATE_GIVES_BOUNTY',
    'PLAYER_STATE_ALLIED_VICTORY',
    'PLAYER_STATE_PLACED',
    'PLAYER_STATE_OBSERVER_ON_DEATH',
    'PLAYER_STATE_OBSERVER',
    'PLAYER_STATE_UNFOLLOWABLE',
    'PLAYER_STATE_GOLD_UPKEEP_RATE',
    'PLAYER_STATE_LUMBER_UPKEEP_RATE',
    'PLAYER_STATE_GOLD_GATHERED',
    'PLAYER_STATE_LUMBER_GATHERED',
    'PLAYER_STATE_NO_CREEP_SLEEP',
    'UNIT_STATE_LIFE',
    'UNIT_STATE_MAX_LIFE',
    'UNIT_STATE_MANA',
    'UNIT_STATE_MAX_MANA',
    'AI_DIFFICULTY_NEWBIE',
    'AI_DIFFICULTY_NORMAL',
    'AI_DIFFICULTY_INSANE',
    'PLAYER_SCORE_UNITS_TRAINED',
    'PLAYER_SCORE_UNITS_KILLED',
    'PLAYER_SCORE_STRUCT_BUILT',
    'PLAYER_SCORE_STRUCT_RAZED',
    'PLAYER_SCORE_TECH_PERCENT',
    'PLAYER_SCORE_FOOD_MAXPROD',
    'PLAYER_SCORE_FOOD_MAXUSED',
    'PLAYER_SCORE_HEROES_KILLED',
    'PLAYER_SCORE_ITEMS_GAINED',
    'PLAYER_SCORE_MERCS_HIRED',
    'PLAYER_SCORE_GOLD_MINED_TOTAL',
    'PLAYER_SCORE_GOLD_MINED_UPKEEP',
    'PLAYER_SCORE_GOLD_LOST_UPKEEP',
    'PLAYER_SCORE_GOLD_LOST_TAX',
    'PLAYER_SCORE_GOLD_GIVEN',
    'PLAYER_SCORE_GOLD_RECEIVED',
    'PLAYER_SCORE_LUMBER_TOTAL',
    'PLAYER_SCORE_LUMBER_LOST_UPKEEP',
    'PLAYER_SCORE_LUMBER_LOST_TAX',
    'PLAYER_SCORE_LUMBER_GIVEN',
    'PLAYER_SCORE_LUMBER_RECEIVED',
    'PLAYER_SCORE_UNIT_TOTAL',
    'PLAYER_SCORE_HERO_TOTAL',
    'PLAYER_SCORE_RESOURCE_TOTAL',
    'PLAYER_SCORE_TOTAL',
    'EVENT_GAME_VICTORY',
    'EVENT_GAME_END_LEVEL',
    'EVENT_GAME_VARIABLE_LIMIT',
    'EVENT_GAME_STATE_LIMIT',
    'EVENT_GAME_TIMER_EXPIRED',
    'EVENT_GAME_ENTER_REGION',
    'EVENT_GAME_LEAVE_REGION',
    'EVENT_GAME_TRACKABLE_HIT',
    'EVENT_GAME_TRACKABLE_TRACK',
    'EVENT_GAME_SHOW_SKILL',
    'EVENT_GAME_BUILD_SUBMENU',
    'EVENT_PLAYER_STATE_LIMIT',
    'EVENT_PLAYER_ALLIANCE_CHANGED',
    'EVENT_PLAYER_DEFEAT',
    'EVENT_PLAYER_VICTORY',
    'EVENT_PLAYER_LEAVE',
    'EVENT_PLAYER_CHAT',
    'EVENT_PLAYER_END_CINEMATIC',
    'EVENT_PLAYER_UNIT_ATTACKED',
    'EVENT_PLAYER_UNIT_RESCUED',
    'EVENT_PLAYER_UNIT_DEATH',
    'EVENT_PLAYER_UNIT_DECAY',
    'EVENT_PLAYER_UNIT_DETECTED',
    'EVENT_PLAYER_UNIT_HIDDEN',
    'EVENT_PLAYER_UNIT_SELECTED',
    'EVENT_PLAYER_UNIT_DESELECTED',
    'EVENT_PLAYER_UNIT_CONSTRUCT_START',
    'EVENT_PLAYER_UNIT_CONSTRUCT_CANCEL',
    'EVENT_PLAYER_UNIT_CONSTRUCT_FINISH',
    'EVENT_PLAYER_UNIT_UPGRADE_START',
    'EVENT_PLAYER_UNIT_UPGRADE_CANCEL',
    'EVENT_PLAYER_UNIT_UPGRADE_FINISH',
    'EVENT_PLAYER_UNIT_TRAIN_START',
    'EVENT_PLAYER_UNIT_TRAIN_CANCEL',
    'EVENT_PLAYER_UNIT_TRAIN_FINISH',
    'EVENT_PLAYER_UNIT_RESEARCH_START',
    'EVENT_PLAYER_UNIT_RESEARCH_CANCEL',
    'EVENT_PLAYER_UNIT_RESEARCH_FINISH',
    'EVENT_PLAYER_UNIT_ISSUED_ORDER',
    'EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER',
    'EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER',
    'EVENT_PLAYER_UNIT_ISSUED_UNIT_ORDER',
    'EVENT_PLAYER_HERO_LEVEL',
    'EVENT_PLAYER_HERO_SKILL',
    'EVENT_PLAYER_HERO_REVIVABLE',
    'EVENT_PLAYER_HERO_REVIVE_START',
    'EVENT_PLAYER_HERO_REVIVE_CANCEL',
    'EVENT_PLAYER_HERO_REVIVE_FINISH',
    'EVENT_PLAYER_UNIT_SUMMON',
    'EVENT_PLAYER_UNIT_DROP_ITEM',
    'EVENT_PLAYER_UNIT_PICKUP_ITEM',
    'EVENT_PLAYER_UNIT_USE_ITEM',
    'EVENT_PLAYER_UNIT_LOADED',
    'EVENT_PLAYER_UNIT_DAMAGED',
    'EVENT_PLAYER_UNIT_DAMAGING',
    'EVENT_UNIT_DAMAGED',
    'EVENT_UNIT_DAMAGING',
    'EVENT_UNIT_DEATH',
    'EVENT_UNIT_DECAY',
    'EVENT_UNIT_DETECTED',
    'EVENT_UNIT_HIDDEN',
    'EVENT_UNIT_SELECTED',
    'EVENT_UNIT_DESELECTED',
    'EVENT_UNIT_STATE_LIMIT',
    'EVENT_UNIT_ACQUIRED_TARGET',
    'EVENT_UNIT_TARGET_IN_RANGE',
    'EVENT_UNIT_ATTACKED',
    'EVENT_UNIT_RESCUED',
    'EVENT_UNIT_CONSTRUCT_CANCEL',
    'EVENT_UNIT_CONSTRUCT_FINISH',
    'EVENT_UNIT_UPGRADE_START',
    'EVENT_UNIT_UPGRADE_CANCEL',
    'EVENT_UNIT_UPGRADE_FINISH',
    'EVENT_UNIT_TRAIN_START',
    'EVENT_UNIT_TRAIN_CANCEL',
    'EVENT_UNIT_TRAIN_FINISH',
    'EVENT_UNIT_RESEARCH_START',
    'EVENT_UNIT_RESEARCH_CANCEL',
    'EVENT_UNIT_RESEARCH_FINISH',
    'EVENT_UNIT_ISSUED_ORDER',
    'EVENT_UNIT_ISSUED_POINT_ORDER',
    'EVENT_UNIT_ISSUED_TARGET_ORDER',
    'EVENT_UNIT_HERO_LEVEL',
    'EVENT_UNIT_HERO_SKILL',
    'EVENT_UNIT_HERO_REVIVABLE',
    'EVENT_UNIT_HERO_REVIVE_START',
    'EVENT_UNIT_HERO_REVIVE_CANCEL',
    'EVENT_UNIT_HERO_REVIVE_FINISH',
    'EVENT_UNIT_SUMMON',
    'EVENT_UNIT_DROP_ITEM',
    'EVENT_UNIT_PICKUP_ITEM',
    'EVENT_UNIT_USE_ITEM',
    'EVENT_UNIT_LOADED',
    'EVENT_WIDGET_DEATH',
    'EVENT_DIALOG_BUTTON_CLICK',
    'EVENT_DIALOG_CLICK',
    'EVENT_GAME_LOADED',
    'EVENT_GAME_TOURNAMENT_FINISH_SOON',
    'EVENT_GAME_TOURNAMENT_FINISH_NOW',
    'EVENT_GAME_SAVE',
    'EVENT_GAME_CUSTOM_UI_FRAME',
    'EVENT_PLAYER_ARROW_LEFT_DOWN',
    'EVENT_PLAYER_ARROW_LEFT_UP',
    'EVENT_PLAYER_ARROW_RIGHT_DOWN',
    'EVENT_PLAYER_ARROW_RIGHT_UP',
    'EVENT_PLAYER_ARROW_DOWN_DOWN',
    'EVENT_PLAYER_ARROW_DOWN_UP',
    'EVENT_PLAYER_ARROW_UP_DOWN',
    'EVENT_PLAYER_ARROW_UP_UP',
    'EVENT_PLAYER_MOUSE_DOWN',
    'EVENT_PLAYER_MOUSE_UP',
    'EVENT_PLAYER_MOUSE_MOVE',
    'EVENT_PLAYER_SYNC_DATA',
    'EVENT_PLAYER_KEY',
    'EVENT_PLAYER_KEY_DOWN',
    'EVENT_PLAYER_KEY_UP',
    'EVENT_PLAYER_UNIT_SELL',
    'EVENT_PLAYER_UNIT_CHANGE_OWNER',
    'EVENT_PLAYER_UNIT_SELL_ITEM',
    'EVENT_PLAYER_UNIT_SPELL_CHANNEL',
    'EVENT_PLAYER_UNIT_SPELL_CAST',
    'EVENT_PLAYER_UNIT_SPELL_EFFECT',
    'EVENT_PLAYER_UNIT_SPELL_FINISH',
    'EVENT_PLAYER_UNIT_SPELL_ENDCAST',
    'EVENT_PLAYER_UNIT_PAWN_ITEM',
    'EVENT_UNIT_SELL',
    'EVENT_UNIT_CHANGE_OWNER',
    'EVENT_UNIT_SELL_ITEM',
    'EVENT_UNIT_SPELL_CHANNEL',
    'EVENT_UNIT_SPELL_CAST',
    'EVENT_UNIT_SPELL_EFFECT',
    'EVENT_UNIT_SPELL_FINISH',
    'EVENT_UNIT_SPELL_ENDCAST',
    'EVENT_UNIT_PAWN_ITEM',
    'LESS_THAN',
    'LESS_THAN_OR_EQUAL',
    'EQUAL',
    'GREATER_THAN_OR_EQUAL',
    'GREATER_THAN',
    'NOT_EQUAL',
    'UNIT_TYPE_HERO',
    'UNIT_TYPE_DEAD',
    'UNIT_TYPE_STRUCTURE',
    'UNIT_TYPE_FLYING',
    'UNIT_TYPE_GROUND',
    'UNIT_TYPE_ATTACKS_FLYING',
    'UNIT_TYPE_ATTACKS_GROUND',
    'UNIT_TYPE_MELEE_ATTACKER',
    'UNIT_TYPE_RANGED_ATTACKER',
    'UNIT_TYPE_GIANT',
    'UNIT_TYPE_SUMMONED',
    'UNIT_TYPE_STUNNED',
    'UNIT_TYPE_PLAGUED',
    'UNIT_TYPE_SNARED',
    'UNIT_TYPE_UNDEAD',
    'UNIT_TYPE_MECHANICAL',
    'UNIT_TYPE_PEON',
    'UNIT_TYPE_SAPPER',
    'UNIT_TYPE_TOWNHALL',
    'UNIT_TYPE_ANCIENT',
    'UNIT_TYPE_TAUREN',
    'UNIT_TYPE_POISONED',
    'UNIT_TYPE_POLYMORPHED',
    'UNIT_TYPE_SLEEPING',
    'UNIT_TYPE_RESISTANT',
    'UNIT_TYPE_ETHEREAL',
    'UNIT_TYPE_MAGIC_IMMUNE',
    'ITEM_TYPE_PERMANENT',
    'ITEM_TYPE_CHARGED',
    'ITEM_TYPE_POWERUP',
    'ITEM_TYPE_ARTIFACT',
    'ITEM_TYPE_PURCHASABLE',
    'ITEM_TYPE_CAMPAIGN',
    'ITEM_TYPE_MISCELLANEOUS',
    'ITEM_TYPE_UNKNOWN',
    'ITEM_TYPE_ANY',
    'ITEM_TYPE_TOME',
    'CAMERA_FIELD_TARGET_DISTANCE',
    'CAMERA_FIELD_FARZ',
    'CAMERA_FIELD_ANGLE_OF_ATTACK',
    'CAMERA_FIELD_FIELD_OF_VIEW',
    'CAMERA_FIELD_ROLL',
    'CAMERA_FIELD_ROTATION',
    'CAMERA_FIELD_ZOFFSET',
    'CAMERA_FIELD_NEARZ',
    'CAMERA_FIELD_LOCAL_PITCH',
    'CAMERA_FIELD_LOCAL_YAW',
    'CAMERA_FIELD_LOCAL_ROLL',
    'BLEND_MODE_NONE',
    'BLEND_MODE_DONT_CARE',
    'BLEND_MODE_KEYALPHA',
    'BLEND_MODE_BLEND',
    'BLEND_MODE_ADDITIVE',
    'BLEND_MODE_MODULATE',
    'BLEND_MODE_MODULATE_2X',
    'RARITY_FREQUENT',
    'RARITY_RARE',
    'TEXMAP_FLAG_NONE',
    'TEXMAP_FLAG_WRAP_U',
    'TEXMAP_FLAG_WRAP_V',
    'TEXMAP_FLAG_WRAP_UV',
    'FOG_OF_WAR_MASKED',
    'FOG_OF_WAR_FOGGED',
    'FOG_OF_WAR_VISIBLE',
    'CAMERA_MARGIN_LEFT',
    'CAMERA_MARGIN_RIGHT',
    'CAMERA_MARGIN_TOP',
    'CAMERA_MARGIN_BOTTOM',
    'EFFECT_TYPE_EFFECT',
    'EFFECT_TYPE_TARGET',
    'EFFECT_TYPE_CASTER',
    'EFFECT_TYPE_SPECIAL',
    'EFFECT_TYPE_AREA_EFFECT',
    'EFFECT_TYPE_MISSILE',
    'EFFECT_TYPE_LIGHTNING',
    'SOUND_TYPE_EFFECT',
    'SOUND_TYPE_EFFECT_LOOPED',
    'ORIGIN_FRAME_GAME_UI',
    'ORIGIN_FRAME_COMMAND_BUTTON',
    'ORIGIN_FRAME_HERO_BAR',
    'ORIGIN_FRAME_HERO_BUTTON',
    'ORIGIN_FRAME_HERO_HP_BAR',
    'ORIGIN_FRAME_HERO_MANA_BAR',
    'ORIGIN_FRAME_HERO_BUTTON_INDICATOR',
    'ORIGIN_FRAME_ITEM_BUTTON',
    'ORIGIN_FRAME_MINIMAP',
    'ORIGIN_FRAME_MINIMAP_BUTTON',
    'ORIGIN_FRAME_SYSTEM_BUTTON',
    'ORIGIN_FRAME_TOOLTIP',
    'ORIGIN_FRAME_UBERTOOLTIP',
    'ORIGIN_FRAME_CHAT_MSG',
    'ORIGIN_FRAME_UNIT_MSG',
    'ORIGIN_FRAME_TOP_MSG',
    'ORIGIN_FRAME_PORTRAIT',
    'ORIGIN_FRAME_WORLD_FRAME',
    'ORIGIN_FRAME_SIMPLE_UI_PARENT',
    'ORIGIN_FRAME_PORTRAIT_HP_TEXT',
    'ORIGIN_FRAME_PORTRAIT_MANA_TEXT',
    'ORIGIN_FRAME_UNIT_PANEL_BUFF_BAR',
    'ORIGIN_FRAME_UNIT_PANEL_BUFF_BAR_LABEL',
    'FRAMEPOINT_TOPLEFT',
    'FRAMEPOINT_TOP',
    'FRAMEPOINT_TOPRIGHT',
    'FRAMEPOINT_LEFT',
    'FRAMEPOINT_CENTER',
    'FRAMEPOINT_RIGHT',
    'FRAMEPOINT_BOTTOMLEFT',
    'FRAMEPOINT_BOTTOM',
    'FRAMEPOINT_BOTTOMRIGHT',
    'TEXT_JUSTIFY_TOP',
    'TEXT_JUSTIFY_MIDDLE',
    'TEXT_JUSTIFY_BOTTOM',
    'TEXT_JUSTIFY_LEFT',
    'TEXT_JUSTIFY_CENTER',
    'TEXT_JUSTIFY_RIGHT',
    'FRAMEEVENT_CONTROL_CLICK',
    'FRAMEEVENT_MOUSE_ENTER',
    'FRAMEEVENT_MOUSE_LEAVE',
    'FRAMEEVENT_MOUSE_UP',
    'FRAMEEVENT_MOUSE_DOWN',
    'FRAMEEVENT_MOUSE_WHEEL',
    'FRAMEEVENT_CHECKBOX_CHECKED',
    'FRAMEEVENT_CHECKBOX_UNCHECKED',
    'FRAMEEVENT_EDITBOX_TEXT_CHANGED',
    'FRAMEEVENT_POPUPMENU_ITEM_CHANGED',
    'FRAMEEVENT_MOUSE_DOUBLECLICK',
    'FRAMEEVENT_SPRITE_ANIM_UPDATE',
    'FRAMEEVENT_SLIDER_VALUE_CHANGED',
    'FRAMEEVENT_DIALOG_CANCEL',
    'FRAMEEVENT_DIALOG_ACCEPT',
    'FRAMEEVENT_EDITBOX_ENTER',
    'OSKEY_BACKSPACE',
    'OSKEY_TAB',
    'OSKEY_CLEAR',
    'OSKEY_RETURN',
    'OSKEY_SHIFT',
    'OSKEY_CONTROL',
    'OSKEY_ALT',
    'OSKEY_PAUSE',
    'OSKEY_CAPSLOCK',
    'OSKEY_KANA',
    'OSKEY_HANGUL',
    'OSKEY_JUNJA',
    'OSKEY_FINAL',
    'OSKEY_HANJA',
    'OSKEY_KANJI',
    'OSKEY_ESCAPE',
    'OSKEY_CONVERT',
    'OSKEY_NONCONVERT',
    'OSKEY_ACCEPT',
    'OSKEY_MODECHANGE',
    'OSKEY_SPACE',
    'OSKEY_PAGEUP',
    'OSKEY_PAGEDOWN',
    'OSKEY_END',
    'OSKEY_HOME',
    'OSKEY_LEFT',
    'OSKEY_UP',
    'OSKEY_RIGHT',
    'OSKEY_DOWN',
    'OSKEY_SELECT',
    'OSKEY_PRINT',
    'OSKEY_EXECUTE',
    'OSKEY_PRINTSCREEN',
    'OSKEY_INSERT',
    'OSKEY_DELETE',
    'OSKEY_HELP',
    'OSKEY_0',
    'OSKEY_1',
    'OSKEY_2',
    'OSKEY_3',
    'OSKEY_4',
    'OSKEY_5',
    'OSKEY_6',
    'OSKEY_7',
    'OSKEY_8',
    'OSKEY_9',
    'OSKEY_A',
    'OSKEY_B',
    'OSKEY_C',
    'OSKEY_D',
    'OSKEY_E',
    'OSKEY_F',
    'OSKEY_G',
    'OSKEY_H',
    'OSKEY_I',
    'OSKEY_J',
    'OSKEY_K',
    'OSKEY_L',
    'OSKEY_M',
    'OSKEY_N',
    'OSKEY_O',
    'OSKEY_P',
    'OSKEY_Q',
    'OSKEY_R',
    'OSKEY_S',
    'OSKEY_T',
    'OSKEY_U',
    'OSKEY_V',
    'OSKEY_W',
    'OSKEY_X',
    'OSKEY_Y',
    'OSKEY_Z',
    'OSKEY_LMETA',
    'OSKEY_RMETA',
    'OSKEY_APPS',
    'OSKEY_SLEEP',
    'OSKEY_NUMPAD0',
    'OSKEY_NUMPAD1',
    'OSKEY_NUMPAD2',
    'OSKEY_NUMPAD3',
    'OSKEY_NUMPAD4',
    'OSKEY_NUMPAD5',
    'OSKEY_NUMPAD6',
    'OSKEY_NUMPAD7',
    'OSKEY_NUMPAD8',
    'OSKEY_NUMPAD9',
    'OSKEY_MULTIPLY',
    'OSKEY_ADD',
    'OSKEY_SEPARATOR',
    'OSKEY_SUBTRACT',
    'OSKEY_DECIMAL',
    'OSKEY_DIVIDE',
    'OSKEY_F1',
    'OSKEY_F2',
    'OSKEY_F3',
    'OSKEY_F4',
    'OSKEY_F5',
    'OSKEY_F6',
    'OSKEY_F7',
    'OSKEY_F8',
    'OSKEY_F9',
    'OSKEY_F10',
    'OSKEY_F11',
    'OSKEY_F12',
    'OSKEY_F13',
    'OSKEY_F14',
    'OSKEY_F15',
    'OSKEY_F16',
    'OSKEY_F17',
    'OSKEY_F18',
    'OSKEY_F19',
    'OSKEY_F20',
    'OSKEY_F21',
    'OSKEY_F22',
    'OSKEY_F23',
    'OSKEY_F24',
    'OSKEY_NUMLOCK',
    'OSKEY_SCROLLLOCK',
    'OSKEY_OEM_NEC_EQUAL',
    'OSKEY_OEM_FJ_JISHO',
    'OSKEY_OEM_FJ_MASSHOU',
    'OSKEY_OEM_FJ_TOUROKU',
    'OSKEY_OEM_FJ_LOYA',
    'OSKEY_OEM_FJ_ROYA',
    'OSKEY_LSHIFT',
    'OSKEY_RSHIFT',
    'OSKEY_LCONTROL',
    'OSKEY_RCONTROL',
    'OSKEY_LALT',
    'OSKEY_RALT',
    'OSKEY_BROWSER_BACK',
    'OSKEY_BROWSER_FORWARD',
    'OSKEY_BROWSER_REFRESH',
    'OSKEY_BROWSER_STOP',
    'OSKEY_BROWSER_SEARCH',
    'OSKEY_BROWSER_FAVORITES',
    'OSKEY_BROWSER_HOME',
    'OSKEY_VOLUME_MUTE',
    'OSKEY_VOLUME_DOWN',
    'OSKEY_VOLUME_UP',
    'OSKEY_MEDIA_NEXT_TRACK',
    'OSKEY_MEDIA_PREV_TRACK',
    'OSKEY_MEDIA_STOP',
    'OSKEY_MEDIA_PLAY_PAUSE',
    'OSKEY_LAUNCH_MAIL',
    'OSKEY_LAUNCH_MEDIA_SELECT',
    'OSKEY_LAUNCH_APP1',
    'OSKEY_LAUNCH_APP2',
    'OSKEY_OEM_1',
    'OSKEY_OEM_PLUS',
    'OSKEY_OEM_COMMA',
    'OSKEY_OEM_MINUS',
    'OSKEY_OEM_PERIOD',
    'OSKEY_OEM_2',
    'OSKEY_OEM_3',
    'OSKEY_OEM_4',
    'OSKEY_OEM_5',
    'OSKEY_OEM_6',
    'OSKEY_OEM_7',
    'OSKEY_OEM_8',
    'OSKEY_OEM_AX',
    'OSKEY_OEM_102',
    'OSKEY_ICO_HELP',
    'OSKEY_ICO_00',
    'OSKEY_PROCESSKEY',
    'OSKEY_ICO_CLEAR',
    'OSKEY_PACKET',
    'OSKEY_OEM_RESET',
    'OSKEY_OEM_JUMP',
    'OSKEY_OEM_PA1',
    'OSKEY_OEM_PA2',
    'OSKEY_OEM_PA3',
    'OSKEY_OEM_WSCTRL',
    'OSKEY_OEM_CUSEL',
    'OSKEY_OEM_ATTN',
    'OSKEY_OEM_FINISH',
    'OSKEY_OEM_COPY',
    'OSKEY_OEM_AUTO',
    'OSKEY_OEM_ENLW',
    'OSKEY_OEM_BACKTAB',
    'OSKEY_ATTN',
    'OSKEY_CRSEL',
    'OSKEY_EXSEL',
    'OSKEY_EREOF',
    'OSKEY_PLAY',
    'OSKEY_ZOOM',
    'OSKEY_NONAME',
    'OSKEY_PA1',
    'OSKEY_OEM_CLEAR',
    'ABILITY_IF_BUTTON_POSITION_NORMAL_X',
    'ABILITY_IF_BUTTON_POSITION_NORMAL_Y',
    'ABILITY_IF_BUTTON_POSITION_ACTIVATED_X',
    'ABILITY_IF_BUTTON_POSITION_ACTIVATED_Y',
    'ABILITY_IF_BUTTON_POSITION_RESEARCH_X',
    'ABILITY_IF_BUTTON_POSITION_RESEARCH_Y',
    'ABILITY_IF_MISSILE_SPEED',
    'ABILITY_IF_TARGET_ATTACHMENTS',
    'ABILITY_IF_CASTER_ATTACHMENTS',
    'ABILITY_IF_PRIORITY',
    'ABILITY_IF_LEVELS',
    'ABILITY_IF_REQUIRED_LEVEL',
    'ABILITY_IF_LEVEL_SKIP_REQUIREMENT',
    'ABILITY_BF_HERO_ABILITY',
    'ABILITY_BF_ITEM_ABILITY',
    'ABILITY_BF_CHECK_DEPENDENCIES',
    'ABILITY_RF_ARF_MISSILE_ARC',
    'ABILITY_SF_NAME',
    'ABILITY_SF_ICON_ACTIVATED',
    'ABILITY_SF_ICON_RESEARCH',
    'ABILITY_SF_EFFECT_SOUND',
    'ABILITY_SF_EFFECT_SOUND_LOOPING',
    'ABILITY_ILF_MANA_COST',
    'ABILITY_ILF_NUMBER_OF_WAVES',
    'ABILITY_ILF_NUMBER_OF_SHARDS',
    'ABILITY_ILF_NUMBER_OF_UNITS_TELEPORTED',
    'ABILITY_ILF_SUMMONED_UNIT_COUNT_HWE2',
    'ABILITY_ILF_NUMBER_OF_IMAGES',
    'ABILITY_ILF_NUMBER_OF_CORPSES_RAISED_UAN1',
    'ABILITY_ILF_MORPHING_FLAGS',
    'ABILITY_ILF_STRENGTH_BONUS_NRG5',
    'ABILITY_ILF_DEFENSE_BONUS_NRG6',
    'ABILITY_ILF_NUMBER_OF_TARGETS_HIT',
    'ABILITY_ILF_DETECTION_TYPE_OFS1',
    'ABILITY_ILF_NUMBER_OF_SUMMONED_UNITS_OSF2',
    'ABILITY_ILF_NUMBER_OF_SUMMONED_UNITS_EFN1',
    'ABILITY_ILF_NUMBER_OF_CORPSES_RAISED_HRE1',
    'ABILITY_ILF_STACK_FLAGS',
    'ABILITY_ILF_MINIMUM_NUMBER_OF_UNITS',
    'ABILITY_ILF_MAXIMUM_NUMBER_OF_UNITS_NDP3',
    'ABILITY_ILF_NUMBER_OF_UNITS_CREATED_NRC2',
    'ABILITY_ILF_SHIELD_LIFE',
    'ABILITY_ILF_MANA_LOSS_AMS4',
    'ABILITY_ILF_GOLD_PER_INTERVAL_BGM1',
    'ABILITY_ILF_MAX_NUMBER_OF_MINERS',
    'ABILITY_ILF_CARGO_CAPACITY',
    'ABILITY_ILF_MAXIMUM_CREEP_LEVEL_DEV3',
    'ABILITY_ILF_MAX_CREEP_LEVEL_DEV1',
    'ABILITY_ILF_GOLD_PER_INTERVAL_EGM1',
    'ABILITY_ILF_DEFENSE_REDUCTION',
    'ABILITY_ILF_DETECTION_TYPE_FLA1',
    'ABILITY_ILF_FLARE_COUNT',
    'ABILITY_ILF_MAX_GOLD',
    'ABILITY_ILF_MINING_CAPACITY',
    'ABILITY_ILF_MAXIMUM_NUMBER_OF_CORPSES_GYD1',
    'ABILITY_ILF_DAMAGE_TO_TREE',
    'ABILITY_ILF_LUMBER_CAPACITY',
    'ABILITY_ILF_GOLD_CAPACITY',
    'ABILITY_ILF_DEFENSE_INCREASE_INF2',
    'ABILITY_ILF_INTERACTION_TYPE',
    'ABILITY_ILF_GOLD_COST_NDT1',
    'ABILITY_ILF_LUMBER_COST_NDT2',
    'ABILITY_ILF_DETECTION_TYPE_NDT3',
    'ABILITY_ILF_STACKING_TYPE_POI4',
    'ABILITY_ILF_STACKING_TYPE_POA5',
    'ABILITY_ILF_MAXIMUM_CREEP_LEVEL_PLY1',
    'ABILITY_ILF_MAXIMUM_CREEP_LEVEL_POS1',
    'ABILITY_ILF_MOVEMENT_UPDATE_FREQUENCY_PRG1',
    'ABILITY_ILF_ATTACK_UPDATE_FREQUENCY_PRG2',
    'ABILITY_ILF_MANA_LOSS_PRG6',
    'ABILITY_ILF_UNITS_SUMMONED_TYPE_ONE',
    'ABILITY_ILF_UNITS_SUMMONED_TYPE_TWO',
    'ABILITY_ILF_MAX_UNITS_SUMMONED',
    'ABILITY_ILF_ALLOW_WHEN_FULL_REJ3',
    'ABILITY_ILF_MAXIMUM_UNITS_CHARGED_TO_CASTER',
    'ABILITY_ILF_MAXIMUM_UNITS_AFFECTED',
    'ABILITY_ILF_DEFENSE_INCREASE_ROA2',
    'ABILITY_ILF_MAX_UNITS_ROA7',
    'ABILITY_ILF_ROOTED_WEAPONS',
    'ABILITY_ILF_UPROOTED_WEAPONS',
    'ABILITY_ILF_UPROOTED_DEFENSE_TYPE',
    'ABILITY_ILF_ACCUMULATION_STEP',
    'ABILITY_ILF_NUMBER_OF_OWLS',
    'ABILITY_ILF_STACKING_TYPE_SPO4',
    'ABILITY_ILF_NUMBER_OF_UNITS',
    'ABILITY_ILF_SPIDER_CAPACITY',
    'ABILITY_ILF_INTERVALS_BEFORE_CHANGING_TREES',
    'ABILITY_ILF_AGILITY_BONUS',
    'ABILITY_ILF_INTELLIGENCE_BONUS',
    'ABILITY_ILF_STRENGTH_BONUS_ISTR',
    'ABILITY_ILF_ATTACK_BONUS',
    'ABILITY_ILF_DEFENSE_BONUS_IDEF',
    'ABILITY_ILF_SUMMON_1_AMOUNT',
    'ABILITY_ILF_SUMMON_2_AMOUNT',
    'ABILITY_ILF_EXPERIENCE_GAINED',
    'ABILITY_ILF_HIT_POINTS_GAINED_IHPG',
    'ABILITY_ILF_MANA_POINTS_GAINED_IMPG',
    'ABILITY_ILF_HIT_POINTS_GAINED_IHP2',
    'ABILITY_ILF_MANA_POINTS_GAINED_IMP2',
    'ABILITY_ILF_DAMAGE_BONUS_DICE',
    'ABILITY_ILF_ARMOR_PENALTY_IARP',
    'ABILITY_ILF_ENABLED_ATTACK_INDEX_IOB5',
    'ABILITY_ILF_LEVELS_GAINED',
    'ABILITY_ILF_MAX_LIFE_GAINED',
    'ABILITY_ILF_MAX_MANA_GAINED',
    'ABILITY_ILF_GOLD_GIVEN',
    'ABILITY_ILF_LUMBER_GIVEN',
    'ABILITY_ILF_DETECTION_TYPE_IFA1',
    'ABILITY_ILF_MAXIMUM_CREEP_LEVEL_ICRE',
    'ABILITY_ILF_MOVEMENT_SPEED_BONUS',
    'ABILITY_ILF_HIT_POINTS_REGENERATED_PER_SECOND',
    'ABILITY_ILF_SIGHT_RANGE_BONUS',
    'ABILITY_ILF_DAMAGE_PER_DURATION',
    'ABILITY_ILF_MANA_USED_PER_SECOND',
    'ABILITY_ILF_EXTRA_MANA_REQUIRED',
    'ABILITY_ILF_DETECTION_RADIUS_IDET',
    'ABILITY_ILF_MANA_LOSS_PER_UNIT_IDIM',
    'ABILITY_ILF_DAMAGE_TO_SUMMONED_UNITS_IDID',
    'ABILITY_ILF_MAXIMUM_NUMBER_OF_UNITS_IREC',
    'ABILITY_ILF_DELAY_AFTER_DEATH_SECONDS',
    'ABILITY_ILF_RESTORED_LIFE',
    'ABILITY_ILF_RESTORED_MANA__1_FOR_CURRENT',
    'ABILITY_ILF_HIT_POINTS_RESTORED',
    'ABILITY_ILF_MANA_POINTS_RESTORED',
    'ABILITY_ILF_MAXIMUM_NUMBER_OF_UNITS_ITPM',
    'ABILITY_ILF_NUMBER_OF_CORPSES_RAISED_CAD1',
    'ABILITY_ILF_TERRAIN_DEFORMATION_DURATION_MS',
    'ABILITY_ILF_MAXIMUM_UNITS',
    'ABILITY_ILF_DETECTION_TYPE_DET1',
    'ABILITY_ILF_GOLD_COST_PER_STRUCTURE',
    'ABILITY_ILF_LUMBER_COST_PER_USE',
    'ABILITY_ILF_DETECTION_TYPE_NSP3',
    'ABILITY_ILF_NUMBER_OF_SWARM_UNITS',
    'ABILITY_ILF_MAX_SWARM_UNITS_PER_TARGET',
    'ABILITY_ILF_NUMBER_OF_SUMMONED_UNITS_NBA2',
    'ABILITY_ILF_MAXIMUM_CREEP_LEVEL_NCH1',
    'ABILITY_ILF_ATTACKS_PREVENTED',
    'ABILITY_ILF_MAXIMUM_NUMBER_OF_TARGETS_EFK3',
    'ABILITY_ILF_NUMBER_OF_SUMMONED_UNITS_ESV1',
    'ABILITY_ILF_MAXIMUM_NUMBER_OF_CORPSES_EXH1',
    'ABILITY_ILF_ITEM_CAPACITY',
    'ABILITY_ILF_MAXIMUM_NUMBER_OF_TARGETS_SPL2',
    'ABILITY_ILF_ALLOW_WHEN_FULL_IRL3',
    'ABILITY_ILF_MAXIMUM_DISPELLED_UNITS',
    'ABILITY_ILF_NUMBER_OF_LURES',
    'ABILITY_ILF_NEW_TIME_OF_DAY_HOUR',
    'ABILITY_ILF_NEW_TIME_OF_DAY_MINUTE',
    'ABILITY_ILF_NUMBER_OF_UNITS_CREATED_MEC1',
    'ABILITY_ILF_MINIMUM_SPELLS',
    'ABILITY_ILF_MAXIMUM_SPELLS',
    'ABILITY_ILF_DISABLED_ATTACK_INDEX',
    'ABILITY_ILF_ENABLED_ATTACK_INDEX_GRA4',
    'ABILITY_ILF_MAXIMUM_ATTACKS',
    'ABILITY_ILF_BUILDING_TYPES_ALLOWED_NPR1',
    'ABILITY_ILF_BUILDING_TYPES_ALLOWED_NSA1',
    'ABILITY_ILF_ATTACK_MODIFICATION',
    'ABILITY_ILF_SUMMONED_UNIT_COUNT_NPA5',
    'ABILITY_ILF_UPGRADE_LEVELS',
    'ABILITY_ILF_NUMBER_OF_SUMMONED_UNITS_NDO2',
    'ABILITY_ILF_BEASTS_PER_SECOND',
    'ABILITY_ILF_TARGET_TYPE',
    'ABILITY_ILF_OPTIONS',
    'ABILITY_ILF_ARMOR_PENALTY_NAB3',
    'ABILITY_ILF_WAVE_COUNT_NHS6',
    'ABILITY_ILF_MAX_CREEP_LEVEL_NTM3',
    'ABILITY_ILF_MISSILE_COUNT',
    'ABILITY_ILF_SPLIT_ATTACK_COUNT',
    'ABILITY_ILF_GENERATION_COUNT',
    'ABILITY_ILF_ROCK_RING_COUNT',
    'ABILITY_ILF_WAVE_COUNT_NVC2',
    'ABILITY_ILF_PREFER_HOSTILES_TAU1',
    'ABILITY_ILF_PREFER_FRIENDLIES_TAU2',
    'ABILITY_ILF_MAX_UNITS_TAU3',
    'ABILITY_ILF_NUMBER_OF_PULSES',
    'ABILITY_ILF_SUMMONED_UNIT_TYPE_HWE1',
    'ABILITY_ILF_SUMMONED_UNIT_UIN4',
    'ABILITY_ILF_SUMMONED_UNIT_OSF1',
    'ABILITY_ILF_SUMMONED_UNIT_TYPE_EFNU',
    'ABILITY_ILF_SUMMONED_UNIT_TYPE_NBAU',
    'ABILITY_ILF_SUMMONED_UNIT_TYPE_NTOU',
    'ABILITY_ILF_SUMMONED_UNIT_TYPE_ESVU',
    'ABILITY_ILF_SUMMONED_UNIT_TYPES',
    'ABILITY_ILF_SUMMONED_UNIT_TYPE_NDOU',
    'ABILITY_ILF_ALTERNATE_FORM_UNIT_EMEU',
    'ABILITY_ILF_PLAGUE_WARD_UNIT_TYPE',
    'ABILITY_ILF_ALLOWED_UNIT_TYPE_BTL1',
    'ABILITY_ILF_NEW_UNIT_TYPE',
    'ABILITY_ILF_RESULTING_UNIT_TYPE_ENT1',
    'ABILITY_ILF_CORPSE_UNIT_TYPE',
    'ABILITY_ILF_ALLOWED_UNIT_TYPE_LOA1',
    'ABILITY_ILF_UNIT_TYPE_FOR_LIMIT_CHECK',
    'ABILITY_ILF_WARD_UNIT_TYPE_STAU',
    'ABILITY_ILF_EFFECT_ABILITY',
    'ABILITY_ILF_CONVERSION_UNIT',
    'ABILITY_ILF_UNIT_TO_PRESERVE',
    'ABILITY_ILF_UNIT_TYPE_ALLOWED',
    'ABILITY_ILF_SWARM_UNIT_TYPE',
    'ABILITY_ILF_RESULTING_UNIT_TYPE_COAU',
    'ABILITY_ILF_UNIT_TYPE_EXHU',
    'ABILITY_ILF_WARD_UNIT_TYPE_HWDU',
    'ABILITY_ILF_LURE_UNIT_TYPE',
    'ABILITY_ILF_UNIT_TYPE_IPMU',
    'ABILITY_ILF_FACTORY_UNIT_ID',
    'ABILITY_ILF_SPAWN_UNIT_ID_NFYU',
    'ABILITY_ILF_DESTRUCTIBLE_ID',
    'ABILITY_ILF_UPGRADE_TYPE',
    'ABILITY_RLF_CASTING_TIME',
    'ABILITY_RLF_DURATION_NORMAL',
    'ABILITY_RLF_DURATION_HERO',
    'ABILITY_RLF_COOLDOWN',
    'ABILITY_RLF_AREA_OF_EFFECT',
    'ABILITY_RLF_CAST_RANGE',
    'ABILITY_RLF_DAMAGE_HBZ2',
    'ABILITY_RLF_BUILDING_REDUCTION_HBZ4',
    'ABILITY_RLF_DAMAGE_PER_SECOND_HBZ5',
    'ABILITY_RLF_MAXIMUM_DAMAGE_PER_WAVE',
    'ABILITY_RLF_MANA_REGENERATION_INCREASE',
    'ABILITY_RLF_CASTING_DELAY',
    'ABILITY_RLF_DAMAGE_PER_SECOND_OWW1',
    'ABILITY_RLF_MAGIC_DAMAGE_REDUCTION_OWW2',
    'ABILITY_RLF_CHANCE_TO_CRITICAL_STRIKE',
    'ABILITY_RLF_DAMAGE_MULTIPLIER_OCR2',
    'ABILITY_RLF_DAMAGE_BONUS_OCR3',
    'ABILITY_RLF_CHANCE_TO_EVADE_OCR4',
    'ABILITY_RLF_DAMAGE_DEALT_PERCENT_OMI2',
    'ABILITY_RLF_DAMAGE_TAKEN_PERCENT_OMI3',
    'ABILITY_RLF_ANIMATION_DELAY',
    'ABILITY_RLF_TRANSITION_TIME',
    'ABILITY_RLF_MOVEMENT_SPEED_INCREASE_PERCENT_OWK2',
    'ABILITY_RLF_BACKSTAB_DAMAGE',
    'ABILITY_RLF_AMOUNT_HEALED_DAMAGED_UDC1',
    'ABILITY_RLF_LIFE_CONVERTED_TO_MANA',
    'ABILITY_RLF_LIFE_CONVERTED_TO_LIFE',
    'ABILITY_RLF_MOVEMENT_SPEED_INCREASE_PERCENT_UAU1',
    'ABILITY_RLF_LIFE_REGENERATION_INCREASE_PERCENT',
    'ABILITY_RLF_CHANCE_TO_EVADE_EEV1',
    'ABILITY_RLF_DAMAGE_PER_INTERVAL',
    'ABILITY_RLF_MANA_DRAINED_PER_SECOND_EIM2',
    'ABILITY_RLF_BUFFER_MANA_REQUIRED',
    'ABILITY_RLF_MAX_MANA_DRAINED',
    'ABILITY_RLF_BOLT_DELAY',
    'ABILITY_RLF_BOLT_LIFETIME',
    'ABILITY_RLF_ALTITUDE_ADJUSTMENT_DURATION',
    'ABILITY_RLF_LANDING_DELAY_TIME',
    'ABILITY_RLF_ALTERNATE_FORM_HIT_POINT_BONUS',
    'ABILITY_RLF_MOVE_SPEED_BONUS_INFO_PANEL_ONLY',
    'ABILITY_RLF_ATTACK_SPEED_BONUS_INFO_PANEL_ONLY',
    'ABILITY_RLF_LIFE_REGENERATION_RATE_PER_SECOND',
    'ABILITY_RLF_STUN_DURATION_USL1',
    'ABILITY_RLF_ATTACK_DAMAGE_STOLEN_PERCENT',
    'ABILITY_RLF_DAMAGE_UCS1',
    'ABILITY_RLF_MAX_DAMAGE_UCS2',
    'ABILITY_RLF_DISTANCE_UCS3',
    'ABILITY_RLF_FINAL_AREA_UCS4',
    'ABILITY_RLF_DAMAGE_UIN1',
    'ABILITY_RLF_DURATION',
    'ABILITY_RLF_IMPACT_DELAY',
    'ABILITY_RLF_DAMAGE_PER_TARGET_OCL1',
    'ABILITY_RLF_DAMAGE_REDUCTION_PER_TARGET',
    'ABILITY_RLF_EFFECT_DELAY_OEQ1',
    'ABILITY_RLF_DAMAGE_PER_SECOND_TO_BUILDINGS',
    'ABILITY_RLF_UNITS_SLOWED_PERCENT',
    'ABILITY_RLF_FINAL_AREA_OEQ4',
    'ABILITY_RLF_DAMAGE_PER_SECOND_EER1',
    'ABILITY_RLF_DAMAGE_DEALT_TO_ATTACKERS',
    'ABILITY_RLF_LIFE_HEALED',
    'ABILITY_RLF_HEAL_INTERVAL',
    'ABILITY_RLF_BUILDING_REDUCTION_ETQ3',
    'ABILITY_RLF_INITIAL_IMMUNITY_DURATION',
    'ABILITY_RLF_MAX_LIFE_DRAINED_PER_SECOND_PERCENT',
    'ABILITY_RLF_BUILDING_REDUCTION_UDD2',
    'ABILITY_RLF_ARMOR_DURATION',
    'ABILITY_RLF_ARMOR_BONUS_UFA2',
    'ABILITY_RLF_AREA_OF_EFFECT_DAMAGE',
    'ABILITY_RLF_SPECIFIC_TARGET_DAMAGE_UFN2',
    'ABILITY_RLF_DAMAGE_BONUS_HFA1',
    'ABILITY_RLF_DAMAGE_DEALT_ESF1',
    'ABILITY_RLF_DAMAGE_INTERVAL_ESF2',
    'ABILITY_RLF_BUILDING_REDUCTION_ESF3',
    'ABILITY_RLF_DAMAGE_BONUS_PERCENT',
    'ABILITY_RLF_DEFENSE_BONUS_HAV1',
    'ABILITY_RLF_HIT_POINT_BONUS',
    'ABILITY_RLF_DAMAGE_BONUS_HAV3',
    'ABILITY_RLF_MAGIC_DAMAGE_REDUCTION_HAV4',
    'ABILITY_RLF_CHANCE_TO_BASH',
    'ABILITY_RLF_DAMAGE_MULTIPLIER_HBH2',
    'ABILITY_RLF_DAMAGE_BONUS_HBH3',
    'ABILITY_RLF_CHANCE_TO_MISS_HBH4',
    'ABILITY_RLF_DAMAGE_HTB1',
    'ABILITY_RLF_AOE_DAMAGE',
    'ABILITY_RLF_SPECIFIC_TARGET_DAMAGE_HTC2',
    'ABILITY_RLF_MOVEMENT_SPEED_REDUCTION_PERCENT_HTC3',
    'ABILITY_RLF_ATTACK_SPEED_REDUCTION_PERCENT_HTC4',
    'ABILITY_RLF_ARMOR_BONUS_HAD1',
    'ABILITY_RLF_AMOUNT_HEALED_DAMAGED_HHB1',
    'ABILITY_RLF_EXTRA_DAMAGE_HCA1',
    'ABILITY_RLF_MOVEMENT_SPEED_FACTOR_HCA2',
    'ABILITY_RLF_ATTACK_SPEED_FACTOR_HCA3',
    'ABILITY_RLF_MOVEMENT_SPEED_INCREASE_PERCENT_OAE1',
    'ABILITY_RLF_ATTACK_SPEED_INCREASE_PERCENT_OAE2',
    'ABILITY_RLF_REINCARNATION_DELAY',
    'ABILITY_RLF_DAMAGE_OSH1',
    'ABILITY_RLF_MAXIMUM_DAMAGE_OSH2',
    'ABILITY_RLF_DISTANCE_OSH3',
    'ABILITY_RLF_FINAL_AREA_OSH4',
    'ABILITY_RLF_GRAPHIC_DELAY_NFD1',
    'ABILITY_RLF_GRAPHIC_DURATION_NFD2',
    'ABILITY_RLF_DAMAGE_NFD3',
    'ABILITY_RLF_SUMMONED_UNIT_DAMAGE_AMS1',
    'ABILITY_RLF_MAGIC_DAMAGE_REDUCTION_AMS2',
    'ABILITY_RLF_AURA_DURATION',
    'ABILITY_RLF_DAMAGE_PER_SECOND_APL2',
    'ABILITY_RLF_DURATION_OF_PLAGUE_WARD',
    'ABILITY_RLF_AMOUNT_OF_HIT_POINTS_REGENERATED',
    'ABILITY_RLF_ATTACK_DAMAGE_INCREASE_AKB1',
    'ABILITY_RLF_MANA_LOSS_ADM1',
    'ABILITY_RLF_SUMMONED_UNIT_DAMAGE_ADM2',
    'ABILITY_RLF_EXPANSION_AMOUNT',
    'ABILITY_RLF_INTERVAL_DURATION_BGM2',
    'ABILITY_RLF_RADIUS_OF_MINING_RING',
    'ABILITY_RLF_ATTACK_SPEED_INCREASE_PERCENT_BLO1',
    'ABILITY_RLF_MOVEMENT_SPEED_INCREASE_PERCENT_BLO2',
    'ABILITY_RLF_SCALING_FACTOR',
    'ABILITY_RLF_HIT_POINTS_PER_SECOND_CAN1',
    'ABILITY_RLF_MAX_HIT_POINTS',
    'ABILITY_RLF_DAMAGE_PER_SECOND_DEV2',
    'ABILITY_RLF_MOVEMENT_UPDATE_FREQUENCY_CHD1',
    'ABILITY_RLF_ATTACK_UPDATE_FREQUENCY_CHD2',
    'ABILITY_RLF_SUMMONED_UNIT_DAMAGE_CHD3',
    'ABILITY_RLF_MOVEMENT_SPEED_REDUCTION_PERCENT_CRI1',
    'ABILITY_RLF_ATTACK_SPEED_REDUCTION_PERCENT_CRI2',
    'ABILITY_RLF_DAMAGE_REDUCTION_CRI3',
    'ABILITY_RLF_CHANCE_TO_MISS_CRS',
    'ABILITY_RLF_FULL_DAMAGE_RADIUS_DDA1',
    'ABILITY_RLF_FULL_DAMAGE_AMOUNT_DDA2',
    'ABILITY_RLF_PARTIAL_DAMAGE_RADIUS',
    'ABILITY_RLF_PARTIAL_DAMAGE_AMOUNT',
    'ABILITY_RLF_BUILDING_DAMAGE_FACTOR_SDS1',
    'ABILITY_RLF_MAX_DAMAGE_UCO5',
    'ABILITY_RLF_MOVE_SPEED_BONUS_UCO6',
    'ABILITY_RLF_DAMAGE_TAKEN_PERCENT_DEF1',
    'ABILITY_RLF_DAMAGE_DEALT_PERCENT_DEF2',
    'ABILITY_RLF_MOVEMENT_SPEED_FACTOR_DEF3',
    'ABILITY_RLF_ATTACK_SPEED_FACTOR_DEF4',
    'ABILITY_RLF_MAGIC_DAMAGE_REDUCTION_DEF5',
    'ABILITY_RLF_CHANCE_TO_DEFLECT',
    'ABILITY_RLF_DEFLECT_DAMAGE_TAKEN_PIERCING',
    'ABILITY_RLF_DEFLECT_DAMAGE_TAKEN_SPELLS',
    'ABILITY_RLF_RIP_DELAY',
    'ABILITY_RLF_EAT_DELAY',
    'ABILITY_RLF_HIT_POINTS_GAINED_EAT3',
    'ABILITY_RLF_AIR_UNIT_LOWER_DURATION',
    'ABILITY_RLF_AIR_UNIT_HEIGHT',
    'ABILITY_RLF_MELEE_ATTACK_RANGE',
    'ABILITY_RLF_INTERVAL_DURATION_EGM2',
    'ABILITY_RLF_EFFECT_DELAY_FLA2',
    'ABILITY_RLF_MINING_DURATION',
    'ABILITY_RLF_RADIUS_OF_GRAVESTONES',
    'ABILITY_RLF_RADIUS_OF_CORPSES',
    'ABILITY_RLF_HIT_POINTS_GAINED_HEA1',
    'ABILITY_RLF_DAMAGE_INCREASE_PERCENT_INF1',
    'ABILITY_RLF_AUTOCAST_RANGE',
    'ABILITY_RLF_LIFE_REGEN_RATE',
    'ABILITY_RLF_GRAPHIC_DELAY_LIT1',
    'ABILITY_RLF_GRAPHIC_DURATION_LIT2',
    'ABILITY_RLF_DAMAGE_PER_SECOND_LSH1',
    'ABILITY_RLF_MANA_GAINED',
    'ABILITY_RLF_HIT_POINTS_GAINED_MBT2',
    'ABILITY_RLF_AUTOCAST_REQUIREMENT',
    'ABILITY_RLF_WATER_HEIGHT',
    'ABILITY_RLF_ACTIVATION_DELAY_MIN1',
    'ABILITY_RLF_INVISIBILITY_TRANSITION_TIME',
    'ABILITY_RLF_ACTIVATION_RADIUS',
    'ABILITY_RLF_AMOUNT_REGENERATED',
    'ABILITY_RLF_DAMAGE_PER_SECOND_POI1',
    'ABILITY_RLF_ATTACK_SPEED_FACTOR_POI2',
    'ABILITY_RLF_MOVEMENT_SPEED_FACTOR_POI3',
    'ABILITY_RLF_EXTRA_DAMAGE_POA1',
    'ABILITY_RLF_DAMAGE_PER_SECOND_POA2',
    'ABILITY_RLF_ATTACK_SPEED_FACTOR_POA3',
    'ABILITY_RLF_MOVEMENT_SPEED_FACTOR_POA4',
    'ABILITY_RLF_DAMAGE_AMPLIFICATION',
    'ABILITY_RLF_CHANCE_TO_STOMP_PERCENT',
    'ABILITY_RLF_DAMAGE_DEALT_WAR2',
    'ABILITY_RLF_FULL_DAMAGE_RADIUS_WAR3',
    'ABILITY_RLF_HALF_DAMAGE_RADIUS_WAR4',
    'ABILITY_RLF_SUMMONED_UNIT_DAMAGE_PRG3',
    'ABILITY_RLF_UNIT_PAUSE_DURATION',
    'ABILITY_RLF_HERO_PAUSE_DURATION',
    'ABILITY_RLF_HIT_POINTS_GAINED_REJ1',
    'ABILITY_RLF_MANA_POINTS_GAINED_REJ2',
    'ABILITY_RLF_MINIMUM_LIFE_REQUIRED',
    'ABILITY_RLF_MINIMUM_MANA_REQUIRED',
    'ABILITY_RLF_REPAIR_COST_RATIO',
    'ABILITY_RLF_REPAIR_TIME_RATIO',
    'ABILITY_RLF_POWERBUILD_COST',
    'ABILITY_RLF_POWERBUILD_RATE',
    'ABILITY_RLF_NAVAL_RANGE_BONUS',
    'ABILITY_RLF_DAMAGE_INCREASE_PERCENT_ROA1',
    'ABILITY_RLF_LIFE_REGENERATION_RATE',
    'ABILITY_RLF_MANA_REGEN',
    'ABILITY_RLF_DAMAGE_INCREASE',
    'ABILITY_RLF_SALVAGE_COST_RATIO',
    'ABILITY_RLF_IN_FLIGHT_SIGHT_RADIUS',
    'ABILITY_RLF_HOVERING_SIGHT_RADIUS',
    'ABILITY_RLF_HOVERING_HEIGHT',
    'ABILITY_RLF_DURATION_OF_OWLS',
    'ABILITY_RLF_FADE_DURATION',
    'ABILITY_RLF_DAY_NIGHT_DURATION',
    'ABILITY_RLF_ACTION_DURATION',
    'ABILITY_RLF_MOVEMENT_SPEED_FACTOR_SLO1',
    'ABILITY_RLF_ATTACK_SPEED_FACTOR_SLO2',
    'ABILITY_RLF_DAMAGE_PER_SECOND_SPO1',
    'ABILITY_RLF_MOVEMENT_SPEED_FACTOR_SPO2',
    'ABILITY_RLF_ATTACK_SPEED_FACTOR_SPO3',
    'ABILITY_RLF_ACTIVATION_DELAY_STA1',
    'ABILITY_RLF_DETECTION_RADIUS_STA2',
    'ABILITY_RLF_DETONATION_RADIUS',
    'ABILITY_RLF_STUN_DURATION_STA4',
    'ABILITY_RLF_ATTACK_SPEED_BONUS_PERCENT',
    'ABILITY_RLF_DAMAGE_PER_SECOND_UHF2',
    'ABILITY_RLF_LUMBER_PER_INTERVAL',
    'ABILITY_RLF_ART_ATTACHMENT_HEIGHT',
    'ABILITY_RLF_TELEPORT_AREA_WIDTH',
    'ABILITY_RLF_TELEPORT_AREA_HEIGHT',
    'ABILITY_RLF_LIFE_STOLEN_PER_ATTACK',
    'ABILITY_RLF_DAMAGE_BONUS_IDAM',
    'ABILITY_RLF_CHANCE_TO_HIT_UNITS_PERCENT',
    'ABILITY_RLF_CHANCE_TO_HIT_HEROS_PERCENT',
    'ABILITY_RLF_CHANCE_TO_HIT_SUMMONS_PERCENT',
    'ABILITY_RLF_DELAY_FOR_TARGET_EFFECT',
    'ABILITY_RLF_DAMAGE_DEALT_PERCENT_OF_NORMAL',
    'ABILITY_RLF_DAMAGE_RECEIVED_MULTIPLIER',
    'ABILITY_RLF_MANA_REGENERATION_BONUS_AS_FRACTION_OF_NORMAL',
    'ABILITY_RLF_MOVEMENT_SPEED_INCREASE_ISPI',
    'ABILITY_RLF_DAMAGE_PER_SECOND_IDPS',
    'ABILITY_RLF_ATTACK_DAMAGE_INCREASE_CAC1',
    'ABILITY_RLF_DAMAGE_PER_SECOND_COR1',
    'ABILITY_RLF_ATTACK_SPEED_INCREASE_ISX1',
    'ABILITY_RLF_DAMAGE_WRS1',
    'ABILITY_RLF_TERRAIN_DEFORMATION_AMPLITUDE',
    'ABILITY_RLF_DAMAGE_CTC1',
    'ABILITY_RLF_EXTRA_DAMAGE_TO_TARGET',
    'ABILITY_RLF_MOVEMENT_SPEED_REDUCTION_CTC3',
    'ABILITY_RLF_ATTACK_SPEED_REDUCTION_CTC4',
    'ABILITY_RLF_DAMAGE_CTB1',
    'ABILITY_RLF_CASTING_DELAY_SECONDS',
    'ABILITY_RLF_MANA_LOSS_PER_UNIT_DTN1',
    'ABILITY_RLF_DAMAGE_TO_SUMMONED_UNITS_DTN2',
    'ABILITY_RLF_TRANSITION_TIME_SECONDS',
    'ABILITY_RLF_MANA_DRAINED_PER_SECOND_NMR1',
    'ABILITY_RLF_CHANCE_TO_REDUCE_DAMAGE_PERCENT',
    'ABILITY_RLF_MINIMUM_DAMAGE',
    'ABILITY_RLF_IGNORED_DAMAGE',
    'ABILITY_RLF_FULL_DAMAGE_DEALT',
    'ABILITY_RLF_FULL_DAMAGE_INTERVAL',
    'ABILITY_RLF_HALF_DAMAGE_DEALT',
    'ABILITY_RLF_HALF_DAMAGE_INTERVAL',
    'ABILITY_RLF_BUILDING_REDUCTION_HFS5',
    'ABILITY_RLF_MAXIMUM_DAMAGE_HFS6',
    'ABILITY_RLF_MANA_PER_HIT_POINT',
    'ABILITY_RLF_DAMAGE_ABSORBED_PERCENT',
    'ABILITY_RLF_WAVE_DISTANCE',
    'ABILITY_RLF_WAVE_TIME_SECONDS',
    'ABILITY_RLF_DAMAGE_DEALT_UIM3',
    'ABILITY_RLF_AIR_TIME_SECONDS_UIM4',
    'ABILITY_RLF_UNIT_RELEASE_INTERVAL_SECONDS',
    'ABILITY_RLF_DAMAGE_RETURN_FACTOR',
    'ABILITY_RLF_DAMAGE_RETURN_THRESHOLD',
    'ABILITY_RLF_RETURNED_DAMAGE_FACTOR',
    'ABILITY_RLF_RECEIVED_DAMAGE_FACTOR',
    'ABILITY_RLF_DEFENSE_BONUS_UTS3',
    'ABILITY_RLF_DAMAGE_BONUS_NBA1',
    'ABILITY_RLF_SUMMONED_UNIT_DURATION_SECONDS_NBA3',
    'ABILITY_RLF_MANA_PER_SUMMONED_HITPOINT',
    'ABILITY_RLF_CHARGE_FOR_CURRENT_LIFE',
    'ABILITY_RLF_HIT_POINTS_DRAINED',
    'ABILITY_RLF_MANA_POINTS_DRAINED',
    'ABILITY_RLF_DRAIN_INTERVAL_SECONDS',
    'ABILITY_RLF_LIFE_TRANSFERRED_PER_SECOND',
    'ABILITY_RLF_MANA_TRANSFERRED_PER_SECOND',
    'ABILITY_RLF_BONUS_LIFE_FACTOR',
    'ABILITY_RLF_BONUS_LIFE_DECAY',
    'ABILITY_RLF_BONUS_MANA_FACTOR',
    'ABILITY_RLF_BONUS_MANA_DECAY',
    'ABILITY_RLF_CHANCE_TO_MISS_PERCENT',
    'ABILITY_RLF_MOVEMENT_SPEED_MODIFIER',
    'ABILITY_RLF_ATTACK_SPEED_MODIFIER',
    'ABILITY_RLF_DAMAGE_PER_SECOND_TDG1',
    'ABILITY_RLF_MEDIUM_DAMAGE_RADIUS_TDG2',
    'ABILITY_RLF_MEDIUM_DAMAGE_PER_SECOND',
    'ABILITY_RLF_SMALL_DAMAGE_RADIUS_TDG4',
    'ABILITY_RLF_SMALL_DAMAGE_PER_SECOND',
    'ABILITY_RLF_AIR_TIME_SECONDS_TSP1',
    'ABILITY_RLF_MINIMUM_HIT_INTERVAL_SECONDS',
    'ABILITY_RLF_DAMAGE_PER_SECOND_NBF5',
    'ABILITY_RLF_MAXIMUM_RANGE',
    'ABILITY_RLF_MINIMUM_RANGE',
    'ABILITY_RLF_DAMAGE_PER_TARGET_EFK1',
    'ABILITY_RLF_MAXIMUM_TOTAL_DAMAGE',
    'ABILITY_RLF_MAXIMUM_SPEED_ADJUSTMENT',
    'ABILITY_RLF_DECAYING_DAMAGE',
    'ABILITY_RLF_MOVEMENT_SPEED_FACTOR_ESH2',
    'ABILITY_RLF_ATTACK_SPEED_FACTOR_ESH3',
    'ABILITY_RLF_DECAY_POWER',
    'ABILITY_RLF_INITIAL_DAMAGE_ESH5',
    'ABILITY_RLF_MAXIMUM_LIFE_ABSORBED',
    'ABILITY_RLF_MAXIMUM_MANA_ABSORBED',
    'ABILITY_RLF_MOVEMENT_SPEED_INCREASE_BSK1',
    'ABILITY_RLF_ATTACK_SPEED_INCREASE_BSK2',
    'ABILITY_RLF_DAMAGE_TAKEN_INCREASE',
    'ABILITY_RLF_LIFE_PER_UNIT',
    'ABILITY_RLF_MANA_PER_UNIT',
    'ABILITY_RLF_LIFE_PER_BUFF',
    'ABILITY_RLF_MANA_PER_BUFF',
    'ABILITY_RLF_SUMMONED_UNIT_DAMAGE_DVM5',
    'ABILITY_RLF_DAMAGE_BONUS_FAK1',
    'ABILITY_RLF_MEDIUM_DAMAGE_FACTOR_FAK2',
    'ABILITY_RLF_SMALL_DAMAGE_FACTOR_FAK3',
    'ABILITY_RLF_FULL_DAMAGE_RADIUS_FAK4',
    'ABILITY_RLF_HALF_DAMAGE_RADIUS_FAK5',
    'ABILITY_RLF_EXTRA_DAMAGE_PER_SECOND',
    'ABILITY_RLF_MOVEMENT_SPEED_REDUCTION_LIQ2',
    'ABILITY_RLF_ATTACK_SPEED_REDUCTION_LIQ3',
    'ABILITY_RLF_MAGIC_DAMAGE_FACTOR',
    'ABILITY_RLF_UNIT_DAMAGE_PER_MANA_POINT',
    'ABILITY_RLF_HERO_DAMAGE_PER_MANA_POINT',
    'ABILITY_RLF_UNIT_MAXIMUM_DAMAGE',
    'ABILITY_RLF_HERO_MAXIMUM_DAMAGE',
    'ABILITY_RLF_DAMAGE_COOLDOWN',
    'ABILITY_RLF_DISTRIBUTED_DAMAGE_FACTOR_SPL1',
    'ABILITY_RLF_LIFE_REGENERATED',
    'ABILITY_RLF_MANA_REGENERATED',
    'ABILITY_RLF_MANA_LOSS_PER_UNIT_IDC1',
    'ABILITY_RLF_SUMMONED_UNIT_DAMAGE_IDC2',
    'ABILITY_RLF_ACTIVATION_DELAY_IMO2',
    'ABILITY_RLF_LURE_INTERVAL_SECONDS',
    'ABILITY_RLF_DAMAGE_BONUS_ISR1',
    'ABILITY_RLF_DAMAGE_REDUCTION_ISR2',
    'ABILITY_RLF_DAMAGE_BONUS_IPV1',
    'ABILITY_RLF_LIFE_STEAL_AMOUNT',
    'ABILITY_RLF_LIFE_RESTORED_FACTOR',
    'ABILITY_RLF_MANA_RESTORED_FACTOR',
    'ABILITY_RLF_ATTACH_DELAY',
    'ABILITY_RLF_REMOVE_DELAY',
    'ABILITY_RLF_HERO_REGENERATION_DELAY',
    'ABILITY_RLF_UNIT_REGENERATION_DELAY',
    'ABILITY_RLF_MAGIC_DAMAGE_REDUCTION_NSA4',
    'ABILITY_RLF_HIT_POINTS_PER_SECOND_NSA5',
    'ABILITY_RLF_DAMAGE_TO_SUMMONED_UNITS_IXS1',
    'ABILITY_RLF_MAGIC_DAMAGE_REDUCTION_IXS2',
    'ABILITY_RLF_SUMMONED_UNIT_DURATION',
    'ABILITY_RLF_SHIELD_COOLDOWN_TIME',
    'ABILITY_RLF_DAMAGE_PER_SECOND_NDO1',
    'ABILITY_RLF_SUMMONED_UNIT_DURATION_SECONDS_NDO3',
    'ABILITY_RLF_MEDIUM_DAMAGE_RADIUS_FLK1',
    'ABILITY_RLF_SMALL_DAMAGE_RADIUS_FLK2',
    'ABILITY_RLF_FULL_DAMAGE_AMOUNT_FLK3',
    'ABILITY_RLF_MEDIUM_DAMAGE_AMOUNT',
    'ABILITY_RLF_SMALL_DAMAGE_AMOUNT',
    'ABILITY_RLF_MOVEMENT_SPEED_REDUCTION_PERCENT_HBN1',
    'ABILITY_RLF_ATTACK_SPEED_REDUCTION_PERCENT_HBN2',
    'ABILITY_RLF_MAX_MANA_DRAINED_UNITS',
    'ABILITY_RLF_DAMAGE_RATIO_UNITS_PERCENT',
    'ABILITY_RLF_MAX_MANA_DRAINED_HEROS',
    'ABILITY_RLF_DAMAGE_RATIO_HEROS_PERCENT',
    'ABILITY_RLF_SUMMONED_DAMAGE',
    'ABILITY_RLF_DISTRIBUTED_DAMAGE_FACTOR_NCA1',
    'ABILITY_RLF_INITIAL_DAMAGE_PXF1',
    'ABILITY_RLF_DAMAGE_PER_SECOND_PXF2',
    'ABILITY_RLF_DAMAGE_PER_SECOND_MLS1',
    'ABILITY_RLF_BEAST_COLLISION_RADIUS',
    'ABILITY_RLF_DAMAGE_AMOUNT_NST3',
    'ABILITY_RLF_DAMAGE_RADIUS',
    'ABILITY_RLF_DAMAGE_DELAY',
    'ABILITY_RLF_FOLLOW_THROUGH_TIME',
    'ABILITY_RLF_ART_DURATION',
    'ABILITY_RLF_MOVEMENT_SPEED_REDUCTION_PERCENT_NAB1',
    'ABILITY_RLF_ATTACK_SPEED_REDUCTION_PERCENT_NAB2',
    'ABILITY_RLF_PRIMARY_DAMAGE',
    'ABILITY_RLF_SECONDARY_DAMAGE',
    'ABILITY_RLF_DAMAGE_INTERVAL_NAB6',
    'ABILITY_RLF_GOLD_COST_FACTOR',
    'ABILITY_RLF_LUMBER_COST_FACTOR',
    'ABILITY_RLF_MOVE_SPEED_BONUS_NEG1',
    'ABILITY_RLF_DAMAGE_BONUS_NEG2',
    'ABILITY_RLF_DAMAGE_AMOUNT_NCS1',
    'ABILITY_RLF_DAMAGE_INTERVAL_NCS2',
    'ABILITY_RLF_MAX_DAMAGE_NCS4',
    'ABILITY_RLF_BUILDING_DAMAGE_FACTOR_NCS5',
    'ABILITY_RLF_EFFECT_DURATION',
    'ABILITY_RLF_SPAWN_INTERVAL_NSY1',
    'ABILITY_RLF_SPAWN_UNIT_DURATION',
    'ABILITY_RLF_SPAWN_UNIT_OFFSET',
    'ABILITY_RLF_LEASH_RANGE_NSY5',
    'ABILITY_RLF_SPAWN_INTERVAL_NFY1',
    'ABILITY_RLF_LEASH_RANGE_NFY2',
    'ABILITY_RLF_CHANCE_TO_DEMOLISH',
    'ABILITY_RLF_DAMAGE_MULTIPLIER_BUILDINGS',
    'ABILITY_RLF_DAMAGE_MULTIPLIER_UNITS',
    'ABILITY_RLF_DAMAGE_MULTIPLIER_HEROES',
    'ABILITY_RLF_BONUS_DAMAGE_MULTIPLIER',
    'ABILITY_RLF_DEATH_DAMAGE_FULL_AMOUNT',
    'ABILITY_RLF_DEATH_DAMAGE_FULL_AREA',
    'ABILITY_RLF_DEATH_DAMAGE_HALF_AMOUNT',
    'ABILITY_RLF_DEATH_DAMAGE_HALF_AREA',
    'ABILITY_RLF_DEATH_DAMAGE_DELAY',
    'ABILITY_RLF_DAMAGE_AMOUNT_NSO1',
    'ABILITY_RLF_DAMAGE_PERIOD',
    'ABILITY_RLF_DAMAGE_PENALTY',
    'ABILITY_RLF_MOVEMENT_SPEED_REDUCTION_PERCENT_NSO4',
    'ABILITY_RLF_ATTACK_SPEED_REDUCTION_PERCENT_NSO5',
    'ABILITY_RLF_SPLIT_DELAY',
    'ABILITY_RLF_MAX_HITPOINT_FACTOR',
    'ABILITY_RLF_LIFE_DURATION_SPLIT_BONUS',
    'ABILITY_RLF_WAVE_INTERVAL',
    'ABILITY_RLF_BUILDING_DAMAGE_FACTOR_NVC4',
    'ABILITY_RLF_FULL_DAMAGE_AMOUNT_NVC5',
    'ABILITY_RLF_HALF_DAMAGE_FACTOR',
    'ABILITY_RLF_INTERVAL_BETWEEN_PULSES',
    'ABILITY_BLF_PERCENT_BONUS_HAB2',
    'ABILITY_BLF_USE_TELEPORT_CLUSTERING_HMT3',
    'ABILITY_BLF_NEVER_MISS_OCR5',
    'ABILITY_BLF_EXCLUDE_ITEM_DAMAGE',
    'ABILITY_BLF_BACKSTAB_DAMAGE',
    'ABILITY_BLF_INHERIT_UPGRADES_UAN3',
    'ABILITY_BLF_MANA_CONVERSION_AS_PERCENT',
    'ABILITY_BLF_LIFE_CONVERSION_AS_PERCENT',
    'ABILITY_BLF_LEAVE_TARGET_ALIVE',
    'ABILITY_BLF_PERCENT_BONUS_UAU3',
    'ABILITY_BLF_DAMAGE_IS_PERCENT_RECEIVED',
    'ABILITY_BLF_MELEE_BONUS',
    'ABILITY_BLF_RANGED_BONUS',
    'ABILITY_BLF_FLAT_BONUS',
    'ABILITY_BLF_NEVER_MISS_HBH5',
    'ABILITY_BLF_PERCENT_BONUS_HAD2',
    'ABILITY_BLF_CAN_DEACTIVATE',
    'ABILITY_BLF_RAISED_UNITS_ARE_INVULNERABLE',
    'ABILITY_BLF_PERCENTAGE_OAR2',
    'ABILITY_BLF_SUMMON_BUSY_UNITS',
    'ABILITY_BLF_CREATES_BLIGHT',
    'ABILITY_BLF_EXPLODES_ON_DEATH',
    'ABILITY_BLF_ALWAYS_AUTOCAST_FAE2',
    'ABILITY_BLF_REGENERATE_ONLY_AT_NIGHT',
    'ABILITY_BLF_SHOW_SELECT_UNIT_BUTTON',
    'ABILITY_BLF_SHOW_UNIT_INDICATOR',
    'ABILITY_BLF_CHARGE_OWNING_PLAYER',
    'ABILITY_BLF_PERCENTAGE_ARM2',
    'ABILITY_BLF_TARGET_IS_INVULNERABLE',
    'ABILITY_BLF_TARGET_IS_MAGIC_IMMUNE',
    'ABILITY_BLF_KILL_ON_CASTER_DEATH',
    'ABILITY_BLF_NO_TARGET_REQUIRED_REJ4',
    'ABILITY_BLF_ACCEPTS_GOLD',
    'ABILITY_BLF_ACCEPTS_LUMBER',
    'ABILITY_BLF_PREFER_HOSTILES_ROA5',
    'ABILITY_BLF_PREFER_FRIENDLIES_ROA6',
    'ABILITY_BLF_ROOTED_TURNING',
    'ABILITY_BLF_ALWAYS_AUTOCAST_SLO3',
    'ABILITY_BLF_HIDE_BUTTON',
    'ABILITY_BLF_USE_TELEPORT_CLUSTERING_ITP2',
    'ABILITY_BLF_IMMUNE_TO_MORPH_EFFECTS',
    'ABILITY_BLF_DOES_NOT_BLOCK_BUILDINGS',
    'ABILITY_BLF_AUTO_ACQUIRE_ATTACK_TARGETS',
    'ABILITY_BLF_IMMUNE_TO_MORPH_EFFECTS_GHO2',
    'ABILITY_BLF_DO_NOT_BLOCK_BUILDINGS',
    'ABILITY_BLF_INCLUDE_RANGED_DAMAGE',
    'ABILITY_BLF_INCLUDE_MELEE_DAMAGE',
    'ABILITY_BLF_MOVE_TO_PARTNER',
    'ABILITY_BLF_CAN_BE_DISPELLED',
    'ABILITY_BLF_IGNORE_FRIENDLY_BUFFS',
    'ABILITY_BLF_DROP_ITEMS_ON_DEATH',
    'ABILITY_BLF_CAN_USE_ITEMS',
    'ABILITY_BLF_CAN_GET_ITEMS',
    'ABILITY_BLF_CAN_DROP_ITEMS',
    'ABILITY_BLF_REPAIRS_ALLOWED',
    'ABILITY_BLF_CASTER_ONLY_SPLASH',
    'ABILITY_BLF_NO_TARGET_REQUIRED_IRL4',
    'ABILITY_BLF_DISPEL_ON_ATTACK',
    'ABILITY_BLF_AMOUNT_IS_RAW_VALUE',
    'ABILITY_BLF_SHARED_SPELL_COOLDOWN',
    'ABILITY_BLF_SLEEP_ONCE',
    'ABILITY_BLF_ALLOW_ON_ANY_PLAYER_SLOT',
    'ABILITY_BLF_DISABLE_OTHER_ABILITIES',
    'ABILITY_BLF_ALLOW_BOUNTY',
    'ABILITY_SLF_ICON_NORMAL',
    'ABILITY_SLF_CASTER',
    'ABILITY_SLF_TARGET',
    'ABILITY_SLF_SPECIAL',
    'ABILITY_SLF_EFFECT',
    'ABILITY_SLF_AREA_EFFECT',
    'ABILITY_SLF_LIGHTNING_EFFECTS',
    'ABILITY_SLF_MISSILE_ART',
    'ABILITY_SLF_TOOLTIP_LEARN',
    'ABILITY_SLF_TOOLTIP_LEARN_EXTENDED',
    'ABILITY_SLF_TOOLTIP_NORMAL',
    'ABILITY_SLF_TOOLTIP_TURN_OFF',
    'ABILITY_SLF_TOOLTIP_NORMAL_EXTENDED',
    'ABILITY_SLF_TOOLTIP_TURN_OFF_EXTENDED',
    'ABILITY_SLF_NORMAL_FORM_UNIT_EME1',
    'ABILITY_SLF_SPAWNED_UNITS',
    'ABILITY_SLF_ABILITY_FOR_UNIT_CREATION',
    'ABILITY_SLF_NORMAL_FORM_UNIT_MIL1',
    'ABILITY_SLF_ALTERNATE_FORM_UNIT_MIL2',
    'ABILITY_SLF_BASE_ORDER_ID_ANS5',
    'ABILITY_SLF_MORPH_UNITS_GROUND',
    'ABILITY_SLF_MORPH_UNITS_AIR',
    'ABILITY_SLF_MORPH_UNITS_AMPHIBIOUS',
    'ABILITY_SLF_MORPH_UNITS_WATER',
    'ABILITY_SLF_UNIT_TYPE_ONE',
    'ABILITY_SLF_UNIT_TYPE_TWO',
    'ABILITY_SLF_UNIT_TYPE_SOD2',
    'ABILITY_SLF_SUMMON_1_UNIT_TYPE',
    'ABILITY_SLF_SUMMON_2_UNIT_TYPE',
    'ABILITY_SLF_RACE_TO_CONVERT',
    'ABILITY_SLF_PARTNER_UNIT_TYPE',
    'ABILITY_SLF_PARTNER_UNIT_TYPE_ONE',
    'ABILITY_SLF_PARTNER_UNIT_TYPE_TWO',
    'ABILITY_SLF_REQUIRED_UNIT_TYPE',
    'ABILITY_SLF_CONVERTED_UNIT_TYPE',
    'ABILITY_SLF_SPELL_LIST',
    'ABILITY_SLF_BASE_ORDER_ID_SPB5',
    'ABILITY_SLF_BASE_ORDER_ID_NCL6',
    'ABILITY_SLF_ABILITY_UPGRADE_1',
    'ABILITY_SLF_ABILITY_UPGRADE_2',
    'ABILITY_SLF_ABILITY_UPGRADE_3',
    'ABILITY_SLF_ABILITY_UPGRADE_4',
    'ABILITY_SLF_SPAWN_UNIT_ID_NSY2',
    'ITEM_IF_LEVEL',
    'ITEM_IF_NUMBER_OF_CHARGES',
    'ITEM_IF_COOLDOWN_GROUP',
    'ITEM_IF_MAX_HIT_POINTS',
    'ITEM_IF_HIT_POINTS',
    'ITEM_IF_PRIORITY',
    'ITEM_IF_ARMOR_TYPE',
    'ITEM_IF_TINTING_COLOR_RED',
    'ITEM_IF_TINTING_COLOR_GREEN',
    'ITEM_IF_TINTING_COLOR_BLUE',
    'ITEM_IF_TINTING_COLOR_ALPHA',
    'ITEM_RF_SCALING_VALUE',
    'ITEM_BF_DROPPED_WHEN_CARRIER_DIES',
    'ITEM_BF_CAN_BE_DROPPED',
    'ITEM_BF_PERISHABLE',
    'ITEM_BF_INCLUDE_AS_RANDOM_CHOICE',
    'ITEM_BF_USE_AUTOMATICALLY_WHEN_ACQUIRED',
    'ITEM_BF_CAN_BE_SOLD_TO_MERCHANTS',
    'ITEM_BF_ACTIVELY_USED',
    'ITEM_SF_MODEL_USED',
    'UNIT_IF_DEFENSE_TYPE',
    'UNIT_IF_ARMOR_TYPE',
    'UNIT_IF_LOOPING_FADE_IN_RATE',
    'UNIT_IF_LOOPING_FADE_OUT_RATE',
    'UNIT_IF_AGILITY',
    'UNIT_IF_INTELLIGENCE',
    'UNIT_IF_STRENGTH',
    'UNIT_IF_AGILITY_PERMANENT',
    'UNIT_IF_INTELLIGENCE_PERMANENT',
    'UNIT_IF_STRENGTH_PERMANENT',
    'UNIT_IF_AGILITY_WITH_BONUS',
    'UNIT_IF_INTELLIGENCE_WITH_BONUS',
    'UNIT_IF_STRENGTH_WITH_BONUS',
    'UNIT_IF_GOLD_BOUNTY_AWARDED_NUMBER_OF_DICE',
    'UNIT_IF_GOLD_BOUNTY_AWARDED_BASE',
    'UNIT_IF_GOLD_BOUNTY_AWARDED_SIDES_PER_DIE',
    'UNIT_IF_LUMBER_BOUNTY_AWARDED_NUMBER_OF_DICE',
    'UNIT_IF_LUMBER_BOUNTY_AWARDED_BASE',
    'UNIT_IF_LUMBER_BOUNTY_AWARDED_SIDES_PER_DIE',
    'UNIT_IF_LEVEL',
    'UNIT_IF_FORMATION_RANK',
    'UNIT_IF_ORIENTATION_INTERPOLATION',
    'UNIT_IF_ELEVATION_SAMPLE_POINTS',
    'UNIT_IF_TINTING_COLOR_RED',
    'UNIT_IF_TINTING_COLOR_GREEN',
    'UNIT_IF_TINTING_COLOR_BLUE',
    'UNIT_IF_TINTING_COLOR_ALPHA',
    'UNIT_IF_MOVE_TYPE',
    'UNIT_IF_TARGETED_AS',
    'UNIT_IF_UNIT_CLASSIFICATION',
    'UNIT_IF_HIT_POINTS_REGENERATION_TYPE',
    'UNIT_IF_PLACEMENT_PREVENTED_BY',
    'UNIT_IF_PRIMARY_ATTRIBUTE',
    'UNIT_RF_STRENGTH_PER_LEVEL',
    'UNIT_RF_AGILITY_PER_LEVEL',
    'UNIT_RF_INTELLIGENCE_PER_LEVEL',
    'UNIT_RF_HIT_POINTS_REGENERATION_RATE',
    'UNIT_RF_MANA_REGENERATION',
    'UNIT_RF_DEATH_TIME',
    'UNIT_RF_FLY_HEIGHT',
    'UNIT_RF_TURN_RATE',
    'UNIT_RF_ELEVATION_SAMPLE_RADIUS',
    'UNIT_RF_FOG_OF_WAR_SAMPLE_RADIUS',
    'UNIT_RF_MAXIMUM_PITCH_ANGLE_DEGREES',
    'UNIT_RF_MAXIMUM_ROLL_ANGLE_DEGREES',
    'UNIT_RF_SCALING_VALUE',
    'UNIT_RF_ANIMATION_RUN_SPEED',
    'UNIT_RF_SELECTION_SCALE',
    'UNIT_RF_SELECTION_CIRCLE_HEIGHT',
    'UNIT_RF_SHADOW_IMAGE_HEIGHT',
    'UNIT_RF_SHADOW_IMAGE_WIDTH',
    'UNIT_RF_SHADOW_IMAGE_CENTER_X',
    'UNIT_RF_SHADOW_IMAGE_CENTER_Y',
    'UNIT_RF_ANIMATION_WALK_SPEED',
    'UNIT_RF_DEFENSE',
    'UNIT_RF_SIGHT_RADIUS',
    'UNIT_RF_PRIORITY',
    'UNIT_RF_SPEED',
    'UNIT_RF_OCCLUDER_HEIGHT',
    'UNIT_RF_HP',
    'UNIT_RF_MANA',
    'UNIT_RF_ACQUISITION_RANGE',
    'UNIT_RF_CAST_BACK_SWING',
    'UNIT_RF_CAST_POINT',
    'UNIT_RF_MINIMUM_ATTACK_RANGE',
    'UNIT_BF_RAISABLE',
    'UNIT_BF_DECAYABLE',
    'UNIT_BF_IS_A_BUILDING',
    'UNIT_BF_USE_EXTENDED_LINE_OF_SIGHT',
    'UNIT_BF_NEUTRAL_BUILDING_SHOWS_MINIMAP_ICON',
    'UNIT_BF_HERO_HIDE_HERO_INTERFACE_ICON',
    'UNIT_BF_HERO_HIDE_HERO_MINIMAP_DISPLAY',
    'UNIT_BF_HERO_HIDE_HERO_DEATH_MESSAGE',
    'UNIT_BF_HIDE_MINIMAP_DISPLAY',
    'UNIT_BF_SCALE_PROJECTILES',
    'UNIT_BF_SELECTION_CIRCLE_ON_WATER',
    'UNIT_BF_HAS_WATER_SHADOW',
    'UNIT_SF_NAME',
    'UNIT_SF_PROPER_NAMES',
    'UNIT_SF_GROUND_TEXTURE',
    'UNIT_SF_SHADOW_IMAGE_UNIT',
    'UNIT_WEAPON_IF_ATTACK_DAMAGE_NUMBER_OF_DICE',
    'UNIT_WEAPON_IF_ATTACK_DAMAGE_BASE',
    'UNIT_WEAPON_IF_ATTACK_DAMAGE_SIDES_PER_DIE',
    'UNIT_WEAPON_IF_ATTACK_MAXIMUM_NUMBER_OF_TARGETS',
    'UNIT_WEAPON_IF_ATTACK_ATTACK_TYPE',
    'UNIT_WEAPON_IF_ATTACK_WEAPON_SOUND',
    'UNIT_WEAPON_IF_ATTACK_AREA_OF_EFFECT_TARGETS',
    'UNIT_WEAPON_IF_ATTACK_TARGETS_ALLOWED',
    'UNIT_WEAPON_RF_ATTACK_BACKSWING_POINT',
    'UNIT_WEAPON_RF_ATTACK_DAMAGE_POINT',
    'UNIT_WEAPON_RF_ATTACK_BASE_COOLDOWN',
    'UNIT_WEAPON_RF_ATTACK_DAMAGE_LOSS_FACTOR',
    'UNIT_WEAPON_RF_ATTACK_DAMAGE_FACTOR_MEDIUM',
    'UNIT_WEAPON_RF_ATTACK_DAMAGE_FACTOR_SMALL',
    'UNIT_WEAPON_RF_ATTACK_DAMAGE_SPILL_DISTANCE',
    'UNIT_WEAPON_RF_ATTACK_DAMAGE_SPILL_RADIUS',
    'UNIT_WEAPON_RF_ATTACK_PROJECTILE_SPEED',
    'UNIT_WEAPON_RF_ATTACK_PROJECTILE_ARC',
    'UNIT_WEAPON_RF_ATTACK_AREA_OF_EFFECT_FULL_DAMAGE',
    'UNIT_WEAPON_RF_ATTACK_AREA_OF_EFFECT_MEDIUM_DAMAGE',
    'UNIT_WEAPON_RF_ATTACK_AREA_OF_EFFECT_SMALL_DAMAGE',
    'UNIT_WEAPON_RF_ATTACK_RANGE',
    'UNIT_WEAPON_BF_ATTACK_SHOW_UI',
    'UNIT_WEAPON_BF_ATTACKS_ENABLED',
    'UNIT_WEAPON_BF_ATTACK_PROJECTILE_HOMING_ENABLED',
    'UNIT_WEAPON_SF_ATTACK_PROJECTILE_ART',
    'MOVE_TYPE_UNKNOWN',
    'MOVE_TYPE_FOOT',
    'MOVE_TYPE_FLY',
    'MOVE_TYPE_HORSE',
    'MOVE_TYPE_HOVER',
    'MOVE_TYPE_FLOAT',
    'MOVE_TYPE_AMPHIBIOUS',
    'MOVE_TYPE_UNBUILDABLE',
    'TARGET_FLAG_NONE',
    'TARGET_FLAG_GROUND',
    'TARGET_FLAG_AIR',
    'TARGET_FLAG_STRUCTURE',
    'TARGET_FLAG_WARD',
    'TARGET_FLAG_ITEM',
    'TARGET_FLAG_TREE',
    'TARGET_FLAG_WALL',
    'TARGET_FLAG_DEBRIS',
    'TARGET_FLAG_DECORATION',
    'TARGET_FLAG_BRIDGE',
    'DEFENSE_TYPE_LIGHT',
    'DEFENSE_TYPE_MEDIUM',
    'DEFENSE_TYPE_LARGE',
    'DEFENSE_TYPE_FORT',
    'DEFENSE_TYPE_NORMAL',
    'DEFENSE_TYPE_HERO',
    'DEFENSE_TYPE_DIVINE',
    'DEFENSE_TYPE_NONE',
    'HERO_ATTRIBUTE_STR',
    'HERO_ATTRIBUTE_INT',
    'HERO_ATTRIBUTE_AGI',
    'ARMOR_TYPE_WHOKNOWS',
    'ARMOR_TYPE_FLESH',
    'ARMOR_TYPE_METAL',
    'ARMOR_TYPE_WOOD',
    'ARMOR_TYPE_ETHREAL',
    'ARMOR_TYPE_STONE',
    'REGENERATION_TYPE_NONE',
    'REGENERATION_TYPE_ALWAYS',
    'REGENERATION_TYPE_BLIGHT',
    'REGENERATION_TYPE_DAY',
    'REGENERATION_TYPE_NIGHT',
    'UNIT_CATEGORY_GIANT',
    'UNIT_CATEGORY_UNDEAD',
    'UNIT_CATEGORY_SUMMONED',
    'UNIT_CATEGORY_MECHANICAL',
    'UNIT_CATEGORY_PEON',
    'UNIT_CATEGORY_SAPPER',
    'UNIT_CATEGORY_TOWNHALL',
    'UNIT_CATEGORY_ANCIENT',
    'UNIT_CATEGORY_NEUTRAL',
    'UNIT_CATEGORY_WARD',
    'UNIT_CATEGORY_STANDON',
    'UNIT_CATEGORY_TAUREN',
    'PATHING_FLAG_UNWALKABLE',
    'PATHING_FLAG_UNFLYABLE',
    'PATHING_FLAG_UNBUILDABLE',
    'PATHING_FLAG_UNPEONHARVEST',
    'PATHING_FLAG_BLIGHTED',
    'PATHING_FLAG_UNFLOATABLE',
    'PATHING_FLAG_UNAMPHIBIOUS',
    'PATHING_FLAG_UNITEMPLACABLE',
}]]

P['lib/stdlib/native/init.lua'] = [[-- init.lua
-- @Author : Dencer (tdaddon@163.com)
-- @Link   : https://dengsir.github.io
-- @Date   : 6/27/2019, 8:55:59 PM

return require('lib.stdlib.native.native')]]

P['lib/stdlib/native/native.lua'] = [=[
local Native = {}

--[[@remove@

---@param i integer
---@return race
function Native.ConvertRace(i) end

---@param i integer
---@return alliancetype
function Native.ConvertAllianceType(i) end

---@param i integer
---@return racepreference
function Native.ConvertRacePref(i) end

---@param i integer
---@return igamestate
function Native.ConvertIGameState(i) end

---@param i integer
---@return fgamestate
function Native.ConvertFGameState(i) end

---@param i integer
---@return playerstate
function Native.ConvertPlayerState(i) end

---@param i integer
---@return playerscore
function Native.ConvertPlayerScore(i) end

---@param i integer
---@return playergameresult
function Native.ConvertPlayerGameResult(i) end

---@param i integer
---@return unitstate
function Native.ConvertUnitState(i) end

---@param i integer
---@return aidifficulty
function Native.ConvertAIDifficulty(i) end

---@param i integer
---@return gameevent
function Native.ConvertGameEvent(i) end

---@param i integer
---@return playerevent
function Native.ConvertPlayerEvent(i) end

---@param i integer
---@return playerunitevent
function Native.ConvertPlayerUnitEvent(i) end

---@param i integer
---@return widgetevent
function Native.ConvertWidgetEvent(i) end

---@param i integer
---@return dialogevent
function Native.ConvertDialogEvent(i) end

---@param i integer
---@return unitevent
function Native.ConvertUnitEvent(i) end

---@param i integer
---@return limitop
function Native.ConvertLimitOp(i) end

---@param i integer
---@return unittype
function Native.ConvertUnitType(i) end

---@param i integer
---@return gamespeed
function Native.ConvertGameSpeed(i) end

---@param i integer
---@return placement
function Native.ConvertPlacement(i) end

---@param i integer
---@return startlocprio
function Native.ConvertStartLocPrio(i) end

---@param i integer
---@return gamedifficulty
function Native.ConvertGameDifficulty(i) end

---@param i integer
---@return gametype
function Native.ConvertGameType(i) end

---@param i integer
---@return mapflag
function Native.ConvertMapFlag(i) end

---@param i integer
---@return mapvisibility
function Native.ConvertMapVisibility(i) end

---@param i integer
---@return mapsetting
function Native.ConvertMapSetting(i) end

---@param i integer
---@return mapdensity
function Native.ConvertMapDensity(i) end

---@param i integer
---@return mapcontrol
function Native.ConvertMapControl(i) end

---@param i integer
---@return playercolor
function Native.ConvertPlayerColor(i) end

---@param i integer
---@return playerslotstate
function Native.ConvertPlayerSlotState(i) end

---@param i integer
---@return volumegroup
function Native.ConvertVolumeGroup(i) end

---@param i integer
---@return camerafield
function Native.ConvertCameraField(i) end

---@param i integer
---@return blendmode
function Native.ConvertBlendMode(i) end

---@param i integer
---@return raritycontrol
function Native.ConvertRarityControl(i) end

---@param i integer
---@return texmapflags
function Native.ConvertTexMapFlags(i) end

---@param i integer
---@return fogstate
function Native.ConvertFogState(i) end

---@param i integer
---@return effecttype
function Native.ConvertEffectType(i) end

---@param i integer
---@return version
function Native.ConvertVersion(i) end

---@param i integer
---@return itemtype
function Native.ConvertItemType(i) end

---@param i integer
---@return attacktype
function Native.ConvertAttackType(i) end

---@param i integer
---@return damagetype
function Native.ConvertDamageType(i) end

---@param i integer
---@return weapontype
function Native.ConvertWeaponType(i) end

---@param i integer
---@return soundtype
function Native.ConvertSoundType(i) end

---@param i integer
---@return pathingtype
function Native.ConvertPathingType(i) end

---@param i integer
---@return mousebuttontype
function Native.ConvertMouseButtonType(i) end

---@param i integer
---@return animtype
function Native.ConvertAnimType(i) end

---@param i integer
---@return subanimtype
function Native.ConvertSubAnimType(i) end

---@param i integer
---@return originframetype
function Native.ConvertOriginFrameType(i) end

---@param i integer
---@return framepointtype
function Native.ConvertFramePointType(i) end

---@param i integer
---@return textaligntype
function Native.ConvertTextAlignType(i) end

---@param i integer
---@return frameeventtype
function Native.ConvertFrameEventType(i) end

---@param i integer
---@return oskeytype
function Native.ConvertOsKeyType(i) end

---@param i integer
---@return abilityintegerfield
function Native.ConvertAbilityIntegerField(i) end

---@param i integer
---@return abilityrealfield
function Native.ConvertAbilityRealField(i) end

---@param i integer
---@return abilitybooleanfield
function Native.ConvertAbilityBooleanField(i) end

---@param i integer
---@return abilitystringfield
function Native.ConvertAbilityStringField(i) end

---@param i integer
---@return abilityintegerlevelfield
function Native.ConvertAbilityIntegerLevelField(i) end

---@param i integer
---@return abilityreallevelfield
function Native.ConvertAbilityRealLevelField(i) end

---@param i integer
---@return abilitybooleanlevelfield
function Native.ConvertAbilityBooleanLevelField(i) end

---@param i integer
---@return abilitystringlevelfield
function Native.ConvertAbilityStringLevelField(i) end

---@param i integer
---@return abilityintegerlevelarrayfield
function Native.ConvertAbilityIntegerLevelArrayField(i) end

---@param i integer
---@return abilityreallevelarrayfield
function Native.ConvertAbilityRealLevelArrayField(i) end

---@param i integer
---@return abilitybooleanlevelarrayfield
function Native.ConvertAbilityBooleanLevelArrayField(i) end

---@param i integer
---@return abilitystringlevelarrayfield
function Native.ConvertAbilityStringLevelArrayField(i) end

---@param i integer
---@return unitintegerfield
function Native.ConvertUnitIntegerField(i) end

---@param i integer
---@return unitrealfield
function Native.ConvertUnitRealField(i) end

---@param i integer
---@return unitbooleanfield
function Native.ConvertUnitBooleanField(i) end

---@param i integer
---@return unitstringfield
function Native.ConvertUnitStringField(i) end

---@param i integer
---@return unitweaponintegerfield
function Native.ConvertUnitWeaponIntegerField(i) end

---@param i integer
---@return unitweaponrealfield
function Native.ConvertUnitWeaponRealField(i) end

---@param i integer
---@return unitweaponbooleanfield
function Native.ConvertUnitWeaponBooleanField(i) end

---@param i integer
---@return unitweaponstringfield
function Native.ConvertUnitWeaponStringField(i) end

---@param i integer
---@return itemintegerfield
function Native.ConvertItemIntegerField(i) end

---@param i integer
---@return itemrealfield
function Native.ConvertItemRealField(i) end

---@param i integer
---@return itembooleanfield
function Native.ConvertItemBooleanField(i) end

---@param i integer
---@return itemstringfield
function Native.ConvertItemStringField(i) end

---@param i integer
---@return movetype
function Native.ConvertMoveType(i) end

---@param i integer
---@return targetflag
function Native.ConvertTargetFlag(i) end

---@param i integer
---@return armortype
function Native.ConvertArmorType(i) end

---@param i integer
---@return heroattribute
function Native.ConvertHeroAttribute(i) end

---@param i integer
---@return defensetype
function Native.ConvertDefenseType(i) end

---@param i integer
---@return regentype
function Native.ConvertRegenType(i) end

---@param i integer
---@return unitcategory
function Native.ConvertUnitCategory(i) end

---@param i integer
---@return pathingflag
function Native.ConvertPathingFlag(i) end

---@param orderIdString string
---@return integer
function Native.OrderId(orderIdString) end

---@param orderId integer
---@return string
function Native.OrderId2String(orderId) end

---@param unitIdString string
---@return integer
function Native.UnitId(unitIdString) end

---@param unitId integer
---@return string
function Native.UnitId2String(unitId) end

---@param abilityIdString string
---@return integer
function Native.AbilityId(abilityIdString) end

---@param abilityId integer
---@return string
function Native.AbilityId2String(abilityId) end

---@param objectId integer
---@return string
function Native.GetObjectName(objectId) end

---@return integer
function Native.GetBJMaxPlayers() end

---@return integer
function Native.GetBJPlayerNeutralVictim() end

---@return integer
function Native.GetBJPlayerNeutralExtra() end

---@return integer
function Native.GetBJMaxPlayerSlots() end

---@return integer
function Native.GetPlayerNeutralPassive() end

---@return integer
function Native.GetPlayerNeutralAggressive() end

---@param degrees float
---@return float
function Native.Deg2Rad(degrees) end

---@param radians float
---@return float
function Native.Rad2Deg(radians) end

---@param radians float
---@return float
function Native.Sin(radians) end

---@param radians float
---@return float
function Native.Cos(radians) end

---@param radians float
---@return float
function Native.Tan(radians) end

---@param y float
---@return float
function Native.Asin(y) end

---@param x float
---@return float
function Native.Acos(x) end

---@param x float
---@return float
function Native.Atan(x) end

---@param y float
---@param x float
---@return float
function Native.Atan2(y, x) end

---@param x float
---@return float
function Native.SquareRoot(x) end

---@param x float
---@param power float
---@return float
function Native.Pow(x, power) end

---@param r float
---@return integer
function Native.MathRound(r) end

---@param i integer
---@return float
function Native.I2R(i) end

---@param r float
---@return integer
function Native.R2I(r) end

---@param i integer
---@return string
function Native.I2S(i) end

---@param r float
---@return string
function Native.R2S(r) end

---@param r float
---@param width integer
---@param precision integer
---@return string
function Native.R2SW(r, width, precision) end

---@param s string
---@return integer
function Native.S2I(s) end

---@param s string
---@return float
function Native.S2R(s) end

---@param h handle
---@return integer
function Native.GetHandleId(h) end

---@param source string
---@param start integer
---@param end_ integer
---@return string
function Native.SubString(source, start, end_) end

---@param s string
---@return integer
function Native.StringLength(s) end

---@param source string
---@param upper boolean
---@return string
function Native.StringCase(source, upper) end

---@param s string
---@return integer
function Native.StringHash(s) end

---@param source string
---@return string
function Native.GetLocalizedString(source) end

---@param source string
---@return integer
function Native.GetLocalizedHotkey(source) end

---@param name string
---@return void
function Native.SetMapName(name) end

---@param description string
---@return void
function Native.SetMapDescription(description) end

---@param teamcount integer
---@return void
function Native.SetTeams(teamcount) end

---@param playercount integer
---@return void
function Native.SetPlayers(playercount) end

---@param startLoc integer
---@param x float
---@param y float
---@return void
function Native.DefineStartLocation(startLoc, x, y) end

---@param startLoc integer
---@param loc location
---@return void
function Native.DefineStartLocationLoc(startLoc, loc) end

---@param startLoc integer
---@param prioSlotCount integer
---@return void
function Native.SetStartLocPrioCount(startLoc, prioSlotCount) end

---@param startLoc integer
---@param prioSlotIndex integer
---@param otherStartLocIndex integer
---@param priority startlocprio
---@return void
function Native.SetStartLocPrio(startLoc, prioSlotIndex, otherStartLocIndex, priority) end

---@param startLoc integer
---@param prioSlotIndex integer
---@return integer
function Native.GetStartLocPrioSlot(startLoc, prioSlotIndex) end

---@param startLoc integer
---@param prioSlotIndex integer
---@return startlocprio
function Native.GetStartLocPrio(startLoc, prioSlotIndex) end

---@param startLoc integer
---@param prioSlotCount integer
---@return void
function Native.SetEnemyStartLocPrioCount(startLoc, prioSlotCount) end

---@param startLoc integer
---@param prioSlotIndex integer
---@param otherStartLocIndex integer
---@param priority startlocprio
---@return void
function Native.SetEnemyStartLocPrio(startLoc, prioSlotIndex, otherStartLocIndex, priority) end

---@param gameType gametype
---@param value boolean
---@return void
function Native.SetGameTypeSupported(gameType, value) end

---@param mapFlag mapflag
---@param value boolean
---@return void
function Native.SetMapFlag(mapFlag, value) end

---@param placementType placement
---@return void
function Native.SetGamePlacement(placementType) end

---@param speed gamespeed
---@return void
function Native.SetGameSpeed(speed) end

---@param difficulty gamedifficulty
---@return void
function Native.SetGameDifficulty(difficulty) end

---@param density mapdensity
---@return void
function Native.SetResourceDensity(density) end

---@param density mapdensity
---@return void
function Native.SetCreatureDensity(density) end

---@return integer
function Native.GetTeams() end

---@return integer
function Native.GetPlayers() end

---@param gameType gametype
---@return boolean
function Native.IsGameTypeSupported(gameType) end

---@return gametype
function Native.GetGameTypeSelected() end

---@param mapFlag mapflag
---@return boolean
function Native.IsMapFlagSet(mapFlag) end

---@return placement
function Native.GetGamePlacement() end

---@return gamespeed
function Native.GetGameSpeed() end

---@return gamedifficulty
function Native.GetGameDifficulty() end

---@return mapdensity
function Native.GetResourceDensity() end

---@return mapdensity
function Native.GetCreatureDensity() end

---@param startLocation integer
---@return float
function Native.GetStartLocationX(startLocation) end

---@param startLocation integer
---@return float
function Native.GetStartLocationY(startLocation) end

---@param startLocation integer
---@return location
function Native.GetStartLocationLoc(startLocation) end

---@param player player
---@param team integer
---@return void
function Native.SetPlayerTeam(player, team) end

---@param player player
---@param startLocIndex integer
---@return void
function Native.SetPlayerStartLocation(player, startLocIndex) end

---@param player player
---@param startLocIndex integer
---@return void
function Native.ForcePlayerStartLocation(player, startLocIndex) end

---@param player player
---@param color playercolor
---@return void
function Native.SetPlayerColor(player, color) end

---@param sourcePlayer player
---@param otherPlayer player
---@param allianceSetting alliancetype
---@param value boolean
---@return void
function Native.SetPlayerAlliance(sourcePlayer, otherPlayer, allianceSetting, value) end

---@param sourcePlayer player
---@param otherPlayer player
---@param resource playerstate
---@param rate integer
---@return void
function Native.SetPlayerTaxRate(sourcePlayer, otherPlayer, resource, rate) end

---@param player player
---@param racePreference racepreference
---@return void
function Native.SetPlayerRacePreference(player, racePreference) end

---@param player player
---@param value boolean
---@return void
function Native.SetPlayerRaceSelectable(player, value) end

---@param player player
---@param controlType mapcontrol
---@return void
function Native.SetPlayerController(player, controlType) end

---@param player player
---@param name string
---@return void
function Native.SetPlayerName(player, name) end

---@param player player
---@param flag boolean
---@return void
function Native.SetPlayerOnScoreScreen(player, flag) end

---@param player player
---@return integer
function Native.GetPlayerTeam(player) end

---@param player player
---@return integer
function Native.GetPlayerStartLocation(player) end

---@param player player
---@return playercolor
function Native.GetPlayerColor(player) end

---@param player player
---@return boolean
function Native.GetPlayerSelectable(player) end

---@param player player
---@return mapcontrol
function Native.GetPlayerController(player) end

---@param player player
---@return playerslotstate
function Native.GetPlayerSlotState(player) end

---@param sourcePlayer player
---@param otherPlayer player
---@param resource playerstate
---@return integer
function Native.GetPlayerTaxRate(sourcePlayer, otherPlayer, resource) end

---@param player player
---@param pref racepreference
---@return boolean
function Native.IsPlayerRacePrefSet(player, pref) end

---@param player player
---@return string
function Native.GetPlayerName(player) end

---@return timer
function Native.CreateTimer() end

---@param timer timer
---@return void
function Native.DestroyTimer(timer) end

---@param timer timer
---@param timeout float
---@param periodic boolean
---@param handlerFunc function
---@return void
function Native.TimerStart(timer, timeout, periodic, handlerFunc) end

---@param timer timer
---@return float
function Native.TimerGetElapsed(timer) end

---@param timer timer
---@return float
function Native.TimerGetRemaining(timer) end

---@param timer timer
---@return float
function Native.TimerGetTimeout(timer) end

---@param timer timer
---@return void
function Native.PauseTimer(timer) end

---@param timer timer
---@return void
function Native.ResumeTimer(timer) end

---@return timer
function Native.GetExpiredTimer() end

---@return group
function Native.CreateGroup() end

---@param group group
---@return void
function Native.DestroyGroup(group) end

---@param group group
---@param unit unit
---@return boolean
function Native.GroupAddUnit(group, unit) end

---@param group group
---@param unit unit
---@return boolean
function Native.GroupRemoveUnit(group, unit) end

---@param group group
---@param addGroup group
---@return integer
function Native.BlzGroupAddGroupFast(group, addGroup) end

---@param group group
---@param removeGroup group
---@return integer
function Native.BlzGroupRemoveGroupFast(group, removeGroup) end

---@param group group
---@return void
function Native.GroupClear(group) end

---@param group group
---@return integer
function Native.BlzGroupGetSize(group) end

---@param group group
---@param index integer
---@return unit
function Native.BlzGroupUnitAt(group, index) end

---@param group group
---@param unitname string
---@param filter boolexpr
---@return void
function Native.GroupEnumUnitsOfType(group, unitname, filter) end

---@param group group
---@param player player
---@param filter boolexpr
---@return void
function Native.GroupEnumUnitsOfPlayer(group, player, filter) end

---@param group group
---@param unitname string
---@param filter boolexpr
---@param countLimit integer
---@return void
function Native.GroupEnumUnitsOfTypeCounted(group, unitname, filter, countLimit) end

---@param group group
---@param r rect
---@param filter boolexpr
---@return void
function Native.GroupEnumUnitsInRect(group, r, filter) end

---@param group group
---@param r rect
---@param filter boolexpr
---@param countLimit integer
---@return void
function Native.GroupEnumUnitsInRectCounted(group, r, filter, countLimit) end

---@param group group
---@param x float
---@param y float
---@param radius float
---@param filter boolexpr
---@return void
function Native.GroupEnumUnitsInRange(group, x, y, radius, filter) end

---@param group group
---@param loc location
---@param radius float
---@param filter boolexpr
---@return void
function Native.GroupEnumUnitsInRangeOfLoc(group, loc, radius, filter) end

---@param group group
---@param x float
---@param y float
---@param radius float
---@param filter boolexpr
---@param countLimit integer
---@return void
function Native.GroupEnumUnitsInRangeCounted(group, x, y, radius, filter, countLimit) end

---@param group group
---@param loc location
---@param radius float
---@param filter boolexpr
---@param countLimit integer
---@return void
function Native.GroupEnumUnitsInRangeOfLocCounted(group, loc, radius, filter, countLimit) end

---@param group group
---@param player player
---@param filter boolexpr
---@return void
function Native.GroupEnumUnitsSelected(group, player, filter) end

---@param group group
---@param order string
---@return boolean
function Native.GroupImmediateOrder(group, order) end

---@param group group
---@param order integer
---@return boolean
function Native.GroupImmediateOrderById(group, order) end

---@param group group
---@param order string
---@param x float
---@param y float
---@return boolean
function Native.GroupPointOrder(group, order, x, y) end

---@param group group
---@param order string
---@param loc location
---@return boolean
function Native.GroupPointOrderLoc(group, order, loc) end

---@param group group
---@param order integer
---@param x float
---@param y float
---@return boolean
function Native.GroupPointOrderById(group, order, x, y) end

---@param group group
---@param order integer
---@param loc location
---@return boolean
function Native.GroupPointOrderByIdLoc(group, order, loc) end

---@param group group
---@param order string
---@param targetWidget widget
---@return boolean
function Native.GroupTargetOrder(group, order, targetWidget) end

---@param group group
---@param order integer
---@param targetWidget widget
---@return boolean
function Native.GroupTargetOrderById(group, order, targetWidget) end

---@param group group
---@param callback function
---@return void
function Native.ForGroup(group, callback) end

---@param group group
---@return unit
function Native.FirstOfGroup(group) end

---@return force
function Native.CreateForce() end

---@param force force
---@return void
function Native.DestroyForce(force) end

---@param force force
---@param player player
---@return void
function Native.ForceAddPlayer(force, player) end

---@param force force
---@param player player
---@return void
function Native.ForceRemovePlayer(force, player) end

---@param force force
---@param player player
---@return boolean
function Native.BlzForceHasPlayer(force, player) end

---@param force force
---@return void
function Native.ForceClear(force) end

---@param force force
---@param filter boolexpr
---@return void
function Native.ForceEnumPlayers(force, filter) end

---@param force force
---@param filter boolexpr
---@param countLimit integer
---@return void
function Native.ForceEnumPlayersCounted(force, filter, countLimit) end

---@param force force
---@param player player
---@param filter boolexpr
---@return void
function Native.ForceEnumAllies(force, player, filter) end

---@param force force
---@param player player
---@param filter boolexpr
---@return void
function Native.ForceEnumEnemies(force, player, filter) end

---@param force force
---@param callback function
---@return void
function Native.ForForce(force, callback) end

---@param minx float
---@param miny float
---@param maxx float
---@param maxy float
---@return rect
function Native.Rect(minx, miny, maxx, maxy) end

---@param min location
---@param max location
---@return rect
function Native.RectFromLoc(min, max) end

---@param rect rect
---@return void
function Native.RemoveRect(rect) end

---@param rect rect
---@param minx float
---@param miny float
---@param maxx float
---@param maxy float
---@return void
function Native.SetRect(rect, minx, miny, maxx, maxy) end

---@param rect rect
---@param min location
---@param max location
---@return void
function Native.SetRectFromLoc(rect, min, max) end

---@param rect rect
---@param centerX float
---@param centerY float
---@return void
function Native.MoveRectTo(rect, centerX, centerY) end

---@param rect rect
---@param centerLoc location
---@return void
function Native.MoveRectToLoc(rect, centerLoc) end

---@param rect rect
---@return float
function Native.GetRectCenterX(rect) end

---@param rect rect
---@return float
function Native.GetRectCenterY(rect) end

---@param rect rect
---@return float
function Native.GetRectMinX(rect) end

---@param rect rect
---@return float
function Native.GetRectMinY(rect) end

---@param rect rect
---@return float
function Native.GetRectMaxX(rect) end

---@param rect rect
---@return float
function Native.GetRectMaxY(rect) end

---@return region
function Native.CreateRegion() end

---@param region region
---@return void
function Native.RemoveRegion(region) end

---@param region region
---@param r rect
---@return void
function Native.RegionAddRect(region, r) end

---@param region region
---@param r rect
---@return void
function Native.RegionClearRect(region, r) end

---@param region region
---@param x float
---@param y float
---@return void
function Native.RegionAddCell(region, x, y) end

---@param region region
---@param loc location
---@return void
function Native.RegionAddCellAtLoc(region, loc) end

---@param region region
---@param x float
---@param y float
---@return void
function Native.RegionClearCell(region, x, y) end

---@param region region
---@param loc location
---@return void
function Native.RegionClearCellAtLoc(region, loc) end

---@param x float
---@param y float
---@return location
function Native.Location(x, y) end

---@param loc location
---@return void
function Native.RemoveLocation(loc) end

---@param loc location
---@param x float
---@param y float
---@return void
function Native.MoveLocation(loc, x, y) end

---@param loc location
---@return float
function Native.GetLocationX(loc) end

---@param loc location
---@return float
function Native.GetLocationY(loc) end

---@param loc location
---@return float
function Native.GetLocationZ(loc) end

---@param region region
---@param unit unit
---@return boolean
function Native.IsUnitInRegion(region, unit) end

---@param region region
---@param x float
---@param y float
---@return boolean
function Native.IsPointInRegion(region, x, y) end

---@param region region
---@param loc location
---@return boolean
function Native.IsLocationInRegion(region, loc) end

---@return rect
function Native.GetWorldBounds() end

---@return trigger
function Native.CreateTrigger() end

---@param trigger trigger
---@return void
function Native.DestroyTrigger(trigger) end

---@param trigger trigger
---@return void
function Native.ResetTrigger(trigger) end

---@param trigger trigger
---@return void
function Native.EnableTrigger(trigger) end

---@param trigger trigger
---@return void
function Native.DisableTrigger(trigger) end

---@param trigger trigger
---@return boolean
function Native.IsTriggerEnabled(trigger) end

---@param trigger trigger
---@param flag boolean
---@return void
function Native.TriggerWaitOnSleeps(trigger, flag) end

---@param trigger trigger
---@return boolean
function Native.IsTriggerWaitOnSleeps(trigger) end

---@return unit
function Native.GetFilterUnit() end

---@return unit
function Native.GetEnumUnit() end

---@return destructable
function Native.GetFilterDestructable() end

---@return destructable
function Native.GetEnumDestructable() end

---@return item
function Native.GetFilterItem() end

---@return item
function Native.GetEnumItem() end

---@param taggedString string
---@return string
function Native.ParseTags(taggedString) end

---@return player
function Native.GetFilterPlayer() end

---@return player
function Native.GetEnumPlayer() end

---@return trigger
function Native.GetTriggeringTrigger() end

---@return eventid
function Native.GetTriggerEventId() end

---@param trigger trigger
---@return integer
function Native.GetTriggerEvalCount(trigger) end

---@param trigger trigger
---@return integer
function Native.GetTriggerExecCount(trigger) end

---@param funcName string
---@return void
function Native.ExecuteFunc(funcName) end

---@param operandA boolexpr
---@param operandB boolexpr
---@return boolexpr
function Native.And(operandA, operandB) end

---@param operandA boolexpr
---@param operandB boolexpr
---@return boolexpr
function Native.Or(operandA, operandB) end

---@param operand boolexpr
---@return boolexpr
function Native.Not(operand) end

---@param func function
---@return conditionfunc
function Native.Condition(func) end

---@param c conditionfunc
---@return void
function Native.DestroyCondition(c) end

---@param func function
---@return filterfunc
function Native.Filter(func) end

---@param f filterfunc
---@return void
function Native.DestroyFilter(f) end

---@param e boolexpr
---@return void
function Native.DestroyBoolExpr(e) end

---@param trigger trigger
---@param varName string
---@param opcode limitop
---@param limitval float
---@return event
function Native.TriggerRegisterVariableEvent(trigger, varName, opcode, limitval) end

---@param trigger trigger
---@param timeout float
---@param periodic boolean
---@return event
function Native.TriggerRegisterTimerEvent(trigger, timeout, periodic) end

---@param trigger trigger
---@param t timer
---@return event
function Native.TriggerRegisterTimerExpireEvent(trigger, t) end

---@param trigger trigger
---@param state gamestate
---@param opcode limitop
---@param limitval float
---@return event
function Native.TriggerRegisterGameStateEvent(trigger, state, opcode, limitval) end

---@param trigger trigger
---@param dialog dialog
---@return event
function Native.TriggerRegisterDialogEvent(trigger, dialog) end

---@param trigger trigger
---@param button button
---@return event
function Native.TriggerRegisterDialogButtonEvent(trigger, button) end

---@return gamestate
function Native.GetEventGameState() end

---@param trigger trigger
---@param gameEvent gameevent
---@return event
function Native.TriggerRegisterGameEvent(trigger, gameEvent) end

---@return player
function Native.GetWinningPlayer() end

---@param trigger trigger
---@param region region
---@param filter boolexpr
---@return event
function Native.TriggerRegisterEnterRegion(trigger, region, filter) end

---@return region
function Native.GetTriggeringRegion() end

---@return unit
function Native.GetEnteringUnit() end

---@param trigger trigger
---@param region region
---@param filter boolexpr
---@return event
function Native.TriggerRegisterLeaveRegion(trigger, region, filter) end

---@return unit
function Native.GetLeavingUnit() end

---@param trigger trigger
---@param t trackable
---@return event
function Native.TriggerRegisterTrackableHitEvent(trigger, t) end

---@param trigger trigger
---@param t trackable
---@return event
function Native.TriggerRegisterTrackableTrackEvent(trigger, t) end

---@param trigger trigger
---@param ability integer
---@param order string
---@return event
function Native.TriggerRegisterCommandEvent(trigger, ability, order) end

---@param trigger trigger
---@param upgrade integer
---@return event
function Native.TriggerRegisterUpgradeCommandEvent(trigger, upgrade) end

---@return trackable
function Native.GetTriggeringTrackable() end

---@return button
function Native.GetClickedButton() end

---@return dialog
function Native.GetClickedDialog() end

---@return float
function Native.GetTournamentFinishSoonTimeRemaining() end

---@return integer
function Native.GetTournamentFinishNowRule() end

---@return player
function Native.GetTournamentFinishNowPlayer() end

---@param player player
---@return integer
function Native.GetTournamentScore(player) end

---@return string
function Native.GetSaveBasicFilename() end

---@param trigger trigger
---@param player player
---@param playerEvent playerevent
---@return event
function Native.TriggerRegisterPlayerEvent(trigger, player, playerEvent) end

---@return player
function Native.GetTriggerPlayer() end

---@param trigger trigger
---@param player player
---@param playerUnitEvent playerunitevent
---@param filter boolexpr
---@return event
function Native.TriggerRegisterPlayerUnitEvent(trigger, player, playerUnitEvent, filter) end

---@return unit
function Native.GetLevelingUnit() end

---@return unit
function Native.GetLearningUnit() end

---@return integer
function Native.GetLearnedSkill() end

---@return integer
function Native.GetLearnedSkillLevel() end

---@return unit
function Native.GetRevivableUnit() end

---@return unit
function Native.GetRevivingUnit() end

---@return unit
function Native.GetAttacker() end

---@return unit
function Native.GetRescuer() end

---@return unit
function Native.GetDyingUnit() end

---@return unit
function Native.GetKillingUnit() end

---@return unit
function Native.GetDecayingUnit() end

---@return unit
function Native.GetConstructingStructure() end

---@return unit
function Native.GetCancelledStructure() end

---@return unit
function Native.GetConstructedStructure() end

---@return unit
function Native.GetResearchingUnit() end

---@return integer
function Native.GetResearched() end

---@return integer
function Native.GetTrainedUnitType() end

---@return unit
function Native.GetTrainedUnit() end

---@return unit
function Native.GetDetectedUnit() end

---@return unit
function Native.GetSummoningUnit() end

---@return unit
function Native.GetSummonedUnit() end

---@return unit
function Native.GetTransportUnit() end

---@return unit
function Native.GetLoadedUnit() end

---@return unit
function Native.GetSellingUnit() end

---@return unit
function Native.GetSoldUnit() end

---@return unit
function Native.GetBuyingUnit() end

---@return item
function Native.GetSoldItem() end

---@return unit
function Native.GetChangingUnit() end

---@return player
function Native.GetChangingUnitPrevOwner() end

---@return unit
function Native.GetManipulatingUnit() end

---@return item
function Native.GetManipulatedItem() end

---@return unit
function Native.GetOrderedUnit() end

---@return integer
function Native.GetIssuedOrderId() end

---@return float
function Native.GetOrderPointX() end

---@return float
function Native.GetOrderPointY() end

---@return location
function Native.GetOrderPointLoc() end

---@return widget
function Native.GetOrderTarget() end

---@return destructable
function Native.GetOrderTargetDestructable() end

---@return item
function Native.GetOrderTargetItem() end

---@return unit
function Native.GetOrderTargetUnit() end

---@return unit
function Native.GetSpellAbilityUnit() end

---@return integer
function Native.GetSpellAbilityId() end

---@return ability
function Native.GetSpellAbility() end

---@return location
function Native.GetSpellTargetLoc() end

---@return float
function Native.GetSpellTargetX() end

---@return float
function Native.GetSpellTargetY() end

---@return destructable
function Native.GetSpellTargetDestructable() end

---@return item
function Native.GetSpellTargetItem() end

---@return unit
function Native.GetSpellTargetUnit() end

---@param trigger trigger
---@param player player
---@param alliance alliancetype
---@return event
function Native.TriggerRegisterPlayerAllianceChange(trigger, player, alliance) end

---@param trigger trigger
---@param player player
---@param state playerstate
---@param opcode limitop
---@param limitval float
---@return event
function Native.TriggerRegisterPlayerStateEvent(trigger, player, state, opcode, limitval) end

---@return playerstate
function Native.GetEventPlayerState() end

---@param trigger trigger
---@param player player
---@param chatMessageToDetect string
---@param exactMatchOnly boolean
---@return event
function Native.TriggerRegisterPlayerChatEvent(trigger, player, chatMessageToDetect, exactMatchOnly) end

---@return string
function Native.GetEventPlayerChatString() end

---@return string
function Native.GetEventPlayerChatStringMatched() end

---@param trigger trigger
---@param widget widget
---@return event
function Native.TriggerRegisterDeathEvent(trigger, widget) end

---@return unit
function Native.GetTriggerUnit() end

---@param trigger trigger
---@param unit unit
---@param state unitstate
---@param opcode limitop
---@param limitval float
---@return event
function Native.TriggerRegisterUnitStateEvent(trigger, unit, state, opcode, limitval) end

---@return unitstate
function Native.GetEventUnitState() end

---@param trigger trigger
---@param unit unit
---@param event unitevent
---@return event
function Native.TriggerRegisterUnitEvent(trigger, unit, event) end

---@return float
function Native.GetEventDamage() end

---@return unit
function Native.GetEventDamageSource() end

---@return player
function Native.GetEventDetectingPlayer() end

---@param trigger trigger
---@param unit unit
---@param event unitevent
---@param filter boolexpr
---@return event
function Native.TriggerRegisterFilterUnitEvent(trigger, unit, event, filter) end

---@return unit
function Native.GetEventTargetUnit() end

---@param trigger trigger
---@param unit unit
---@param range float
---@param filter boolexpr
---@return event
function Native.TriggerRegisterUnitInRange(trigger, unit, range, filter) end

---@param trigger trigger
---@param condition boolexpr
---@return triggercondition
function Native.TriggerAddCondition(trigger, condition) end

---@param trigger trigger
---@param condition triggercondition
---@return void
function Native.TriggerRemoveCondition(trigger, condition) end

---@param trigger trigger
---@return void
function Native.TriggerClearConditions(trigger) end

---@param trigger trigger
---@param actionFunc function
---@return triggeraction
function Native.TriggerAddAction(trigger, actionFunc) end

---@param trigger trigger
---@param action triggeraction
---@return void
function Native.TriggerRemoveAction(trigger, action) end

---@param trigger trigger
---@return void
function Native.TriggerClearActions(trigger) end

---@param timeout float
---@return void
function Native.TriggerSleepAction(timeout) end

---@param s sound
---@param offset float
---@return void
function Native.TriggerWaitForSound(s, offset) end

---@param trigger trigger
---@return boolean
function Native.TriggerEvaluate(trigger) end

---@param trigger trigger
---@return void
function Native.TriggerExecute(trigger) end

---@param trigger trigger
---@return void
function Native.TriggerExecuteWait(trigger) end

---@return void
function Native.TriggerSyncStart() end

---@return void
function Native.TriggerSyncReady() end

---@param widget widget
---@return float
function Native.GetWidgetLife(widget) end

---@param widget widget
---@param life float
---@return void
function Native.SetWidgetLife(widget, life) end

---@param widget widget
---@return float
function Native.GetWidgetX(widget) end

---@param widget widget
---@return float
function Native.GetWidgetY(widget) end

---@return widget
function Native.GetTriggerWidget() end

---@param objectid integer
---@param x float
---@param y float
---@param face float
---@param scale float
---@param variation integer
---@return destructable
function Native.CreateDestructable(objectid, x, y, face, scale, variation) end

---@param objectid integer
---@param x float
---@param y float
---@param z float
---@param face float
---@param scale float
---@param variation integer
---@return destructable
function Native.CreateDestructableZ(objectid, x, y, z, face, scale, variation) end

---@param objectid integer
---@param x float
---@param y float
---@param face float
---@param scale float
---@param variation integer
---@return destructable
function Native.CreateDeadDestructable(objectid, x, y, face, scale, variation) end

---@param objectid integer
---@param x float
---@param y float
---@param z float
---@param face float
---@param scale float
---@param variation integer
---@return destructable
function Native.CreateDeadDestructableZ(objectid, x, y, z, face, scale, variation) end

---@param d destructable
---@return void
function Native.RemoveDestructable(d) end

---@param d destructable
---@return void
function Native.KillDestructable(d) end

---@param d destructable
---@param flag boolean
---@return void
function Native.SetDestructableInvulnerable(d, flag) end

---@param d destructable
---@return boolean
function Native.IsDestructableInvulnerable(d) end

---@param r rect
---@param filter boolexpr
---@param actionFunc function
---@return void
function Native.EnumDestructablesInRect(r, filter, actionFunc) end

---@param d destructable
---@return integer
function Native.GetDestructableTypeId(d) end

---@param d destructable
---@return float
function Native.GetDestructableX(d) end

---@param d destructable
---@return float
function Native.GetDestructableY(d) end

---@param d destructable
---@param life float
---@return void
function Native.SetDestructableLife(d, life) end

---@param d destructable
---@return float
function Native.GetDestructableLife(d) end

---@param d destructable
---@param max float
---@return void
function Native.SetDestructableMaxLife(d, max) end

---@param d destructable
---@return float
function Native.GetDestructableMaxLife(d) end

---@param d destructable
---@param life float
---@param birth boolean
---@return void
function Native.DestructableRestoreLife(d, life, birth) end

---@param d destructable
---@param animation string
---@return void
function Native.QueueDestructableAnimation(d, animation) end

---@param d destructable
---@param animation string
---@return void
function Native.SetDestructableAnimation(d, animation) end

---@param d destructable
---@param speedFactor float
---@return void
function Native.SetDestructableAnimationSpeed(d, speedFactor) end

---@param d destructable
---@param flag boolean
---@return void
function Native.ShowDestructable(d, flag) end

---@param d destructable
---@return float
function Native.GetDestructableOccluderHeight(d) end

---@param d destructable
---@param height float
---@return void
function Native.SetDestructableOccluderHeight(d, height) end

---@param d destructable
---@return string
function Native.GetDestructableName(d) end

---@return destructable
function Native.GetTriggerDestructable() end

---@param itemid integer
---@param x float
---@param y float
---@return item
function Native.CreateItem(itemid, x, y) end

---@param item item
---@return void
function Native.RemoveItem(item) end

---@param item item
---@return player
function Native.GetItemPlayer(item) end

---@param i item
---@return integer
function Native.GetItemTypeId(i) end

---@param i item
---@return float
function Native.GetItemX(i) end

---@param i item
---@return float
function Native.GetItemY(i) end

---@param i item
---@param x float
---@param y float
---@return void
function Native.SetItemPosition(i, x, y) end

---@param item item
---@param flag boolean
---@return void
function Native.SetItemDropOnDeath(item, flag) end

---@param i item
---@param flag boolean
---@return void
function Native.SetItemDroppable(i, flag) end

---@param i item
---@param flag boolean
---@return void
function Native.SetItemPawnable(i, flag) end

---@param item item
---@param player player
---@param changeColor boolean
---@return void
function Native.SetItemPlayer(item, player, changeColor) end

---@param item item
---@param flag boolean
---@return void
function Native.SetItemInvulnerable(item, flag) end

---@param item item
---@return boolean
function Native.IsItemInvulnerable(item) end

---@param item item
---@param show boolean
---@return void
function Native.SetItemVisible(item, show) end

---@param item item
---@return boolean
function Native.IsItemVisible(item) end

---@param item item
---@return boolean
function Native.IsItemOwned(item) end

---@param item item
---@return boolean
function Native.IsItemPowerup(item) end

---@param item item
---@return boolean
function Native.IsItemSellable(item) end

---@param item item
---@return boolean
function Native.IsItemPawnable(item) end

---@param itemId integer
---@return boolean
function Native.IsItemIdPowerup(itemId) end

---@param itemId integer
---@return boolean
function Native.IsItemIdSellable(itemId) end

---@param itemId integer
---@return boolean
function Native.IsItemIdPawnable(itemId) end

---@param r rect
---@param filter boolexpr
---@param actionFunc function
---@return void
function Native.EnumItemsInRect(r, filter, actionFunc) end

---@param item item
---@return integer
function Native.GetItemLevel(item) end

---@param item item
---@return itemtype
function Native.GetItemType(item) end

---@param item item
---@param unitId integer
---@return void
function Native.SetItemDropID(item, unitId) end

---@param item item
---@return string
function Native.GetItemName(item) end

---@param item item
---@return integer
function Native.GetItemCharges(item) end

---@param item item
---@param charges integer
---@return void
function Native.SetItemCharges(item, charges) end

---@param item item
---@return integer
function Native.GetItemUserData(item) end

---@param item item
---@param data integer
---@return void
function Native.SetItemUserData(item, data) end

---@param id player
---@param unitid integer
---@param x float
---@param y float
---@param face float
---@return unit
function Native.CreateUnit(id, unitid, x, y, face) end

---@param player player
---@param unitname string
---@param x float
---@param y float
---@param face float
---@return unit
function Native.CreateUnitByName(player, unitname, x, y, face) end

---@param id player
---@param unitid integer
---@param loc location
---@param face float
---@return unit
function Native.CreateUnitAtLoc(id, unitid, loc, face) end

---@param id player
---@param unitname string
---@param loc location
---@param face float
---@return unit
function Native.CreateUnitAtLocByName(id, unitname, loc, face) end

---@param player player
---@param unitid integer
---@param x float
---@param y float
---@param face float
---@return unit
function Native.CreateCorpse(player, unitid, x, y, face) end

---@param unit unit
---@return void
function Native.KillUnit(unit) end

---@param unit unit
---@return void
function Native.RemoveUnit(unit) end

---@param unit unit
---@param show boolean
---@return void
function Native.ShowUnit(unit, show) end

---@param unit unit
---@param unitState unitstate
---@param val float
---@return void
function Native.SetUnitState(unit, unitState, val) end

---@param unit unit
---@param x float
---@return void
function Native.SetUnitX(unit, x) end

---@param unit unit
---@param y float
---@return void
function Native.SetUnitY(unit, y) end

---@param unit unit
---@param x float
---@param y float
---@return void
function Native.SetUnitPosition(unit, x, y) end

---@param unit unit
---@param loc location
---@return void
function Native.SetUnitPositionLoc(unit, loc) end

---@param unit unit
---@param facingAngle float
---@return void
function Native.SetUnitFacing(unit, facingAngle) end

---@param unit unit
---@param facingAngle float
---@param duration float
---@return void
function Native.SetUnitFacingTimed(unit, facingAngle, duration) end

---@param unit unit
---@param speed float
---@return void
function Native.SetUnitMoveSpeed(unit, speed) end

---@param unit unit
---@param height float
---@param rate float
---@return void
function Native.SetUnitFlyHeight(unit, height, rate) end

---@param unit unit
---@param turnSpeed float
---@return void
function Native.SetUnitTurnSpeed(unit, turnSpeed) end

---@param unit unit
---@param propWindowAngle float
---@return void
function Native.SetUnitPropWindow(unit, propWindowAngle) end

---@param unit unit
---@param acquireRange float
---@return void
function Native.SetUnitAcquireRange(unit, acquireRange) end

---@param unit unit
---@param creepGuard boolean
---@return void
function Native.SetUnitCreepGuard(unit, creepGuard) end

---@param unit unit
---@return float
function Native.GetUnitAcquireRange(unit) end

---@param unit unit
---@return float
function Native.GetUnitTurnSpeed(unit) end

---@param unit unit
---@return float
function Native.GetUnitPropWindow(unit) end

---@param unit unit
---@return float
function Native.GetUnitFlyHeight(unit) end

---@param unit unit
---@return float
function Native.GetUnitDefaultAcquireRange(unit) end

---@param unit unit
---@return float
function Native.GetUnitDefaultTurnSpeed(unit) end

---@param unit unit
---@return float
function Native.GetUnitDefaultPropWindow(unit) end

---@param unit unit
---@return float
function Native.GetUnitDefaultFlyHeight(unit) end

---@param unit unit
---@param player player
---@param changeColor boolean
---@return void
function Native.SetUnitOwner(unit, player, changeColor) end

---@param unit unit
---@param color playercolor
---@return void
function Native.SetUnitColor(unit, color) end

---@param unit unit
---@param scaleX float
---@param scaleY float
---@param scaleZ float
---@return void
function Native.SetUnitScale(unit, scaleX, scaleY, scaleZ) end

---@param unit unit
---@param timeScale float
---@return void
function Native.SetUnitTimeScale(unit, timeScale) end

---@param unit unit
---@param blendTime float
---@return void
function Native.SetUnitBlendTime(unit, blendTime) end

---@param unit unit
---@param red integer
---@param green integer
---@param blue integer
---@param alpha integer
---@return void
function Native.SetUnitVertexColor(unit, red, green, blue, alpha) end

---@param unit unit
---@param animation string
---@return void
function Native.QueueUnitAnimation(unit, animation) end

---@param unit unit
---@param animation string
---@return void
function Native.SetUnitAnimation(unit, animation) end

---@param unit unit
---@param animation integer
---@return void
function Native.SetUnitAnimationByIndex(unit, animation) end

---@param unit unit
---@param animation string
---@param rarity raritycontrol
---@return void
function Native.SetUnitAnimationWithRarity(unit, animation, rarity) end

---@param unit unit
---@param animProperties string
---@param add boolean
---@return void
function Native.AddUnitAnimationProperties(unit, animProperties, add) end

---@param unit unit
---@param bone string
---@param lookAtTarget unit
---@param offsetX float
---@param offsetY float
---@param offsetZ float
---@return void
function Native.SetUnitLookAt(unit, bone, lookAtTarget, offsetX, offsetY, offsetZ) end

---@param unit unit
---@return void
function Native.ResetUnitLookAt(unit) end

---@param unit unit
---@param byWhichPlayer player
---@param flag boolean
---@return void
function Native.SetUnitRescuable(unit, byWhichPlayer, flag) end

---@param unit unit
---@param range float
---@return void
function Native.SetUnitRescueRange(unit, range) end

---@param hero unit
---@param str integer
---@param permanent boolean
---@return void
function Native.SetHeroStr(hero, str, permanent) end

---@param hero unit
---@param agi integer
---@param permanent boolean
---@return void
function Native.SetHeroAgi(hero, agi, permanent) end

---@param hero unit
---@param int integer
---@param permanent boolean
---@return void
function Native.SetHeroInt(hero, int, permanent) end

---@param hero unit
---@param includeBonuses boolean
---@return integer
function Native.GetHeroStr(hero, includeBonuses) end

---@param hero unit
---@param includeBonuses boolean
---@return integer
function Native.GetHeroAgi(hero, includeBonuses) end

---@param hero unit
---@param includeBonuses boolean
---@return integer
function Native.GetHeroInt(hero, includeBonuses) end

---@param hero unit
---@param howManyLevels integer
---@return boolean
function Native.UnitStripHeroLevel(hero, howManyLevels) end

---@param hero unit
---@return integer
function Native.GetHeroXP(hero) end

---@param hero unit
---@param xpVal integer
---@param showEyeCandy boolean
---@return void
function Native.SetHeroXP(hero, xpVal, showEyeCandy) end

---@param hero unit
---@return integer
function Native.GetHeroSkillPoints(hero) end

---@param hero unit
---@param skillPointDelta integer
---@return boolean
function Native.UnitModifySkillPoints(hero, skillPointDelta) end

---@param hero unit
---@param xpToAdd integer
---@param showEyeCandy boolean
---@return void
function Native.AddHeroXP(hero, xpToAdd, showEyeCandy) end

---@param hero unit
---@param level integer
---@param showEyeCandy boolean
---@return void
function Native.SetHeroLevel(hero, level, showEyeCandy) end

---@param hero unit
---@return integer
function Native.GetHeroLevel(hero) end

---@param unit unit
---@return integer
function Native.GetUnitLevel(unit) end

---@param hero unit
---@return string
function Native.GetHeroProperName(hero) end

---@param hero unit
---@param flag boolean
---@return void
function Native.SuspendHeroXP(hero, flag) end

---@param hero unit
---@return boolean
function Native.IsSuspendedXP(hero) end

---@param hero unit
---@param abilcode integer
---@return void
function Native.SelectHeroSkill(hero, abilcode) end

---@param unit unit
---@param abilcode integer
---@return integer
function Native.GetUnitAbilityLevel(unit, abilcode) end

---@param unit unit
---@param abilcode integer
---@return integer
function Native.DecUnitAbilityLevel(unit, abilcode) end

---@param unit unit
---@param abilcode integer
---@return integer
function Native.IncUnitAbilityLevel(unit, abilcode) end

---@param unit unit
---@param abilcode integer
---@param level integer
---@return integer
function Native.SetUnitAbilityLevel(unit, abilcode, level) end

---@param hero unit
---@param x float
---@param y float
---@param doEyecandy boolean
---@return boolean
function Native.ReviveHero(hero, x, y, doEyecandy) end

---@param hero unit
---@param loc location
---@param doEyecandy boolean
---@return boolean
function Native.ReviveHeroLoc(hero, loc, doEyecandy) end

---@param unit unit
---@param exploded boolean
---@return void
function Native.SetUnitExploded(unit, exploded) end

---@param unit unit
---@param flag boolean
---@return void
function Native.SetUnitInvulnerable(unit, flag) end

---@param unit unit
---@param flag boolean
---@return void
function Native.PauseUnit(unit, flag) end

---@param hero unit
---@return boolean
function Native.IsUnitPaused(hero) end

---@param unit unit
---@param flag boolean
---@return void
function Native.SetUnitPathing(unit, flag) end

---@return void
function Native.ClearSelection() end

---@param unit unit
---@param flag boolean
---@return void
function Native.SelectUnit(unit, flag) end

---@param unit unit
---@return integer
function Native.GetUnitPointValue(unit) end

---@param unitType integer
---@return integer
function Native.GetUnitPointValueByType(unitType) end

---@param unit unit
---@param item item
---@return boolean
function Native.UnitAddItem(unit, item) end

---@param unit unit
---@param itemId integer
---@return item
function Native.UnitAddItemById(unit, itemId) end

---@param unit unit
---@param itemId integer
---@param itemSlot integer
---@return boolean
function Native.UnitAddItemToSlotById(unit, itemId, itemSlot) end

---@param unit unit
---@param item item
---@return void
function Native.UnitRemoveItem(unit, item) end

---@param unit unit
---@param itemSlot integer
---@return item
function Native.UnitRemoveItemFromSlot(unit, itemSlot) end

---@param unit unit
---@param item item
---@return boolean
function Native.UnitHasItem(unit, item) end

---@param unit unit
---@param itemSlot integer
---@return item
function Native.UnitItemInSlot(unit, itemSlot) end

---@param unit unit
---@return integer
function Native.UnitInventorySize(unit) end

---@param unit unit
---@param item item
---@param x float
---@param y float
---@return boolean
function Native.UnitDropItemPoint(unit, item, x, y) end

---@param unit unit
---@param item item
---@param slot integer
---@return boolean
function Native.UnitDropItemSlot(unit, item, slot) end

---@param unit unit
---@param item item
---@param target widget
---@return boolean
function Native.UnitDropItemTarget(unit, item, target) end

---@param unit unit
---@param item item
---@return boolean
function Native.UnitUseItem(unit, item) end

---@param unit unit
---@param item item
---@param x float
---@param y float
---@return boolean
function Native.UnitUseItemPoint(unit, item, x, y) end

---@param unit unit
---@param item item
---@param target widget
---@return boolean
function Native.UnitUseItemTarget(unit, item, target) end

---@param unit unit
---@return float
function Native.GetUnitX(unit) end

---@param unit unit
---@return float
function Native.GetUnitY(unit) end

---@param unit unit
---@return location
function Native.GetUnitLoc(unit) end

---@param unit unit
---@return float
function Native.GetUnitFacing(unit) end

---@param unit unit
---@return float
function Native.GetUnitMoveSpeed(unit) end

---@param unit unit
---@return float
function Native.GetUnitDefaultMoveSpeed(unit) end

---@param unit unit
---@param unitState unitstate
---@return float
function Native.GetUnitState(unit, unitState) end

---@param unit unit
---@return player
function Native.GetOwningPlayer(unit) end

---@param unit unit
---@return integer
function Native.GetUnitTypeId(unit) end

---@param unit unit
---@return race
function Native.GetUnitRace(unit) end

---@param unit unit
---@return string
function Native.GetUnitName(unit) end

---@param unit unit
---@return integer
function Native.GetUnitFoodUsed(unit) end

---@param unit unit
---@return integer
function Native.GetUnitFoodMade(unit) end

---@param unitId integer
---@return integer
function Native.GetFoodMade(unitId) end

---@param unitId integer
---@return integer
function Native.GetFoodUsed(unitId) end

---@param unit unit
---@param useFood boolean
---@return void
function Native.SetUnitUseFood(unit, useFood) end

---@param unit unit
---@return location
function Native.GetUnitRallyPoint(unit) end

---@param unit unit
---@return unit
function Native.GetUnitRallyUnit(unit) end

---@param unit unit
---@return destructable
function Native.GetUnitRallyDestructable(unit) end

---@param unit unit
---@param group group
---@return boolean
function Native.IsUnitInGroup(unit, group) end

---@param unit unit
---@param force force
---@return boolean
function Native.IsUnitInForce(unit, force) end

---@param unit unit
---@param player player
---@return boolean
function Native.IsUnitOwnedByPlayer(unit, player) end

---@param unit unit
---@param player player
---@return boolean
function Native.IsUnitAlly(unit, player) end

---@param unit unit
---@param player player
---@return boolean
function Native.IsUnitEnemy(unit, player) end

---@param unit unit
---@param player player
---@return boolean
function Native.IsUnitVisible(unit, player) end

---@param unit unit
---@param player player
---@return boolean
function Native.IsUnitDetected(unit, player) end

---@param unit unit
---@param player player
---@return boolean
function Native.IsUnitInvisible(unit, player) end

---@param unit unit
---@param player player
---@return boolean
function Native.IsUnitFogged(unit, player) end

---@param unit unit
---@param player player
---@return boolean
function Native.IsUnitMasked(unit, player) end

---@param unit unit
---@param player player
---@return boolean
function Native.IsUnitSelected(unit, player) end

---@param unit unit
---@param race race
---@return boolean
function Native.IsUnitRace(unit, race) end

---@param unit unit
---@param unitType unittype
---@return boolean
function Native.IsUnitType(unit, unitType) end

---@param unit unit
---@param specifiedUnit unit
---@return boolean
function Native.IsUnit(unit, specifiedUnit) end

---@param unit unit
---@param otherUnit unit
---@param distance float
---@return boolean
function Native.IsUnitInRange(unit, otherUnit, distance) end

---@param unit unit
---@param x float
---@param y float
---@param distance float
---@return boolean
function Native.IsUnitInRangeXY(unit, x, y, distance) end

---@param unit unit
---@param loc location
---@param distance float
---@return boolean
function Native.IsUnitInRangeLoc(unit, loc, distance) end

---@param unit unit
---@return boolean
function Native.IsUnitHidden(unit) end

---@param unit unit
---@return boolean
function Native.IsUnitIllusion(unit) end

---@param unit unit
---@param transport unit
---@return boolean
function Native.IsUnitInTransport(unit, transport) end

---@param unit unit
---@return boolean
function Native.IsUnitLoaded(unit) end

---@param unitId integer
---@return boolean
function Native.IsHeroUnitId(unitId) end

---@param unitId integer
---@param unitType unittype
---@return boolean
function Native.IsUnitIdType(unitId, unitType) end

---@param unit unit
---@param player player
---@param share boolean
---@return void
function Native.UnitShareVision(unit, player, share) end

---@param unit unit
---@param suspend boolean
---@return void
function Native.UnitSuspendDecay(unit, suspend) end

---@param unit unit
---@param unitType unittype
---@return boolean
function Native.UnitAddType(unit, unitType) end

---@param unit unit
---@param unitType unittype
---@return boolean
function Native.UnitRemoveType(unit, unitType) end

---@param unit unit
---@param abilityId integer
---@return boolean
function Native.UnitAddAbility(unit, abilityId) end

---@param unit unit
---@param abilityId integer
---@return boolean
function Native.UnitRemoveAbility(unit, abilityId) end

---@param unit unit
---@param permanent boolean
---@param abilityId integer
---@return boolean
function Native.UnitMakeAbilityPermanent(unit, permanent, abilityId) end

---@param unit unit
---@param removePositive boolean
---@param removeNegative boolean
---@return void
function Native.UnitRemoveBuffs(unit, removePositive, removeNegative) end

---@param unit unit
---@param removePositive boolean
---@param removeNegative boolean
---@param magic boolean
---@param physical boolean
---@param timedLife boolean
---@param aura boolean
---@param autoDispel boolean
---@return void
function Native.UnitRemoveBuffsEx(unit, removePositive, removeNegative, magic, physical, timedLife, aura, autoDispel) end

---@param unit unit
---@param removePositive boolean
---@param removeNegative boolean
---@param magic boolean
---@param physical boolean
---@param timedLife boolean
---@param aura boolean
---@param autoDispel boolean
---@return boolean
function Native.UnitHasBuffsEx(unit, removePositive, removeNegative, magic, physical, timedLife, aura, autoDispel) end

---@param unit unit
---@param removePositive boolean
---@param removeNegative boolean
---@param magic boolean
---@param physical boolean
---@param timedLife boolean
---@param aura boolean
---@param autoDispel boolean
---@return integer
function Native.UnitCountBuffsEx(unit, removePositive, removeNegative, magic, physical, timedLife, aura, autoDispel) end

---@param unit unit
---@param add boolean
---@return void
function Native.UnitAddSleep(unit, add) end

---@param unit unit
---@return boolean
function Native.UnitCanSleep(unit) end

---@param unit unit
---@param add boolean
---@return void
function Native.UnitAddSleepPerm(unit, add) end

---@param unit unit
---@return boolean
function Native.UnitCanSleepPerm(unit) end

---@param unit unit
---@return boolean
function Native.UnitIsSleeping(unit) end

---@param unit unit
---@return void
function Native.UnitWakeUp(unit) end

---@param unit unit
---@param buffId integer
---@param duration float
---@return void
function Native.UnitApplyTimedLife(unit, buffId, duration) end

---@param unit unit
---@param flag boolean
---@return boolean
function Native.UnitIgnoreAlarm(unit, flag) end

---@param unit unit
---@return boolean
function Native.UnitIgnoreAlarmToggled(unit) end

---@param unit unit
---@return void
function Native.UnitResetCooldown(unit) end

---@param unit unit
---@param constructionPercentage integer
---@return void
function Native.UnitSetConstructionProgress(unit, constructionPercentage) end

---@param unit unit
---@param upgradePercentage integer
---@return void
function Native.UnitSetUpgradeProgress(unit, upgradePercentage) end

---@param unit unit
---@param flag boolean
---@return void
function Native.UnitPauseTimedLife(unit, flag) end

---@param unit unit
---@param flag boolean
---@return void
function Native.UnitSetUsesAltIcon(unit, flag) end

---@param unit unit
---@param delay float
---@param radius float
---@param x float
---@param y float
---@param amount float
---@param attack boolean
---@param ranged boolean
---@param attackType attacktype
---@param damageType damagetype
---@param weaponType weapontype
---@return boolean
function Native.UnitDamagePoint(unit, delay, radius, x, y, amount, attack, ranged, attackType, damageType, weaponType) end

---@param unit unit
---@param target widget
---@param amount float
---@param attack boolean
---@param ranged boolean
---@param attackType attacktype
---@param damageType damagetype
---@param weaponType weapontype
---@return boolean
function Native.UnitDamageTarget(unit, target, amount, attack, ranged, attackType, damageType, weaponType) end

---@param unit unit
---@param order string
---@return boolean
function Native.IssueImmediateOrder(unit, order) end

---@param unit unit
---@param order integer
---@return boolean
function Native.IssueImmediateOrderById(unit, order) end

---@param unit unit
---@param order string
---@param x float
---@param y float
---@return boolean
function Native.IssuePointOrder(unit, order, x, y) end

---@param unit unit
---@param order string
---@param loc location
---@return boolean
function Native.IssuePointOrderLoc(unit, order, loc) end

---@param unit unit
---@param order integer
---@param x float
---@param y float
---@return boolean
function Native.IssuePointOrderById(unit, order, x, y) end

---@param unit unit
---@param order integer
---@param loc location
---@return boolean
function Native.IssuePointOrderByIdLoc(unit, order, loc) end

---@param unit unit
---@param order string
---@param targetWidget widget
---@return boolean
function Native.IssueTargetOrder(unit, order, targetWidget) end

---@param unit unit
---@param order integer
---@param targetWidget widget
---@return boolean
function Native.IssueTargetOrderById(unit, order, targetWidget) end

---@param unit unit
---@param order string
---@param x float
---@param y float
---@param instantTargetWidget widget
---@return boolean
function Native.IssueInstantPointOrder(unit, order, x, y, instantTargetWidget) end

---@param unit unit
---@param order integer
---@param x float
---@param y float
---@param instantTargetWidget widget
---@return boolean
function Native.IssueInstantPointOrderById(unit, order, x, y, instantTargetWidget) end

---@param unit unit
---@param order string
---@param targetWidget widget
---@param instantTargetWidget widget
---@return boolean
function Native.IssueInstantTargetOrder(unit, order, targetWidget, instantTargetWidget) end

---@param unit unit
---@param order integer
---@param targetWidget widget
---@param instantTargetWidget widget
---@return boolean
function Native.IssueInstantTargetOrderById(unit, order, targetWidget, instantTargetWidget) end

---@param peon unit
---@param unitToBuild string
---@param x float
---@param y float
---@return boolean
function Native.IssueBuildOrder(peon, unitToBuild, x, y) end

---@param peon unit
---@param unitId integer
---@param x float
---@param y float
---@return boolean
function Native.IssueBuildOrderById(peon, unitId, x, y) end

---@param forWhichPlayer player
---@param neutralStructure unit
---@param unitToBuild string
---@return boolean
function Native.IssueNeutralImmediateOrder(forWhichPlayer, neutralStructure, unitToBuild) end

---@param forWhichPlayer player
---@param neutralStructure unit
---@param unitId integer
---@return boolean
function Native.IssueNeutralImmediateOrderById(forWhichPlayer, neutralStructure, unitId) end

---@param forWhichPlayer player
---@param neutralStructure unit
---@param unitToBuild string
---@param x float
---@param y float
---@return boolean
function Native.IssueNeutralPointOrder(forWhichPlayer, neutralStructure, unitToBuild, x, y) end

---@param forWhichPlayer player
---@param neutralStructure unit
---@param unitId integer
---@param x float
---@param y float
---@return boolean
function Native.IssueNeutralPointOrderById(forWhichPlayer, neutralStructure, unitId, x, y) end

---@param forWhichPlayer player
---@param neutralStructure unit
---@param unitToBuild string
---@param target widget
---@return boolean
function Native.IssueNeutralTargetOrder(forWhichPlayer, neutralStructure, unitToBuild, target) end

---@param forWhichPlayer player
---@param neutralStructure unit
---@param unitId integer
---@param target widget
---@return boolean
function Native.IssueNeutralTargetOrderById(forWhichPlayer, neutralStructure, unitId, target) end

---@param unit unit
---@return integer
function Native.GetUnitCurrentOrder(unit) end

---@param unit unit
---@param amount integer
---@return void
function Native.SetResourceAmount(unit, amount) end

---@param unit unit
---@param amount integer
---@return void
function Native.AddResourceAmount(unit, amount) end

---@param unit unit
---@return integer
function Native.GetResourceAmount(unit) end

---@param waygate unit
---@return float
function Native.WaygateGetDestinationX(waygate) end

---@param waygate unit
---@return float
function Native.WaygateGetDestinationY(waygate) end

---@param waygate unit
---@param x float
---@param y float
---@return void
function Native.WaygateSetDestination(waygate, x, y) end

---@param waygate unit
---@param activate boolean
---@return void
function Native.WaygateActivate(waygate, activate) end

---@param waygate unit
---@return boolean
function Native.WaygateIsActive(waygate) end

---@param itemId integer
---@param currentStock integer
---@param stockMax integer
---@return void
function Native.AddItemToAllStock(itemId, currentStock, stockMax) end

---@param unit unit
---@param itemId integer
---@param currentStock integer
---@param stockMax integer
---@return void
function Native.AddItemToStock(unit, itemId, currentStock, stockMax) end

---@param unitId integer
---@param currentStock integer
---@param stockMax integer
---@return void
function Native.AddUnitToAllStock(unitId, currentStock, stockMax) end

---@param unit unit
---@param unitId integer
---@param currentStock integer
---@param stockMax integer
---@return void
function Native.AddUnitToStock(unit, unitId, currentStock, stockMax) end

---@param itemId integer
---@return void
function Native.RemoveItemFromAllStock(itemId) end

---@param unit unit
---@param itemId integer
---@return void
function Native.RemoveItemFromStock(unit, itemId) end

---@param unitId integer
---@return void
function Native.RemoveUnitFromAllStock(unitId) end

---@param unit unit
---@param unitId integer
---@return void
function Native.RemoveUnitFromStock(unit, unitId) end

---@param slots integer
---@return void
function Native.SetAllItemTypeSlots(slots) end

---@param slots integer
---@return void
function Native.SetAllUnitTypeSlots(slots) end

---@param unit unit
---@param slots integer
---@return void
function Native.SetItemTypeSlots(unit, slots) end

---@param unit unit
---@param slots integer
---@return void
function Native.SetUnitTypeSlots(unit, slots) end

---@param unit unit
---@return integer
function Native.GetUnitUserData(unit) end

---@param unit unit
---@param data integer
---@return void
function Native.SetUnitUserData(unit, data) end

---@param number integer
---@return player
function Native.Player(number) end

---@return player
function Native.GetLocalPlayer() end

---@param player player
---@param otherPlayer player
---@return boolean
function Native.IsPlayerAlly(player, otherPlayer) end

---@param player player
---@param otherPlayer player
---@return boolean
function Native.IsPlayerEnemy(player, otherPlayer) end

---@param player player
---@param force force
---@return boolean
function Native.IsPlayerInForce(player, force) end

---@param player player
---@return boolean
function Native.IsPlayerObserver(player) end

---@param x float
---@param y float
---@param player player
---@return boolean
function Native.IsVisibleToPlayer(x, y, player) end

---@param loc location
---@param player player
---@return boolean
function Native.IsLocationVisibleToPlayer(loc, player) end

---@param x float
---@param y float
---@param player player
---@return boolean
function Native.IsFoggedToPlayer(x, y, player) end

---@param loc location
---@param player player
---@return boolean
function Native.IsLocationFoggedToPlayer(loc, player) end

---@param x float
---@param y float
---@param player player
---@return boolean
function Native.IsMaskedToPlayer(x, y, player) end

---@param loc location
---@param player player
---@return boolean
function Native.IsLocationMaskedToPlayer(loc, player) end

---@param player player
---@return race
function Native.GetPlayerRace(player) end

---@param player player
---@return integer
function Native.GetPlayerId(player) end

---@param player player
---@param includeIncomplete boolean
---@return integer
function Native.GetPlayerUnitCount(player, includeIncomplete) end

---@param player player
---@param unitName string
---@param includeIncomplete boolean
---@param includeUpgrades boolean
---@return integer
function Native.GetPlayerTypedUnitCount(player, unitName, includeIncomplete, includeUpgrades) end

---@param player player
---@param includeIncomplete boolean
---@return integer
function Native.GetPlayerStructureCount(player, includeIncomplete) end

---@param player player
---@param playerState playerstate
---@return integer
function Native.GetPlayerState(player, playerState) end

---@param player player
---@param playerScore playerscore
---@return integer
function Native.GetPlayerScore(player, playerScore) end

---@param sourcePlayer player
---@param otherPlayer player
---@param allianceSetting alliancetype
---@return boolean
function Native.GetPlayerAlliance(sourcePlayer, otherPlayer, allianceSetting) end

---@param player player
---@return float
function Native.GetPlayerHandicap(player) end

---@param player player
---@return float
function Native.GetPlayerHandicapXP(player) end

---@param player player
---@return float
function Native.GetPlayerHandicapReviveTime(player) end

---@param player player
---@return float
function Native.GetPlayerHandicapDamage(player) end

---@param player player
---@param handicap float
---@return void
function Native.SetPlayerHandicap(player, handicap) end

---@param player player
---@param handicap float
---@return void
function Native.SetPlayerHandicapXP(player, handicap) end

---@param player player
---@param handicap float
---@return void
function Native.SetPlayerHandicapReviveTime(player, handicap) end

---@param player player
---@param handicap float
---@return void
function Native.SetPlayerHandicapDamage(player, handicap) end

---@param player player
---@param techid integer
---@param maximum integer
---@return void
function Native.SetPlayerTechMaxAllowed(player, techid, maximum) end

---@param player player
---@param techid integer
---@return integer
function Native.GetPlayerTechMaxAllowed(player, techid) end

---@param player player
---@param techid integer
---@param levels integer
---@return void
function Native.AddPlayerTechResearched(player, techid, levels) end

---@param player player
---@param techid integer
---@param setToLevel integer
---@return void
function Native.SetPlayerTechResearched(player, techid, setToLevel) end

---@param player player
---@param techid integer
---@param specificonly boolean
---@return boolean
function Native.GetPlayerTechResearched(player, techid, specificonly) end

---@param player player
---@param techid integer
---@param specificonly boolean
---@return integer
function Native.GetPlayerTechCount(player, techid, specificonly) end

---@param player player
---@param owner integer
---@return void
function Native.SetPlayerUnitsOwner(player, owner) end

---@param player player
---@param toWhichPlayers force
---@param flag boolean
---@return void
function Native.CripplePlayer(player, toWhichPlayers, flag) end

---@param player player
---@param abilid integer
---@param avail boolean
---@return void
function Native.SetPlayerAbilityAvailable(player, abilid, avail) end

---@param player player
---@param playerState playerstate
---@param value integer
---@return void
function Native.SetPlayerState(player, playerState, value) end

---@param player player
---@param gameResult playergameresult
---@return void
function Native.RemovePlayer(player, gameResult) end

---@param player player
---@return void
function Native.CachePlayerHeroData(player) end

---@param forWhichPlayer player
---@param state fogstate
---@param where rect
---@param useSharedVision boolean
---@return void
function Native.SetFogStateRect(forWhichPlayer, state, where, useSharedVision) end

---@param forWhichPlayer player
---@param state fogstate
---@param centerx float
---@param centerY float
---@param radius float
---@param useSharedVision boolean
---@return void
function Native.SetFogStateRadius(forWhichPlayer, state, centerx, centerY, radius, useSharedVision) end

---@param forWhichPlayer player
---@param state fogstate
---@param center location
---@param radius float
---@param useSharedVision boolean
---@return void
function Native.SetFogStateRadiusLoc(forWhichPlayer, state, center, radius, useSharedVision) end

---@param enable boolean
---@return void
function Native.FogMaskEnable(enable) end

---@return boolean
function Native.IsFogMaskEnabled() end

---@param enable boolean
---@return void
function Native.FogEnable(enable) end

---@return boolean
function Native.IsFogEnabled() end

---@param forWhichPlayer player
---@param state fogstate
---@param where rect
---@param useSharedVision boolean
---@param afterUnits boolean
---@return fogmodifier
function Native.CreateFogModifierRect(forWhichPlayer, state, where, useSharedVision, afterUnits) end

---@param forWhichPlayer player
---@param state fogstate
---@param centerx float
---@param centerY float
---@param radius float
---@param useSharedVision boolean
---@param afterUnits boolean
---@return fogmodifier
function Native.CreateFogModifierRadius(forWhichPlayer, state, centerx, centerY, radius, useSharedVision, afterUnits) end

---@param forWhichPlayer player
---@param state fogstate
---@param center location
---@param radius float
---@param useSharedVision boolean
---@param afterUnits boolean
---@return fogmodifier
function Native.CreateFogModifierRadiusLoc(forWhichPlayer, state, center, radius, useSharedVision, afterUnits) end

---@param fogModifier fogmodifier
---@return void
function Native.DestroyFogModifier(fogModifier) end

---@param fogModifier fogmodifier
---@return void
function Native.FogModifierStart(fogModifier) end

---@param fogModifier fogmodifier
---@return void
function Native.FogModifierStop(fogModifier) end

---@return version
function Native.VersionGet() end

---@param version version
---@return boolean
function Native.VersionCompatible(version) end

---@param version version
---@return boolean
function Native.VersionSupported(version) end

---@param doScoreScreen boolean
---@return void
function Native.EndGame(doScoreScreen) end

---@param level string
---@param doScoreScreen boolean
---@return void
function Native.ChangeLevel(level, doScoreScreen) end

---@param doScoreScreen boolean
---@return void
function Native.RestartGame(doScoreScreen) end

---@return void
function Native.ReloadGame() end

---@param r race
---@return void
function Native.SetCampaignMenuRace(r) end

---@param campaignIndex integer
---@return void
function Native.SetCampaignMenuRaceEx(campaignIndex) end

---@return void
function Native.ForceCampaignSelectScreen() end

---@param saveFileName string
---@param doScoreScreen boolean
---@return void
function Native.LoadGame(saveFileName, doScoreScreen) end

---@param saveFileName string
---@return void
function Native.SaveGame(saveFileName) end

---@param sourceDirName string
---@param destDirName string
---@return boolean
function Native.RenameSaveDirectory(sourceDirName, destDirName) end

---@param sourceDirName string
---@return boolean
function Native.RemoveSaveDirectory(sourceDirName) end

---@param sourceSaveName string
---@param destSaveName string
---@return boolean
function Native.CopySaveGame(sourceSaveName, destSaveName) end

---@param saveName string
---@return boolean
function Native.SaveGameExists(saveName) end

---@param maxCheckpointSaves integer
---@return void
function Native.SetMaxCheckpointSaves(maxCheckpointSaves) end

---@param saveFileName string
---@param showWindow boolean
---@return void
function Native.SaveGameCheckpoint(saveFileName, showWindow) end

---@return void
function Native.SyncSelections() end

---@param floatGameState fgamestate
---@param value float
---@return void
function Native.SetFloatGameState(floatGameState, value) end

---@param floatGameState fgamestate
---@return float
function Native.GetFloatGameState(floatGameState) end

---@param integerGameState igamestate
---@param value integer
---@return void
function Native.SetIntegerGameState(integerGameState, value) end

---@param integerGameState igamestate
---@return integer
function Native.GetIntegerGameState(integerGameState) end

---@param cleared boolean
---@return void
function Native.SetTutorialCleared(cleared) end

---@param campaignNumber integer
---@param missionNumber integer
---@param available boolean
---@return void
function Native.SetMissionAvailable(campaignNumber, missionNumber, available) end

---@param campaignNumber integer
---@param available boolean
---@return void
function Native.SetCampaignAvailable(campaignNumber, available) end

---@param campaignNumber integer
---@param available boolean
---@return void
function Native.SetOpCinematicAvailable(campaignNumber, available) end

---@param campaignNumber integer
---@param available boolean
---@return void
function Native.SetEdCinematicAvailable(campaignNumber, available) end

---@return gamedifficulty
function Native.GetDefaultDifficulty() end

---@param g gamedifficulty
---@return void
function Native.SetDefaultDifficulty(g) end

---@param button integer
---@param visible boolean
---@return void
function Native.SetCustomCampaignButtonVisible(button, visible) end

---@param button integer
---@return boolean
function Native.GetCustomCampaignButtonVisible(button) end

---@return void
function Native.DoNotSaveReplay() end

---@return dialog
function Native.DialogCreate() end

---@param dialog dialog
---@return void
function Native.DialogDestroy(dialog) end

---@param dialog dialog
---@return void
function Native.DialogClear(dialog) end

---@param dialog dialog
---@param messageText string
---@return void
function Native.DialogSetMessage(dialog, messageText) end

---@param dialog dialog
---@param buttonText string
---@param hotkey integer
---@return button
function Native.DialogAddButton(dialog, buttonText, hotkey) end

---@param dialog dialog
---@param doScoreScreen boolean
---@param buttonText string
---@param hotkey integer
---@return button
function Native.DialogAddQuitButton(dialog, doScoreScreen, buttonText, hotkey) end

---@param player player
---@param dialog dialog
---@param flag boolean
---@return void
function Native.DialogDisplay(player, dialog, flag) end

---@return boolean
function Native.ReloadGameCachesFromDisk() end

---@param campaignFile string
---@return gamecache
function Native.InitGameCache(campaignFile) end

---@param cache gamecache
---@return boolean
function Native.SaveGameCache(cache) end

---@param cache gamecache
---@param missionKey string
---@param key string
---@param value integer
---@return void
function Native.StoreInteger(cache, missionKey, key, value) end

---@param cache gamecache
---@param missionKey string
---@param key string
---@param value float
---@return void
function Native.StoreReal(cache, missionKey, key, value) end

---@param cache gamecache
---@param missionKey string
---@param key string
---@param value boolean
---@return void
function Native.StoreBoolean(cache, missionKey, key, value) end

---@param cache gamecache
---@param missionKey string
---@param key string
---@param unit unit
---@return boolean
function Native.StoreUnit(cache, missionKey, key, unit) end

---@param cache gamecache
---@param missionKey string
---@param key string
---@param value string
---@return boolean
function Native.StoreString(cache, missionKey, key, value) end

---@param cache gamecache
---@param missionKey string
---@param key string
---@return void
function Native.SyncStoredInteger(cache, missionKey, key) end

---@param cache gamecache
---@param missionKey string
---@param key string
---@return void
function Native.SyncStoredReal(cache, missionKey, key) end

---@param cache gamecache
---@param missionKey string
---@param key string
---@return void
function Native.SyncStoredBoolean(cache, missionKey, key) end

---@param cache gamecache
---@param missionKey string
---@param key string
---@return void
function Native.SyncStoredUnit(cache, missionKey, key) end

---@param cache gamecache
---@param missionKey string
---@param key string
---@return void
function Native.SyncStoredString(cache, missionKey, key) end

---@param cache gamecache
---@param missionKey string
---@param key string
---@return boolean
function Native.HaveStoredInteger(cache, missionKey, key) end

---@param cache gamecache
---@param missionKey string
---@param key string
---@return boolean
function Native.HaveStoredReal(cache, missionKey, key) end

---@param cache gamecache
---@param missionKey string
---@param key string
---@return boolean
function Native.HaveStoredBoolean(cache, missionKey, key) end

---@param cache gamecache
---@param missionKey string
---@param key string
---@return boolean
function Native.HaveStoredUnit(cache, missionKey, key) end

---@param cache gamecache
---@param missionKey string
---@param key string
---@return boolean
function Native.HaveStoredString(cache, missionKey, key) end

---@param cache gamecache
---@return void
function Native.FlushGameCache(cache) end

---@param cache gamecache
---@param missionKey string
---@return void
function Native.FlushStoredMission(cache, missionKey) end

---@param cache gamecache
---@param missionKey string
---@param key string
---@return void
function Native.FlushStoredInteger(cache, missionKey, key) end

---@param cache gamecache
---@param missionKey string
---@param key string
---@return void
function Native.FlushStoredReal(cache, missionKey, key) end

---@param cache gamecache
---@param missionKey string
---@param key string
---@return void
function Native.FlushStoredBoolean(cache, missionKey, key) end

---@param cache gamecache
---@param missionKey string
---@param key string
---@return void
function Native.FlushStoredUnit(cache, missionKey, key) end

---@param cache gamecache
---@param missionKey string
---@param key string
---@return void
function Native.FlushStoredString(cache, missionKey, key) end

---@param cache gamecache
---@param missionKey string
---@param key string
---@return integer
function Native.GetStoredInteger(cache, missionKey, key) end

---@param cache gamecache
---@param missionKey string
---@param key string
---@return float
function Native.GetStoredReal(cache, missionKey, key) end

---@param cache gamecache
---@param missionKey string
---@param key string
---@return boolean
function Native.GetStoredBoolean(cache, missionKey, key) end

---@param cache gamecache
---@param missionKey string
---@param key string
---@return string
function Native.GetStoredString(cache, missionKey, key) end

---@param cache gamecache
---@param missionKey string
---@param key string
---@param forWhichPlayer player
---@param x float
---@param y float
---@param facing float
---@return unit
function Native.RestoreUnit(cache, missionKey, key, forWhichPlayer, x, y, facing) end

---@return hashtable
function Native.InitHashtable() end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param value integer
---@return void
function Native.SaveInteger(table, parentKey, childKey, value) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param value float
---@return void
function Native.SaveReal(table, parentKey, childKey, value) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param value boolean
---@return void
function Native.SaveBoolean(table, parentKey, childKey, value) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param value string
---@return boolean
function Native.SaveStr(table, parentKey, childKey, value) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param player player
---@return boolean
function Native.SavePlayerHandle(table, parentKey, childKey, player) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param widget widget
---@return boolean
function Native.SaveWidgetHandle(table, parentKey, childKey, widget) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param destructable destructable
---@return boolean
function Native.SaveDestructableHandle(table, parentKey, childKey, destructable) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param item item
---@return boolean
function Native.SaveItemHandle(table, parentKey, childKey, item) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param unit unit
---@return boolean
function Native.SaveUnitHandle(table, parentKey, childKey, unit) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param ability ability
---@return boolean
function Native.SaveAbilityHandle(table, parentKey, childKey, ability) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param timer timer
---@return boolean
function Native.SaveTimerHandle(table, parentKey, childKey, timer) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param trigger trigger
---@return boolean
function Native.SaveTriggerHandle(table, parentKey, childKey, trigger) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param triggercondition triggercondition
---@return boolean
function Native.SaveTriggerConditionHandle(table, parentKey, childKey, triggercondition) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param triggeraction triggeraction
---@return boolean
function Native.SaveTriggerActionHandle(table, parentKey, childKey, triggeraction) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param event event
---@return boolean
function Native.SaveTriggerEventHandle(table, parentKey, childKey, event) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param force force
---@return boolean
function Native.SaveForceHandle(table, parentKey, childKey, force) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param group group
---@return boolean
function Native.SaveGroupHandle(table, parentKey, childKey, group) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param loc location
---@return boolean
function Native.SaveLocationHandle(table, parentKey, childKey, loc) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param rect rect
---@return boolean
function Native.SaveRectHandle(table, parentKey, childKey, rect) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param boolexpr boolexpr
---@return boolean
function Native.SaveBooleanExprHandle(table, parentKey, childKey, boolexpr) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param sound sound
---@return boolean
function Native.SaveSoundHandle(table, parentKey, childKey, sound) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param effect effect
---@return boolean
function Native.SaveEffectHandle(table, parentKey, childKey, effect) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param unitpool unitpool
---@return boolean
function Native.SaveUnitPoolHandle(table, parentKey, childKey, unitpool) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param itempool itempool
---@return boolean
function Native.SaveItemPoolHandle(table, parentKey, childKey, itempool) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param quest quest
---@return boolean
function Native.SaveQuestHandle(table, parentKey, childKey, quest) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param questitem questitem
---@return boolean
function Native.SaveQuestItemHandle(table, parentKey, childKey, questitem) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param defeatcondition defeatcondition
---@return boolean
function Native.SaveDefeatConditionHandle(table, parentKey, childKey, defeatcondition) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param timerdialog timerdialog
---@return boolean
function Native.SaveTimerDialogHandle(table, parentKey, childKey, timerdialog) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param leaderboard leaderboard
---@return boolean
function Native.SaveLeaderboardHandle(table, parentKey, childKey, leaderboard) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param multiboard multiboard
---@return boolean
function Native.SaveMultiboardHandle(table, parentKey, childKey, multiboard) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param multiboarditem multiboarditem
---@return boolean
function Native.SaveMultiboardItemHandle(table, parentKey, childKey, multiboarditem) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param trackable trackable
---@return boolean
function Native.SaveTrackableHandle(table, parentKey, childKey, trackable) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param dialog dialog
---@return boolean
function Native.SaveDialogHandle(table, parentKey, childKey, dialog) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param button button
---@return boolean
function Native.SaveButtonHandle(table, parentKey, childKey, button) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param texttag texttag
---@return boolean
function Native.SaveTextTagHandle(table, parentKey, childKey, texttag) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param lightning lightning
---@return boolean
function Native.SaveLightningHandle(table, parentKey, childKey, lightning) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param image image
---@return boolean
function Native.SaveImageHandle(table, parentKey, childKey, image) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param ubersplat ubersplat
---@return boolean
function Native.SaveUbersplatHandle(table, parentKey, childKey, ubersplat) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param region region
---@return boolean
function Native.SaveRegionHandle(table, parentKey, childKey, region) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param fogState fogstate
---@return boolean
function Native.SaveFogStateHandle(table, parentKey, childKey, fogState) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param fogModifier fogmodifier
---@return boolean
function Native.SaveFogModifierHandle(table, parentKey, childKey, fogModifier) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param agent agent
---@return boolean
function Native.SaveAgentHandle(table, parentKey, childKey, agent) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param hashtable hashtable
---@return boolean
function Native.SaveHashtableHandle(table, parentKey, childKey, hashtable) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@param frameHandle framehandle
---@return boolean
function Native.SaveFrameHandle(table, parentKey, childKey, frameHandle) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return integer
function Native.LoadInteger(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return float
function Native.LoadReal(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return boolean
function Native.LoadBoolean(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return string
function Native.LoadStr(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return player
function Native.LoadPlayerHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return widget
function Native.LoadWidgetHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return destructable
function Native.LoadDestructableHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return item
function Native.LoadItemHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return unit
function Native.LoadUnitHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return ability
function Native.LoadAbilityHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return timer
function Native.LoadTimerHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return trigger
function Native.LoadTriggerHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return triggercondition
function Native.LoadTriggerConditionHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return triggeraction
function Native.LoadTriggerActionHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return event
function Native.LoadTriggerEventHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return force
function Native.LoadForceHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return group
function Native.LoadGroupHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return location
function Native.LoadLocationHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return rect
function Native.LoadRectHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return boolexpr
function Native.LoadBooleanExprHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return sound
function Native.LoadSoundHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return effect
function Native.LoadEffectHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return unitpool
function Native.LoadUnitPoolHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return itempool
function Native.LoadItemPoolHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return quest
function Native.LoadQuestHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return questitem
function Native.LoadQuestItemHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return defeatcondition
function Native.LoadDefeatConditionHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return timerdialog
function Native.LoadTimerDialogHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return leaderboard
function Native.LoadLeaderboardHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return multiboard
function Native.LoadMultiboardHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return multiboarditem
function Native.LoadMultiboardItemHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return trackable
function Native.LoadTrackableHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return dialog
function Native.LoadDialogHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return button
function Native.LoadButtonHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return texttag
function Native.LoadTextTagHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return lightning
function Native.LoadLightningHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return image
function Native.LoadImageHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return ubersplat
function Native.LoadUbersplatHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return region
function Native.LoadRegionHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return fogstate
function Native.LoadFogStateHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return fogmodifier
function Native.LoadFogModifierHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return hashtable
function Native.LoadHashtableHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return framehandle
function Native.LoadFrameHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return boolean
function Native.HaveSavedInteger(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return boolean
function Native.HaveSavedReal(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return boolean
function Native.HaveSavedBoolean(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return boolean
function Native.HaveSavedString(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return boolean
function Native.HaveSavedHandle(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return void
function Native.RemoveSavedInteger(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return void
function Native.RemoveSavedReal(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return void
function Native.RemoveSavedBoolean(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return void
function Native.RemoveSavedString(table, parentKey, childKey) end

---@param table hashtable
---@param parentKey integer
---@param childKey integer
---@return void
function Native.RemoveSavedHandle(table, parentKey, childKey) end

---@param table hashtable
---@return void
function Native.FlushParentHashtable(table) end

---@param table hashtable
---@param parentKey integer
---@return void
function Native.FlushChildHashtable(table, parentKey) end

---@param lowBound integer
---@param highBound integer
---@return integer
function Native.GetRandomInt(lowBound, highBound) end

---@param lowBound float
---@param highBound float
---@return float
function Native.GetRandomReal(lowBound, highBound) end

---@return unitpool
function Native.CreateUnitPool() end

---@param pool unitpool
---@return void
function Native.DestroyUnitPool(pool) end

---@param pool unitpool
---@param unitId integer
---@param weight float
---@return void
function Native.UnitPoolAddUnitType(pool, unitId, weight) end

---@param pool unitpool
---@param unitId integer
---@return void
function Native.UnitPoolRemoveUnitType(pool, unitId) end

---@param pool unitpool
---@param forWhichPlayer player
---@param x float
---@param y float
---@param facing float
---@return unit
function Native.PlaceRandomUnit(pool, forWhichPlayer, x, y, facing) end

---@return itempool
function Native.CreateItemPool() end

---@param itemPool itempool
---@return void
function Native.DestroyItemPool(itemPool) end

---@param itemPool itempool
---@param itemId integer
---@param weight float
---@return void
function Native.ItemPoolAddItemType(itemPool, itemId, weight) end

---@param itemPool itempool
---@param itemId integer
---@return void
function Native.ItemPoolRemoveItemType(itemPool, itemId) end

---@param itemPool itempool
---@param x float
---@param y float
---@return item
function Native.PlaceRandomItem(itemPool, x, y) end

---@param level integer
---@return integer
function Native.ChooseRandomCreep(level) end

---@return integer
function Native.ChooseRandomNPBuilding() end

---@param level integer
---@return integer
function Native.ChooseRandomItem(level) end

---@param type itemtype
---@param level integer
---@return integer
function Native.ChooseRandomItemEx(type, level) end

---@param seed integer
---@return void
function Native.SetRandomSeed(seed) end

---@param a float
---@param b float
---@param c float
---@param d float
---@param e float
---@return void
function Native.SetTerrainFog(a, b, c, d, e) end

---@return void
function Native.ResetTerrainFog() end

---@param a float
---@param b float
---@param c float
---@param d float
---@param e float
---@return void
function Native.SetUnitFog(a, b, c, d, e) end

---@param style integer
---@param zstart float
---@param zend float
---@param density float
---@param red float
---@param green float
---@param blue float
---@return void
function Native.SetTerrainFogEx(style, zstart, zend, density, red, green, blue) end

---@param toPlayer player
---@param x float
---@param y float
---@param message string
---@return void
function Native.DisplayTextToPlayer(toPlayer, x, y, message) end

---@param toPlayer player
---@param x float
---@param y float
---@param duration float
---@param message string
---@return void
function Native.DisplayTimedTextToPlayer(toPlayer, x, y, duration, message) end

---@param toPlayer player
---@param x float
---@param y float
---@param duration float
---@param message string
---@return void
function Native.DisplayTimedTextFromPlayer(toPlayer, x, y, duration, message) end

---@return void
function Native.ClearTextMessages() end

---@param terrainDNCFile string
---@param unitDNCFile string
---@return void
function Native.SetDayNightModels(terrainDNCFile, unitDNCFile) end

---@param portraitDNCFile string
---@return void
function Native.SetPortraitLight(portraitDNCFile) end

---@param skyModelFile string
---@return void
function Native.SetSkyModel(skyModelFile) end

---@param b boolean
---@return void
function Native.EnableUserControl(b) end

---@param b boolean
---@return void
function Native.EnableUserUI(b) end

---@param b boolean
---@return void
function Native.SuspendTimeOfDay(b) end

---@param r float
---@return void
function Native.SetTimeOfDayScale(r) end

---@return float
function Native.GetTimeOfDayScale() end

---@param flag boolean
---@param fadeDuration float
---@return void
function Native.ShowInterface(flag, fadeDuration) end

---@param flag boolean
---@return void
function Native.PauseGame(flag) end

---@param unit unit
---@param red integer
---@param green integer
---@param blue integer
---@param alpha integer
---@return void
function Native.UnitAddIndicator(unit, red, green, blue, alpha) end

---@param widget widget
---@param red integer
---@param green integer
---@param blue integer
---@param alpha integer
---@return void
function Native.AddIndicator(widget, red, green, blue, alpha) end

---@param x float
---@param y float
---@param duration float
---@return void
function Native.PingMinimap(x, y, duration) end

---@param x float
---@param y float
---@param duration float
---@param red integer
---@param green integer
---@param blue integer
---@param extraEffects boolean
---@return void
function Native.PingMinimapEx(x, y, duration, red, green, blue, extraEffects) end

---@param unit unit
---@param red integer
---@param green integer
---@param blue integer
---@param pingPath string
---@param fogVisibility fogstate
---@return minimapicon
function Native.CreateMinimapIconOnUnit(unit, red, green, blue, pingPath, fogVisibility) end

---@param where location
---@param red integer
---@param green integer
---@param blue integer
---@param pingPath string
---@param fogVisibility fogstate
---@return minimapicon
function Native.CreateMinimapIconAtLoc(where, red, green, blue, pingPath, fogVisibility) end

---@param x float
---@param y float
---@param red integer
---@param green integer
---@param blue integer
---@param pingPath string
---@param fogVisibility fogstate
---@return minimapicon
function Native.CreateMinimapIcon(x, y, red, green, blue, pingPath, fogVisibility) end

---@param key string
---@return string
function Native.SkinManagerGetLocalPath(key) end

---@param pingId minimapicon
---@return void
function Native.DestroyMinimapIcon(pingId) end

---@param minimapIcon minimapicon
---@param visible boolean
---@return void
function Native.SetMinimapIconVisible(minimapIcon, visible) end

---@param minimapIcon minimapicon
---@param doDestroy boolean
---@return void
function Native.SetMinimapIconOrphanDestroy(minimapIcon, doDestroy) end

---@param flag boolean
---@return void
function Native.EnableOcclusion(flag) end

---@param introText string
---@return void
function Native.SetIntroShotText(introText) end

---@param introModelPath string
---@return void
function Native.SetIntroShotModel(introModelPath) end

---@param b boolean
---@return void
function Native.EnableWorldFogBoundary(b) end

---@param modelName string
---@return void
function Native.PlayModelCinematic(modelName) end

---@param movieName string
---@return void
function Native.PlayCinematic(movieName) end

---@param key string
---@return void
function Native.ForceUIKey(key) end

---@return void
function Native.ForceUICancel() end

---@return void
function Native.DisplayLoadDialog() end

---@param iconPath string
---@return void
function Native.SetAltMinimapIcon(iconPath) end

---@param flag boolean
---@return void
function Native.DisableRestartMission(flag) end

---@return texttag
function Native.CreateTextTag() end

---@param t texttag
---@return void
function Native.DestroyTextTag(t) end

---@param t texttag
---@param s string
---@param height float
---@return void
function Native.SetTextTagText(t, s, height) end

---@param t texttag
---@param x float
---@param y float
---@param heightOffset float
---@return void
function Native.SetTextTagPos(t, x, y, heightOffset) end

---@param t texttag
---@param unit unit
---@param heightOffset float
---@return void
function Native.SetTextTagPosUnit(t, unit, heightOffset) end

---@param t texttag
---@param red integer
---@param green integer
---@param blue integer
---@param alpha integer
---@return void
function Native.SetTextTagColor(t, red, green, blue, alpha) end

---@param t texttag
---@param xvel float
---@param yvel float
---@return void
function Native.SetTextTagVelocity(t, xvel, yvel) end

---@param t texttag
---@param flag boolean
---@return void
function Native.SetTextTagVisibility(t, flag) end

---@param t texttag
---@param flag boolean
---@return void
function Native.SetTextTagSuspended(t, flag) end

---@param t texttag
---@param flag boolean
---@return void
function Native.SetTextTagPermanent(t, flag) end

---@param t texttag
---@param age float
---@return void
function Native.SetTextTagAge(t, age) end

---@param t texttag
---@param lifespan float
---@return void
function Native.SetTextTagLifespan(t, lifespan) end

---@param t texttag
---@param fadepoint float
---@return void
function Native.SetTextTagFadepoint(t, fadepoint) end

---@param reserved integer
---@return void
function Native.SetReservedLocalHeroButtons(reserved) end

---@return integer
function Native.GetAllyColorFilterState() end

---@param state integer
---@return void
function Native.SetAllyColorFilterState(state) end

---@return boolean
function Native.GetCreepCampFilterState() end

---@param state boolean
---@return void
function Native.SetCreepCampFilterState(state) end

---@param enableAlly boolean
---@param enableCreep boolean
---@return void
function Native.EnableMinimapFilterButtons(enableAlly, enableCreep) end

---@param state boolean
---@param ui boolean
---@return void
function Native.EnableDragSelect(state, ui) end

---@param state boolean
---@param ui boolean
---@return void
function Native.EnablePreSelect(state, ui) end

---@param state boolean
---@param ui boolean
---@return void
function Native.EnableSelect(state, ui) end

---@param trackableModelPath string
---@param x float
---@param y float
---@param facing float
---@return trackable
function Native.CreateTrackable(trackableModelPath, x, y, facing) end

---@return quest
function Native.CreateQuest() end

---@param quest quest
---@return void
function Native.DestroyQuest(quest) end

---@param quest quest
---@param title string
---@return void
function Native.QuestSetTitle(quest, title) end

---@param quest quest
---@param description string
---@return void
function Native.QuestSetDescription(quest, description) end

---@param quest quest
---@param iconPath string
---@return void
function Native.QuestSetIconPath(quest, iconPath) end

---@param quest quest
---@param required boolean
---@return void
function Native.QuestSetRequired(quest, required) end

---@param quest quest
---@param completed boolean
---@return void
function Native.QuestSetCompleted(quest, completed) end

---@param quest quest
---@param discovered boolean
---@return void
function Native.QuestSetDiscovered(quest, discovered) end

---@param quest quest
---@param failed boolean
---@return void
function Native.QuestSetFailed(quest, failed) end

---@param quest quest
---@param enabled boolean
---@return void
function Native.QuestSetEnabled(quest, enabled) end

---@param quest quest
---@return boolean
function Native.IsQuestRequired(quest) end

---@param quest quest
---@return boolean
function Native.IsQuestCompleted(quest) end

---@param quest quest
---@return boolean
function Native.IsQuestDiscovered(quest) end

---@param quest quest
---@return boolean
function Native.IsQuestFailed(quest) end

---@param quest quest
---@return boolean
function Native.IsQuestEnabled(quest) end

---@param quest quest
---@return questitem
function Native.QuestCreateItem(quest) end

---@param questItem questitem
---@param description string
---@return void
function Native.QuestItemSetDescription(questItem, description) end

---@param questItem questitem
---@param completed boolean
---@return void
function Native.QuestItemSetCompleted(questItem, completed) end

---@param questItem questitem
---@return boolean
function Native.IsQuestItemCompleted(questItem) end

---@return defeatcondition
function Native.CreateDefeatCondition() end

---@param condition defeatcondition
---@return void
function Native.DestroyDefeatCondition(condition) end

---@param condition defeatcondition
---@param description string
---@return void
function Native.DefeatConditionSetDescription(condition, description) end

---@return void
function Native.FlashQuestDialogButton() end

---@return void
function Native.ForceQuestDialogUpdate() end

---@param t timer
---@return timerdialog
function Native.CreateTimerDialog(t) end

---@param dialog timerdialog
---@return void
function Native.DestroyTimerDialog(dialog) end

---@param dialog timerdialog
---@param title string
---@return void
function Native.TimerDialogSetTitle(dialog, title) end

---@param dialog timerdialog
---@param red integer
---@param green integer
---@param blue integer
---@param alpha integer
---@return void
function Native.TimerDialogSetTitleColor(dialog, red, green, blue, alpha) end

---@param dialog timerdialog
---@param red integer
---@param green integer
---@param blue integer
---@param alpha integer
---@return void
function Native.TimerDialogSetTimeColor(dialog, red, green, blue, alpha) end

---@param dialog timerdialog
---@param speedMultFactor float
---@return void
function Native.TimerDialogSetSpeed(dialog, speedMultFactor) end

---@param dialog timerdialog
---@param display boolean
---@return void
function Native.TimerDialogDisplay(dialog, display) end

---@param dialog timerdialog
---@return boolean
function Native.IsTimerDialogDisplayed(dialog) end

---@param dialog timerdialog
---@param timeRemaining float
---@return void
function Native.TimerDialogSetRealTimeRemaining(dialog, timeRemaining) end

---@return leaderboard
function Native.CreateLeaderboard() end

---@param lb leaderboard
---@return void
function Native.DestroyLeaderboard(lb) end

---@param lb leaderboard
---@param show boolean
---@return void
function Native.LeaderboardDisplay(lb, show) end

---@param lb leaderboard
---@return boolean
function Native.IsLeaderboardDisplayed(lb) end

---@param lb leaderboard
---@return integer
function Native.LeaderboardGetItemCount(lb) end

---@param lb leaderboard
---@param count integer
---@return void
function Native.LeaderboardSetSizeByItemCount(lb, count) end

---@param lb leaderboard
---@param label string
---@param value integer
---@param p player
---@return void
function Native.LeaderboardAddItem(lb, label, value, p) end

---@param lb leaderboard
---@param index integer
---@return void
function Native.LeaderboardRemoveItem(lb, index) end

---@param lb leaderboard
---@param p player
---@return void
function Native.LeaderboardRemovePlayerItem(lb, p) end

---@param lb leaderboard
---@return void
function Native.LeaderboardClear(lb) end

---@param lb leaderboard
---@param ascending boolean
---@return void
function Native.LeaderboardSortItemsByValue(lb, ascending) end

---@param lb leaderboard
---@param ascending boolean
---@return void
function Native.LeaderboardSortItemsByPlayer(lb, ascending) end

---@param lb leaderboard
---@param ascending boolean
---@return void
function Native.LeaderboardSortItemsByLabel(lb, ascending) end

---@param lb leaderboard
---@param p player
---@return boolean
function Native.LeaderboardHasPlayerItem(lb, p) end

---@param lb leaderboard
---@param p player
---@return integer
function Native.LeaderboardGetPlayerIndex(lb, p) end

---@param lb leaderboard
---@param label string
---@return void
function Native.LeaderboardSetLabel(lb, label) end

---@param lb leaderboard
---@return string
function Native.LeaderboardGetLabelText(lb) end

---@param toPlayer player
---@param lb leaderboard
---@return void
function Native.PlayerSetLeaderboard(toPlayer, lb) end

---@param toPlayer player
---@return leaderboard
function Native.PlayerGetLeaderboard(toPlayer) end

---@param lb leaderboard
---@param red integer
---@param green integer
---@param blue integer
---@param alpha integer
---@return void
function Native.LeaderboardSetLabelColor(lb, red, green, blue, alpha) end

---@param lb leaderboard
---@param red integer
---@param green integer
---@param blue integer
---@param alpha integer
---@return void
function Native.LeaderboardSetValueColor(lb, red, green, blue, alpha) end

---@param lb leaderboard
---@param showLabel boolean
---@param showNames boolean
---@param showValues boolean
---@param showIcons boolean
---@return void
function Native.LeaderboardSetStyle(lb, showLabel, showNames, showValues, showIcons) end

---@param lb leaderboard
---@param item integer
---@param val integer
---@return void
function Native.LeaderboardSetItemValue(lb, item, val) end

---@param lb leaderboard
---@param item integer
---@param val string
---@return void
function Native.LeaderboardSetItemLabel(lb, item, val) end

---@param lb leaderboard
---@param item integer
---@param showLabel boolean
---@param showValue boolean
---@param showIcon boolean
---@return void
function Native.LeaderboardSetItemStyle(lb, item, showLabel, showValue, showIcon) end

---@param lb leaderboard
---@param item integer
---@param red integer
---@param green integer
---@param blue integer
---@param alpha integer
---@return void
function Native.LeaderboardSetItemLabelColor(lb, item, red, green, blue, alpha) end

---@param lb leaderboard
---@param item integer
---@param red integer
---@param green integer
---@param blue integer
---@param alpha integer
---@return void
function Native.LeaderboardSetItemValueColor(lb, item, red, green, blue, alpha) end

---@return multiboard
function Native.CreateMultiboard() end

---@param lb multiboard
---@return void
function Native.DestroyMultiboard(lb) end

---@param lb multiboard
---@param show boolean
---@return void
function Native.MultiboardDisplay(lb, show) end

---@param lb multiboard
---@return boolean
function Native.IsMultiboardDisplayed(lb) end

---@param lb multiboard
---@param minimize boolean
---@return void
function Native.MultiboardMinimize(lb, minimize) end

---@param lb multiboard
---@return boolean
function Native.IsMultiboardMinimized(lb) end

---@param lb multiboard
---@return void
function Native.MultiboardClear(lb) end

---@param lb multiboard
---@param label string
---@return void
function Native.MultiboardSetTitleText(lb, label) end

---@param lb multiboard
---@return string
function Native.MultiboardGetTitleText(lb) end

---@param lb multiboard
---@param red integer
---@param green integer
---@param blue integer
---@param alpha integer
---@return void
function Native.MultiboardSetTitleTextColor(lb, red, green, blue, alpha) end

---@param lb multiboard
---@return integer
function Native.MultiboardGetRowCount(lb) end

---@param lb multiboard
---@return integer
function Native.MultiboardGetColumnCount(lb) end

---@param lb multiboard
---@param count integer
---@return void
function Native.MultiboardSetColumnCount(lb, count) end

---@param lb multiboard
---@param count integer
---@return void
function Native.MultiboardSetRowCount(lb, count) end

---@param lb multiboard
---@param showValues boolean
---@param showIcons boolean
---@return void
function Native.MultiboardSetItemsStyle(lb, showValues, showIcons) end

---@param lb multiboard
---@param value string
---@return void
function Native.MultiboardSetItemsValue(lb, value) end

---@param lb multiboard
---@param red integer
---@param green integer
---@param blue integer
---@param alpha integer
---@return void
function Native.MultiboardSetItemsValueColor(lb, red, green, blue, alpha) end

---@param lb multiboard
---@param width float
---@return void
function Native.MultiboardSetItemsWidth(lb, width) end

---@param lb multiboard
---@param iconPath string
---@return void
function Native.MultiboardSetItemsIcon(lb, iconPath) end

---@param lb multiboard
---@param row integer
---@param column integer
---@return multiboarditem
function Native.MultiboardGetItem(lb, row, column) end

---@param mbi multiboarditem
---@return void
function Native.MultiboardReleaseItem(mbi) end

---@param mbi multiboarditem
---@param showValue boolean
---@param showIcon boolean
---@return void
function Native.MultiboardSetItemStyle(mbi, showValue, showIcon) end

---@param mbi multiboarditem
---@param val string
---@return void
function Native.MultiboardSetItemValue(mbi, val) end

---@param mbi multiboarditem
---@param red integer
---@param green integer
---@param blue integer
---@param alpha integer
---@return void
function Native.MultiboardSetItemValueColor(mbi, red, green, blue, alpha) end

---@param mbi multiboarditem
---@param width float
---@return void
function Native.MultiboardSetItemWidth(mbi, width) end

---@param mbi multiboarditem
---@param iconFileName string
---@return void
function Native.MultiboardSetItemIcon(mbi, iconFileName) end

---@param flag boolean
---@return void
function Native.MultiboardSuppressDisplay(flag) end

---@param x float
---@param y float
---@return void
function Native.SetCameraPosition(x, y) end

---@param x float
---@param y float
---@return void
function Native.SetCameraQuickPosition(x, y) end

---@param x1 float
---@param y1 float
---@param x2 float
---@param y2 float
---@param x3 float
---@param y3 float
---@param x4 float
---@param y4 float
---@return void
function Native.SetCameraBounds(x1, y1, x2, y2, x3, y3, x4, y4) end

---@return void
function Native.StopCamera() end

---@param duration float
---@return void
function Native.ResetToGameCamera(duration) end

---@param x float
---@param y float
---@return void
function Native.PanCameraTo(x, y) end

---@param x float
---@param y float
---@param duration float
---@return void
function Native.PanCameraToTimed(x, y, duration) end

---@param x float
---@param y float
---@param zOffsetDest float
---@return void
function Native.PanCameraToWithZ(x, y, zOffsetDest) end

---@param x float
---@param y float
---@param zOffsetDest float
---@param duration float
---@return void
function Native.PanCameraToTimedWithZ(x, y, zOffsetDest, duration) end

---@param cameraModelFile string
---@return void
function Native.SetCinematicCamera(cameraModelFile) end

---@param x float
---@param y float
---@param radiansToSweep float
---@param duration float
---@return void
function Native.SetCameraRotateMode(x, y, radiansToSweep, duration) end

---@param field camerafield
---@param value float
---@param duration float
---@return void
function Native.SetCameraField(field, value, duration) end

---@param field camerafield
---@param offset float
---@param duration float
---@return void
function Native.AdjustCameraField(field, offset, duration) end

---@param unit unit
---@param xoffset float
---@param yoffset float
---@param inheritOrientation boolean
---@return void
function Native.SetCameraTargetController(unit, xoffset, yoffset, inheritOrientation) end

---@param unit unit
---@param xoffset float
---@param yoffset float
---@return void
function Native.SetCameraOrientController(unit, xoffset, yoffset) end

---@return camerasetup
function Native.CreateCameraSetup() end

---@param setup camerasetup
---@param field camerafield
---@param value float
---@param duration float
---@return void
function Native.CameraSetupSetField(setup, field, value, duration) end

---@param setup camerasetup
---@param field camerafield
---@return float
function Native.CameraSetupGetField(setup, field) end

---@param setup camerasetup
---@param x float
---@param y float
---@param duration float
---@return void
function Native.CameraSetupSetDestPosition(setup, x, y, duration) end

---@param setup camerasetup
---@return location
function Native.CameraSetupGetDestPositionLoc(setup) end

---@param setup camerasetup
---@return float
function Native.CameraSetupGetDestPositionX(setup) end

---@param setup camerasetup
---@return float
function Native.CameraSetupGetDestPositionY(setup) end

---@param setup camerasetup
---@param doPan boolean
---@param panTimed boolean
---@return void
function Native.CameraSetupApply(setup, doPan, panTimed) end

---@param setup camerasetup
---@param zDestOffset float
---@return void
function Native.CameraSetupApplyWithZ(setup, zDestOffset) end

---@param setup camerasetup
---@param doPan boolean
---@param forceDuration float
---@return void
function Native.CameraSetupApplyForceDuration(setup, doPan, forceDuration) end

---@param setup camerasetup
---@param zDestOffset float
---@param forceDuration float
---@return void
function Native.CameraSetupApplyForceDurationWithZ(setup, zDestOffset, forceDuration) end

---@param setup camerasetup
---@param label string
---@return void
function Native.BlzCameraSetupSetLabel(setup, label) end

---@param setup camerasetup
---@return string
function Native.BlzCameraSetupGetLabel(setup) end

---@param mag float
---@param velocity float
---@return void
function Native.CameraSetTargetNoise(mag, velocity) end

---@param mag float
---@param velocity float
---@return void
function Native.CameraSetSourceNoise(mag, velocity) end

---@param mag float
---@param velocity float
---@param vertOnly boolean
---@return void
function Native.CameraSetTargetNoiseEx(mag, velocity, vertOnly) end

---@param mag float
---@param velocity float
---@param vertOnly boolean
---@return void
function Native.CameraSetSourceNoiseEx(mag, velocity, vertOnly) end

---@param factor float
---@return void
function Native.CameraSetSmoothingFactor(factor) end

---@param distance float
---@return void
function Native.CameraSetFocalDistance(distance) end

---@param scale float
---@return void
function Native.CameraSetDepthOfFieldScale(scale) end

---@param filename string
---@return void
function Native.SetCineFilterTexture(filename) end

---@param mode blendmode
---@return void
function Native.SetCineFilterBlendMode(mode) end

---@param flags texmapflags
---@return void
function Native.SetCineFilterTexMapFlags(flags) end

---@param minu float
---@param minv float
---@param maxu float
---@param maxv float
---@return void
function Native.SetCineFilterStartUV(minu, minv, maxu, maxv) end

---@param minu float
---@param minv float
---@param maxu float
---@param maxv float
---@return void
function Native.SetCineFilterEndUV(minu, minv, maxu, maxv) end

---@param red integer
---@param green integer
---@param blue integer
---@param alpha integer
---@return void
function Native.SetCineFilterStartColor(red, green, blue, alpha) end

---@param red integer
---@param green integer
---@param blue integer
---@param alpha integer
---@return void
function Native.SetCineFilterEndColor(red, green, blue, alpha) end

---@param duration float
---@return void
function Native.SetCineFilterDuration(duration) end

---@param flag boolean
---@return void
function Native.DisplayCineFilter(flag) end

---@return boolean
function Native.IsCineFilterDisplayed() end

---@param portraitUnitId integer
---@param color playercolor
---@param speakerTitle string
---@param text string
---@param sceneDuration float
---@param voiceoverDuration float
---@return void
function Native.SetCinematicScene(portraitUnitId, color, speakerTitle, text, sceneDuration, voiceoverDuration) end

---@return void
function Native.EndCinematicScene() end

---@param flag boolean
---@return void
function Native.ForceCinematicSubtitles(flag) end

---@param cinematicAudio boolean
---@return void
function Native.SetCinematicAudio(cinematicAudio) end

---@param margin integer
---@return float
function Native.GetCameraMargin(margin) end

---@return float
function Native.GetCameraBoundMinX() end

---@return float
function Native.GetCameraBoundMinY() end

---@return float
function Native.GetCameraBoundMaxX() end

---@return float
function Native.GetCameraBoundMaxY() end

---@param field camerafield
---@return float
function Native.GetCameraField(field) end

---@return float
function Native.GetCameraTargetPositionX() end

---@return float
function Native.GetCameraTargetPositionY() end

---@return float
function Native.GetCameraTargetPositionZ() end

---@return location
function Native.GetCameraTargetPositionLoc() end

---@return float
function Native.GetCameraEyePositionX() end

---@return float
function Native.GetCameraEyePositionY() end

---@return float
function Native.GetCameraEyePositionZ() end

---@return location
function Native.GetCameraEyePositionLoc() end

---@param environmentName string
---@return void
function Native.NewSoundEnvironment(environmentName) end

---@param fileName string
---@param looping boolean
---@param is3D boolean
---@param stopwhenoutofrange boolean
---@param fadeInRate integer
---@param fadeOutRate integer
---@param eaxSetting string
---@return sound
function Native.CreateSound(fileName, looping, is3D, stopwhenoutofrange, fadeInRate, fadeOutRate, eaxSetting) end

---@param fileName string
---@param looping boolean
---@param is3D boolean
---@param stopwhenoutofrange boolean
---@param fadeInRate integer
---@param fadeOutRate integer
---@param SLKEntryName string
---@return sound
function Native.CreateSoundFilenameWithLabel(fileName, looping, is3D, stopwhenoutofrange, fadeInRate, fadeOutRate, SLKEntryName) end

---@param soundLabel string
---@param looping boolean
---@param is3D boolean
---@param stopwhenoutofrange boolean
---@param fadeInRate integer
---@param fadeOutRate integer
---@return sound
function Native.CreateSoundFromLabel(soundLabel, looping, is3D, stopwhenoutofrange, fadeInRate, fadeOutRate) end

---@param soundLabel string
---@param fadeInRate integer
---@param fadeOutRate integer
---@return sound
function Native.CreateMIDISound(soundLabel, fadeInRate, fadeOutRate) end

---@param soundHandle sound
---@param soundLabel string
---@return void
function Native.SetSoundParamsFromLabel(soundHandle, soundLabel) end

---@param soundHandle sound
---@param cutoff float
---@return void
function Native.SetSoundDistanceCutoff(soundHandle, cutoff) end

---@param soundHandle sound
---@param channel integer
---@return void
function Native.SetSoundChannel(soundHandle, channel) end

---@param soundHandle sound
---@param volume integer
---@return void
function Native.SetSoundVolume(soundHandle, volume) end

---@param soundHandle sound
---@param pitch float
---@return void
function Native.SetSoundPitch(soundHandle, pitch) end

---@param soundHandle sound
---@param millisecs integer
---@return void
function Native.SetSoundPlayPosition(soundHandle, millisecs) end

---@param soundHandle sound
---@param minDist float
---@param maxDist float
---@return void
function Native.SetSoundDistances(soundHandle, minDist, maxDist) end

---@param soundHandle sound
---@param inside float
---@param outside float
---@param outsideVolume integer
---@return void
function Native.SetSoundConeAngles(soundHandle, inside, outside, outsideVolume) end

---@param soundHandle sound
---@param x float
---@param y float
---@param z float
---@return void
function Native.SetSoundConeOrientation(soundHandle, x, y, z) end

---@param soundHandle sound
---@param x float
---@param y float
---@param z float
---@return void
function Native.SetSoundPosition(soundHandle, x, y, z) end

---@param soundHandle sound
---@param x float
---@param y float
---@param z float
---@return void
function Native.SetSoundVelocity(soundHandle, x, y, z) end

---@param soundHandle sound
---@param unit unit
---@return void
function Native.AttachSoundToUnit(soundHandle, unit) end

---@param soundHandle sound
---@return void
function Native.StartSound(soundHandle) end

---@param soundHandle sound
---@param killWhenDone boolean
---@param fadeOut boolean
---@return void
function Native.StopSound(soundHandle, killWhenDone, fadeOut) end

---@param soundHandle sound
---@return void
function Native.KillSoundWhenDone(soundHandle) end

---@param musicName string
---@param random boolean
---@param index integer
---@return void
function Native.SetMapMusic(musicName, random, index) end

---@return void
function Native.ClearMapMusic() end

---@param musicName string
---@return void
function Native.PlayMusic(musicName) end

---@param musicName string
---@param frommsecs integer
---@param fadeinmsecs integer
---@return void
function Native.PlayMusicEx(musicName, frommsecs, fadeinmsecs) end

---@param fadeOut boolean
---@return void
function Native.StopMusic(fadeOut) end

---@return void
function Native.ResumeMusic() end

---@param musicFileName string
---@return void
function Native.PlayThematicMusic(musicFileName) end

---@param musicFileName string
---@param frommsecs integer
---@return void
function Native.PlayThematicMusicEx(musicFileName, frommsecs) end

---@return void
function Native.EndThematicMusic() end

---@param volume integer
---@return void
function Native.SetMusicVolume(volume) end

---@param millisecs integer
---@return void
function Native.SetMusicPlayPosition(millisecs) end

---@param volume integer
---@return void
function Native.SetThematicMusicVolume(volume) end

---@param millisecs integer
---@return void
function Native.SetThematicMusicPlayPosition(millisecs) end

---@param soundHandle sound
---@param duration integer
---@return void
function Native.SetSoundDuration(soundHandle, duration) end

---@param soundHandle sound
---@return integer
function Native.GetSoundDuration(soundHandle) end

---@param musicFileName string
---@return integer
function Native.GetSoundFileDuration(musicFileName) end

---@param vgroup volumegroup
---@param scale float
---@return void
function Native.VolumeGroupSetVolume(vgroup, scale) end

---@return void
function Native.VolumeGroupReset() end

---@param soundHandle sound
---@return boolean
function Native.GetSoundIsPlaying(soundHandle) end

---@param soundHandle sound
---@return boolean
function Native.GetSoundIsLoading(soundHandle) end

---@param soundHandle sound
---@param byPosition boolean
---@param rectwidth float
---@param rectheight float
---@return void
function Native.RegisterStackedSound(soundHandle, byPosition, rectwidth, rectheight) end

---@param soundHandle sound
---@param byPosition boolean
---@param rectwidth float
---@param rectheight float
---@return void
function Native.UnregisterStackedSound(soundHandle, byPosition, rectwidth, rectheight) end

---@param soundHandle sound
---@param animationLabel string
---@return boolean
function Native.SetSoundFacialAnimationLabel(soundHandle, animationLabel) end

---@param soundHandle sound
---@param groupLabel string
---@return boolean
function Native.SetSoundFacialAnimationGroupLabel(soundHandle, groupLabel) end

---@param soundHandle sound
---@param animationSetFilepath string
---@return boolean
function Native.SetSoundFacialAnimationSetFilepath(soundHandle, animationSetFilepath) end

---@param soundHandle sound
---@param speakerName string
---@return boolean
function Native.SetDialogueSpeakerNameKey(soundHandle, speakerName) end

---@param soundHandle sound
---@return string
function Native.GetDialogueSpeakerNameKey(soundHandle) end

---@param soundHandle sound
---@param dialogueText string
---@return boolean
function Native.SetDialogueTextKey(soundHandle, dialogueText) end

---@param soundHandle sound
---@return string
function Native.GetDialogueTextKey(soundHandle) end

---@param where rect
---@param effectID integer
---@return weathereffect
function Native.AddWeatherEffect(where, effectID) end

---@param effect weathereffect
---@return void
function Native.RemoveWeatherEffect(effect) end

---@param effect weathereffect
---@param enable boolean
---@return void
function Native.EnableWeatherEffect(effect, enable) end

---@param x float
---@param y float
---@param radius float
---@param depth float
---@param duration integer
---@param permanent boolean
---@return terraindeformation
function Native.TerrainDeformCrater(x, y, radius, depth, duration, permanent) end

---@param x float
---@param y float
---@param radius float
---@param depth float
---@param duration integer
---@param count integer
---@param spaceWaves float
---@param timeWaves float
---@param radiusStartPct float
---@param limitNeg boolean
---@return terraindeformation
function Native.TerrainDeformRipple(x, y, radius, depth, duration, count, spaceWaves, timeWaves, radiusStartPct, limitNeg) end

---@param x float
---@param y float
---@param dirX float
---@param dirY float
---@param distance float
---@param speed float
---@param radius float
---@param depth float
---@param trailTime integer
---@param count integer
---@return terraindeformation
function Native.TerrainDeformWave(x, y, dirX, dirY, distance, speed, radius, depth, trailTime, count) end

---@param x float
---@param y float
---@param radius float
---@param minDelta float
---@param maxDelta float
---@param duration integer
---@param updateInterval integer
---@return terraindeformation
function Native.TerrainDeformRandom(x, y, radius, minDelta, maxDelta, duration, updateInterval) end

---@param deformation terraindeformation
---@param duration integer
---@return void
function Native.TerrainDeformStop(deformation, duration) end

---@return void
function Native.TerrainDeformStopAll() end

---@param modelName string
---@param x float
---@param y float
---@return effect
function Native.AddSpecialEffect(modelName, x, y) end

---@param modelName string
---@param where location
---@return effect
function Native.AddSpecialEffectLoc(modelName, where) end

---@param modelName string
---@param targetWidget widget
---@param attachPointName string
---@return effect
function Native.AddSpecialEffectTarget(modelName, targetWidget, attachPointName) end

---@param effect effect
---@return void
function Native.DestroyEffect(effect) end

---@param abilityString string
---@param t effecttype
---@param x float
---@param y float
---@return effect
function Native.AddSpellEffect(abilityString, t, x, y) end

---@param abilityString string
---@param t effecttype
---@param where location
---@return effect
function Native.AddSpellEffectLoc(abilityString, t, where) end

---@param abilityId integer
---@param t effecttype
---@param x float
---@param y float
---@return effect
function Native.AddSpellEffectById(abilityId, t, x, y) end

---@param abilityId integer
---@param t effecttype
---@param where location
---@return effect
function Native.AddSpellEffectByIdLoc(abilityId, t, where) end

---@param modelName string
---@param t effecttype
---@param targetWidget widget
---@param attachPoint string
---@return effect
function Native.AddSpellEffectTarget(modelName, t, targetWidget, attachPoint) end

---@param abilityId integer
---@param t effecttype
---@param targetWidget widget
---@param attachPoint string
---@return effect
function Native.AddSpellEffectTargetById(abilityId, t, targetWidget, attachPoint) end

---@param codeName string
---@param checkVisibility boolean
---@param x1 float
---@param y1 float
---@param x2 float
---@param y2 float
---@return lightning
function Native.AddLightning(codeName, checkVisibility, x1, y1, x2, y2) end

---@param codeName string
---@param checkVisibility boolean
---@param x1 float
---@param y1 float
---@param z1 float
---@param x2 float
---@param y2 float
---@param z2 float
---@return lightning
function Native.AddLightningEx(codeName, checkVisibility, x1, y1, z1, x2, y2, z2) end

---@param bolt lightning
---@return boolean
function Native.DestroyLightning(bolt) end

---@param bolt lightning
---@param checkVisibility boolean
---@param x1 float
---@param y1 float
---@param x2 float
---@param y2 float
---@return boolean
function Native.MoveLightning(bolt, checkVisibility, x1, y1, x2, y2) end

---@param bolt lightning
---@param checkVisibility boolean
---@param x1 float
---@param y1 float
---@param z1 float
---@param x2 float
---@param y2 float
---@param z2 float
---@return boolean
function Native.MoveLightningEx(bolt, checkVisibility, x1, y1, z1, x2, y2, z2) end

---@param bolt lightning
---@return float
function Native.GetLightningColorA(bolt) end

---@param bolt lightning
---@return float
function Native.GetLightningColorR(bolt) end

---@param bolt lightning
---@return float
function Native.GetLightningColorG(bolt) end

---@param bolt lightning
---@return float
function Native.GetLightningColorB(bolt) end

---@param bolt lightning
---@param r float
---@param g float
---@param b float
---@param a float
---@return boolean
function Native.SetLightningColor(bolt, r, g, b, a) end

---@param abilityString string
---@param t effecttype
---@param index integer
---@return string
function Native.GetAbilityEffect(abilityString, t, index) end

---@param abilityId integer
---@param t effecttype
---@param index integer
---@return string
function Native.GetAbilityEffectById(abilityId, t, index) end

---@param abilityString string
---@param t soundtype
---@return string
function Native.GetAbilitySound(abilityString, t) end

---@param abilityId integer
---@param t soundtype
---@return string
function Native.GetAbilitySoundById(abilityId, t) end

---@param x float
---@param y float
---@return integer
function Native.GetTerrainCliffLevel(x, y) end

---@param red integer
---@param green integer
---@param blue integer
---@param alpha integer
---@return void
function Native.SetWaterBaseColor(red, green, blue, alpha) end

---@param val boolean
---@return void
function Native.SetWaterDeforms(val) end

---@param x float
---@param y float
---@return integer
function Native.GetTerrainType(x, y) end

---@param x float
---@param y float
---@return integer
function Native.GetTerrainVariance(x, y) end

---@param x float
---@param y float
---@param terrainType integer
---@param variation integer
---@param area integer
---@param shape integer
---@return void
function Native.SetTerrainType(x, y, terrainType, variation, area, shape) end

---@param x float
---@param y float
---@param t pathingtype
---@return boolean
function Native.IsTerrainPathable(x, y, t) end

---@param x float
---@param y float
---@param t pathingtype
---@param flag boolean
---@return void
function Native.SetTerrainPathable(x, y, t, flag) end

---@param file string
---@param sizeX float
---@param sizeY float
---@param sizeZ float
---@param posX float
---@param posY float
---@param posZ float
---@param originX float
---@param originY float
---@param originZ float
---@param imageType integer
---@return image
function Native.CreateImage(file, sizeX, sizeY, sizeZ, posX, posY, posZ, originX, originY, originZ, imageType) end

---@param image image
---@return void
function Native.DestroyImage(image) end

---@param image image
---@param flag boolean
---@return void
function Native.ShowImage(image, flag) end

---@param image image
---@param flag boolean
---@param height float
---@return void
function Native.SetImageConstantHeight(image, flag, height) end

---@param image image
---@param x float
---@param y float
---@param z float
---@return void
function Native.SetImagePosition(image, x, y, z) end

---@param image image
---@param red integer
---@param green integer
---@param blue integer
---@param alpha integer
---@return void
function Native.SetImageColor(image, red, green, blue, alpha) end

---@param image image
---@param flag boolean
---@return void
function Native.SetImageRender(image, flag) end

---@param image image
---@param flag boolean
---@return void
function Native.SetImageRenderAlways(image, flag) end

---@param image image
---@param flag boolean
---@param useWaterAlpha boolean
---@return void
function Native.SetImageAboveWater(image, flag, useWaterAlpha) end

---@param image image
---@param imageType integer
---@return void
function Native.SetImageType(image, imageType) end

---@param x float
---@param y float
---@param name string
---@param red integer
---@param green integer
---@param blue integer
---@param alpha integer
---@param forcePaused boolean
---@param noBirthTime boolean
---@return ubersplat
function Native.CreateUbersplat(x, y, name, red, green, blue, alpha, forcePaused, noBirthTime) end

---@param splat ubersplat
---@return void
function Native.DestroyUbersplat(splat) end

---@param splat ubersplat
---@return void
function Native.ResetUbersplat(splat) end

---@param splat ubersplat
---@return void
function Native.FinishUbersplat(splat) end

---@param splat ubersplat
---@param flag boolean
---@return void
function Native.ShowUbersplat(splat, flag) end

---@param splat ubersplat
---@param flag boolean
---@return void
function Native.SetUbersplatRender(splat, flag) end

---@param splat ubersplat
---@param flag boolean
---@return void
function Native.SetUbersplatRenderAlways(splat, flag) end

---@param player player
---@param x float
---@param y float
---@param radius float
---@param addBlight boolean
---@return void
function Native.SetBlight(player, x, y, radius, addBlight) end

---@param player player
---@param r rect
---@param addBlight boolean
---@return void
function Native.SetBlightRect(player, r, addBlight) end

---@param player player
---@param x float
---@param y float
---@param addBlight boolean
---@return void
function Native.SetBlightPoint(player, x, y, addBlight) end

---@param player player
---@param loc location
---@param radius float
---@param addBlight boolean
---@return void
function Native.SetBlightLoc(player, loc, radius, addBlight) end

---@param id player
---@param x float
---@param y float
---@param face float
---@return unit
function Native.CreateBlightedGoldmine(id, x, y, face) end

---@param x float
---@param y float
---@return boolean
function Native.IsPointBlighted(x, y) end

---@param x float
---@param y float
---@param radius float
---@param doodadID integer
---@param nearestOnly boolean
---@param animName string
---@param animRandom boolean
---@return void
function Native.SetDoodadAnimation(x, y, radius, doodadID, nearestOnly, animName, animRandom) end

---@param r rect
---@param doodadID integer
---@param animName string
---@param animRandom boolean
---@return void
function Native.SetDoodadAnimationRect(r, doodadID, animName, animRandom) end

---@param num player
---@param script string
---@return void
function Native.StartMeleeAI(num, script) end

---@param num player
---@param script string
---@return void
function Native.StartCampaignAI(num, script) end

---@param num player
---@param command integer
---@param data integer
---@return void
function Native.CommandAI(num, command, data) end

---@param p player
---@param pause boolean
---@return void
function Native.PauseCompAI(p, pause) end

---@param num player
---@return aidifficulty
function Native.GetAIDifficulty(num) end

---@param hUnit unit
---@return void
function Native.RemoveGuardPosition(hUnit) end

---@param hUnit unit
---@return void
function Native.RecycleGuardPosition(hUnit) end

---@param num player
---@return void
function Native.RemoveAllGuardPositions(num) end

---@param cheatStr string
---@return void
function Native.Cheat(cheatStr) end

---@return boolean
function Native.IsNoVictoryCheat() end

---@return boolean
function Native.IsNoDefeatCheat() end

---@param filename string
---@return void
function Native.Preload(filename) end

---@param timeout float
---@return void
function Native.PreloadEnd(timeout) end

---@return void
function Native.PreloadStart() end

---@return void
function Native.PreloadRefresh() end

---@return void
function Native.PreloadEndEx() end

---@return void
function Native.PreloadGenClear() end

---@return void
function Native.PreloadGenStart() end

---@param filename string
---@return void
function Native.PreloadGenEnd(filename) end

---@param filename string
---@return void
function Native.Preloader(filename) end

---@param enable boolean
---@return void
function Native.BlzHideCinematicPanels(enable) end

---@param testType string
---@return void
function Native.AutomationSetTestType(testType) end

---@param testName string
---@return void
function Native.AutomationTestStart(testName) end

---@return void
function Native.AutomationTestEnd() end

---@return void
function Native.AutomationTestingFinished() end

---@return float
function Native.BlzGetTriggerPlayerMouseX() end

---@return float
function Native.BlzGetTriggerPlayerMouseY() end

---@return location
function Native.BlzGetTriggerPlayerMousePosition() end

---@return mousebuttontype
function Native.BlzGetTriggerPlayerMouseButton() end

---@param abilCode integer
---@param tooltip string
---@param level integer
---@return void
function Native.BlzSetAbilityTooltip(abilCode, tooltip, level) end

---@param abilCode integer
---@param tooltip string
---@param level integer
---@return void
function Native.BlzSetAbilityActivatedTooltip(abilCode, tooltip, level) end

---@param abilCode integer
---@param extendedTooltip string
---@param level integer
---@return void
function Native.BlzSetAbilityExtendedTooltip(abilCode, extendedTooltip, level) end

---@param abilCode integer
---@param extendedTooltip string
---@param level integer
---@return void
function Native.BlzSetAbilityActivatedExtendedTooltip(abilCode, extendedTooltip, level) end

---@param abilCode integer
---@param researchTooltip string
---@param level integer
---@return void
function Native.BlzSetAbilityResearchTooltip(abilCode, researchTooltip, level) end

---@param abilCode integer
---@param researchExtendedTooltip string
---@param level integer
---@return void
function Native.BlzSetAbilityResearchExtendedTooltip(abilCode, researchExtendedTooltip, level) end

---@param abilCode integer
---@param level integer
---@return string
function Native.BlzGetAbilityTooltip(abilCode, level) end

---@param abilCode integer
---@param level integer
---@return string
function Native.BlzGetAbilityActivatedTooltip(abilCode, level) end

---@param abilCode integer
---@param level integer
---@return string
function Native.BlzGetAbilityExtendedTooltip(abilCode, level) end

---@param abilCode integer
---@param level integer
---@return string
function Native.BlzGetAbilityActivatedExtendedTooltip(abilCode, level) end

---@param abilCode integer
---@param level integer
---@return string
function Native.BlzGetAbilityResearchTooltip(abilCode, level) end

---@param abilCode integer
---@param level integer
---@return string
function Native.BlzGetAbilityResearchExtendedTooltip(abilCode, level) end

---@param abilCode integer
---@param iconPath string
---@return void
function Native.BlzSetAbilityIcon(abilCode, iconPath) end

---@param abilCode integer
---@return string
function Native.BlzGetAbilityIcon(abilCode) end

---@param abilCode integer
---@param iconPath string
---@return void
function Native.BlzSetAbilityActivatedIcon(abilCode, iconPath) end

---@param abilCode integer
---@return string
function Native.BlzGetAbilityActivatedIcon(abilCode) end

---@param abilCode integer
---@return integer
function Native.BlzGetAbilityPosX(abilCode) end

---@param abilCode integer
---@return integer
function Native.BlzGetAbilityPosY(abilCode) end

---@param abilCode integer
---@param x integer
---@return void
function Native.BlzSetAbilityPosX(abilCode, x) end

---@param abilCode integer
---@param y integer
---@return void
function Native.BlzSetAbilityPosY(abilCode, y) end

---@param abilCode integer
---@return integer
function Native.BlzGetAbilityActivatedPosX(abilCode) end

---@param abilCode integer
---@return integer
function Native.BlzGetAbilityActivatedPosY(abilCode) end

---@param abilCode integer
---@param x integer
---@return void
function Native.BlzSetAbilityActivatedPosX(abilCode, x) end

---@param abilCode integer
---@param y integer
---@return void
function Native.BlzSetAbilityActivatedPosY(abilCode, y) end

---@param unit unit
---@return integer
function Native.BlzGetUnitMaxHP(unit) end

---@param unit unit
---@param hp integer
---@return void
function Native.BlzSetUnitMaxHP(unit, hp) end

---@param unit unit
---@return integer
function Native.BlzGetUnitMaxMana(unit) end

---@param unit unit
---@param mana integer
---@return void
function Native.BlzSetUnitMaxMana(unit, mana) end

---@param item item
---@param name string
---@return void
function Native.BlzSetItemName(item, name) end

---@param item item
---@param description string
---@return void
function Native.BlzSetItemDescription(item, description) end

---@param item item
---@return string
function Native.BlzGetItemDescription(item) end

---@param item item
---@param tooltip string
---@return void
function Native.BlzSetItemTooltip(item, tooltip) end

---@param item item
---@return string
function Native.BlzGetItemTooltip(item) end

---@param item item
---@param extendedTooltip string
---@return void
function Native.BlzSetItemExtendedTooltip(item, extendedTooltip) end

---@param item item
---@return string
function Native.BlzGetItemExtendedTooltip(item) end

---@param item item
---@param iconPath string
---@return void
function Native.BlzSetItemIconPath(item, iconPath) end

---@param item item
---@return string
function Native.BlzGetItemIconPath(item) end

---@param unit unit
---@param name string
---@return void
function Native.BlzSetUnitName(unit, name) end

---@param unit unit
---@param heroProperName string
---@return void
function Native.BlzSetHeroProperName(unit, heroProperName) end

---@param unit unit
---@param weaponIndex integer
---@return integer
function Native.BlzGetUnitBaseDamage(unit, weaponIndex) end

---@param unit unit
---@param baseDamage integer
---@param weaponIndex integer
---@return void
function Native.BlzSetUnitBaseDamage(unit, baseDamage, weaponIndex) end

---@param unit unit
---@param weaponIndex integer
---@return integer
function Native.BlzGetUnitDiceNumber(unit, weaponIndex) end

---@param unit unit
---@param diceNumber integer
---@param weaponIndex integer
---@return void
function Native.BlzSetUnitDiceNumber(unit, diceNumber, weaponIndex) end

---@param unit unit
---@param weaponIndex integer
---@return integer
function Native.BlzGetUnitDiceSides(unit, weaponIndex) end

---@param unit unit
---@param diceSides integer
---@param weaponIndex integer
---@return void
function Native.BlzSetUnitDiceSides(unit, diceSides, weaponIndex) end

---@param unit unit
---@param weaponIndex integer
---@return float
function Native.BlzGetUnitAttackCooldown(unit, weaponIndex) end

---@param unit unit
---@param cooldown float
---@param weaponIndex integer
---@return void
function Native.BlzSetUnitAttackCooldown(unit, cooldown, weaponIndex) end

---@param effect effect
---@param player player
---@return void
function Native.BlzSetSpecialEffectColorByPlayer(effect, player) end

---@param effect effect
---@param r integer
---@param g integer
---@param b integer
---@return void
function Native.BlzSetSpecialEffectColor(effect, r, g, b) end

---@param effect effect
---@param alpha integer
---@return void
function Native.BlzSetSpecialEffectAlpha(effect, alpha) end

---@param effect effect
---@param scale float
---@return void
function Native.BlzSetSpecialEffectScale(effect, scale) end

---@param effect effect
---@param x float
---@param y float
---@param z float
---@return void
function Native.BlzSetSpecialEffectPosition(effect, x, y, z) end

---@param effect effect
---@param height float
---@return void
function Native.BlzSetSpecialEffectHeight(effect, height) end

---@param effect effect
---@param timeScale float
---@return void
function Native.BlzSetSpecialEffectTimeScale(effect, timeScale) end

---@param effect effect
---@param time float
---@return void
function Native.BlzSetSpecialEffectTime(effect, time) end

---@param effect effect
---@param yaw float
---@param pitch float
---@param roll float
---@return void
function Native.BlzSetSpecialEffectOrientation(effect, yaw, pitch, roll) end

---@param effect effect
---@param yaw float
---@return void
function Native.BlzSetSpecialEffectYaw(effect, yaw) end

---@param effect effect
---@param pitch float
---@return void
function Native.BlzSetSpecialEffectPitch(effect, pitch) end

---@param effect effect
---@param roll float
---@return void
function Native.BlzSetSpecialEffectRoll(effect, roll) end

---@param effect effect
---@param x float
---@return void
function Native.BlzSetSpecialEffectX(effect, x) end

---@param effect effect
---@param y float
---@return void
function Native.BlzSetSpecialEffectY(effect, y) end

---@param effect effect
---@param z float
---@return void
function Native.BlzSetSpecialEffectZ(effect, z) end

---@param effect effect
---@param loc location
---@return void
function Native.BlzSetSpecialEffectPositionLoc(effect, loc) end

---@param effect effect
---@return float
function Native.BlzGetLocalSpecialEffectX(effect) end

---@param effect effect
---@return float
function Native.BlzGetLocalSpecialEffectY(effect) end

---@param effect effect
---@return float
function Native.BlzGetLocalSpecialEffectZ(effect) end

---@param effect effect
---@return void
function Native.BlzSpecialEffectClearSubAnimations(effect) end

---@param effect effect
---@param subAnim subanimtype
---@return void
function Native.BlzSpecialEffectRemoveSubAnimation(effect, subAnim) end

---@param effect effect
---@param subAnim subanimtype
---@return void
function Native.BlzSpecialEffectAddSubAnimation(effect, subAnim) end

---@param effect effect
---@param anim animtype
---@return void
function Native.BlzPlaySpecialEffect(effect, anim) end

---@param effect effect
---@param anim animtype
---@param timeScale float
---@return void
function Native.BlzPlaySpecialEffectWithTimeScale(effect, anim, timeScale) end

---@param anim animtype
---@return string
function Native.BlzGetAnimName(anim) end

---@param unit unit
---@return float
function Native.BlzGetUnitArmor(unit) end

---@param unit unit
---@param armorAmount float
---@return void
function Native.BlzSetUnitArmor(unit, armorAmount) end

---@param unit unit
---@param abilId integer
---@param flag boolean
---@return void
function Native.BlzUnitHideAbility(unit, abilId, flag) end

---@param unit unit
---@param abilId integer
---@param flag boolean
---@param hideUI boolean
---@return void
function Native.BlzUnitDisableAbility(unit, abilId, flag, hideUI) end

---@param unit unit
---@return void
function Native.BlzUnitCancelTimedLife(unit) end

---@param unit unit
---@return boolean
function Native.BlzIsUnitSelectable(unit) end

---@param unit unit
---@return boolean
function Native.BlzIsUnitInvulnerable(unit) end

---@param unit unit
---@return void
function Native.BlzUnitInterruptAttack(unit) end

---@param unit unit
---@return float
function Native.BlzGetUnitCollisionSize(unit) end

---@param abilId integer
---@param level integer
---@return integer
function Native.BlzGetAbilityManaCost(abilId, level) end

---@param abilId integer
---@param level integer
---@return float
function Native.BlzGetAbilityCooldown(abilId, level) end

---@param unit unit
---@param abilId integer
---@param level integer
---@param cooldown float
---@return void
function Native.BlzSetUnitAbilityCooldown(unit, abilId, level, cooldown) end

---@param unit unit
---@param abilId integer
---@param level integer
---@return float
function Native.BlzGetUnitAbilityCooldown(unit, abilId, level) end

---@param unit unit
---@param abilId integer
---@return float
function Native.BlzGetUnitAbilityCooldownRemaining(unit, abilId) end

---@param unit unit
---@param abilCode integer
---@return void
function Native.BlzEndUnitAbilityCooldown(unit, abilCode) end

---@param unit unit
---@param abilCode integer
---@param cooldown float
---@return void
function Native.BlzStartUnitAbilityCooldown(unit, abilCode, cooldown) end

---@param unit unit
---@param abilId integer
---@param level integer
---@return integer
function Native.BlzGetUnitAbilityManaCost(unit, abilId, level) end

---@param unit unit
---@param abilId integer
---@param level integer
---@param manaCost integer
---@return void
function Native.BlzSetUnitAbilityManaCost(unit, abilId, level, manaCost) end

---@param unit unit
---@return float
function Native.BlzGetLocalUnitZ(unit) end

---@param player player
---@param techid integer
---@param levels integer
---@return void
function Native.BlzDecPlayerTechResearched(player, techid, levels) end

---@param damage float
---@return void
function Native.BlzSetEventDamage(damage) end

---@return unit
function Native.BlzGetEventDamageTarget() end

---@return attacktype
function Native.BlzGetEventAttackType() end

---@return damagetype
function Native.BlzGetEventDamageType() end

---@return weapontype
function Native.BlzGetEventWeaponType() end

---@param attackType attacktype
---@return boolean
function Native.BlzSetEventAttackType(attackType) end

---@param damageType damagetype
---@return boolean
function Native.BlzSetEventDamageType(damageType) end

---@param weaponType weapontype
---@return boolean
function Native.BlzSetEventWeaponType(weaponType) end

---@return boolean
function Native.BlzGetEventIsAttack() end

---@param dataType integer
---@param player player
---@param param1 string
---@param param2 string
---@param param3 boolean
---@param param4 integer
---@param param5 integer
---@param param6 integer
---@return integer
function Native.RequestExtraIntegerData(dataType, player, param1, param2, param3, param4, param5, param6) end

---@param dataType integer
---@param player player
---@param param1 string
---@param param2 string
---@param param3 boolean
---@param param4 integer
---@param param5 integer
---@param param6 integer
---@return boolean
function Native.RequestExtraBooleanData(dataType, player, param1, param2, param3, param4, param5, param6) end

---@param dataType integer
---@param player player
---@param param1 string
---@param param2 string
---@param param3 boolean
---@param param4 integer
---@param param5 integer
---@param param6 integer
---@return string
function Native.RequestExtraStringData(dataType, player, param1, param2, param3, param4, param5, param6) end

---@param dataType integer
---@param player player
---@param param1 string
---@param param2 string
---@param param3 boolean
---@param param4 integer
---@param param5 integer
---@param param6 integer
---@return float
function Native.RequestExtraRealData(dataType, player, param1, param2, param3, param4, param5, param6) end

---@param unit unit
---@return float
function Native.BlzGetUnitZ(unit) end

---@param enableSelection boolean
---@param enableSelectionCircle boolean
---@return void
function Native.BlzEnableSelections(enableSelection, enableSelectionCircle) end

---@return boolean
function Native.BlzIsSelectionEnabled() end

---@return boolean
function Native.BlzIsSelectionCircleEnabled() end

---@param setup camerasetup
---@param doPan boolean
---@param forcedDuration float
---@param easeInDuration float
---@param easeOutDuration float
---@param smoothFactor float
---@return void
function Native.BlzCameraSetupApplyForceDurationSmooth(setup, doPan, forcedDuration, easeInDuration, easeOutDuration, smoothFactor) end

---@param enable boolean
---@return void
function Native.BlzEnableTargetIndicator(enable) end

---@return boolean
function Native.BlzIsTargetIndicatorEnabled() end

---@param show boolean
---@return void
function Native.BlzShowTerrain(show) end

---@param show boolean
---@return void
function Native.BlzShowSkyBox(show) end

---@param fps integer
---@return void
function Native.BlzStartRecording(fps) end

---@return void
function Native.BlzEndRecording() end

---@param unit unit
---@param show boolean
---@return void
function Native.BlzShowUnitTeamGlow(unit, show) end

---@param frameType originframetype
---@param index integer
---@return framehandle
function Native.BlzGetOriginFrame(frameType, index) end

---@param enable boolean
---@return void
function Native.BlzEnableUIAutoPosition(enable) end

---@param enable boolean
---@return void
function Native.BlzHideOriginFrames(enable) end

---@param a integer
---@param r integer
---@param g integer
---@param b integer
---@return integer
function Native.BlzConvertColor(a, r, g, b) end

---@param TOCFile string
---@return boolean
function Native.BlzLoadTOCFile(TOCFile) end

---@param name string
---@param owner framehandle
---@param priority integer
---@param createContext integer
---@return framehandle
function Native.BlzCreateFrame(name, owner, priority, createContext) end

---@param name string
---@param owner framehandle
---@param createContext integer
---@return framehandle
function Native.BlzCreateSimpleFrame(name, owner, createContext) end

---@param typeName string
---@param name string
---@param owner framehandle
---@param inherits string
---@param createContext integer
---@return framehandle
function Native.BlzCreateFrameByType(typeName, name, owner, inherits, createContext) end

---@param frame framehandle
---@return void
function Native.BlzDestroyFrame(frame) end

---@param frame framehandle
---@param point framepointtype
---@param relative framehandle
---@param relativePoint framepointtype
---@param x float
---@param y float
---@return void
function Native.BlzFrameSetPoint(frame, point, relative, relativePoint, x, y) end

---@param frame framehandle
---@param point framepointtype
---@param x float
---@param y float
---@return void
function Native.BlzFrameSetAbsPoint(frame, point, x, y) end

---@param frame framehandle
---@return void
function Native.BlzFrameClearAllPoints(frame) end

---@param frame framehandle
---@param relative framehandle
---@return void
function Native.BlzFrameSetAllPoints(frame, relative) end

---@param frame framehandle
---@param visible boolean
---@return void
function Native.BlzFrameSetVisible(frame, visible) end

---@param frame framehandle
---@return boolean
function Native.BlzFrameIsVisible(frame) end

---@param name string
---@param createContext integer
---@return framehandle
function Native.BlzGetFrameByName(name, createContext) end

---@param frame framehandle
---@return string
function Native.BlzFrameGetName(frame) end

---@param frame framehandle
---@return void
function Native.BlzFrameClick(frame) end

---@param frame framehandle
---@param text string
---@return void
function Native.BlzFrameSetText(frame, text) end

---@param frame framehandle
---@return string
function Native.BlzFrameGetText(frame) end

---@param frame framehandle
---@param text string
---@return void
function Native.BlzFrameAddText(frame, text) end

---@param frame framehandle
---@param size integer
---@return void
function Native.BlzFrameSetTextSizeLimit(frame, size) end

---@param frame framehandle
---@return integer
function Native.BlzFrameGetTextSizeLimit(frame) end

---@param frame framehandle
---@param color integer
---@return void
function Native.BlzFrameSetTextColor(frame, color) end

---@param frame framehandle
---@param flag boolean
---@return void
function Native.BlzFrameSetFocus(frame, flag) end

---@param frame framehandle
---@param modelFile string
---@param cameraIndex integer
---@return void
function Native.BlzFrameSetModel(frame, modelFile, cameraIndex) end

---@param frame framehandle
---@param enabled boolean
---@return void
function Native.BlzFrameSetEnable(frame, enabled) end

---@param frame framehandle
---@return boolean
function Native.BlzFrameGetEnable(frame) end

---@param frame framehandle
---@param alpha integer
---@return void
function Native.BlzFrameSetAlpha(frame, alpha) end

---@param frame framehandle
---@return integer
function Native.BlzFrameGetAlpha(frame) end

---@param frame framehandle
---@param primaryProp integer
---@param flags integer
---@return void
function Native.BlzFrameSetSpriteAnimate(frame, primaryProp, flags) end

---@param frame framehandle
---@param texFile string
---@param flag integer
---@param blend boolean
---@return void
function Native.BlzFrameSetTexture(frame, texFile, flag, blend) end

---@param frame framehandle
---@param scale float
---@return void
function Native.BlzFrameSetScale(frame, scale) end

---@param frame framehandle
---@param tooltip framehandle
---@return void
function Native.BlzFrameSetTooltip(frame, tooltip) end

---@param frame framehandle
---@param enable boolean
---@return void
function Native.BlzFrameCageMouse(frame, enable) end

---@param frame framehandle
---@param value float
---@return void
function Native.BlzFrameSetValue(frame, value) end

---@param frame framehandle
---@return float
function Native.BlzFrameGetValue(frame) end

---@param frame framehandle
---@param minValue float
---@param maxValue float
---@return void
function Native.BlzFrameSetMinMaxValue(frame, minValue, maxValue) end

---@param frame framehandle
---@param stepSize float
---@return void
function Native.BlzFrameSetStepSize(frame, stepSize) end

---@param frame framehandle
---@param width float
---@param height float
---@return void
function Native.BlzFrameSetSize(frame, width, height) end

---@param frame framehandle
---@param color integer
---@return void
function Native.BlzFrameSetVertexColor(frame, color) end

---@param frame framehandle
---@param level integer
---@return void
function Native.BlzFrameSetLevel(frame, level) end

---@param frame framehandle
---@param parent framehandle
---@return void
function Native.BlzFrameSetParent(frame, parent) end

---@param frame framehandle
---@return framehandle
function Native.BlzFrameGetParent(frame) end

---@param frame framehandle
---@return float
function Native.BlzFrameGetHeight(frame) end

---@param frame framehandle
---@return float
function Native.BlzFrameGetWidth(frame) end

---@param frame framehandle
---@param fileName string
---@param height float
---@param flags integer
---@return void
function Native.BlzFrameSetFont(frame, fileName, height, flags) end

---@param frame framehandle
---@param vert textaligntype
---@param horz textaligntype
---@return void
function Native.BlzFrameSetTextAlignment(frame, vert, horz) end

---@param trigger trigger
---@param frame framehandle
---@param eventId frameeventtype
---@return event
function Native.BlzTriggerRegisterFrameEvent(trigger, frame, eventId) end

---@return framehandle
function Native.BlzGetTriggerFrame() end

---@return frameeventtype
function Native.BlzGetTriggerFrameEvent() end

---@return float
function Native.BlzGetTriggerFrameValue() end

---@return string
function Native.BlzGetTriggerFrameText() end

---@param trigger trigger
---@param player player
---@param prefix string
---@param fromServer boolean
---@return event
function Native.BlzTriggerRegisterPlayerSyncEvent(trigger, player, prefix, fromServer) end

---@param prefix string
---@param data string
---@return boolean
function Native.BlzSendSyncData(prefix, data) end

---@return string
function Native.BlzGetTriggerSyncPrefix() end

---@return string
function Native.BlzGetTriggerSyncData() end

---@param trigger trigger
---@param player player
---@param key oskeytype
---@param metaKey integer
---@param keyDown boolean
---@return event
function Native.BlzTriggerRegisterPlayerKeyEvent(trigger, player, key, metaKey, keyDown) end

---@return oskeytype
function Native.BlzGetTriggerPlayerKey() end

---@return integer
function Native.BlzGetTriggerPlayerMetaKey() end

---@return boolean
function Native.BlzGetTriggerPlayerIsKeyDown() end

---@param enable boolean
---@return void
function Native.BlzEnableCursor(enable) end

---@param x integer
---@param y integer
---@return void
function Native.BlzSetMousePos(x, y) end

---@return integer
function Native.BlzGetLocalClientWidth() end

---@return integer
function Native.BlzGetLocalClientHeight() end

---@return boolean
function Native.BlzIsLocalClientActive() end

---@return unit
function Native.BlzGetMouseFocusUnit() end

---@param texFile string
---@return boolean
function Native.BlzChangeMinimapTerrainTex(texFile) end

---@return string
function Native.BlzGetLocale() end

---@param effect effect
---@return float
function Native.BlzGetSpecialEffectScale(effect) end

---@param effect effect
---@param x float
---@param y float
---@param z float
---@return void
function Native.BlzSetSpecialEffectMatrixScale(effect, x, y, z) end

---@param effect effect
---@return void
function Native.BlzResetSpecialEffectMatrix(effect) end

---@param unit unit
---@param abilId integer
---@return ability
function Native.BlzGetUnitAbility(unit, abilId) end

---@param unit unit
---@param index integer
---@return ability
function Native.BlzGetUnitAbilityByIndex(unit, index) end

---@param player player
---@param recipient integer
---@param message string
---@return void
function Native.BlzDisplayChatMessage(player, recipient, message) end

---@param unit unit
---@param flag boolean
---@return void
function Native.BlzPauseUnitEx(unit, flag) end

---@param unit unit
---@param facingAngle float
---@return void
function Native.BlzSetUnitFacingEx(unit, facingAngle) end

---@param abilityId integer
---@param order string
---@return commandbuttoneffect
function Native.CreateCommandButtonEffect(abilityId, order) end

---@param uprgade integer
---@return commandbuttoneffect
function Native.CreateUpgradeCommandButtonEffect(uprgade) end

---@param abilityId integer
---@return commandbuttoneffect
function Native.CreateLearnCommandButtonEffect(abilityId) end

---@param effect commandbuttoneffect
---@return void
function Native.DestroyCommandButtonEffect(effect) end

---@param x integer
---@param y integer
---@return integer
function Native.BlzBitOr(x, y) end

---@param x integer
---@param y integer
---@return integer
function Native.BlzBitAnd(x, y) end

---@param x integer
---@param y integer
---@return integer
function Native.BlzBitXor(x, y) end

---@param ability ability
---@param field abilitybooleanfield
---@return boolean
function Native.BlzGetAbilityBooleanField(ability, field) end

---@param ability ability
---@param field abilityintegerfield
---@return integer
function Native.BlzGetAbilityIntegerField(ability, field) end

---@param ability ability
---@param field abilityrealfield
---@return float
function Native.BlzGetAbilityRealField(ability, field) end

---@param ability ability
---@param field abilitystringfield
---@return string
function Native.BlzGetAbilityStringField(ability, field) end

---@param ability ability
---@param field abilitybooleanlevelfield
---@param level integer
---@return boolean
function Native.BlzGetAbilityBooleanLevelField(ability, field, level) end

---@param ability ability
---@param field abilityintegerlevelfield
---@param level integer
---@return integer
function Native.BlzGetAbilityIntegerLevelField(ability, field, level) end

---@param ability ability
---@param field abilityreallevelfield
---@param level integer
---@return float
function Native.BlzGetAbilityRealLevelField(ability, field, level) end

---@param ability ability
---@param field abilitystringlevelfield
---@param level integer
---@return string
function Native.BlzGetAbilityStringLevelField(ability, field, level) end

---@param ability ability
---@param field abilitybooleanlevelarrayfield
---@param level integer
---@param index integer
---@return boolean
function Native.BlzGetAbilityBooleanLevelArrayField(ability, field, level, index) end

---@param ability ability
---@param field abilityintegerlevelarrayfield
---@param level integer
---@param index integer
---@return integer
function Native.BlzGetAbilityIntegerLevelArrayField(ability, field, level, index) end

---@param ability ability
---@param field abilityreallevelarrayfield
---@param level integer
---@param index integer
---@return float
function Native.BlzGetAbilityRealLevelArrayField(ability, field, level, index) end

---@param ability ability
---@param field abilitystringlevelarrayfield
---@param level integer
---@param index integer
---@return string
function Native.BlzGetAbilityStringLevelArrayField(ability, field, level, index) end

---@param ability ability
---@param field abilitybooleanfield
---@param value boolean
---@return boolean
function Native.BlzSetAbilityBooleanField(ability, field, value) end

---@param ability ability
---@param field abilityintegerfield
---@param value integer
---@return boolean
function Native.BlzSetAbilityIntegerField(ability, field, value) end

---@param ability ability
---@param field abilityrealfield
---@param value float
---@return boolean
function Native.BlzSetAbilityRealField(ability, field, value) end

---@param ability ability
---@param field abilitystringfield
---@param value string
---@return boolean
function Native.BlzSetAbilityStringField(ability, field, value) end

---@param ability ability
---@param field abilitybooleanlevelfield
---@param level integer
---@param value boolean
---@return boolean
function Native.BlzSetAbilityBooleanLevelField(ability, field, level, value) end

---@param ability ability
---@param field abilityintegerlevelfield
---@param level integer
---@param value integer
---@return boolean
function Native.BlzSetAbilityIntegerLevelField(ability, field, level, value) end

---@param ability ability
---@param field abilityreallevelfield
---@param level integer
---@param value float
---@return boolean
function Native.BlzSetAbilityRealLevelField(ability, field, level, value) end

---@param ability ability
---@param field abilitystringlevelfield
---@param level integer
---@param value string
---@return boolean
function Native.BlzSetAbilityStringLevelField(ability, field, level, value) end

---@param ability ability
---@param field abilitybooleanlevelarrayfield
---@param level integer
---@param index integer
---@param value boolean
---@return boolean
function Native.BlzSetAbilityBooleanLevelArrayField(ability, field, level, index, value) end

---@param ability ability
---@param field abilityintegerlevelarrayfield
---@param level integer
---@param index integer
---@param value integer
---@return boolean
function Native.BlzSetAbilityIntegerLevelArrayField(ability, field, level, index, value) end

---@param ability ability
---@param field abilityreallevelarrayfield
---@param level integer
---@param index integer
---@param value float
---@return boolean
function Native.BlzSetAbilityRealLevelArrayField(ability, field, level, index, value) end

---@param ability ability
---@param field abilitystringlevelarrayfield
---@param level integer
---@param index integer
---@param value string
---@return boolean
function Native.BlzSetAbilityStringLevelArrayField(ability, field, level, index, value) end

---@param ability ability
---@param field abilitybooleanlevelarrayfield
---@param level integer
---@param value boolean
---@return boolean
function Native.BlzAddAbilityBooleanLevelArrayField(ability, field, level, value) end

---@param ability ability
---@param field abilityintegerlevelarrayfield
---@param level integer
---@param value integer
---@return boolean
function Native.BlzAddAbilityIntegerLevelArrayField(ability, field, level, value) end

---@param ability ability
---@param field abilityreallevelarrayfield
---@param level integer
---@param value float
---@return boolean
function Native.BlzAddAbilityRealLevelArrayField(ability, field, level, value) end

---@param ability ability
---@param field abilitystringlevelarrayfield
---@param level integer
---@param value string
---@return boolean
function Native.BlzAddAbilityStringLevelArrayField(ability, field, level, value) end

---@param ability ability
---@param field abilitybooleanlevelarrayfield
---@param level integer
---@param value boolean
---@return boolean
function Native.BlzRemoveAbilityBooleanLevelArrayField(ability, field, level, value) end

---@param ability ability
---@param field abilityintegerlevelarrayfield
---@param level integer
---@param value integer
---@return boolean
function Native.BlzRemoveAbilityIntegerLevelArrayField(ability, field, level, value) end

---@param ability ability
---@param field abilityreallevelarrayfield
---@param level integer
---@param value float
---@return boolean
function Native.BlzRemoveAbilityRealLevelArrayField(ability, field, level, value) end

---@param ability ability
---@param field abilitystringlevelarrayfield
---@param level integer
---@param value string
---@return boolean
function Native.BlzRemoveAbilityStringLevelArrayField(ability, field, level, value) end

---@param item item
---@param index integer
---@return ability
function Native.BlzGetItemAbilityByIndex(item, index) end

---@param item item
---@param abilCode integer
---@return ability
function Native.BlzGetItemAbility(item, abilCode) end

---@param item item
---@param abilCode integer
---@return boolean
function Native.BlzItemAddAbility(item, abilCode) end

---@param item item
---@param field itembooleanfield
---@return boolean
function Native.BlzGetItemBooleanField(item, field) end

---@param item item
---@param field itemintegerfield
---@return integer
function Native.BlzGetItemIntegerField(item, field) end

---@param item item
---@param field itemrealfield
---@return float
function Native.BlzGetItemRealField(item, field) end

---@param item item
---@param field itemstringfield
---@return string
function Native.BlzGetItemStringField(item, field) end

---@param item item
---@param field itembooleanfield
---@param value boolean
---@return boolean
function Native.BlzSetItemBooleanField(item, field, value) end

---@param item item
---@param field itemintegerfield
---@param value integer
---@return boolean
function Native.BlzSetItemIntegerField(item, field, value) end

---@param item item
---@param field itemrealfield
---@param value float
---@return boolean
function Native.BlzSetItemRealField(item, field, value) end

---@param item item
---@param field itemstringfield
---@param value string
---@return boolean
function Native.BlzSetItemStringField(item, field, value) end

---@param item item
---@param abilCode integer
---@return boolean
function Native.BlzItemRemoveAbility(item, abilCode) end

---@param unit unit
---@param field unitbooleanfield
---@return boolean
function Native.BlzGetUnitBooleanField(unit, field) end

---@param unit unit
---@param field unitintegerfield
---@return integer
function Native.BlzGetUnitIntegerField(unit, field) end

---@param unit unit
---@param field unitrealfield
---@return float
function Native.BlzGetUnitRealField(unit, field) end

---@param unit unit
---@param field unitstringfield
---@return string
function Native.BlzGetUnitStringField(unit, field) end

---@param unit unit
---@param field unitbooleanfield
---@param value boolean
---@return boolean
function Native.BlzSetUnitBooleanField(unit, field, value) end

---@param unit unit
---@param field unitintegerfield
---@param value integer
---@return boolean
function Native.BlzSetUnitIntegerField(unit, field, value) end

---@param unit unit
---@param field unitrealfield
---@param value float
---@return boolean
function Native.BlzSetUnitRealField(unit, field, value) end

---@param unit unit
---@param field unitstringfield
---@param value string
---@return boolean
function Native.BlzSetUnitStringField(unit, field, value) end

---@param unit unit
---@param field unitweaponbooleanfield
---@param index integer
---@return boolean
function Native.BlzGetUnitWeaponBooleanField(unit, field, index) end

---@param unit unit
---@param field unitweaponintegerfield
---@param index integer
---@return integer
function Native.BlzGetUnitWeaponIntegerField(unit, field, index) end

---@param unit unit
---@param field unitweaponrealfield
---@param index integer
---@return float
function Native.BlzGetUnitWeaponRealField(unit, field, index) end

---@param unit unit
---@param field unitweaponstringfield
---@param index integer
---@return string
function Native.BlzGetUnitWeaponStringField(unit, field, index) end

---@param unit unit
---@param field unitweaponbooleanfield
---@param index integer
---@param value boolean
---@return boolean
function Native.BlzSetUnitWeaponBooleanField(unit, field, index, value) end

---@param unit unit
---@param field unitweaponintegerfield
---@param index integer
---@param value integer
---@return boolean
function Native.BlzSetUnitWeaponIntegerField(unit, field, index, value) end

---@param unit unit
---@param field unitweaponrealfield
---@param index integer
---@param value float
---@return boolean
function Native.BlzSetUnitWeaponRealField(unit, field, index, value) end

---@param unit unit
---@param field unitweaponstringfield
---@param index integer
---@param value string
---@return boolean
function Native.BlzSetUnitWeaponStringField(unit, field, index, value) end

---@param unit unit
---@return integer
function Native.BlzGetUnitSkin(unit) end

---@param item item
---@return integer
function Native.BlzGetItemSkin(item) end

---@param unit unit
---@param skinId integer
---@return void
function Native.BlzSetUnitSkin(unit, skinId) end

---@param item item
---@param skinId integer
---@return void
function Native.BlzSetItemSkin(item, skinId) end

---@param itemid integer
---@param x float
---@param y float
---@param skinId integer
---@return item
function Native.BlzCreateItemWithSkin(itemid, x, y, skinId) end

---@param id player
---@param unitid integer
---@param x float
---@param y float
---@param face float
---@param skinId integer
---@return unit
function Native.BlzCreateUnitWithSkin(id, unitid, x, y, face, skinId) end

---@param objectid integer
---@param x float
---@param y float
---@param face float
---@param scale float
---@param variation integer
---@param skinId integer
---@return destructable
function Native.BlzCreateDestructableWithSkin(objectid, x, y, face, scale, variation, skinId) end

---@param objectid integer
---@param x float
---@param y float
---@param z float
---@param face float
---@param scale float
---@param variation integer
---@param skinId integer
---@return destructable
function Native.BlzCreateDestructableZWithSkin(objectid, x, y, z, face, scale, variation, skinId) end

---@param objectid integer
---@param x float
---@param y float
---@param face float
---@param scale float
---@param variation integer
---@param skinId integer
---@return destructable
function Native.BlzCreateDeadDestructableWithSkin(objectid, x, y, face, scale, variation, skinId) end

---@param objectid integer
---@param x float
---@param y float
---@param z float
---@param face float
---@param scale float
---@param variation integer
---@param skinId integer
---@return destructable
function Native.BlzCreateDeadDestructableZWithSkin(objectid, x, y, z, face, scale, variation, skinId) end

---@param player player
---@return integer
function Native.BlzGetPlayerTownHallCount(player) end

---@type boolean
Native.FALSE = nil

---@type boolean
Native.TRUE = nil

---@type integer
Native.JASS_MAX_ARRAY_SIZE = nil

---@type integer
Native.PLAYER_NEUTRAL_PASSIVE = nil

---@type integer
Native.PLAYER_NEUTRAL_AGGRESSIVE = nil

---@type playercolor
Native.PLAYER_COLOR_RED = nil

---@type playercolor
Native.PLAYER_COLOR_BLUE = nil

---@type playercolor
Native.PLAYER_COLOR_CYAN = nil

---@type playercolor
Native.PLAYER_COLOR_PURPLE = nil

---@type playercolor
Native.PLAYER_COLOR_YELLOW = nil

---@type playercolor
Native.PLAYER_COLOR_ORANGE = nil

---@type playercolor
Native.PLAYER_COLOR_GREEN = nil

---@type playercolor
Native.PLAYER_COLOR_PINK = nil

---@type playercolor
Native.PLAYER_COLOR_LIGHT_GRAY = nil

---@type playercolor
Native.PLAYER_COLOR_LIGHT_BLUE = nil

---@type playercolor
Native.PLAYER_COLOR_AQUA = nil

---@type playercolor
Native.PLAYER_COLOR_BROWN = nil

---@type playercolor
Native.PLAYER_COLOR_MAROON = nil

---@type playercolor
Native.PLAYER_COLOR_NAVY = nil

---@type playercolor
Native.PLAYER_COLOR_TURQUOISE = nil

---@type playercolor
Native.PLAYER_COLOR_VIOLET = nil

---@type playercolor
Native.PLAYER_COLOR_WHEAT = nil

---@type playercolor
Native.PLAYER_COLOR_PEACH = nil

---@type playercolor
Native.PLAYER_COLOR_MINT = nil

---@type playercolor
Native.PLAYER_COLOR_LAVENDER = nil

---@type playercolor
Native.PLAYER_COLOR_COAL = nil

---@type playercolor
Native.PLAYER_COLOR_SNOW = nil

---@type playercolor
Native.PLAYER_COLOR_EMERALD = nil

---@type playercolor
Native.PLAYER_COLOR_PEANUT = nil

---@type race
Native.RACE_HUMAN = nil

---@type race
Native.RACE_ORC = nil

---@type race
Native.RACE_UNDEAD = nil

---@type race
Native.RACE_NIGHTELF = nil

---@type race
Native.RACE_DEMON = nil

---@type race
Native.RACE_OTHER = nil

---@type playergameresult
Native.PLAYER_GAME_RESULT_VICTORY = nil

---@type playergameresult
Native.PLAYER_GAME_RESULT_DEFEAT = nil

---@type playergameresult
Native.PLAYER_GAME_RESULT_TIE = nil

---@type playergameresult
Native.PLAYER_GAME_RESULT_NEUTRAL = nil

---@type alliancetype
Native.ALLIANCE_PASSIVE = nil

---@type alliancetype
Native.ALLIANCE_HELP_REQUEST = nil

---@type alliancetype
Native.ALLIANCE_HELP_RESPONSE = nil

---@type alliancetype
Native.ALLIANCE_SHARED_XP = nil

---@type alliancetype
Native.ALLIANCE_SHARED_SPELLS = nil

---@type alliancetype
Native.ALLIANCE_SHARED_VISION = nil

---@type alliancetype
Native.ALLIANCE_SHARED_CONTROL = nil

---@type alliancetype
Native.ALLIANCE_SHARED_ADVANCED_CONTROL = nil

---@type alliancetype
Native.ALLIANCE_RESCUABLE = nil

---@type alliancetype
Native.ALLIANCE_SHARED_VISION_FORCED = nil

---@type version
Native.VERSION_REIGN_OF_CHAOS = nil

---@type version
Native.VERSION_FROZEN_THRONE = nil

---@type attacktype
Native.ATTACK_TYPE_NORMAL = nil

---@type attacktype
Native.ATTACK_TYPE_MELEE = nil

---@type attacktype
Native.ATTACK_TYPE_PIERCE = nil

---@type attacktype
Native.ATTACK_TYPE_SIEGE = nil

---@type attacktype
Native.ATTACK_TYPE_MAGIC = nil

---@type attacktype
Native.ATTACK_TYPE_CHAOS = nil

---@type attacktype
Native.ATTACK_TYPE_HERO = nil

---@type damagetype
Native.DAMAGE_TYPE_UNKNOWN = nil

---@type damagetype
Native.DAMAGE_TYPE_NORMAL = nil

---@type damagetype
Native.DAMAGE_TYPE_ENHANCED = nil

---@type damagetype
Native.DAMAGE_TYPE_FIRE = nil

---@type damagetype
Native.DAMAGE_TYPE_COLD = nil

---@type damagetype
Native.DAMAGE_TYPE_LIGHTNING = nil

---@type damagetype
Native.DAMAGE_TYPE_POISON = nil

---@type damagetype
Native.DAMAGE_TYPE_DISEASE = nil

---@type damagetype
Native.DAMAGE_TYPE_DIVINE = nil

---@type damagetype
Native.DAMAGE_TYPE_MAGIC = nil

---@type damagetype
Native.DAMAGE_TYPE_SONIC = nil

---@type damagetype
Native.DAMAGE_TYPE_ACID = nil

---@type damagetype
Native.DAMAGE_TYPE_FORCE = nil

---@type damagetype
Native.DAMAGE_TYPE_DEATH = nil

---@type damagetype
Native.DAMAGE_TYPE_MIND = nil

---@type damagetype
Native.DAMAGE_TYPE_PLANT = nil

---@type damagetype
Native.DAMAGE_TYPE_DEFENSIVE = nil

---@type damagetype
Native.DAMAGE_TYPE_DEMOLITION = nil

---@type damagetype
Native.DAMAGE_TYPE_SLOW_POISON = nil

---@type damagetype
Native.DAMAGE_TYPE_SPIRIT_LINK = nil

---@type damagetype
Native.DAMAGE_TYPE_SHADOW_STRIKE = nil

---@type damagetype
Native.DAMAGE_TYPE_UNIVERSAL = nil

---@type weapontype
Native.WEAPON_TYPE_WHOKNOWS = nil

---@type weapontype
Native.WEAPON_TYPE_METAL_LIGHT_CHOP = nil

---@type weapontype
Native.WEAPON_TYPE_METAL_MEDIUM_CHOP = nil

---@type weapontype
Native.WEAPON_TYPE_METAL_HEAVY_CHOP = nil

---@type weapontype
Native.WEAPON_TYPE_METAL_LIGHT_SLICE = nil

---@type weapontype
Native.WEAPON_TYPE_METAL_MEDIUM_SLICE = nil

---@type weapontype
Native.WEAPON_TYPE_METAL_HEAVY_SLICE = nil

---@type weapontype
Native.WEAPON_TYPE_METAL_MEDIUM_BASH = nil

---@type weapontype
Native.WEAPON_TYPE_METAL_HEAVY_BASH = nil

---@type weapontype
Native.WEAPON_TYPE_METAL_MEDIUM_STAB = nil

---@type weapontype
Native.WEAPON_TYPE_METAL_HEAVY_STAB = nil

---@type weapontype
Native.WEAPON_TYPE_WOOD_LIGHT_SLICE = nil

---@type weapontype
Native.WEAPON_TYPE_WOOD_MEDIUM_SLICE = nil

---@type weapontype
Native.WEAPON_TYPE_WOOD_HEAVY_SLICE = nil

---@type weapontype
Native.WEAPON_TYPE_WOOD_LIGHT_BASH = nil

---@type weapontype
Native.WEAPON_TYPE_WOOD_MEDIUM_BASH = nil

---@type weapontype
Native.WEAPON_TYPE_WOOD_HEAVY_BASH = nil

---@type weapontype
Native.WEAPON_TYPE_WOOD_LIGHT_STAB = nil

---@type weapontype
Native.WEAPON_TYPE_WOOD_MEDIUM_STAB = nil

---@type weapontype
Native.WEAPON_TYPE_CLAW_LIGHT_SLICE = nil

---@type weapontype
Native.WEAPON_TYPE_CLAW_MEDIUM_SLICE = nil

---@type weapontype
Native.WEAPON_TYPE_CLAW_HEAVY_SLICE = nil

---@type weapontype
Native.WEAPON_TYPE_AXE_MEDIUM_CHOP = nil

---@type weapontype
Native.WEAPON_TYPE_ROCK_HEAVY_BASH = nil

---@type pathingtype
Native.PATHING_TYPE_ANY = nil

---@type pathingtype
Native.PATHING_TYPE_WALKABILITY = nil

---@type pathingtype
Native.PATHING_TYPE_FLYABILITY = nil

---@type pathingtype
Native.PATHING_TYPE_BUILDABILITY = nil

---@type pathingtype
Native.PATHING_TYPE_PEONHARVESTPATHING = nil

---@type pathingtype
Native.PATHING_TYPE_BLIGHTPATHING = nil

---@type pathingtype
Native.PATHING_TYPE_FLOATABILITY = nil

---@type pathingtype
Native.PATHING_TYPE_AMPHIBIOUSPATHING = nil

---@type mousebuttontype
Native.MOUSE_BUTTON_TYPE_LEFT = nil

---@type mousebuttontype
Native.MOUSE_BUTTON_TYPE_MIDDLE = nil

---@type mousebuttontype
Native.MOUSE_BUTTON_TYPE_RIGHT = nil

---@type animtype
Native.ANIM_TYPE_BIRTH = nil

---@type animtype
Native.ANIM_TYPE_DEATH = nil

---@type animtype
Native.ANIM_TYPE_DECAY = nil

---@type animtype
Native.ANIM_TYPE_DISSIPATE = nil

---@type animtype
Native.ANIM_TYPE_STAND = nil

---@type animtype
Native.ANIM_TYPE_WALK = nil

---@type animtype
Native.ANIM_TYPE_ATTACK = nil

---@type animtype
Native.ANIM_TYPE_MORPH = nil

---@type animtype
Native.ANIM_TYPE_SLEEP = nil

---@type animtype
Native.ANIM_TYPE_SPELL = nil

---@type animtype
Native.ANIM_TYPE_PORTRAIT = nil

---@type subanimtype
Native.SUBANIM_TYPE_ROOTED = nil

---@type subanimtype
Native.SUBANIM_TYPE_ALTERNATE_EX = nil

---@type subanimtype
Native.SUBANIM_TYPE_LOOPING = nil

---@type subanimtype
Native.SUBANIM_TYPE_SLAM = nil

---@type subanimtype
Native.SUBANIM_TYPE_THROW = nil

---@type subanimtype
Native.SUBANIM_TYPE_SPIKED = nil

---@type subanimtype
Native.SUBANIM_TYPE_FAST = nil

---@type subanimtype
Native.SUBANIM_TYPE_SPIN = nil

---@type subanimtype
Native.SUBANIM_TYPE_READY = nil

---@type subanimtype
Native.SUBANIM_TYPE_CHANNEL = nil

---@type subanimtype
Native.SUBANIM_TYPE_DEFEND = nil

---@type subanimtype
Native.SUBANIM_TYPE_VICTORY = nil

---@type subanimtype
Native.SUBANIM_TYPE_TURN = nil

---@type subanimtype
Native.SUBANIM_TYPE_LEFT = nil

---@type subanimtype
Native.SUBANIM_TYPE_RIGHT = nil

---@type subanimtype
Native.SUBANIM_TYPE_FIRE = nil

---@type subanimtype
Native.SUBANIM_TYPE_FLESH = nil

---@type subanimtype
Native.SUBANIM_TYPE_HIT = nil

---@type subanimtype
Native.SUBANIM_TYPE_WOUNDED = nil

---@type subanimtype
Native.SUBANIM_TYPE_LIGHT = nil

---@type subanimtype
Native.SUBANIM_TYPE_MODERATE = nil

---@type subanimtype
Native.SUBANIM_TYPE_SEVERE = nil

---@type subanimtype
Native.SUBANIM_TYPE_CRITICAL = nil

---@type subanimtype
Native.SUBANIM_TYPE_COMPLETE = nil

---@type subanimtype
Native.SUBANIM_TYPE_GOLD = nil

---@type subanimtype
Native.SUBANIM_TYPE_LUMBER = nil

---@type subanimtype
Native.SUBANIM_TYPE_WORK = nil

---@type subanimtype
Native.SUBANIM_TYPE_TALK = nil

---@type subanimtype
Native.SUBANIM_TYPE_FIRST = nil

---@type subanimtype
Native.SUBANIM_TYPE_SECOND = nil

---@type subanimtype
Native.SUBANIM_TYPE_THIRD = nil

---@type subanimtype
Native.SUBANIM_TYPE_FOURTH = nil

---@type subanimtype
Native.SUBANIM_TYPE_FIFTH = nil

---@type subanimtype
Native.SUBANIM_TYPE_ONE = nil

---@type subanimtype
Native.SUBANIM_TYPE_TWO = nil

---@type subanimtype
Native.SUBANIM_TYPE_THREE = nil

---@type subanimtype
Native.SUBANIM_TYPE_FOUR = nil

---@type subanimtype
Native.SUBANIM_TYPE_FIVE = nil

---@type subanimtype
Native.SUBANIM_TYPE_SMALL = nil

---@type subanimtype
Native.SUBANIM_TYPE_MEDIUM = nil

---@type subanimtype
Native.SUBANIM_TYPE_LARGE = nil

---@type subanimtype
Native.SUBANIM_TYPE_UPGRADE = nil

---@type subanimtype
Native.SUBANIM_TYPE_DRAIN = nil

---@type subanimtype
Native.SUBANIM_TYPE_FILL = nil

---@type subanimtype
Native.SUBANIM_TYPE_CHAINLIGHTNING = nil

---@type subanimtype
Native.SUBANIM_TYPE_EATTREE = nil

---@type subanimtype
Native.SUBANIM_TYPE_PUKE = nil

---@type subanimtype
Native.SUBANIM_TYPE_FLAIL = nil

---@type subanimtype
Native.SUBANIM_TYPE_OFF = nil

---@type subanimtype
Native.SUBANIM_TYPE_SWIM = nil

---@type subanimtype
Native.SUBANIM_TYPE_ENTANGLE = nil

---@type subanimtype
Native.SUBANIM_TYPE_BERSERK = nil

---@type racepreference
Native.RACE_PREF_HUMAN = nil

---@type racepreference
Native.RACE_PREF_ORC = nil

---@type racepreference
Native.RACE_PREF_NIGHTELF = nil

---@type racepreference
Native.RACE_PREF_UNDEAD = nil

---@type racepreference
Native.RACE_PREF_DEMON = nil

---@type racepreference
Native.RACE_PREF_RANDOM = nil

---@type racepreference
Native.RACE_PREF_USER_SELECTABLE = nil

---@type mapcontrol
Native.MAP_CONTROL_USER = nil

---@type mapcontrol
Native.MAP_CONTROL_COMPUTER = nil

---@type mapcontrol
Native.MAP_CONTROL_RESCUABLE = nil

---@type mapcontrol
Native.MAP_CONTROL_NEUTRAL = nil

---@type mapcontrol
Native.MAP_CONTROL_CREEP = nil

---@type mapcontrol
Native.MAP_CONTROL_NONE = nil

---@type gametype
Native.GAME_TYPE_MELEE = nil

---@type gametype
Native.GAME_TYPE_FFA = nil

---@type gametype
Native.GAME_TYPE_USE_MAP_SETTINGS = nil

---@type gametype
Native.GAME_TYPE_BLIZ = nil

---@type gametype
Native.GAME_TYPE_ONE_ON_ONE = nil

---@type gametype
Native.GAME_TYPE_TWO_TEAM_PLAY = nil

---@type gametype
Native.GAME_TYPE_THREE_TEAM_PLAY = nil

---@type gametype
Native.GAME_TYPE_FOUR_TEAM_PLAY = nil

---@type mapflag
Native.MAP_FOG_HIDE_TERRAIN = nil

---@type mapflag
Native.MAP_FOG_MAP_EXPLORED = nil

---@type mapflag
Native.MAP_FOG_ALWAYS_VISIBLE = nil

---@type mapflag
Native.MAP_USE_HANDICAPS = nil

---@type mapflag
Native.MAP_OBSERVERS = nil

---@type mapflag
Native.MAP_OBSERVERS_ON_DEATH = nil

---@type mapflag
Native.MAP_FIXED_COLORS = nil

---@type mapflag
Native.MAP_LOCK_RESOURCE_TRADING = nil

---@type mapflag
Native.MAP_RESOURCE_TRADING_ALLIES_ONLY = nil

---@type mapflag
Native.MAP_LOCK_ALLIANCE_CHANGES = nil

---@type mapflag
Native.MAP_ALLIANCE_CHANGES_HIDDEN = nil

---@type mapflag
Native.MAP_CHEATS = nil

---@type mapflag
Native.MAP_CHEATS_HIDDEN = nil

---@type mapflag
Native.MAP_LOCK_SPEED = nil

---@type mapflag
Native.MAP_LOCK_RANDOM_SEED = nil

---@type mapflag
Native.MAP_SHARED_ADVANCED_CONTROL = nil

---@type mapflag
Native.MAP_RANDOM_HERO = nil

---@type mapflag
Native.MAP_RANDOM_RACES = nil

---@type mapflag
Native.MAP_RELOADED = nil

---@type placement
Native.MAP_PLACEMENT_RANDOM = nil

---@type placement
Native.MAP_PLACEMENT_FIXED = nil

---@type placement
Native.MAP_PLACEMENT_USE_MAP_SETTINGS = nil

---@type placement
Native.MAP_PLACEMENT_TEAMS_TOGETHER = nil

---@type startlocprio
Native.MAP_LOC_PRIO_LOW = nil

---@type startlocprio
Native.MAP_LOC_PRIO_HIGH = nil

---@type startlocprio
Native.MAP_LOC_PRIO_NOT = nil

---@type mapdensity
Native.MAP_DENSITY_NONE = nil

---@type mapdensity
Native.MAP_DENSITY_LIGHT = nil

---@type mapdensity
Native.MAP_DENSITY_MEDIUM = nil

---@type mapdensity
Native.MAP_DENSITY_HEAVY = nil

---@type gamedifficulty
Native.MAP_DIFFICULTY_EASY = nil

---@type gamedifficulty
Native.MAP_DIFFICULTY_NORMAL = nil

---@type gamedifficulty
Native.MAP_DIFFICULTY_HARD = nil

---@type gamedifficulty
Native.MAP_DIFFICULTY_INSANE = nil

---@type gamespeed
Native.MAP_SPEED_SLOWEST = nil

---@type gamespeed
Native.MAP_SPEED_SLOW = nil

---@type gamespeed
Native.MAP_SPEED_NORMAL = nil

---@type gamespeed
Native.MAP_SPEED_FAST = nil

---@type gamespeed
Native.MAP_SPEED_FASTEST = nil

---@type playerslotstate
Native.PLAYER_SLOT_STATE_EMPTY = nil

---@type playerslotstate
Native.PLAYER_SLOT_STATE_PLAYING = nil

---@type playerslotstate
Native.PLAYER_SLOT_STATE_LEFT = nil

---@type volumegroup
Native.SOUND_VOLUMEGROUP_UNITMOVEMENT = nil

---@type volumegroup
Native.SOUND_VOLUMEGROUP_UNITSOUNDS = nil

---@type volumegroup
Native.SOUND_VOLUMEGROUP_COMBAT = nil

---@type volumegroup
Native.SOUND_VOLUMEGROUP_SPELLS = nil

---@type volumegroup
Native.SOUND_VOLUMEGROUP_UI = nil

---@type volumegroup
Native.SOUND_VOLUMEGROUP_MUSIC = nil

---@type volumegroup
Native.SOUND_VOLUMEGROUP_AMBIENTSOUNDS = nil

---@type volumegroup
Native.SOUND_VOLUMEGROUP_FIRE = nil

---@type igamestate
Native.GAME_STATE_DIVINE_INTERVENTION = nil

---@type igamestate
Native.GAME_STATE_DISCONNECTED = nil

---@type fgamestate
Native.GAME_STATE_TIME_OF_DAY = nil

---@type playerstate
Native.PLAYER_STATE_GAME_RESULT = nil

---@type playerstate
Native.PLAYER_STATE_RESOURCE_GOLD = nil

---@type playerstate
Native.PLAYER_STATE_RESOURCE_LUMBER = nil

---@type playerstate
Native.PLAYER_STATE_RESOURCE_HERO_TOKENS = nil

---@type playerstate
Native.PLAYER_STATE_RESOURCE_FOOD_CAP = nil

---@type playerstate
Native.PLAYER_STATE_RESOURCE_FOOD_USED = nil

---@type playerstate
Native.PLAYER_STATE_FOOD_CAP_CEILING = nil

---@type playerstate
Native.PLAYER_STATE_GIVES_BOUNTY = nil

---@type playerstate
Native.PLAYER_STATE_ALLIED_VICTORY = nil

---@type playerstate
Native.PLAYER_STATE_PLACED = nil

---@type playerstate
Native.PLAYER_STATE_OBSERVER_ON_DEATH = nil

---@type playerstate
Native.PLAYER_STATE_OBSERVER = nil

---@type playerstate
Native.PLAYER_STATE_UNFOLLOWABLE = nil

---@type playerstate
Native.PLAYER_STATE_GOLD_UPKEEP_RATE = nil

---@type playerstate
Native.PLAYER_STATE_LUMBER_UPKEEP_RATE = nil

---@type playerstate
Native.PLAYER_STATE_GOLD_GATHERED = nil

---@type playerstate
Native.PLAYER_STATE_LUMBER_GATHERED = nil

---@type playerstate
Native.PLAYER_STATE_NO_CREEP_SLEEP = nil

---@type unitstate
Native.UNIT_STATE_LIFE = nil

---@type unitstate
Native.UNIT_STATE_MAX_LIFE = nil

---@type unitstate
Native.UNIT_STATE_MANA = nil

---@type unitstate
Native.UNIT_STATE_MAX_MANA = nil

---@type aidifficulty
Native.AI_DIFFICULTY_NEWBIE = nil

---@type aidifficulty
Native.AI_DIFFICULTY_NORMAL = nil

---@type aidifficulty
Native.AI_DIFFICULTY_INSANE = nil

---@type playerscore
Native.PLAYER_SCORE_UNITS_TRAINED = nil

---@type playerscore
Native.PLAYER_SCORE_UNITS_KILLED = nil

---@type playerscore
Native.PLAYER_SCORE_STRUCT_BUILT = nil

---@type playerscore
Native.PLAYER_SCORE_STRUCT_RAZED = nil

---@type playerscore
Native.PLAYER_SCORE_TECH_PERCENT = nil

---@type playerscore
Native.PLAYER_SCORE_FOOD_MAXPROD = nil

---@type playerscore
Native.PLAYER_SCORE_FOOD_MAXUSED = nil

---@type playerscore
Native.PLAYER_SCORE_HEROES_KILLED = nil

---@type playerscore
Native.PLAYER_SCORE_ITEMS_GAINED = nil

---@type playerscore
Native.PLAYER_SCORE_MERCS_HIRED = nil

---@type playerscore
Native.PLAYER_SCORE_GOLD_MINED_TOTAL = nil

---@type playerscore
Native.PLAYER_SCORE_GOLD_MINED_UPKEEP = nil

---@type playerscore
Native.PLAYER_SCORE_GOLD_LOST_UPKEEP = nil

---@type playerscore
Native.PLAYER_SCORE_GOLD_LOST_TAX = nil

---@type playerscore
Native.PLAYER_SCORE_GOLD_GIVEN = nil

---@type playerscore
Native.PLAYER_SCORE_GOLD_RECEIVED = nil

---@type playerscore
Native.PLAYER_SCORE_LUMBER_TOTAL = nil

---@type playerscore
Native.PLAYER_SCORE_LUMBER_LOST_UPKEEP = nil

---@type playerscore
Native.PLAYER_SCORE_LUMBER_LOST_TAX = nil

---@type playerscore
Native.PLAYER_SCORE_LUMBER_GIVEN = nil

---@type playerscore
Native.PLAYER_SCORE_LUMBER_RECEIVED = nil

---@type playerscore
Native.PLAYER_SCORE_UNIT_TOTAL = nil

---@type playerscore
Native.PLAYER_SCORE_HERO_TOTAL = nil

---@type playerscore
Native.PLAYER_SCORE_RESOURCE_TOTAL = nil

---@type playerscore
Native.PLAYER_SCORE_TOTAL = nil

---@type gameevent
Native.EVENT_GAME_VICTORY = nil

---@type gameevent
Native.EVENT_GAME_END_LEVEL = nil

---@type gameevent
Native.EVENT_GAME_VARIABLE_LIMIT = nil

---@type gameevent
Native.EVENT_GAME_STATE_LIMIT = nil

---@type gameevent
Native.EVENT_GAME_TIMER_EXPIRED = nil

---@type gameevent
Native.EVENT_GAME_ENTER_REGION = nil

---@type gameevent
Native.EVENT_GAME_LEAVE_REGION = nil

---@type gameevent
Native.EVENT_GAME_TRACKABLE_HIT = nil

---@type gameevent
Native.EVENT_GAME_TRACKABLE_TRACK = nil

---@type gameevent
Native.EVENT_GAME_SHOW_SKILL = nil

---@type gameevent
Native.EVENT_GAME_BUILD_SUBMENU = nil

---@type playerevent
Native.EVENT_PLAYER_STATE_LIMIT = nil

---@type playerevent
Native.EVENT_PLAYER_ALLIANCE_CHANGED = nil

---@type playerevent
Native.EVENT_PLAYER_DEFEAT = nil

---@type playerevent
Native.EVENT_PLAYER_VICTORY = nil

---@type playerevent
Native.EVENT_PLAYER_LEAVE = nil

---@type playerevent
Native.EVENT_PLAYER_CHAT = nil

---@type playerevent
Native.EVENT_PLAYER_END_CINEMATIC = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_ATTACKED = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_RESCUED = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_DEATH = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_DECAY = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_DETECTED = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_HIDDEN = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_SELECTED = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_DESELECTED = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_CONSTRUCT_START = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_CONSTRUCT_CANCEL = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_CONSTRUCT_FINISH = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_UPGRADE_START = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_UPGRADE_CANCEL = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_UPGRADE_FINISH = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_TRAIN_START = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_TRAIN_CANCEL = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_TRAIN_FINISH = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_RESEARCH_START = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_RESEARCH_CANCEL = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_RESEARCH_FINISH = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_ISSUED_ORDER = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_ISSUED_UNIT_ORDER = nil

---@type playerunitevent
Native.EVENT_PLAYER_HERO_LEVEL = nil

---@type playerunitevent
Native.EVENT_PLAYER_HERO_SKILL = nil

---@type playerunitevent
Native.EVENT_PLAYER_HERO_REVIVABLE = nil

---@type playerunitevent
Native.EVENT_PLAYER_HERO_REVIVE_START = nil

---@type playerunitevent
Native.EVENT_PLAYER_HERO_REVIVE_CANCEL = nil

---@type playerunitevent
Native.EVENT_PLAYER_HERO_REVIVE_FINISH = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_SUMMON = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_DROP_ITEM = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_PICKUP_ITEM = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_USE_ITEM = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_LOADED = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_DAMAGED = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_DAMAGING = nil

---@type unitevent
Native.EVENT_UNIT_DAMAGED = nil

---@type unitevent
Native.EVENT_UNIT_DAMAGING = nil

---@type unitevent
Native.EVENT_UNIT_DEATH = nil

---@type unitevent
Native.EVENT_UNIT_DECAY = nil

---@type unitevent
Native.EVENT_UNIT_DETECTED = nil

---@type unitevent
Native.EVENT_UNIT_HIDDEN = nil

---@type unitevent
Native.EVENT_UNIT_SELECTED = nil

---@type unitevent
Native.EVENT_UNIT_DESELECTED = nil

---@type unitevent
Native.EVENT_UNIT_STATE_LIMIT = nil

---@type unitevent
Native.EVENT_UNIT_ACQUIRED_TARGET = nil

---@type unitevent
Native.EVENT_UNIT_TARGET_IN_RANGE = nil

---@type unitevent
Native.EVENT_UNIT_ATTACKED = nil

---@type unitevent
Native.EVENT_UNIT_RESCUED = nil

---@type unitevent
Native.EVENT_UNIT_CONSTRUCT_CANCEL = nil

---@type unitevent
Native.EVENT_UNIT_CONSTRUCT_FINISH = nil

---@type unitevent
Native.EVENT_UNIT_UPGRADE_START = nil

---@type unitevent
Native.EVENT_UNIT_UPGRADE_CANCEL = nil

---@type unitevent
Native.EVENT_UNIT_UPGRADE_FINISH = nil

---@type unitevent
Native.EVENT_UNIT_TRAIN_START = nil

---@type unitevent
Native.EVENT_UNIT_TRAIN_CANCEL = nil

---@type unitevent
Native.EVENT_UNIT_TRAIN_FINISH = nil

---@type unitevent
Native.EVENT_UNIT_RESEARCH_START = nil

---@type unitevent
Native.EVENT_UNIT_RESEARCH_CANCEL = nil

---@type unitevent
Native.EVENT_UNIT_RESEARCH_FINISH = nil

---@type unitevent
Native.EVENT_UNIT_ISSUED_ORDER = nil

---@type unitevent
Native.EVENT_UNIT_ISSUED_POINT_ORDER = nil

---@type unitevent
Native.EVENT_UNIT_ISSUED_TARGET_ORDER = nil

---@type unitevent
Native.EVENT_UNIT_HERO_LEVEL = nil

---@type unitevent
Native.EVENT_UNIT_HERO_SKILL = nil

---@type unitevent
Native.EVENT_UNIT_HERO_REVIVABLE = nil

---@type unitevent
Native.EVENT_UNIT_HERO_REVIVE_START = nil

---@type unitevent
Native.EVENT_UNIT_HERO_REVIVE_CANCEL = nil

---@type unitevent
Native.EVENT_UNIT_HERO_REVIVE_FINISH = nil

---@type unitevent
Native.EVENT_UNIT_SUMMON = nil

---@type unitevent
Native.EVENT_UNIT_DROP_ITEM = nil

---@type unitevent
Native.EVENT_UNIT_PICKUP_ITEM = nil

---@type unitevent
Native.EVENT_UNIT_USE_ITEM = nil

---@type unitevent
Native.EVENT_UNIT_LOADED = nil

---@type widgetevent
Native.EVENT_WIDGET_DEATH = nil

---@type dialogevent
Native.EVENT_DIALOG_BUTTON_CLICK = nil

---@type dialogevent
Native.EVENT_DIALOG_CLICK = nil

---@type gameevent
Native.EVENT_GAME_LOADED = nil

---@type gameevent
Native.EVENT_GAME_TOURNAMENT_FINISH_SOON = nil

---@type gameevent
Native.EVENT_GAME_TOURNAMENT_FINISH_NOW = nil

---@type gameevent
Native.EVENT_GAME_SAVE = nil

---@type gameevent
Native.EVENT_GAME_CUSTOM_UI_FRAME = nil

---@type playerevent
Native.EVENT_PLAYER_ARROW_LEFT_DOWN = nil

---@type playerevent
Native.EVENT_PLAYER_ARROW_LEFT_UP = nil

---@type playerevent
Native.EVENT_PLAYER_ARROW_RIGHT_DOWN = nil

---@type playerevent
Native.EVENT_PLAYER_ARROW_RIGHT_UP = nil

---@type playerevent
Native.EVENT_PLAYER_ARROW_DOWN_DOWN = nil

---@type playerevent
Native.EVENT_PLAYER_ARROW_DOWN_UP = nil

---@type playerevent
Native.EVENT_PLAYER_ARROW_UP_DOWN = nil

---@type playerevent
Native.EVENT_PLAYER_ARROW_UP_UP = nil

---@type playerevent
Native.EVENT_PLAYER_MOUSE_DOWN = nil

---@type playerevent
Native.EVENT_PLAYER_MOUSE_UP = nil

---@type playerevent
Native.EVENT_PLAYER_MOUSE_MOVE = nil

---@type playerevent
Native.EVENT_PLAYER_SYNC_DATA = nil

---@type playerevent
Native.EVENT_PLAYER_KEY = nil

---@type playerevent
Native.EVENT_PLAYER_KEY_DOWN = nil

---@type playerevent
Native.EVENT_PLAYER_KEY_UP = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_SELL = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_CHANGE_OWNER = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_SELL_ITEM = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_SPELL_CHANNEL = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_SPELL_CAST = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_SPELL_EFFECT = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_SPELL_FINISH = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_SPELL_ENDCAST = nil

---@type playerunitevent
Native.EVENT_PLAYER_UNIT_PAWN_ITEM = nil

---@type unitevent
Native.EVENT_UNIT_SELL = nil

---@type unitevent
Native.EVENT_UNIT_CHANGE_OWNER = nil

---@type unitevent
Native.EVENT_UNIT_SELL_ITEM = nil

---@type unitevent
Native.EVENT_UNIT_SPELL_CHANNEL = nil

---@type unitevent
Native.EVENT_UNIT_SPELL_CAST = nil

---@type unitevent
Native.EVENT_UNIT_SPELL_EFFECT = nil

---@type unitevent
Native.EVENT_UNIT_SPELL_FINISH = nil

---@type unitevent
Native.EVENT_UNIT_SPELL_ENDCAST = nil

---@type unitevent
Native.EVENT_UNIT_PAWN_ITEM = nil

---@type limitop
Native.LESS_THAN = nil

---@type limitop
Native.LESS_THAN_OR_EQUAL = nil

---@type limitop
Native.EQUAL = nil

---@type limitop
Native.GREATER_THAN_OR_EQUAL = nil

---@type limitop
Native.GREATER_THAN = nil

---@type limitop
Native.NOT_EQUAL = nil

---@type unittype
Native.UNIT_TYPE_HERO = nil

---@type unittype
Native.UNIT_TYPE_DEAD = nil

---@type unittype
Native.UNIT_TYPE_STRUCTURE = nil

---@type unittype
Native.UNIT_TYPE_FLYING = nil

---@type unittype
Native.UNIT_TYPE_GROUND = nil

---@type unittype
Native.UNIT_TYPE_ATTACKS_FLYING = nil

---@type unittype
Native.UNIT_TYPE_ATTACKS_GROUND = nil

---@type unittype
Native.UNIT_TYPE_MELEE_ATTACKER = nil

---@type unittype
Native.UNIT_TYPE_RANGED_ATTACKER = nil

---@type unittype
Native.UNIT_TYPE_GIANT = nil

---@type unittype
Native.UNIT_TYPE_SUMMONED = nil

---@type unittype
Native.UNIT_TYPE_STUNNED = nil

---@type unittype
Native.UNIT_TYPE_PLAGUED = nil

---@type unittype
Native.UNIT_TYPE_SNARED = nil

---@type unittype
Native.UNIT_TYPE_UNDEAD = nil

---@type unittype
Native.UNIT_TYPE_MECHANICAL = nil

---@type unittype
Native.UNIT_TYPE_PEON = nil

---@type unittype
Native.UNIT_TYPE_SAPPER = nil

---@type unittype
Native.UNIT_TYPE_TOWNHALL = nil

---@type unittype
Native.UNIT_TYPE_ANCIENT = nil

---@type unittype
Native.UNIT_TYPE_TAUREN = nil

---@type unittype
Native.UNIT_TYPE_POISONED = nil

---@type unittype
Native.UNIT_TYPE_POLYMORPHED = nil

---@type unittype
Native.UNIT_TYPE_SLEEPING = nil

---@type unittype
Native.UNIT_TYPE_RESISTANT = nil

---@type unittype
Native.UNIT_TYPE_ETHEREAL = nil

---@type unittype
Native.UNIT_TYPE_MAGIC_IMMUNE = nil

---@type itemtype
Native.ITEM_TYPE_PERMANENT = nil

---@type itemtype
Native.ITEM_TYPE_CHARGED = nil

---@type itemtype
Native.ITEM_TYPE_POWERUP = nil

---@type itemtype
Native.ITEM_TYPE_ARTIFACT = nil

---@type itemtype
Native.ITEM_TYPE_PURCHASABLE = nil

---@type itemtype
Native.ITEM_TYPE_CAMPAIGN = nil

---@type itemtype
Native.ITEM_TYPE_MISCELLANEOUS = nil

---@type itemtype
Native.ITEM_TYPE_UNKNOWN = nil

---@type itemtype
Native.ITEM_TYPE_ANY = nil

---@type itemtype
Native.ITEM_TYPE_TOME = nil

---@type camerafield
Native.CAMERA_FIELD_TARGET_DISTANCE = nil

---@type camerafield
Native.CAMERA_FIELD_FARZ = nil

---@type camerafield
Native.CAMERA_FIELD_ANGLE_OF_ATTACK = nil

---@type camerafield
Native.CAMERA_FIELD_FIELD_OF_VIEW = nil

---@type camerafield
Native.CAMERA_FIELD_ROLL = nil

---@type camerafield
Native.CAMERA_FIELD_ROTATION = nil

---@type camerafield
Native.CAMERA_FIELD_ZOFFSET = nil

---@type camerafield
Native.CAMERA_FIELD_NEARZ = nil

---@type camerafield
Native.CAMERA_FIELD_LOCAL_PITCH = nil

---@type camerafield
Native.CAMERA_FIELD_LOCAL_YAW = nil

---@type camerafield
Native.CAMERA_FIELD_LOCAL_ROLL = nil

---@type blendmode
Native.BLEND_MODE_NONE = nil

---@type blendmode
Native.BLEND_MODE_DONT_CARE = nil

---@type blendmode
Native.BLEND_MODE_KEYALPHA = nil

---@type blendmode
Native.BLEND_MODE_BLEND = nil

---@type blendmode
Native.BLEND_MODE_ADDITIVE = nil

---@type blendmode
Native.BLEND_MODE_MODULATE = nil

---@type blendmode
Native.BLEND_MODE_MODULATE_2X = nil

---@type raritycontrol
Native.RARITY_FREQUENT = nil

---@type raritycontrol
Native.RARITY_RARE = nil

---@type texmapflags
Native.TEXMAP_FLAG_NONE = nil

---@type texmapflags
Native.TEXMAP_FLAG_WRAP_U = nil

---@type texmapflags
Native.TEXMAP_FLAG_WRAP_V = nil

---@type texmapflags
Native.TEXMAP_FLAG_WRAP_UV = nil

---@type fogstate
Native.FOG_OF_WAR_MASKED = nil

---@type fogstate
Native.FOG_OF_WAR_FOGGED = nil

---@type fogstate
Native.FOG_OF_WAR_VISIBLE = nil

---@type integer
Native.CAMERA_MARGIN_LEFT = nil

---@type integer
Native.CAMERA_MARGIN_RIGHT = nil

---@type integer
Native.CAMERA_MARGIN_TOP = nil

---@type integer
Native.CAMERA_MARGIN_BOTTOM = nil

---@type effecttype
Native.EFFECT_TYPE_EFFECT = nil

---@type effecttype
Native.EFFECT_TYPE_TARGET = nil

---@type effecttype
Native.EFFECT_TYPE_CASTER = nil

---@type effecttype
Native.EFFECT_TYPE_SPECIAL = nil

---@type effecttype
Native.EFFECT_TYPE_AREA_EFFECT = nil

---@type effecttype
Native.EFFECT_TYPE_MISSILE = nil

---@type effecttype
Native.EFFECT_TYPE_LIGHTNING = nil

---@type soundtype
Native.SOUND_TYPE_EFFECT = nil

---@type soundtype
Native.SOUND_TYPE_EFFECT_LOOPED = nil

---@type originframetype
Native.ORIGIN_FRAME_GAME_UI = nil

---@type originframetype
Native.ORIGIN_FRAME_COMMAND_BUTTON = nil

---@type originframetype
Native.ORIGIN_FRAME_HERO_BAR = nil

---@type originframetype
Native.ORIGIN_FRAME_HERO_BUTTON = nil

---@type originframetype
Native.ORIGIN_FRAME_HERO_HP_BAR = nil

---@type originframetype
Native.ORIGIN_FRAME_HERO_MANA_BAR = nil

---@type originframetype
Native.ORIGIN_FRAME_HERO_BUTTON_INDICATOR = nil

---@type originframetype
Native.ORIGIN_FRAME_ITEM_BUTTON = nil

---@type originframetype
Native.ORIGIN_FRAME_MINIMAP = nil

---@type originframetype
Native.ORIGIN_FRAME_MINIMAP_BUTTON = nil

---@type originframetype
Native.ORIGIN_FRAME_SYSTEM_BUTTON = nil

---@type originframetype
Native.ORIGIN_FRAME_TOOLTIP = nil

---@type originframetype
Native.ORIGIN_FRAME_UBERTOOLTIP = nil

---@type originframetype
Native.ORIGIN_FRAME_CHAT_MSG = nil

---@type originframetype
Native.ORIGIN_FRAME_UNIT_MSG = nil

---@type originframetype
Native.ORIGIN_FRAME_TOP_MSG = nil

---@type originframetype
Native.ORIGIN_FRAME_PORTRAIT = nil

---@type originframetype
Native.ORIGIN_FRAME_WORLD_FRAME = nil

---@type originframetype
Native.ORIGIN_FRAME_SIMPLE_UI_PARENT = nil

---@type originframetype
Native.ORIGIN_FRAME_PORTRAIT_HP_TEXT = nil

---@type originframetype
Native.ORIGIN_FRAME_PORTRAIT_MANA_TEXT = nil

---@type originframetype
Native.ORIGIN_FRAME_UNIT_PANEL_BUFF_BAR = nil

---@type originframetype
Native.ORIGIN_FRAME_UNIT_PANEL_BUFF_BAR_LABEL = nil

---@type framepointtype
Native.FRAMEPOINT_TOPLEFT = nil

---@type framepointtype
Native.FRAMEPOINT_TOP = nil

---@type framepointtype
Native.FRAMEPOINT_TOPRIGHT = nil

---@type framepointtype
Native.FRAMEPOINT_LEFT = nil

---@type framepointtype
Native.FRAMEPOINT_CENTER = nil

---@type framepointtype
Native.FRAMEPOINT_RIGHT = nil

---@type framepointtype
Native.FRAMEPOINT_BOTTOMLEFT = nil

---@type framepointtype
Native.FRAMEPOINT_BOTTOM = nil

---@type framepointtype
Native.FRAMEPOINT_BOTTOMRIGHT = nil

---@type textaligntype
Native.TEXT_JUSTIFY_TOP = nil

---@type textaligntype
Native.TEXT_JUSTIFY_MIDDLE = nil

---@type textaligntype
Native.TEXT_JUSTIFY_BOTTOM = nil

---@type textaligntype
Native.TEXT_JUSTIFY_LEFT = nil

---@type textaligntype
Native.TEXT_JUSTIFY_CENTER = nil

---@type textaligntype
Native.TEXT_JUSTIFY_RIGHT = nil

---@type frameeventtype
Native.FRAMEEVENT_CONTROL_CLICK = nil

---@type frameeventtype
Native.FRAMEEVENT_MOUSE_ENTER = nil

---@type frameeventtype
Native.FRAMEEVENT_MOUSE_LEAVE = nil

---@type frameeventtype
Native.FRAMEEVENT_MOUSE_UP = nil

---@type frameeventtype
Native.FRAMEEVENT_MOUSE_DOWN = nil

---@type frameeventtype
Native.FRAMEEVENT_MOUSE_WHEEL = nil

---@type frameeventtype
Native.FRAMEEVENT_CHECKBOX_CHECKED = nil

---@type frameeventtype
Native.FRAMEEVENT_CHECKBOX_UNCHECKED = nil

---@type frameeventtype
Native.FRAMEEVENT_EDITBOX_TEXT_CHANGED = nil

---@type frameeventtype
Native.FRAMEEVENT_POPUPMENU_ITEM_CHANGED = nil

---@type frameeventtype
Native.FRAMEEVENT_MOUSE_DOUBLECLICK = nil

---@type frameeventtype
Native.FRAMEEVENT_SPRITE_ANIM_UPDATE = nil

---@type frameeventtype
Native.FRAMEEVENT_SLIDER_VALUE_CHANGED = nil

---@type frameeventtype
Native.FRAMEEVENT_DIALOG_CANCEL = nil

---@type frameeventtype
Native.FRAMEEVENT_DIALOG_ACCEPT = nil

---@type frameeventtype
Native.FRAMEEVENT_EDITBOX_ENTER = nil

---@type oskeytype
Native.OSKEY_BACKSPACE = nil

---@type oskeytype
Native.OSKEY_TAB = nil

---@type oskeytype
Native.OSKEY_CLEAR = nil

---@type oskeytype
Native.OSKEY_RETURN = nil

---@type oskeytype
Native.OSKEY_SHIFT = nil

---@type oskeytype
Native.OSKEY_CONTROL = nil

---@type oskeytype
Native.OSKEY_ALT = nil

---@type oskeytype
Native.OSKEY_PAUSE = nil

---@type oskeytype
Native.OSKEY_CAPSLOCK = nil

---@type oskeytype
Native.OSKEY_KANA = nil

---@type oskeytype
Native.OSKEY_HANGUL = nil

---@type oskeytype
Native.OSKEY_JUNJA = nil

---@type oskeytype
Native.OSKEY_FINAL = nil

---@type oskeytype
Native.OSKEY_HANJA = nil

---@type oskeytype
Native.OSKEY_KANJI = nil

---@type oskeytype
Native.OSKEY_ESCAPE = nil

---@type oskeytype
Native.OSKEY_CONVERT = nil

---@type oskeytype
Native.OSKEY_NONCONVERT = nil

---@type oskeytype
Native.OSKEY_ACCEPT = nil

---@type oskeytype
Native.OSKEY_MODECHANGE = nil

---@type oskeytype
Native.OSKEY_SPACE = nil

---@type oskeytype
Native.OSKEY_PAGEUP = nil

---@type oskeytype
Native.OSKEY_PAGEDOWN = nil

---@type oskeytype
Native.OSKEY_END = nil

---@type oskeytype
Native.OSKEY_HOME = nil

---@type oskeytype
Native.OSKEY_LEFT = nil

---@type oskeytype
Native.OSKEY_UP = nil

---@type oskeytype
Native.OSKEY_RIGHT = nil

---@type oskeytype
Native.OSKEY_DOWN = nil

---@type oskeytype
Native.OSKEY_SELECT = nil

---@type oskeytype
Native.OSKEY_PRINT = nil

---@type oskeytype
Native.OSKEY_EXECUTE = nil

---@type oskeytype
Native.OSKEY_PRINTSCREEN = nil

---@type oskeytype
Native.OSKEY_INSERT = nil

---@type oskeytype
Native.OSKEY_DELETE = nil

---@type oskeytype
Native.OSKEY_HELP = nil

---@type oskeytype
Native.OSKEY_0 = nil

---@type oskeytype
Native.OSKEY_1 = nil

---@type oskeytype
Native.OSKEY_2 = nil

---@type oskeytype
Native.OSKEY_3 = nil

---@type oskeytype
Native.OSKEY_4 = nil

---@type oskeytype
Native.OSKEY_5 = nil

---@type oskeytype
Native.OSKEY_6 = nil

---@type oskeytype
Native.OSKEY_7 = nil

---@type oskeytype
Native.OSKEY_8 = nil

---@type oskeytype
Native.OSKEY_9 = nil

---@type oskeytype
Native.OSKEY_A = nil

---@type oskeytype
Native.OSKEY_B = nil

---@type oskeytype
Native.OSKEY_C = nil

---@type oskeytype
Native.OSKEY_D = nil

---@type oskeytype
Native.OSKEY_E = nil

---@type oskeytype
Native.OSKEY_F = nil

---@type oskeytype
Native.OSKEY_G = nil

---@type oskeytype
Native.OSKEY_H = nil

---@type oskeytype
Native.OSKEY_I = nil

---@type oskeytype
Native.OSKEY_J = nil

---@type oskeytype
Native.OSKEY_K = nil

---@type oskeytype
Native.OSKEY_L = nil

---@type oskeytype
Native.OSKEY_M = nil

---@type oskeytype
Native.OSKEY_N = nil

---@type oskeytype
Native.OSKEY_O = nil

---@type oskeytype
Native.OSKEY_P = nil

---@type oskeytype
Native.OSKEY_Q = nil

---@type oskeytype
Native.OSKEY_R = nil

---@type oskeytype
Native.OSKEY_S = nil

---@type oskeytype
Native.OSKEY_T = nil

---@type oskeytype
Native.OSKEY_U = nil

---@type oskeytype
Native.OSKEY_V = nil

---@type oskeytype
Native.OSKEY_W = nil

---@type oskeytype
Native.OSKEY_X = nil

---@type oskeytype
Native.OSKEY_Y = nil

---@type oskeytype
Native.OSKEY_Z = nil

---@type oskeytype
Native.OSKEY_LMETA = nil

---@type oskeytype
Native.OSKEY_RMETA = nil

---@type oskeytype
Native.OSKEY_APPS = nil

---@type oskeytype
Native.OSKEY_SLEEP = nil

---@type oskeytype
Native.OSKEY_NUMPAD0 = nil

---@type oskeytype
Native.OSKEY_NUMPAD1 = nil

---@type oskeytype
Native.OSKEY_NUMPAD2 = nil

---@type oskeytype
Native.OSKEY_NUMPAD3 = nil

---@type oskeytype
Native.OSKEY_NUMPAD4 = nil

---@type oskeytype
Native.OSKEY_NUMPAD5 = nil

---@type oskeytype
Native.OSKEY_NUMPAD6 = nil

---@type oskeytype
Native.OSKEY_NUMPAD7 = nil

---@type oskeytype
Native.OSKEY_NUMPAD8 = nil

---@type oskeytype
Native.OSKEY_NUMPAD9 = nil

---@type oskeytype
Native.OSKEY_MULTIPLY = nil

---@type oskeytype
Native.OSKEY_ADD = nil

---@type oskeytype
Native.OSKEY_SEPARATOR = nil

---@type oskeytype
Native.OSKEY_SUBTRACT = nil

---@type oskeytype
Native.OSKEY_DECIMAL = nil

---@type oskeytype
Native.OSKEY_DIVIDE = nil

---@type oskeytype
Native.OSKEY_F1 = nil

---@type oskeytype
Native.OSKEY_F2 = nil

---@type oskeytype
Native.OSKEY_F3 = nil

---@type oskeytype
Native.OSKEY_F4 = nil

---@type oskeytype
Native.OSKEY_F5 = nil

---@type oskeytype
Native.OSKEY_F6 = nil

---@type oskeytype
Native.OSKEY_F7 = nil

---@type oskeytype
Native.OSKEY_F8 = nil

---@type oskeytype
Native.OSKEY_F9 = nil

---@type oskeytype
Native.OSKEY_F10 = nil

---@type oskeytype
Native.OSKEY_F11 = nil

---@type oskeytype
Native.OSKEY_F12 = nil

---@type oskeytype
Native.OSKEY_F13 = nil

---@type oskeytype
Native.OSKEY_F14 = nil

---@type oskeytype
Native.OSKEY_F15 = nil

---@type oskeytype
Native.OSKEY_F16 = nil

---@type oskeytype
Native.OSKEY_F17 = nil

---@type oskeytype
Native.OSKEY_F18 = nil

---@type oskeytype
Native.OSKEY_F19 = nil

---@type oskeytype
Native.OSKEY_F20 = nil

---@type oskeytype
Native.OSKEY_F21 = nil

---@type oskeytype
Native.OSKEY_F22 = nil

---@type oskeytype
Native.OSKEY_F23 = nil

---@type oskeytype
Native.OSKEY_F24 = nil

---@type oskeytype
Native.OSKEY_NUMLOCK = nil

---@type oskeytype
Native.OSKEY_SCROLLLOCK = nil

---@type oskeytype
Native.OSKEY_OEM_NEC_EQUAL = nil

---@type oskeytype
Native.OSKEY_OEM_FJ_JISHO = nil

---@type oskeytype
Native.OSKEY_OEM_FJ_MASSHOU = nil

---@type oskeytype
Native.OSKEY_OEM_FJ_TOUROKU = nil

---@type oskeytype
Native.OSKEY_OEM_FJ_LOYA = nil

---@type oskeytype
Native.OSKEY_OEM_FJ_ROYA = nil

---@type oskeytype
Native.OSKEY_LSHIFT = nil

---@type oskeytype
Native.OSKEY_RSHIFT = nil

---@type oskeytype
Native.OSKEY_LCONTROL = nil

---@type oskeytype
Native.OSKEY_RCONTROL = nil

---@type oskeytype
Native.OSKEY_LALT = nil

---@type oskeytype
Native.OSKEY_RALT = nil

---@type oskeytype
Native.OSKEY_BROWSER_BACK = nil

---@type oskeytype
Native.OSKEY_BROWSER_FORWARD = nil

---@type oskeytype
Native.OSKEY_BROWSER_REFRESH = nil

---@type oskeytype
Native.OSKEY_BROWSER_STOP = nil

---@type oskeytype
Native.OSKEY_BROWSER_SEARCH = nil

---@type oskeytype
Native.OSKEY_BROWSER_FAVORITES = nil

---@type oskeytype
Native.OSKEY_BROWSER_HOME = nil

---@type oskeytype
Native.OSKEY_VOLUME_MUTE = nil

---@type oskeytype
Native.OSKEY_VOLUME_DOWN = nil

---@type oskeytype
Native.OSKEY_VOLUME_UP = nil

---@type oskeytype
Native.OSKEY_MEDIA_NEXT_TRACK = nil

---@type oskeytype
Native.OSKEY_MEDIA_PREV_TRACK = nil

---@type oskeytype
Native.OSKEY_MEDIA_STOP = nil

---@type oskeytype
Native.OSKEY_MEDIA_PLAY_PAUSE = nil

---@type oskeytype
Native.OSKEY_LAUNCH_MAIL = nil

---@type oskeytype
Native.OSKEY_LAUNCH_MEDIA_SELECT = nil

---@type oskeytype
Native.OSKEY_LAUNCH_APP1 = nil

---@type oskeytype
Native.OSKEY_LAUNCH_APP2 = nil

---@type oskeytype
Native.OSKEY_OEM_1 = nil

---@type oskeytype
Native.OSKEY_OEM_PLUS = nil

---@type oskeytype
Native.OSKEY_OEM_COMMA = nil

---@type oskeytype
Native.OSKEY_OEM_MINUS = nil

---@type oskeytype
Native.OSKEY_OEM_PERIOD = nil

---@type oskeytype
Native.OSKEY_OEM_2 = nil

---@type oskeytype
Native.OSKEY_OEM_3 = nil

---@type oskeytype
Native.OSKEY_OEM_4 = nil

---@type oskeytype
Native.OSKEY_OEM_5 = nil

---@type oskeytype
Native.OSKEY_OEM_6 = nil

---@type oskeytype
Native.OSKEY_OEM_7 = nil

---@type oskeytype
Native.OSKEY_OEM_8 = nil

---@type oskeytype
Native.OSKEY_OEM_AX = nil

---@type oskeytype
Native.OSKEY_OEM_102 = nil

---@type oskeytype
Native.OSKEY_ICO_HELP = nil

---@type oskeytype
Native.OSKEY_ICO_00 = nil

---@type oskeytype
Native.OSKEY_PROCESSKEY = nil

---@type oskeytype
Native.OSKEY_ICO_CLEAR = nil

---@type oskeytype
Native.OSKEY_PACKET = nil

---@type oskeytype
Native.OSKEY_OEM_RESET = nil

---@type oskeytype
Native.OSKEY_OEM_JUMP = nil

---@type oskeytype
Native.OSKEY_OEM_PA1 = nil

---@type oskeytype
Native.OSKEY_OEM_PA2 = nil

---@type oskeytype
Native.OSKEY_OEM_PA3 = nil

---@type oskeytype
Native.OSKEY_OEM_WSCTRL = nil

---@type oskeytype
Native.OSKEY_OEM_CUSEL = nil

---@type oskeytype
Native.OSKEY_OEM_ATTN = nil

---@type oskeytype
Native.OSKEY_OEM_FINISH = nil

---@type oskeytype
Native.OSKEY_OEM_COPY = nil

---@type oskeytype
Native.OSKEY_OEM_AUTO = nil

---@type oskeytype
Native.OSKEY_OEM_ENLW = nil

---@type oskeytype
Native.OSKEY_OEM_BACKTAB = nil

---@type oskeytype
Native.OSKEY_ATTN = nil

---@type oskeytype
Native.OSKEY_CRSEL = nil

---@type oskeytype
Native.OSKEY_EXSEL = nil

---@type oskeytype
Native.OSKEY_EREOF = nil

---@type oskeytype
Native.OSKEY_PLAY = nil

---@type oskeytype
Native.OSKEY_ZOOM = nil

---@type oskeytype
Native.OSKEY_NONAME = nil

---@type oskeytype
Native.OSKEY_PA1 = nil

---@type oskeytype
Native.OSKEY_OEM_CLEAR = nil

---@type abilityintegerfield
Native.ABILITY_IF_BUTTON_POSITION_NORMAL_X = nil

---@type abilityintegerfield
Native.ABILITY_IF_BUTTON_POSITION_NORMAL_Y = nil

---@type abilityintegerfield
Native.ABILITY_IF_BUTTON_POSITION_ACTIVATED_X = nil

---@type abilityintegerfield
Native.ABILITY_IF_BUTTON_POSITION_ACTIVATED_Y = nil

---@type abilityintegerfield
Native.ABILITY_IF_BUTTON_POSITION_RESEARCH_X = nil

---@type abilityintegerfield
Native.ABILITY_IF_BUTTON_POSITION_RESEARCH_Y = nil

---@type abilityintegerfield
Native.ABILITY_IF_MISSILE_SPEED = nil

---@type abilityintegerfield
Native.ABILITY_IF_TARGET_ATTACHMENTS = nil

---@type abilityintegerfield
Native.ABILITY_IF_CASTER_ATTACHMENTS = nil

---@type abilityintegerfield
Native.ABILITY_IF_PRIORITY = nil

---@type abilityintegerfield
Native.ABILITY_IF_LEVELS = nil

---@type abilityintegerfield
Native.ABILITY_IF_REQUIRED_LEVEL = nil

---@type abilityintegerfield
Native.ABILITY_IF_LEVEL_SKIP_REQUIREMENT = nil

---@type abilitybooleanfield
Native.ABILITY_BF_HERO_ABILITY = nil

---@type abilitybooleanfield
Native.ABILITY_BF_ITEM_ABILITY = nil

---@type abilitybooleanfield
Native.ABILITY_BF_CHECK_DEPENDENCIES = nil

---@type abilityrealfield
Native.ABILITY_RF_ARF_MISSILE_ARC = nil

---@type abilitystringfield
Native.ABILITY_SF_NAME = nil

---@type abilitystringfield
Native.ABILITY_SF_ICON_ACTIVATED = nil

---@type abilitystringfield
Native.ABILITY_SF_ICON_RESEARCH = nil

---@type abilitystringfield
Native.ABILITY_SF_EFFECT_SOUND = nil

---@type abilitystringfield
Native.ABILITY_SF_EFFECT_SOUND_LOOPING = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MANA_COST = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_NUMBER_OF_WAVES = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_NUMBER_OF_SHARDS = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_NUMBER_OF_UNITS_TELEPORTED = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_SUMMONED_UNIT_COUNT_HWE2 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_NUMBER_OF_IMAGES = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_NUMBER_OF_CORPSES_RAISED_UAN1 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MORPHING_FLAGS = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_STRENGTH_BONUS_NRG5 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_DEFENSE_BONUS_NRG6 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_NUMBER_OF_TARGETS_HIT = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_DETECTION_TYPE_OFS1 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_NUMBER_OF_SUMMONED_UNITS_OSF2 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_NUMBER_OF_SUMMONED_UNITS_EFN1 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_NUMBER_OF_CORPSES_RAISED_HRE1 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_STACK_FLAGS = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MINIMUM_NUMBER_OF_UNITS = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MAXIMUM_NUMBER_OF_UNITS_NDP3 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_NUMBER_OF_UNITS_CREATED_NRC2 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_SHIELD_LIFE = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MANA_LOSS_AMS4 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_GOLD_PER_INTERVAL_BGM1 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MAX_NUMBER_OF_MINERS = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_CARGO_CAPACITY = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MAXIMUM_CREEP_LEVEL_DEV3 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MAX_CREEP_LEVEL_DEV1 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_GOLD_PER_INTERVAL_EGM1 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_DEFENSE_REDUCTION = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_DETECTION_TYPE_FLA1 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_FLARE_COUNT = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MAX_GOLD = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MINING_CAPACITY = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MAXIMUM_NUMBER_OF_CORPSES_GYD1 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_DAMAGE_TO_TREE = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_LUMBER_CAPACITY = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_GOLD_CAPACITY = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_DEFENSE_INCREASE_INF2 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_INTERACTION_TYPE = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_GOLD_COST_NDT1 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_LUMBER_COST_NDT2 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_DETECTION_TYPE_NDT3 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_STACKING_TYPE_POI4 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_STACKING_TYPE_POA5 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MAXIMUM_CREEP_LEVEL_PLY1 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MAXIMUM_CREEP_LEVEL_POS1 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MOVEMENT_UPDATE_FREQUENCY_PRG1 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_ATTACK_UPDATE_FREQUENCY_PRG2 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MANA_LOSS_PRG6 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_UNITS_SUMMONED_TYPE_ONE = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_UNITS_SUMMONED_TYPE_TWO = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MAX_UNITS_SUMMONED = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_ALLOW_WHEN_FULL_REJ3 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MAXIMUM_UNITS_CHARGED_TO_CASTER = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MAXIMUM_UNITS_AFFECTED = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_DEFENSE_INCREASE_ROA2 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MAX_UNITS_ROA7 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_ROOTED_WEAPONS = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_UPROOTED_WEAPONS = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_UPROOTED_DEFENSE_TYPE = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_ACCUMULATION_STEP = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_NUMBER_OF_OWLS = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_STACKING_TYPE_SPO4 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_NUMBER_OF_UNITS = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_SPIDER_CAPACITY = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_INTERVALS_BEFORE_CHANGING_TREES = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_AGILITY_BONUS = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_INTELLIGENCE_BONUS = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_STRENGTH_BONUS_ISTR = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_ATTACK_BONUS = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_DEFENSE_BONUS_IDEF = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_SUMMON_1_AMOUNT = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_SUMMON_2_AMOUNT = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_EXPERIENCE_GAINED = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_HIT_POINTS_GAINED_IHPG = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MANA_POINTS_GAINED_IMPG = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_HIT_POINTS_GAINED_IHP2 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MANA_POINTS_GAINED_IMP2 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_DAMAGE_BONUS_DICE = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_ARMOR_PENALTY_IARP = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_ENABLED_ATTACK_INDEX_IOB5 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_LEVELS_GAINED = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MAX_LIFE_GAINED = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MAX_MANA_GAINED = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_GOLD_GIVEN = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_LUMBER_GIVEN = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_DETECTION_TYPE_IFA1 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MAXIMUM_CREEP_LEVEL_ICRE = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MOVEMENT_SPEED_BONUS = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_HIT_POINTS_REGENERATED_PER_SECOND = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_SIGHT_RANGE_BONUS = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_DAMAGE_PER_DURATION = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MANA_USED_PER_SECOND = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_EXTRA_MANA_REQUIRED = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_DETECTION_RADIUS_IDET = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MANA_LOSS_PER_UNIT_IDIM = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_DAMAGE_TO_SUMMONED_UNITS_IDID = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MAXIMUM_NUMBER_OF_UNITS_IREC = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_DELAY_AFTER_DEATH_SECONDS = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_RESTORED_LIFE = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_RESTORED_MANA__1_FOR_CURRENT = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_HIT_POINTS_RESTORED = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MANA_POINTS_RESTORED = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MAXIMUM_NUMBER_OF_UNITS_ITPM = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_NUMBER_OF_CORPSES_RAISED_CAD1 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_TERRAIN_DEFORMATION_DURATION_MS = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MAXIMUM_UNITS = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_DETECTION_TYPE_DET1 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_GOLD_COST_PER_STRUCTURE = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_LUMBER_COST_PER_USE = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_DETECTION_TYPE_NSP3 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_NUMBER_OF_SWARM_UNITS = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MAX_SWARM_UNITS_PER_TARGET = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_NUMBER_OF_SUMMONED_UNITS_NBA2 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MAXIMUM_CREEP_LEVEL_NCH1 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_ATTACKS_PREVENTED = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MAXIMUM_NUMBER_OF_TARGETS_EFK3 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_NUMBER_OF_SUMMONED_UNITS_ESV1 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MAXIMUM_NUMBER_OF_CORPSES_EXH1 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_ITEM_CAPACITY = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MAXIMUM_NUMBER_OF_TARGETS_SPL2 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_ALLOW_WHEN_FULL_IRL3 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MAXIMUM_DISPELLED_UNITS = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_NUMBER_OF_LURES = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_NEW_TIME_OF_DAY_HOUR = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_NEW_TIME_OF_DAY_MINUTE = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_NUMBER_OF_UNITS_CREATED_MEC1 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MINIMUM_SPELLS = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MAXIMUM_SPELLS = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_DISABLED_ATTACK_INDEX = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_ENABLED_ATTACK_INDEX_GRA4 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MAXIMUM_ATTACKS = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_BUILDING_TYPES_ALLOWED_NPR1 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_BUILDING_TYPES_ALLOWED_NSA1 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_ATTACK_MODIFICATION = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_SUMMONED_UNIT_COUNT_NPA5 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_UPGRADE_LEVELS = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_NUMBER_OF_SUMMONED_UNITS_NDO2 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_BEASTS_PER_SECOND = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_TARGET_TYPE = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_OPTIONS = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_ARMOR_PENALTY_NAB3 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_WAVE_COUNT_NHS6 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MAX_CREEP_LEVEL_NTM3 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MISSILE_COUNT = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_SPLIT_ATTACK_COUNT = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_GENERATION_COUNT = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_ROCK_RING_COUNT = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_WAVE_COUNT_NVC2 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_PREFER_HOSTILES_TAU1 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_PREFER_FRIENDLIES_TAU2 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_MAX_UNITS_TAU3 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_NUMBER_OF_PULSES = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_SUMMONED_UNIT_TYPE_HWE1 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_SUMMONED_UNIT_UIN4 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_SUMMONED_UNIT_OSF1 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_SUMMONED_UNIT_TYPE_EFNU = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_SUMMONED_UNIT_TYPE_NBAU = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_SUMMONED_UNIT_TYPE_NTOU = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_SUMMONED_UNIT_TYPE_ESVU = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_SUMMONED_UNIT_TYPES = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_SUMMONED_UNIT_TYPE_NDOU = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_ALTERNATE_FORM_UNIT_EMEU = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_PLAGUE_WARD_UNIT_TYPE = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_ALLOWED_UNIT_TYPE_BTL1 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_NEW_UNIT_TYPE = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_RESULTING_UNIT_TYPE_ENT1 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_CORPSE_UNIT_TYPE = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_ALLOWED_UNIT_TYPE_LOA1 = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_UNIT_TYPE_FOR_LIMIT_CHECK = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_WARD_UNIT_TYPE_STAU = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_EFFECT_ABILITY = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_CONVERSION_UNIT = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_UNIT_TO_PRESERVE = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_UNIT_TYPE_ALLOWED = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_SWARM_UNIT_TYPE = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_RESULTING_UNIT_TYPE_COAU = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_UNIT_TYPE_EXHU = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_WARD_UNIT_TYPE_HWDU = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_LURE_UNIT_TYPE = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_UNIT_TYPE_IPMU = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_FACTORY_UNIT_ID = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_SPAWN_UNIT_ID_NFYU = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_DESTRUCTIBLE_ID = nil

---@type abilityintegerlevelfield
Native.ABILITY_ILF_UPGRADE_TYPE = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_CASTING_TIME = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DURATION_NORMAL = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DURATION_HERO = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_COOLDOWN = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_AREA_OF_EFFECT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_CAST_RANGE = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_HBZ2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_BUILDING_REDUCTION_HBZ4 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_PER_SECOND_HBZ5 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MAXIMUM_DAMAGE_PER_WAVE = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MANA_REGENERATION_INCREASE = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_CASTING_DELAY = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_PER_SECOND_OWW1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MAGIC_DAMAGE_REDUCTION_OWW2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_CHANCE_TO_CRITICAL_STRIKE = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_MULTIPLIER_OCR2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_BONUS_OCR3 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_CHANCE_TO_EVADE_OCR4 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_DEALT_PERCENT_OMI2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_TAKEN_PERCENT_OMI3 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ANIMATION_DELAY = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_TRANSITION_TIME = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MOVEMENT_SPEED_INCREASE_PERCENT_OWK2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_BACKSTAB_DAMAGE = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_AMOUNT_HEALED_DAMAGED_UDC1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_LIFE_CONVERTED_TO_MANA = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_LIFE_CONVERTED_TO_LIFE = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MOVEMENT_SPEED_INCREASE_PERCENT_UAU1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_LIFE_REGENERATION_INCREASE_PERCENT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_CHANCE_TO_EVADE_EEV1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_PER_INTERVAL = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MANA_DRAINED_PER_SECOND_EIM2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_BUFFER_MANA_REQUIRED = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MAX_MANA_DRAINED = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_BOLT_DELAY = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_BOLT_LIFETIME = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ALTITUDE_ADJUSTMENT_DURATION = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_LANDING_DELAY_TIME = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ALTERNATE_FORM_HIT_POINT_BONUS = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MOVE_SPEED_BONUS_INFO_PANEL_ONLY = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ATTACK_SPEED_BONUS_INFO_PANEL_ONLY = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_LIFE_REGENERATION_RATE_PER_SECOND = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_STUN_DURATION_USL1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ATTACK_DAMAGE_STOLEN_PERCENT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_UCS1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MAX_DAMAGE_UCS2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DISTANCE_UCS3 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_FINAL_AREA_UCS4 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_UIN1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DURATION = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_IMPACT_DELAY = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_PER_TARGET_OCL1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_REDUCTION_PER_TARGET = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_EFFECT_DELAY_OEQ1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_PER_SECOND_TO_BUILDINGS = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_UNITS_SLOWED_PERCENT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_FINAL_AREA_OEQ4 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_PER_SECOND_EER1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_DEALT_TO_ATTACKERS = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_LIFE_HEALED = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_HEAL_INTERVAL = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_BUILDING_REDUCTION_ETQ3 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_INITIAL_IMMUNITY_DURATION = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MAX_LIFE_DRAINED_PER_SECOND_PERCENT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_BUILDING_REDUCTION_UDD2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ARMOR_DURATION = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ARMOR_BONUS_UFA2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_AREA_OF_EFFECT_DAMAGE = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_SPECIFIC_TARGET_DAMAGE_UFN2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_BONUS_HFA1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_DEALT_ESF1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_INTERVAL_ESF2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_BUILDING_REDUCTION_ESF3 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_BONUS_PERCENT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DEFENSE_BONUS_HAV1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_HIT_POINT_BONUS = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_BONUS_HAV3 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MAGIC_DAMAGE_REDUCTION_HAV4 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_CHANCE_TO_BASH = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_MULTIPLIER_HBH2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_BONUS_HBH3 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_CHANCE_TO_MISS_HBH4 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_HTB1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_AOE_DAMAGE = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_SPECIFIC_TARGET_DAMAGE_HTC2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MOVEMENT_SPEED_REDUCTION_PERCENT_HTC3 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ATTACK_SPEED_REDUCTION_PERCENT_HTC4 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ARMOR_BONUS_HAD1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_AMOUNT_HEALED_DAMAGED_HHB1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_EXTRA_DAMAGE_HCA1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MOVEMENT_SPEED_FACTOR_HCA2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ATTACK_SPEED_FACTOR_HCA3 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MOVEMENT_SPEED_INCREASE_PERCENT_OAE1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ATTACK_SPEED_INCREASE_PERCENT_OAE2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_REINCARNATION_DELAY = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_OSH1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MAXIMUM_DAMAGE_OSH2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DISTANCE_OSH3 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_FINAL_AREA_OSH4 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_GRAPHIC_DELAY_NFD1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_GRAPHIC_DURATION_NFD2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_NFD3 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_SUMMONED_UNIT_DAMAGE_AMS1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MAGIC_DAMAGE_REDUCTION_AMS2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_AURA_DURATION = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_PER_SECOND_APL2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DURATION_OF_PLAGUE_WARD = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_AMOUNT_OF_HIT_POINTS_REGENERATED = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ATTACK_DAMAGE_INCREASE_AKB1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MANA_LOSS_ADM1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_SUMMONED_UNIT_DAMAGE_ADM2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_EXPANSION_AMOUNT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_INTERVAL_DURATION_BGM2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_RADIUS_OF_MINING_RING = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ATTACK_SPEED_INCREASE_PERCENT_BLO1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MOVEMENT_SPEED_INCREASE_PERCENT_BLO2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_SCALING_FACTOR = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_HIT_POINTS_PER_SECOND_CAN1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MAX_HIT_POINTS = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_PER_SECOND_DEV2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MOVEMENT_UPDATE_FREQUENCY_CHD1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ATTACK_UPDATE_FREQUENCY_CHD2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_SUMMONED_UNIT_DAMAGE_CHD3 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MOVEMENT_SPEED_REDUCTION_PERCENT_CRI1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ATTACK_SPEED_REDUCTION_PERCENT_CRI2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_REDUCTION_CRI3 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_CHANCE_TO_MISS_CRS = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_FULL_DAMAGE_RADIUS_DDA1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_FULL_DAMAGE_AMOUNT_DDA2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_PARTIAL_DAMAGE_RADIUS = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_PARTIAL_DAMAGE_AMOUNT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_BUILDING_DAMAGE_FACTOR_SDS1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MAX_DAMAGE_UCO5 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MOVE_SPEED_BONUS_UCO6 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_TAKEN_PERCENT_DEF1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_DEALT_PERCENT_DEF2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MOVEMENT_SPEED_FACTOR_DEF3 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ATTACK_SPEED_FACTOR_DEF4 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MAGIC_DAMAGE_REDUCTION_DEF5 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_CHANCE_TO_DEFLECT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DEFLECT_DAMAGE_TAKEN_PIERCING = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DEFLECT_DAMAGE_TAKEN_SPELLS = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_RIP_DELAY = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_EAT_DELAY = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_HIT_POINTS_GAINED_EAT3 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_AIR_UNIT_LOWER_DURATION = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_AIR_UNIT_HEIGHT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MELEE_ATTACK_RANGE = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_INTERVAL_DURATION_EGM2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_EFFECT_DELAY_FLA2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MINING_DURATION = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_RADIUS_OF_GRAVESTONES = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_RADIUS_OF_CORPSES = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_HIT_POINTS_GAINED_HEA1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_INCREASE_PERCENT_INF1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_AUTOCAST_RANGE = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_LIFE_REGEN_RATE = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_GRAPHIC_DELAY_LIT1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_GRAPHIC_DURATION_LIT2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_PER_SECOND_LSH1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MANA_GAINED = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_HIT_POINTS_GAINED_MBT2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_AUTOCAST_REQUIREMENT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_WATER_HEIGHT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ACTIVATION_DELAY_MIN1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_INVISIBILITY_TRANSITION_TIME = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ACTIVATION_RADIUS = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_AMOUNT_REGENERATED = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_PER_SECOND_POI1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ATTACK_SPEED_FACTOR_POI2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MOVEMENT_SPEED_FACTOR_POI3 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_EXTRA_DAMAGE_POA1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_PER_SECOND_POA2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ATTACK_SPEED_FACTOR_POA3 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MOVEMENT_SPEED_FACTOR_POA4 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_AMPLIFICATION = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_CHANCE_TO_STOMP_PERCENT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_DEALT_WAR2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_FULL_DAMAGE_RADIUS_WAR3 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_HALF_DAMAGE_RADIUS_WAR4 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_SUMMONED_UNIT_DAMAGE_PRG3 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_UNIT_PAUSE_DURATION = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_HERO_PAUSE_DURATION = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_HIT_POINTS_GAINED_REJ1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MANA_POINTS_GAINED_REJ2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MINIMUM_LIFE_REQUIRED = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MINIMUM_MANA_REQUIRED = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_REPAIR_COST_RATIO = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_REPAIR_TIME_RATIO = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_POWERBUILD_COST = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_POWERBUILD_RATE = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_NAVAL_RANGE_BONUS = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_INCREASE_PERCENT_ROA1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_LIFE_REGENERATION_RATE = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MANA_REGEN = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_INCREASE = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_SALVAGE_COST_RATIO = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_IN_FLIGHT_SIGHT_RADIUS = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_HOVERING_SIGHT_RADIUS = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_HOVERING_HEIGHT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DURATION_OF_OWLS = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_FADE_DURATION = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAY_NIGHT_DURATION = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ACTION_DURATION = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MOVEMENT_SPEED_FACTOR_SLO1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ATTACK_SPEED_FACTOR_SLO2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_PER_SECOND_SPO1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MOVEMENT_SPEED_FACTOR_SPO2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ATTACK_SPEED_FACTOR_SPO3 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ACTIVATION_DELAY_STA1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DETECTION_RADIUS_STA2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DETONATION_RADIUS = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_STUN_DURATION_STA4 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ATTACK_SPEED_BONUS_PERCENT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_PER_SECOND_UHF2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_LUMBER_PER_INTERVAL = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ART_ATTACHMENT_HEIGHT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_TELEPORT_AREA_WIDTH = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_TELEPORT_AREA_HEIGHT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_LIFE_STOLEN_PER_ATTACK = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_BONUS_IDAM = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_CHANCE_TO_HIT_UNITS_PERCENT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_CHANCE_TO_HIT_HEROS_PERCENT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_CHANCE_TO_HIT_SUMMONS_PERCENT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DELAY_FOR_TARGET_EFFECT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_DEALT_PERCENT_OF_NORMAL = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_RECEIVED_MULTIPLIER = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MANA_REGENERATION_BONUS_AS_FRACTION_OF_NORMAL = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MOVEMENT_SPEED_INCREASE_ISPI = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_PER_SECOND_IDPS = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ATTACK_DAMAGE_INCREASE_CAC1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_PER_SECOND_COR1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ATTACK_SPEED_INCREASE_ISX1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_WRS1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_TERRAIN_DEFORMATION_AMPLITUDE = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_CTC1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_EXTRA_DAMAGE_TO_TARGET = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MOVEMENT_SPEED_REDUCTION_CTC3 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ATTACK_SPEED_REDUCTION_CTC4 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_CTB1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_CASTING_DELAY_SECONDS = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MANA_LOSS_PER_UNIT_DTN1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_TO_SUMMONED_UNITS_DTN2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_TRANSITION_TIME_SECONDS = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MANA_DRAINED_PER_SECOND_NMR1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_CHANCE_TO_REDUCE_DAMAGE_PERCENT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MINIMUM_DAMAGE = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_IGNORED_DAMAGE = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_FULL_DAMAGE_DEALT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_FULL_DAMAGE_INTERVAL = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_HALF_DAMAGE_DEALT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_HALF_DAMAGE_INTERVAL = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_BUILDING_REDUCTION_HFS5 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MAXIMUM_DAMAGE_HFS6 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MANA_PER_HIT_POINT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_ABSORBED_PERCENT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_WAVE_DISTANCE = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_WAVE_TIME_SECONDS = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_DEALT_UIM3 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_AIR_TIME_SECONDS_UIM4 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_UNIT_RELEASE_INTERVAL_SECONDS = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_RETURN_FACTOR = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_RETURN_THRESHOLD = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_RETURNED_DAMAGE_FACTOR = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_RECEIVED_DAMAGE_FACTOR = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DEFENSE_BONUS_UTS3 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_BONUS_NBA1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_SUMMONED_UNIT_DURATION_SECONDS_NBA3 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MANA_PER_SUMMONED_HITPOINT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_CHARGE_FOR_CURRENT_LIFE = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_HIT_POINTS_DRAINED = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MANA_POINTS_DRAINED = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DRAIN_INTERVAL_SECONDS = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_LIFE_TRANSFERRED_PER_SECOND = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MANA_TRANSFERRED_PER_SECOND = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_BONUS_LIFE_FACTOR = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_BONUS_LIFE_DECAY = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_BONUS_MANA_FACTOR = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_BONUS_MANA_DECAY = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_CHANCE_TO_MISS_PERCENT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MOVEMENT_SPEED_MODIFIER = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ATTACK_SPEED_MODIFIER = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_PER_SECOND_TDG1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MEDIUM_DAMAGE_RADIUS_TDG2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MEDIUM_DAMAGE_PER_SECOND = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_SMALL_DAMAGE_RADIUS_TDG4 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_SMALL_DAMAGE_PER_SECOND = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_AIR_TIME_SECONDS_TSP1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MINIMUM_HIT_INTERVAL_SECONDS = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_PER_SECOND_NBF5 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MAXIMUM_RANGE = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MINIMUM_RANGE = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_PER_TARGET_EFK1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MAXIMUM_TOTAL_DAMAGE = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MAXIMUM_SPEED_ADJUSTMENT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DECAYING_DAMAGE = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MOVEMENT_SPEED_FACTOR_ESH2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ATTACK_SPEED_FACTOR_ESH3 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DECAY_POWER = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_INITIAL_DAMAGE_ESH5 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MAXIMUM_LIFE_ABSORBED = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MAXIMUM_MANA_ABSORBED = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MOVEMENT_SPEED_INCREASE_BSK1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ATTACK_SPEED_INCREASE_BSK2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_TAKEN_INCREASE = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_LIFE_PER_UNIT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MANA_PER_UNIT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_LIFE_PER_BUFF = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MANA_PER_BUFF = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_SUMMONED_UNIT_DAMAGE_DVM5 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_BONUS_FAK1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MEDIUM_DAMAGE_FACTOR_FAK2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_SMALL_DAMAGE_FACTOR_FAK3 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_FULL_DAMAGE_RADIUS_FAK4 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_HALF_DAMAGE_RADIUS_FAK5 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_EXTRA_DAMAGE_PER_SECOND = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MOVEMENT_SPEED_REDUCTION_LIQ2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ATTACK_SPEED_REDUCTION_LIQ3 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MAGIC_DAMAGE_FACTOR = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_UNIT_DAMAGE_PER_MANA_POINT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_HERO_DAMAGE_PER_MANA_POINT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_UNIT_MAXIMUM_DAMAGE = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_HERO_MAXIMUM_DAMAGE = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_COOLDOWN = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DISTRIBUTED_DAMAGE_FACTOR_SPL1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_LIFE_REGENERATED = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MANA_REGENERATED = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MANA_LOSS_PER_UNIT_IDC1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_SUMMONED_UNIT_DAMAGE_IDC2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ACTIVATION_DELAY_IMO2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_LURE_INTERVAL_SECONDS = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_BONUS_ISR1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_REDUCTION_ISR2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_BONUS_IPV1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_LIFE_STEAL_AMOUNT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_LIFE_RESTORED_FACTOR = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MANA_RESTORED_FACTOR = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ATTACH_DELAY = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_REMOVE_DELAY = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_HERO_REGENERATION_DELAY = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_UNIT_REGENERATION_DELAY = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MAGIC_DAMAGE_REDUCTION_NSA4 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_HIT_POINTS_PER_SECOND_NSA5 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_TO_SUMMONED_UNITS_IXS1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MAGIC_DAMAGE_REDUCTION_IXS2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_SUMMONED_UNIT_DURATION = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_SHIELD_COOLDOWN_TIME = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_PER_SECOND_NDO1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_SUMMONED_UNIT_DURATION_SECONDS_NDO3 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MEDIUM_DAMAGE_RADIUS_FLK1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_SMALL_DAMAGE_RADIUS_FLK2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_FULL_DAMAGE_AMOUNT_FLK3 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MEDIUM_DAMAGE_AMOUNT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_SMALL_DAMAGE_AMOUNT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MOVEMENT_SPEED_REDUCTION_PERCENT_HBN1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ATTACK_SPEED_REDUCTION_PERCENT_HBN2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MAX_MANA_DRAINED_UNITS = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_RATIO_UNITS_PERCENT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MAX_MANA_DRAINED_HEROS = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_RATIO_HEROS_PERCENT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_SUMMONED_DAMAGE = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DISTRIBUTED_DAMAGE_FACTOR_NCA1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_INITIAL_DAMAGE_PXF1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_PER_SECOND_PXF2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_PER_SECOND_MLS1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_BEAST_COLLISION_RADIUS = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_AMOUNT_NST3 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_RADIUS = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_DELAY = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_FOLLOW_THROUGH_TIME = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ART_DURATION = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MOVEMENT_SPEED_REDUCTION_PERCENT_NAB1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ATTACK_SPEED_REDUCTION_PERCENT_NAB2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_PRIMARY_DAMAGE = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_SECONDARY_DAMAGE = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_INTERVAL_NAB6 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_GOLD_COST_FACTOR = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_LUMBER_COST_FACTOR = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MOVE_SPEED_BONUS_NEG1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_BONUS_NEG2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_AMOUNT_NCS1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_INTERVAL_NCS2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MAX_DAMAGE_NCS4 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_BUILDING_DAMAGE_FACTOR_NCS5 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_EFFECT_DURATION = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_SPAWN_INTERVAL_NSY1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_SPAWN_UNIT_DURATION = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_SPAWN_UNIT_OFFSET = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_LEASH_RANGE_NSY5 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_SPAWN_INTERVAL_NFY1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_LEASH_RANGE_NFY2 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_CHANCE_TO_DEMOLISH = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_MULTIPLIER_BUILDINGS = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_MULTIPLIER_UNITS = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_MULTIPLIER_HEROES = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_BONUS_DAMAGE_MULTIPLIER = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DEATH_DAMAGE_FULL_AMOUNT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DEATH_DAMAGE_FULL_AREA = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DEATH_DAMAGE_HALF_AMOUNT = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DEATH_DAMAGE_HALF_AREA = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DEATH_DAMAGE_DELAY = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_AMOUNT_NSO1 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_PERIOD = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_DAMAGE_PENALTY = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MOVEMENT_SPEED_REDUCTION_PERCENT_NSO4 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_ATTACK_SPEED_REDUCTION_PERCENT_NSO5 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_SPLIT_DELAY = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_MAX_HITPOINT_FACTOR = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_LIFE_DURATION_SPLIT_BONUS = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_WAVE_INTERVAL = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_BUILDING_DAMAGE_FACTOR_NVC4 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_FULL_DAMAGE_AMOUNT_NVC5 = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_HALF_DAMAGE_FACTOR = nil

---@type abilityreallevelfield
Native.ABILITY_RLF_INTERVAL_BETWEEN_PULSES = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_PERCENT_BONUS_HAB2 = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_USE_TELEPORT_CLUSTERING_HMT3 = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_NEVER_MISS_OCR5 = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_EXCLUDE_ITEM_DAMAGE = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_BACKSTAB_DAMAGE = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_INHERIT_UPGRADES_UAN3 = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_MANA_CONVERSION_AS_PERCENT = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_LIFE_CONVERSION_AS_PERCENT = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_LEAVE_TARGET_ALIVE = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_PERCENT_BONUS_UAU3 = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_DAMAGE_IS_PERCENT_RECEIVED = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_MELEE_BONUS = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_RANGED_BONUS = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_FLAT_BONUS = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_NEVER_MISS_HBH5 = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_PERCENT_BONUS_HAD2 = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_CAN_DEACTIVATE = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_RAISED_UNITS_ARE_INVULNERABLE = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_PERCENTAGE_OAR2 = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_SUMMON_BUSY_UNITS = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_CREATES_BLIGHT = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_EXPLODES_ON_DEATH = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_ALWAYS_AUTOCAST_FAE2 = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_REGENERATE_ONLY_AT_NIGHT = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_SHOW_SELECT_UNIT_BUTTON = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_SHOW_UNIT_INDICATOR = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_CHARGE_OWNING_PLAYER = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_PERCENTAGE_ARM2 = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_TARGET_IS_INVULNERABLE = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_TARGET_IS_MAGIC_IMMUNE = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_KILL_ON_CASTER_DEATH = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_NO_TARGET_REQUIRED_REJ4 = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_ACCEPTS_GOLD = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_ACCEPTS_LUMBER = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_PREFER_HOSTILES_ROA5 = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_PREFER_FRIENDLIES_ROA6 = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_ROOTED_TURNING = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_ALWAYS_AUTOCAST_SLO3 = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_HIDE_BUTTON = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_USE_TELEPORT_CLUSTERING_ITP2 = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_IMMUNE_TO_MORPH_EFFECTS = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_DOES_NOT_BLOCK_BUILDINGS = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_AUTO_ACQUIRE_ATTACK_TARGETS = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_IMMUNE_TO_MORPH_EFFECTS_GHO2 = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_DO_NOT_BLOCK_BUILDINGS = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_INCLUDE_RANGED_DAMAGE = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_INCLUDE_MELEE_DAMAGE = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_MOVE_TO_PARTNER = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_CAN_BE_DISPELLED = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_IGNORE_FRIENDLY_BUFFS = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_DROP_ITEMS_ON_DEATH = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_CAN_USE_ITEMS = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_CAN_GET_ITEMS = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_CAN_DROP_ITEMS = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_REPAIRS_ALLOWED = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_CASTER_ONLY_SPLASH = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_NO_TARGET_REQUIRED_IRL4 = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_DISPEL_ON_ATTACK = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_AMOUNT_IS_RAW_VALUE = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_SHARED_SPELL_COOLDOWN = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_SLEEP_ONCE = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_ALLOW_ON_ANY_PLAYER_SLOT = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_DISABLE_OTHER_ABILITIES = nil

---@type abilitybooleanlevelfield
Native.ABILITY_BLF_ALLOW_BOUNTY = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_ICON_NORMAL = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_CASTER = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_TARGET = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_SPECIAL = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_EFFECT = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_AREA_EFFECT = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_LIGHTNING_EFFECTS = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_MISSILE_ART = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_TOOLTIP_LEARN = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_TOOLTIP_LEARN_EXTENDED = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_TOOLTIP_NORMAL = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_TOOLTIP_TURN_OFF = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_TOOLTIP_NORMAL_EXTENDED = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_TOOLTIP_TURN_OFF_EXTENDED = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_NORMAL_FORM_UNIT_EME1 = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_SPAWNED_UNITS = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_ABILITY_FOR_UNIT_CREATION = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_NORMAL_FORM_UNIT_MIL1 = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_ALTERNATE_FORM_UNIT_MIL2 = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_BASE_ORDER_ID_ANS5 = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_MORPH_UNITS_GROUND = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_MORPH_UNITS_AIR = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_MORPH_UNITS_AMPHIBIOUS = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_MORPH_UNITS_WATER = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_UNIT_TYPE_ONE = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_UNIT_TYPE_TWO = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_UNIT_TYPE_SOD2 = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_SUMMON_1_UNIT_TYPE = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_SUMMON_2_UNIT_TYPE = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_RACE_TO_CONVERT = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_PARTNER_UNIT_TYPE = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_PARTNER_UNIT_TYPE_ONE = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_PARTNER_UNIT_TYPE_TWO = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_REQUIRED_UNIT_TYPE = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_CONVERTED_UNIT_TYPE = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_SPELL_LIST = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_BASE_ORDER_ID_SPB5 = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_BASE_ORDER_ID_NCL6 = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_ABILITY_UPGRADE_1 = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_ABILITY_UPGRADE_2 = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_ABILITY_UPGRADE_3 = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_ABILITY_UPGRADE_4 = nil

---@type abilitystringlevelfield
Native.ABILITY_SLF_SPAWN_UNIT_ID_NSY2 = nil

---@type itemintegerfield
Native.ITEM_IF_LEVEL = nil

---@type itemintegerfield
Native.ITEM_IF_NUMBER_OF_CHARGES = nil

---@type itemintegerfield
Native.ITEM_IF_COOLDOWN_GROUP = nil

---@type itemintegerfield
Native.ITEM_IF_MAX_HIT_POINTS = nil

---@type itemintegerfield
Native.ITEM_IF_HIT_POINTS = nil

---@type itemintegerfield
Native.ITEM_IF_PRIORITY = nil

---@type itemintegerfield
Native.ITEM_IF_ARMOR_TYPE = nil

---@type itemintegerfield
Native.ITEM_IF_TINTING_COLOR_RED = nil

---@type itemintegerfield
Native.ITEM_IF_TINTING_COLOR_GREEN = nil

---@type itemintegerfield
Native.ITEM_IF_TINTING_COLOR_BLUE = nil

---@type itemintegerfield
Native.ITEM_IF_TINTING_COLOR_ALPHA = nil

---@type itemrealfield
Native.ITEM_RF_SCALING_VALUE = nil

---@type itembooleanfield
Native.ITEM_BF_DROPPED_WHEN_CARRIER_DIES = nil

---@type itembooleanfield
Native.ITEM_BF_CAN_BE_DROPPED = nil

---@type itembooleanfield
Native.ITEM_BF_PERISHABLE = nil

---@type itembooleanfield
Native.ITEM_BF_INCLUDE_AS_RANDOM_CHOICE = nil

---@type itembooleanfield
Native.ITEM_BF_USE_AUTOMATICALLY_WHEN_ACQUIRED = nil

---@type itembooleanfield
Native.ITEM_BF_CAN_BE_SOLD_TO_MERCHANTS = nil

---@type itembooleanfield
Native.ITEM_BF_ACTIVELY_USED = nil

---@type itemstringfield
Native.ITEM_SF_MODEL_USED = nil

---@type unitintegerfield
Native.UNIT_IF_DEFENSE_TYPE = nil

---@type unitintegerfield
Native.UNIT_IF_ARMOR_TYPE = nil

---@type unitintegerfield
Native.UNIT_IF_LOOPING_FADE_IN_RATE = nil

---@type unitintegerfield
Native.UNIT_IF_LOOPING_FADE_OUT_RATE = nil

---@type unitintegerfield
Native.UNIT_IF_AGILITY = nil

---@type unitintegerfield
Native.UNIT_IF_INTELLIGENCE = nil

---@type unitintegerfield
Native.UNIT_IF_STRENGTH = nil

---@type unitintegerfield
Native.UNIT_IF_AGILITY_PERMANENT = nil

---@type unitintegerfield
Native.UNIT_IF_INTELLIGENCE_PERMANENT = nil

---@type unitintegerfield
Native.UNIT_IF_STRENGTH_PERMANENT = nil

---@type unitintegerfield
Native.UNIT_IF_AGILITY_WITH_BONUS = nil

---@type unitintegerfield
Native.UNIT_IF_INTELLIGENCE_WITH_BONUS = nil

---@type unitintegerfield
Native.UNIT_IF_STRENGTH_WITH_BONUS = nil

---@type unitintegerfield
Native.UNIT_IF_GOLD_BOUNTY_AWARDED_NUMBER_OF_DICE = nil

---@type unitintegerfield
Native.UNIT_IF_GOLD_BOUNTY_AWARDED_BASE = nil

---@type unitintegerfield
Native.UNIT_IF_GOLD_BOUNTY_AWARDED_SIDES_PER_DIE = nil

---@type unitintegerfield
Native.UNIT_IF_LUMBER_BOUNTY_AWARDED_NUMBER_OF_DICE = nil

---@type unitintegerfield
Native.UNIT_IF_LUMBER_BOUNTY_AWARDED_BASE = nil

---@type unitintegerfield
Native.UNIT_IF_LUMBER_BOUNTY_AWARDED_SIDES_PER_DIE = nil

---@type unitintegerfield
Native.UNIT_IF_LEVEL = nil

---@type unitintegerfield
Native.UNIT_IF_FORMATION_RANK = nil

---@type unitintegerfield
Native.UNIT_IF_ORIENTATION_INTERPOLATION = nil

---@type unitintegerfield
Native.UNIT_IF_ELEVATION_SAMPLE_POINTS = nil

---@type unitintegerfield
Native.UNIT_IF_TINTING_COLOR_RED = nil

---@type unitintegerfield
Native.UNIT_IF_TINTING_COLOR_GREEN = nil

---@type unitintegerfield
Native.UNIT_IF_TINTING_COLOR_BLUE = nil

---@type unitintegerfield
Native.UNIT_IF_TINTING_COLOR_ALPHA = nil

---@type unitintegerfield
Native.UNIT_IF_MOVE_TYPE = nil

---@type unitintegerfield
Native.UNIT_IF_TARGETED_AS = nil

---@type unitintegerfield
Native.UNIT_IF_UNIT_CLASSIFICATION = nil

---@type unitintegerfield
Native.UNIT_IF_HIT_POINTS_REGENERATION_TYPE = nil

---@type unitintegerfield
Native.UNIT_IF_PLACEMENT_PREVENTED_BY = nil

---@type unitintegerfield
Native.UNIT_IF_PRIMARY_ATTRIBUTE = nil

---@type unitrealfield
Native.UNIT_RF_STRENGTH_PER_LEVEL = nil

---@type unitrealfield
Native.UNIT_RF_AGILITY_PER_LEVEL = nil

---@type unitrealfield
Native.UNIT_RF_INTELLIGENCE_PER_LEVEL = nil

---@type unitrealfield
Native.UNIT_RF_HIT_POINTS_REGENERATION_RATE = nil

---@type unitrealfield
Native.UNIT_RF_MANA_REGENERATION = nil

---@type unitrealfield
Native.UNIT_RF_DEATH_TIME = nil

---@type unitrealfield
Native.UNIT_RF_FLY_HEIGHT = nil

---@type unitrealfield
Native.UNIT_RF_TURN_RATE = nil

---@type unitrealfield
Native.UNIT_RF_ELEVATION_SAMPLE_RADIUS = nil

---@type unitrealfield
Native.UNIT_RF_FOG_OF_WAR_SAMPLE_RADIUS = nil

---@type unitrealfield
Native.UNIT_RF_MAXIMUM_PITCH_ANGLE_DEGREES = nil

---@type unitrealfield
Native.UNIT_RF_MAXIMUM_ROLL_ANGLE_DEGREES = nil

---@type unitrealfield
Native.UNIT_RF_SCALING_VALUE = nil

---@type unitrealfield
Native.UNIT_RF_ANIMATION_RUN_SPEED = nil

---@type unitrealfield
Native.UNIT_RF_SELECTION_SCALE = nil

---@type unitrealfield
Native.UNIT_RF_SELECTION_CIRCLE_HEIGHT = nil

---@type unitrealfield
Native.UNIT_RF_SHADOW_IMAGE_HEIGHT = nil

---@type unitrealfield
Native.UNIT_RF_SHADOW_IMAGE_WIDTH = nil

---@type unitrealfield
Native.UNIT_RF_SHADOW_IMAGE_CENTER_X = nil

---@type unitrealfield
Native.UNIT_RF_SHADOW_IMAGE_CENTER_Y = nil

---@type unitrealfield
Native.UNIT_RF_ANIMATION_WALK_SPEED = nil

---@type unitrealfield
Native.UNIT_RF_DEFENSE = nil

---@type unitrealfield
Native.UNIT_RF_SIGHT_RADIUS = nil

---@type unitrealfield
Native.UNIT_RF_PRIORITY = nil

---@type unitrealfield
Native.UNIT_RF_SPEED = nil

---@type unitrealfield
Native.UNIT_RF_OCCLUDER_HEIGHT = nil

---@type unitrealfield
Native.UNIT_RF_HP = nil

---@type unitrealfield
Native.UNIT_RF_MANA = nil

---@type unitrealfield
Native.UNIT_RF_ACQUISITION_RANGE = nil

---@type unitrealfield
Native.UNIT_RF_CAST_BACK_SWING = nil

---@type unitrealfield
Native.UNIT_RF_CAST_POINT = nil

---@type unitrealfield
Native.UNIT_RF_MINIMUM_ATTACK_RANGE = nil

---@type unitbooleanfield
Native.UNIT_BF_RAISABLE = nil

---@type unitbooleanfield
Native.UNIT_BF_DECAYABLE = nil

---@type unitbooleanfield
Native.UNIT_BF_IS_A_BUILDING = nil

---@type unitbooleanfield
Native.UNIT_BF_USE_EXTENDED_LINE_OF_SIGHT = nil

---@type unitbooleanfield
Native.UNIT_BF_NEUTRAL_BUILDING_SHOWS_MINIMAP_ICON = nil

---@type unitbooleanfield
Native.UNIT_BF_HERO_HIDE_HERO_INTERFACE_ICON = nil

---@type unitbooleanfield
Native.UNIT_BF_HERO_HIDE_HERO_MINIMAP_DISPLAY = nil

---@type unitbooleanfield
Native.UNIT_BF_HERO_HIDE_HERO_DEATH_MESSAGE = nil

---@type unitbooleanfield
Native.UNIT_BF_HIDE_MINIMAP_DISPLAY = nil

---@type unitbooleanfield
Native.UNIT_BF_SCALE_PROJECTILES = nil

---@type unitbooleanfield
Native.UNIT_BF_SELECTION_CIRCLE_ON_WATER = nil

---@type unitbooleanfield
Native.UNIT_BF_HAS_WATER_SHADOW = nil

---@type unitstringfield
Native.UNIT_SF_NAME = nil

---@type unitstringfield
Native.UNIT_SF_PROPER_NAMES = nil

---@type unitstringfield
Native.UNIT_SF_GROUND_TEXTURE = nil

---@type unitstringfield
Native.UNIT_SF_SHADOW_IMAGE_UNIT = nil

---@type unitweaponintegerfield
Native.UNIT_WEAPON_IF_ATTACK_DAMAGE_NUMBER_OF_DICE = nil

---@type unitweaponintegerfield
Native.UNIT_WEAPON_IF_ATTACK_DAMAGE_BASE = nil

---@type unitweaponintegerfield
Native.UNIT_WEAPON_IF_ATTACK_DAMAGE_SIDES_PER_DIE = nil

---@type unitweaponintegerfield
Native.UNIT_WEAPON_IF_ATTACK_MAXIMUM_NUMBER_OF_TARGETS = nil

---@type unitweaponintegerfield
Native.UNIT_WEAPON_IF_ATTACK_ATTACK_TYPE = nil

---@type unitweaponintegerfield
Native.UNIT_WEAPON_IF_ATTACK_WEAPON_SOUND = nil

---@type unitweaponintegerfield
Native.UNIT_WEAPON_IF_ATTACK_AREA_OF_EFFECT_TARGETS = nil

---@type unitweaponintegerfield
Native.UNIT_WEAPON_IF_ATTACK_TARGETS_ALLOWED = nil

---@type unitweaponrealfield
Native.UNIT_WEAPON_RF_ATTACK_BACKSWING_POINT = nil

---@type unitweaponrealfield
Native.UNIT_WEAPON_RF_ATTACK_DAMAGE_POINT = nil

---@type unitweaponrealfield
Native.UNIT_WEAPON_RF_ATTACK_BASE_COOLDOWN = nil

---@type unitweaponrealfield
Native.UNIT_WEAPON_RF_ATTACK_DAMAGE_LOSS_FACTOR = nil

---@type unitweaponrealfield
Native.UNIT_WEAPON_RF_ATTACK_DAMAGE_FACTOR_MEDIUM = nil

---@type unitweaponrealfield
Native.UNIT_WEAPON_RF_ATTACK_DAMAGE_FACTOR_SMALL = nil

---@type unitweaponrealfield
Native.UNIT_WEAPON_RF_ATTACK_DAMAGE_SPILL_DISTANCE = nil

---@type unitweaponrealfield
Native.UNIT_WEAPON_RF_ATTACK_DAMAGE_SPILL_RADIUS = nil

---@type unitweaponrealfield
Native.UNIT_WEAPON_RF_ATTACK_PROJECTILE_SPEED = nil

---@type unitweaponrealfield
Native.UNIT_WEAPON_RF_ATTACK_PROJECTILE_ARC = nil

---@type unitweaponrealfield
Native.UNIT_WEAPON_RF_ATTACK_AREA_OF_EFFECT_FULL_DAMAGE = nil

---@type unitweaponrealfield
Native.UNIT_WEAPON_RF_ATTACK_AREA_OF_EFFECT_MEDIUM_DAMAGE = nil

---@type unitweaponrealfield
Native.UNIT_WEAPON_RF_ATTACK_AREA_OF_EFFECT_SMALL_DAMAGE = nil

---@type unitweaponrealfield
Native.UNIT_WEAPON_RF_ATTACK_RANGE = nil

---@type unitweaponbooleanfield
Native.UNIT_WEAPON_BF_ATTACK_SHOW_UI = nil

---@type unitweaponbooleanfield
Native.UNIT_WEAPON_BF_ATTACKS_ENABLED = nil

---@type unitweaponbooleanfield
Native.UNIT_WEAPON_BF_ATTACK_PROJECTILE_HOMING_ENABLED = nil

---@type unitweaponstringfield
Native.UNIT_WEAPON_SF_ATTACK_PROJECTILE_ART = nil

---@type movetype
Native.MOVE_TYPE_UNKNOWN = nil

---@type movetype
Native.MOVE_TYPE_FOOT = nil

---@type movetype
Native.MOVE_TYPE_FLY = nil

---@type movetype
Native.MOVE_TYPE_HORSE = nil

---@type movetype
Native.MOVE_TYPE_HOVER = nil

---@type movetype
Native.MOVE_TYPE_FLOAT = nil

---@type movetype
Native.MOVE_TYPE_AMPHIBIOUS = nil

---@type movetype
Native.MOVE_TYPE_UNBUILDABLE = nil

---@type targetflag
Native.TARGET_FLAG_NONE = nil

---@type targetflag
Native.TARGET_FLAG_GROUND = nil

---@type targetflag
Native.TARGET_FLAG_AIR = nil

---@type targetflag
Native.TARGET_FLAG_STRUCTURE = nil

---@type targetflag
Native.TARGET_FLAG_WARD = nil

---@type targetflag
Native.TARGET_FLAG_ITEM = nil

---@type targetflag
Native.TARGET_FLAG_TREE = nil

---@type targetflag
Native.TARGET_FLAG_WALL = nil

---@type targetflag
Native.TARGET_FLAG_DEBRIS = nil

---@type targetflag
Native.TARGET_FLAG_DECORATION = nil

---@type targetflag
Native.TARGET_FLAG_BRIDGE = nil

---@type defensetype
Native.DEFENSE_TYPE_LIGHT = nil

---@type defensetype
Native.DEFENSE_TYPE_MEDIUM = nil

---@type defensetype
Native.DEFENSE_TYPE_LARGE = nil

---@type defensetype
Native.DEFENSE_TYPE_FORT = nil

---@type defensetype
Native.DEFENSE_TYPE_NORMAL = nil

---@type defensetype
Native.DEFENSE_TYPE_HERO = nil

---@type defensetype
Native.DEFENSE_TYPE_DIVINE = nil

---@type defensetype
Native.DEFENSE_TYPE_NONE = nil

---@type heroattribute
Native.HERO_ATTRIBUTE_STR = nil

---@type heroattribute
Native.HERO_ATTRIBUTE_INT = nil

---@type heroattribute
Native.HERO_ATTRIBUTE_AGI = nil

---@type armortype
Native.ARMOR_TYPE_WHOKNOWS = nil

---@type armortype
Native.ARMOR_TYPE_FLESH = nil

---@type armortype
Native.ARMOR_TYPE_METAL = nil

---@type armortype
Native.ARMOR_TYPE_WOOD = nil

---@type armortype
Native.ARMOR_TYPE_ETHREAL = nil

---@type armortype
Native.ARMOR_TYPE_STONE = nil

---@type regentype
Native.REGENERATION_TYPE_NONE = nil

---@type regentype
Native.REGENERATION_TYPE_ALWAYS = nil

---@type regentype
Native.REGENERATION_TYPE_BLIGHT = nil

---@type regentype
Native.REGENERATION_TYPE_DAY = nil

---@type regentype
Native.REGENERATION_TYPE_NIGHT = nil

---@type unitcategory
Native.UNIT_CATEGORY_GIANT = nil

---@type unitcategory
Native.UNIT_CATEGORY_UNDEAD = nil

---@type unitcategory
Native.UNIT_CATEGORY_SUMMONED = nil

---@type unitcategory
Native.UNIT_CATEGORY_MECHANICAL = nil

---@type unitcategory
Native.UNIT_CATEGORY_PEON = nil

---@type unitcategory
Native.UNIT_CATEGORY_SAPPER = nil

---@type unitcategory
Native.UNIT_CATEGORY_TOWNHALL = nil

---@type unitcategory
Native.UNIT_CATEGORY_ANCIENT = nil

---@type unitcategory
Native.UNIT_CATEGORY_NEUTRAL = nil

---@type unitcategory
Native.UNIT_CATEGORY_WARD = nil

---@type unitcategory
Native.UNIT_CATEGORY_STANDON = nil

---@type unitcategory
Native.UNIT_CATEGORY_TAUREN = nil

---@type pathingflag
Native.PATHING_FLAG_UNWALKABLE = nil

---@type pathingflag
Native.PATHING_FLAG_UNFLYABLE = nil

---@type pathingflag
Native.PATHING_FLAG_UNBUILDABLE = nil

---@type pathingflag
Native.PATHING_FLAG_UNPEONHARVEST = nil

---@type pathingflag
Native.PATHING_FLAG_BLIGHTED = nil

---@type pathingflag
Native.PATHING_FLAG_UNFLOATABLE = nil

---@type pathingflag
Native.PATHING_FLAG_UNAMPHIBIOUS = nil

---@type pathingflag
Native.PATHING_FLAG_UNITEMPLACABLE = nil

--@end-remove@]]

for _, v in ipairs(require('lib.stdlib.native._generated._globals')) do
    Native[v] = _G[v]
end

return Native]=]

P['lib/stdlib/oop/_generated/_ability.lua'] = [[local Native = require('lib.stdlib.native')

---@class Ability : Agent
local Ability = class('Ability', require('lib.stdlib.oop.agent'))

---getBooleanField
---@param field AbilityBooleanField
---@return boolean
function Ability:getBooleanField(field)
--@debug@
    checkobject(self, Ability, 'getBooleanField', 'self')
    checkuserdata(field, 'abilitybooleanfield', 'getBooleanField', 1)
--@end-debug@
    return Native.BlzGetAbilityBooleanField(getUd(self), field)
end

---getIntegerField
---@param field AbilityIntegerField
---@return integer
function Ability:getIntegerField(field)
--@debug@
    checkobject(self, Ability, 'getIntegerField', 'self')
    checkuserdata(field, 'abilityintegerfield', 'getIntegerField', 1)
--@end-debug@
    return Native.BlzGetAbilityIntegerField(getUd(self), field)
end

---getRealField
---@param field AbilityRealField
---@return float
function Ability:getRealField(field)
--@debug@
    checkobject(self, Ability, 'getRealField', 'self')
    checkuserdata(field, 'abilityrealfield', 'getRealField', 1)
--@end-debug@
    return Native.BlzGetAbilityRealField(getUd(self), field)
end

---getStringField
---@param field AbilityStringField
---@return string
function Ability:getStringField(field)
--@debug@
    checkobject(self, Ability, 'getStringField', 'self')
    checkuserdata(field, 'abilitystringfield', 'getStringField', 1)
--@end-debug@
    return Native.BlzGetAbilityStringField(getUd(self), field)
end

---getBooleanLevelField
---@param field AbilityBooleanLevelField
---@param level integer
---@return boolean
function Ability:getBooleanLevelField(field, level)
--@debug@
    checkobject(self, Ability, 'getBooleanLevelField', 'self')
    checkuserdata(field, 'abilitybooleanlevelfield', 'getBooleanLevelField', 1)
    checktype(level, 'integer', 'getBooleanLevelField', 2)
--@end-debug@
    return Native.BlzGetAbilityBooleanLevelField(getUd(self), field, level)
end

---getIntegerLevelField
---@param field AbilityIntegerLevelField
---@param level integer
---@return integer
function Ability:getIntegerLevelField(field, level)
--@debug@
    checkobject(self, Ability, 'getIntegerLevelField', 'self')
    checkuserdata(field, 'abilityintegerlevelfield', 'getIntegerLevelField', 1)
    checktype(level, 'integer', 'getIntegerLevelField', 2)
--@end-debug@
    return Native.BlzGetAbilityIntegerLevelField(getUd(self), field, level)
end

---getRealLevelField
---@param field AbilityRealLevelField
---@param level integer
---@return float
function Ability:getRealLevelField(field, level)
--@debug@
    checkobject(self, Ability, 'getRealLevelField', 'self')
    checkuserdata(field, 'abilityreallevelfield', 'getRealLevelField', 1)
    checktype(level, 'integer', 'getRealLevelField', 2)
--@end-debug@
    return Native.BlzGetAbilityRealLevelField(getUd(self), field, level)
end

---getStringLevelField
---@param field AbilityStringLevelField
---@param level integer
---@return string
function Ability:getStringLevelField(field, level)
--@debug@
    checkobject(self, Ability, 'getStringLevelField', 'self')
    checkuserdata(field, 'abilitystringlevelfield', 'getStringLevelField', 1)
    checktype(level, 'integer', 'getStringLevelField', 2)
--@end-debug@
    return Native.BlzGetAbilityStringLevelField(getUd(self), field, level)
end

---getBooleanLevelArrayField
---@param field AbilityBooleanLevelArrayField
---@param level integer
---@param index integer
---@return boolean
function Ability:getBooleanLevelArrayField(field, level, index)
--@debug@
    checkobject(self, Ability, 'getBooleanLevelArrayField', 'self')
    checkuserdata(field, 'abilitybooleanlevelarrayfield', 'getBooleanLevelArrayField', 1)
    checktype(level, 'integer', 'getBooleanLevelArrayField', 2)
    checktype(index, 'integer', 'getBooleanLevelArrayField', 3)
--@end-debug@
    return Native.BlzGetAbilityBooleanLevelArrayField(getUd(self), field, level, index)
end

---getIntegerLevelArrayField
---@param field AbilityIntegerLevelArrayField
---@param level integer
---@param index integer
---@return integer
function Ability:getIntegerLevelArrayField(field, level, index)
--@debug@
    checkobject(self, Ability, 'getIntegerLevelArrayField', 'self')
    checkuserdata(field, 'abilityintegerlevelarrayfield', 'getIntegerLevelArrayField', 1)
    checktype(level, 'integer', 'getIntegerLevelArrayField', 2)
    checktype(index, 'integer', 'getIntegerLevelArrayField', 3)
--@end-debug@
    return Native.BlzGetAbilityIntegerLevelArrayField(getUd(self), field, level, index)
end

---getRealLevelArrayField
---@param field AbilityRealLevelArrayField
---@param level integer
---@param index integer
---@return float
function Ability:getRealLevelArrayField(field, level, index)
--@debug@
    checkobject(self, Ability, 'getRealLevelArrayField', 'self')
    checkuserdata(field, 'abilityreallevelarrayfield', 'getRealLevelArrayField', 1)
    checktype(level, 'integer', 'getRealLevelArrayField', 2)
    checktype(index, 'integer', 'getRealLevelArrayField', 3)
--@end-debug@
    return Native.BlzGetAbilityRealLevelArrayField(getUd(self), field, level, index)
end

---getStringLevelArrayField
---@param field AbilityStringLevelArrayField
---@param level integer
---@param index integer
---@return string
function Ability:getStringLevelArrayField(field, level, index)
--@debug@
    checkobject(self, Ability, 'getStringLevelArrayField', 'self')
    checkuserdata(field, 'abilitystringlevelarrayfield', 'getStringLevelArrayField', 1)
    checktype(level, 'integer', 'getStringLevelArrayField', 2)
    checktype(index, 'integer', 'getStringLevelArrayField', 3)
--@end-debug@
    return Native.BlzGetAbilityStringLevelArrayField(getUd(self), field, level, index)
end

---setBooleanField
---@param field AbilityBooleanField
---@param value boolean
---@return boolean
function Ability:setBooleanField(field, value)
--@debug@
    checkobject(self, Ability, 'setBooleanField', 'self')
    checkuserdata(field, 'abilitybooleanfield', 'setBooleanField', 1)
    checktype(value, 'boolean', 'setBooleanField', 2)
--@end-debug@
    return Native.BlzSetAbilityBooleanField(getUd(self), field, value)
end

---setIntegerField
---@param field AbilityIntegerField
---@param value integer
---@return boolean
function Ability:setIntegerField(field, value)
--@debug@
    checkobject(self, Ability, 'setIntegerField', 'self')
    checkuserdata(field, 'abilityintegerfield', 'setIntegerField', 1)
    checktype(value, 'integer', 'setIntegerField', 2)
--@end-debug@
    return Native.BlzSetAbilityIntegerField(getUd(self), field, value)
end

---setRealField
---@param field AbilityRealField
---@param value float
---@return boolean
function Ability:setRealField(field, value)
--@debug@
    checkobject(self, Ability, 'setRealField', 'self')
    checkuserdata(field, 'abilityrealfield', 'setRealField', 1)
    checktype(value, 'float', 'setRealField', 2)
--@end-debug@
    return Native.BlzSetAbilityRealField(getUd(self), field, value)
end

---setStringField
---@param field AbilityStringField
---@param value string
---@return boolean
function Ability:setStringField(field, value)
--@debug@
    checkobject(self, Ability, 'setStringField', 'self')
    checkuserdata(field, 'abilitystringfield', 'setStringField', 1)
    checktype(value, 'string', 'setStringField', 2)
--@end-debug@
    return Native.BlzSetAbilityStringField(getUd(self), field, value)
end

---setBooleanLevelField
---@param field AbilityBooleanLevelField
---@param level integer
---@param value boolean
---@return boolean
function Ability:setBooleanLevelField(field, level, value)
--@debug@
    checkobject(self, Ability, 'setBooleanLevelField', 'self')
    checkuserdata(field, 'abilitybooleanlevelfield', 'setBooleanLevelField', 1)
    checktype(level, 'integer', 'setBooleanLevelField', 2)
    checktype(value, 'boolean', 'setBooleanLevelField', 3)
--@end-debug@
    return Native.BlzSetAbilityBooleanLevelField(getUd(self), field, level, value)
end

---setIntegerLevelField
---@param field AbilityIntegerLevelField
---@param level integer
---@param value integer
---@return boolean
function Ability:setIntegerLevelField(field, level, value)
--@debug@
    checkobject(self, Ability, 'setIntegerLevelField', 'self')
    checkuserdata(field, 'abilityintegerlevelfield', 'setIntegerLevelField', 1)
    checktype(level, 'integer', 'setIntegerLevelField', 2)
    checktype(value, 'integer', 'setIntegerLevelField', 3)
--@end-debug@
    return Native.BlzSetAbilityIntegerLevelField(getUd(self), field, level, value)
end

---setRealLevelField
---@param field AbilityRealLevelField
---@param level integer
---@param value float
---@return boolean
function Ability:setRealLevelField(field, level, value)
--@debug@
    checkobject(self, Ability, 'setRealLevelField', 'self')
    checkuserdata(field, 'abilityreallevelfield', 'setRealLevelField', 1)
    checktype(level, 'integer', 'setRealLevelField', 2)
    checktype(value, 'float', 'setRealLevelField', 3)
--@end-debug@
    return Native.BlzSetAbilityRealLevelField(getUd(self), field, level, value)
end

---setStringLevelField
---@param field AbilityStringLevelField
---@param level integer
---@param value string
---@return boolean
function Ability:setStringLevelField(field, level, value)
--@debug@
    checkobject(self, Ability, 'setStringLevelField', 'self')
    checkuserdata(field, 'abilitystringlevelfield', 'setStringLevelField', 1)
    checktype(level, 'integer', 'setStringLevelField', 2)
    checktype(value, 'string', 'setStringLevelField', 3)
--@end-debug@
    return Native.BlzSetAbilityStringLevelField(getUd(self), field, level, value)
end

---setBooleanLevelArrayField
---@param field AbilityBooleanLevelArrayField
---@param level integer
---@param index integer
---@param value boolean
---@return boolean
function Ability:setBooleanLevelArrayField(field, level, index, value)
--@debug@
    checkobject(self, Ability, 'setBooleanLevelArrayField', 'self')
    checkuserdata(field, 'abilitybooleanlevelarrayfield', 'setBooleanLevelArrayField', 1)
    checktype(level, 'integer', 'setBooleanLevelArrayField', 2)
    checktype(index, 'integer', 'setBooleanLevelArrayField', 3)
    checktype(value, 'boolean', 'setBooleanLevelArrayField', 4)
--@end-debug@
    return Native.BlzSetAbilityBooleanLevelArrayField(getUd(self), field, level, index, value)
end

---setIntegerLevelArrayField
---@param field AbilityIntegerLevelArrayField
---@param level integer
---@param index integer
---@param value integer
---@return boolean
function Ability:setIntegerLevelArrayField(field, level, index, value)
--@debug@
    checkobject(self, Ability, 'setIntegerLevelArrayField', 'self')
    checkuserdata(field, 'abilityintegerlevelarrayfield', 'setIntegerLevelArrayField', 1)
    checktype(level, 'integer', 'setIntegerLevelArrayField', 2)
    checktype(index, 'integer', 'setIntegerLevelArrayField', 3)
    checktype(value, 'integer', 'setIntegerLevelArrayField', 4)
--@end-debug@
    return Native.BlzSetAbilityIntegerLevelArrayField(getUd(self), field, level, index, value)
end

---setRealLevelArrayField
---@param field AbilityRealLevelArrayField
---@param level integer
---@param index integer
---@param value float
---@return boolean
function Ability:setRealLevelArrayField(field, level, index, value)
--@debug@
    checkobject(self, Ability, 'setRealLevelArrayField', 'self')
    checkuserdata(field, 'abilityreallevelarrayfield', 'setRealLevelArrayField', 1)
    checktype(level, 'integer', 'setRealLevelArrayField', 2)
    checktype(index, 'integer', 'setRealLevelArrayField', 3)
    checktype(value, 'float', 'setRealLevelArrayField', 4)
--@end-debug@
    return Native.BlzSetAbilityRealLevelArrayField(getUd(self), field, level, index, value)
end

---setStringLevelArrayField
---@param field AbilityStringLevelArrayField
---@param level integer
---@param index integer
---@param value string
---@return boolean
function Ability:setStringLevelArrayField(field, level, index, value)
--@debug@
    checkobject(self, Ability, 'setStringLevelArrayField', 'self')
    checkuserdata(field, 'abilitystringlevelarrayfield', 'setStringLevelArrayField', 1)
    checktype(level, 'integer', 'setStringLevelArrayField', 2)
    checktype(index, 'integer', 'setStringLevelArrayField', 3)
    checktype(value, 'string', 'setStringLevelArrayField', 4)
--@end-debug@
    return Native.BlzSetAbilityStringLevelArrayField(getUd(self), field, level, index, value)
end

---addBooleanLevelArrayField
---@param field AbilityBooleanLevelArrayField
---@param level integer
---@param value boolean
---@return boolean
function Ability:addBooleanLevelArrayField(field, level, value)
--@debug@
    checkobject(self, Ability, 'addBooleanLevelArrayField', 'self')
    checkuserdata(field, 'abilitybooleanlevelarrayfield', 'addBooleanLevelArrayField', 1)
    checktype(level, 'integer', 'addBooleanLevelArrayField', 2)
    checktype(value, 'boolean', 'addBooleanLevelArrayField', 3)
--@end-debug@
    return Native.BlzAddAbilityBooleanLevelArrayField(getUd(self), field, level, value)
end

---addIntegerLevelArrayField
---@param field AbilityIntegerLevelArrayField
---@param level integer
---@param value integer
---@return boolean
function Ability:addIntegerLevelArrayField(field, level, value)
--@debug@
    checkobject(self, Ability, 'addIntegerLevelArrayField', 'self')
    checkuserdata(field, 'abilityintegerlevelarrayfield', 'addIntegerLevelArrayField', 1)
    checktype(level, 'integer', 'addIntegerLevelArrayField', 2)
    checktype(value, 'integer', 'addIntegerLevelArrayField', 3)
--@end-debug@
    return Native.BlzAddAbilityIntegerLevelArrayField(getUd(self), field, level, value)
end

---addRealLevelArrayField
---@param field AbilityRealLevelArrayField
---@param level integer
---@param value float
---@return boolean
function Ability:addRealLevelArrayField(field, level, value)
--@debug@
    checkobject(self, Ability, 'addRealLevelArrayField', 'self')
    checkuserdata(field, 'abilityreallevelarrayfield', 'addRealLevelArrayField', 1)
    checktype(level, 'integer', 'addRealLevelArrayField', 2)
    checktype(value, 'float', 'addRealLevelArrayField', 3)
--@end-debug@
    return Native.BlzAddAbilityRealLevelArrayField(getUd(self), field, level, value)
end

---addStringLevelArrayField
---@param field AbilityStringLevelArrayField
---@param level integer
---@param value string
---@return boolean
function Ability:addStringLevelArrayField(field, level, value)
--@debug@
    checkobject(self, Ability, 'addStringLevelArrayField', 'self')
    checkuserdata(field, 'abilitystringlevelarrayfield', 'addStringLevelArrayField', 1)
    checktype(level, 'integer', 'addStringLevelArrayField', 2)
    checktype(value, 'string', 'addStringLevelArrayField', 3)
--@end-debug@
    return Native.BlzAddAbilityStringLevelArrayField(getUd(self), field, level, value)
end

---removeBooleanLevelArrayField
---@param field AbilityBooleanLevelArrayField
---@param level integer
---@param value boolean
---@return boolean
function Ability:removeBooleanLevelArrayField(field, level, value)
--@debug@
    checkobject(self, Ability, 'removeBooleanLevelArrayField', 'self')
    checkuserdata(field, 'abilitybooleanlevelarrayfield', 'removeBooleanLevelArrayField', 1)
    checktype(level, 'integer', 'removeBooleanLevelArrayField', 2)
    checktype(value, 'boolean', 'removeBooleanLevelArrayField', 3)
--@end-debug@
    return Native.BlzRemoveAbilityBooleanLevelArrayField(getUd(self), field, level, value)
end

---removeIntegerLevelArrayField
---@param field AbilityIntegerLevelArrayField
---@param level integer
---@param value integer
---@return boolean
function Ability:removeIntegerLevelArrayField(field, level, value)
--@debug@
    checkobject(self, Ability, 'removeIntegerLevelArrayField', 'self')
    checkuserdata(field, 'abilityintegerlevelarrayfield', 'removeIntegerLevelArrayField', 1)
    checktype(level, 'integer', 'removeIntegerLevelArrayField', 2)
    checktype(value, 'integer', 'removeIntegerLevelArrayField', 3)
--@end-debug@
    return Native.BlzRemoveAbilityIntegerLevelArrayField(getUd(self), field, level, value)
end

---removeRealLevelArrayField
---@param field AbilityRealLevelArrayField
---@param level integer
---@param value float
---@return boolean
function Ability:removeRealLevelArrayField(field, level, value)
--@debug@
    checkobject(self, Ability, 'removeRealLevelArrayField', 'self')
    checkuserdata(field, 'abilityreallevelarrayfield', 'removeRealLevelArrayField', 1)
    checktype(level, 'integer', 'removeRealLevelArrayField', 2)
    checktype(value, 'float', 'removeRealLevelArrayField', 3)
--@end-debug@
    return Native.BlzRemoveAbilityRealLevelArrayField(getUd(self), field, level, value)
end

---removeStringLevelArrayField
---@param field AbilityStringLevelArrayField
---@param level integer
---@param value string
---@return boolean
function Ability:removeStringLevelArrayField(field, level, value)
--@debug@
    checkobject(self, Ability, 'removeStringLevelArrayField', 'self')
    checkuserdata(field, 'abilitystringlevelarrayfield', 'removeStringLevelArrayField', 1)
    checktype(level, 'integer', 'removeStringLevelArrayField', 2)
    checktype(value, 'string', 'removeStringLevelArrayField', 3)
--@end-debug@
    return Native.BlzRemoveAbilityStringLevelArrayField(getUd(self), field, level, value)
end

return Ability]]

P['lib/stdlib/oop/_generated/_agent.lua'] = [[local Native = require('lib.stdlib.native')

---@class Agent : Handle
local Agent = class('Agent', require('lib.stdlib.oop.handle'))

return Agent]]

P['lib/stdlib/oop/_generated/_boolexpr.lua'] = [[local Native = require('lib.stdlib.native')

---@class BoolExpr : Agent
local BoolExpr = class('BoolExpr', require('lib.stdlib.oop.agent'))

---destructor
---@return void
function BoolExpr:destructor()
--@debug@
    checkobject(self, BoolExpr, 'destructor', 'self')
--@end-debug@
    return Native.DestroyBoolExpr(getUd(self))
end

---<**_DEPRECATED_**> destroy
---@return void
function BoolExpr:destroy()
--@debug@
    deprecated('BoolExpr.destroy', 'BoolExpr.delete')
--@end-debug@
    return self:delete()
end

---and_
---@param operandB BoolExpr
---@return BoolExpr
function BoolExpr:and_(operandB)
--@debug@
    checkobject(self, BoolExpr, 'and_', 'self')
    checkobject(operandB, require('lib.stdlib.oop.boolexpr'), 'and_', 1)
--@end-debug@
    return BoolExpr:fromUd(Native.And(getUd(self), getUd(operandB)))
end

---or_
---@param operandB BoolExpr
---@return BoolExpr
function BoolExpr:or_(operandB)
--@debug@
    checkobject(self, BoolExpr, 'or_', 'self')
    checkobject(operandB, require('lib.stdlib.oop.boolexpr'), 'or_', 1)
--@end-debug@
    return BoolExpr:fromUd(Native.Or(getUd(self), getUd(operandB)))
end

---not_
---@return BoolExpr
function BoolExpr:not_()
--@debug@
    checkobject(self, BoolExpr, 'not_', 'self')
--@end-debug@
    return BoolExpr:fromUd(Native.Not(getUd(self)))
end

return BoolExpr]]

P['lib/stdlib/oop/_generated/_buff.lua'] = [[local Native = require('lib.stdlib.native')

---@class Buff : Ability
local Buff = class('Buff', require('lib.stdlib.oop.ability'))

return Buff]]

P['lib/stdlib/oop/_generated/_button.lua'] = [[local Native = require('lib.stdlib.native')

---@class Button : Agent
local Button = class('Button', require('lib.stdlib.oop.agent'))

return Button]]

P['lib/stdlib/oop/_generated/_camerasetup.lua'] = [[local Native = require('lib.stdlib.native')

---@class CameraSetup : Handle
local CameraSetup = class('CameraSetup', require('lib.stdlib.oop.handle'))

---<static> create
---@return CameraSetup
function CameraSetup:create()
    return CameraSetup:fromUd(Native.CreateCameraSetup())
end

---setField
---@param field CameraField
---@param value float
---@param duration float
---@return void
function CameraSetup:setField(field, value, duration)
--@debug@
    checkobject(self, CameraSetup, 'setField', 'self')
    checkuserdata(field, 'camerafield', 'setField', 1)
    checktype(value, 'float', 'setField', 2)
    checktype(duration, 'float', 'setField', 3)
--@end-debug@
    return Native.CameraSetupSetField(getUd(self), field, value, duration)
end

---getField
---@param field CameraField
---@return float
function CameraSetup:getField(field)
--@debug@
    checkobject(self, CameraSetup, 'getField', 'self')
    checkuserdata(field, 'camerafield', 'getField', 1)
--@end-debug@
    return Native.CameraSetupGetField(getUd(self), field)
end

---setDestPosition
---@overload fun(vec: Vector, duration: float): void
---@param x float
---@param y float
---@param duration float
---@return void
function CameraSetup:setDestPosition(x, y, duration)
    if type(x) == 'table' then
        duration = y
        x, y = table.unpack(x)
    end
--@debug@
    checkobject(self, CameraSetup, 'setDestPosition', 'self')
    checktype(x, 'float', 'setDestPosition', 1)
    checktype(y, 'float', 'setDestPosition', 2)
    checktype(duration, 'float', 'setDestPosition', 3)
--@end-debug@
    return Native.CameraSetupSetDestPosition(getUd(self), x, y, duration)
end

---getDestPositionLoc
---@return Location
function CameraSetup:getDestPositionLoc()
--@debug@
    checkobject(self, CameraSetup, 'getDestPositionLoc', 'self')
--@end-debug@
    return require('lib.stdlib.oop.location'):fromUd(Native.CameraSetupGetDestPositionLoc(getUd(self)))
end

---getDestPositionX
---@return float
function CameraSetup:getDestPositionX()
--@debug@
    checkobject(self, CameraSetup, 'getDestPositionX', 'self')
--@end-debug@
    return Native.CameraSetupGetDestPositionX(getUd(self))
end

---getDestPositionY
---@return float
function CameraSetup:getDestPositionY()
--@debug@
    checkobject(self, CameraSetup, 'getDestPositionY', 'self')
--@end-debug@
    return Native.CameraSetupGetDestPositionY(getUd(self))
end

---apply
---@param doPan boolean
---@param panTimed boolean
---@return void
function CameraSetup:apply(doPan, panTimed)
--@debug@
    checkobject(self, CameraSetup, 'apply', 'self')
    checktype(doPan, 'boolean', 'apply', 1)
    checktype(panTimed, 'boolean', 'apply', 2)
--@end-debug@
    return Native.CameraSetupApply(getUd(self), doPan, panTimed)
end

---applyWithZ
---@param zDestOffset float
---@return void
function CameraSetup:applyWithZ(zDestOffset)
--@debug@
    checkobject(self, CameraSetup, 'applyWithZ', 'self')
    checktype(zDestOffset, 'float', 'applyWithZ', 1)
--@end-debug@
    return Native.CameraSetupApplyWithZ(getUd(self), zDestOffset)
end

---applyForceDuration
---@param doPan boolean
---@param forceDuration float
---@return void
function CameraSetup:applyForceDuration(doPan, forceDuration)
--@debug@
    checkobject(self, CameraSetup, 'applyForceDuration', 'self')
    checktype(doPan, 'boolean', 'applyForceDuration', 1)
    checktype(forceDuration, 'float', 'applyForceDuration', 2)
--@end-debug@
    return Native.CameraSetupApplyForceDuration(getUd(self), doPan, forceDuration)
end

---applyForceDurationWithZ
---@param zDestOffset float
---@param forceDuration float
---@return void
function CameraSetup:applyForceDurationWithZ(zDestOffset, forceDuration)
--@debug@
    checkobject(self, CameraSetup, 'applyForceDurationWithZ', 'self')
    checktype(zDestOffset, 'float', 'applyForceDurationWithZ', 1)
    checktype(forceDuration, 'float', 'applyForceDurationWithZ', 2)
--@end-debug@
    return Native.CameraSetupApplyForceDurationWithZ(getUd(self), zDestOffset, forceDuration)
end

---setLabel
---@param label string
---@return void
function CameraSetup:setLabel(label)
--@debug@
    checkobject(self, CameraSetup, 'setLabel', 'self')
    checktype(label, 'string', 'setLabel', 1)
--@end-debug@
    return Native.BlzCameraSetupSetLabel(getUd(self), label)
end

---getLabel
---@return string
function CameraSetup:getLabel()
--@debug@
    checkobject(self, CameraSetup, 'getLabel', 'self')
--@end-debug@
    return Native.BlzCameraSetupGetLabel(getUd(self))
end

---applyForceDurationSmooth
---@param doPan boolean
---@param forcedDuration float
---@param easeInDuration float
---@param easeOutDuration float
---@param smoothFactor float
---@return void
function CameraSetup:applyForceDurationSmooth(doPan, forcedDuration, easeInDuration, easeOutDuration, smoothFactor)
--@debug@
    checkobject(self, CameraSetup, 'applyForceDurationSmooth', 'self')
    checktype(doPan, 'boolean', 'applyForceDurationSmooth', 1)
    checktype(forcedDuration, 'float', 'applyForceDurationSmooth', 2)
    checktype(easeInDuration, 'float', 'applyForceDurationSmooth', 3)
    checktype(easeOutDuration, 'float', 'applyForceDurationSmooth', 4)
    checktype(smoothFactor, 'float', 'applyForceDurationSmooth', 5)
--@end-debug@
    return Native.BlzCameraSetupApplyForceDurationSmooth(getUd(self), doPan, forcedDuration, easeInDuration, easeOutDuration, smoothFactor)
end

return CameraSetup]]

P['lib/stdlib/oop/_generated/_condition.lua'] = [[local Native = require('lib.stdlib.native')

---@class Condition : BoolExpr
local Condition = class('Condition', require('lib.stdlib.oop.boolexpr'))

---- compact same name native function
setmetatable(Condition, table.merge(getmetatable(Condition), {__call = function(_, ...)
    return Native.Condition(...)
end}))

---destructor
---@return void
function Condition:destructor()
--@debug@
    checkobject(self, Condition, 'destructor', 'self')
--@end-debug@
    return Native.DestroyCondition(getUd(self))
end

---<**_DEPRECATED_**> destroy
---@return void
function Condition:destroy()
--@debug@
    deprecated('Condition.destroy', 'Condition.delete')
--@end-debug@
    return self:delete()
end

---<static> create
---@param func function
---@return Condition
function Condition:create(func)
--@debug@
    checkclass(self, Condition, 'create', 'self')
    checktype(func, 'function', 'create', 1)
--@end-debug@
    return Condition:fromUd(Native.Condition(func))
end

return Condition]]

P['lib/stdlib/oop/_generated/_defeatcondition.lua'] = [[local Native = require('lib.stdlib.native')

---@class DefeatCondition : Agent
local DefeatCondition = class('DefeatCondition', require('lib.stdlib.oop.agent'))

---destructor
---@return void
function DefeatCondition:destructor()
--@debug@
    checkobject(self, DefeatCondition, 'destructor', 'self')
--@end-debug@
    return Native.DestroyDefeatCondition(getUd(self))
end

---<**_DEPRECATED_**> destroy
---@return void
function DefeatCondition:destroy()
--@debug@
    deprecated('DefeatCondition.destroy', 'DefeatCondition.delete')
--@end-debug@
    return self:delete()
end

---<static> create
---@return DefeatCondition
function DefeatCondition:create()
    return DefeatCondition:fromUd(Native.CreateDefeatCondition())
end

---setDescription
---@param description string
---@return void
function DefeatCondition:setDescription(description)
--@debug@
    checkobject(self, DefeatCondition, 'setDescription', 'self')
    checktype(description, 'string', 'setDescription', 1)
--@end-debug@
    return Native.DefeatConditionSetDescription(getUd(self), description)
end

return DefeatCondition]]

P['lib/stdlib/oop/_generated/_destructable.lua'] = [[local Native = require('lib.stdlib.native')

---@class Destructable : Widget
local Destructable = class('Destructable', require('lib.stdlib.oop.widget'))

---destructor
---@return void
function Destructable:destructor()
--@debug@
    checkobject(self, Destructable, 'destructor', 'self')
--@end-debug@
    return Native.RemoveDestructable(getUd(self))
end

---<**_DEPRECATED_**> remove
---@return void
function Destructable:remove()
--@debug@
    deprecated('Destructable.remove', 'Destructable.delete')
--@end-debug@
    return self:delete()
end

---<static> create
---@overload fun(objectid: integer, vec: Vector, face: float, scale: float, variation: integer): Destructable
---@param objectid integer
---@param x float
---@param y float
---@param face float
---@param scale float
---@param variation integer
---@return Destructable
function Destructable:create(objectid, x, y, face, scale, variation)
    if type(x) == 'table' then
        face, scale, variation = y, face, scale
        x, y = table.unpack(x)
    end
--@debug@
    checkclass(self, Destructable, 'create', 'self')
    checktype(objectid, 'integer', 'create', 1)
    checktype(x, 'float', 'create', 2)
    checktype(y, 'float', 'create', 3)
    checktype(face, 'float', 'create', 4)
    checktype(scale, 'float', 'create', 5)
    checktype(variation, 'integer', 'create', 6)
--@end-debug@
    return Destructable:fromUd(Native.CreateDestructable(objectid, x, y, face, scale, variation))
end

---<static> createZ
---@overload fun(objectid: integer, vec: Vector3, face: float, scale: float, variation: integer): Destructable
---@param objectid integer
---@param x float
---@param y float
---@param z float
---@param face float
---@param scale float
---@param variation integer
---@return Destructable
function Destructable:createZ(objectid, x, y, z, face, scale, variation)
    if type(x) == 'table' then
        face, scale, variation = y, z, face
        x, y, z = table.unpack(x)
    end
--@debug@
    checkclass(self, Destructable, 'createZ', 'self')
    checktype(objectid, 'integer', 'createZ', 1)
    checktype(x, 'float', 'createZ', 2)
    checktype(y, 'float', 'createZ', 3)
    checktype(z, 'float', 'createZ', 4)
    checktype(face, 'float', 'createZ', 5)
    checktype(scale, 'float', 'createZ', 6)
    checktype(variation, 'integer', 'createZ', 7)
--@end-debug@
    return Destructable:fromUd(Native.CreateDestructableZ(objectid, x, y, z, face, scale, variation))
end

---<static> createDead
---@overload fun(objectid: integer, vec: Vector, face: float, scale: float, variation: integer): Destructable
---@param objectid integer
---@param x float
---@param y float
---@param face float
---@param scale float
---@param variation integer
---@return Destructable
function Destructable:createDead(objectid, x, y, face, scale, variation)
    if type(x) == 'table' then
        face, scale, variation = y, face, scale
        x, y = table.unpack(x)
    end
--@debug@
    checkclass(self, Destructable, 'createDead', 'self')
    checktype(objectid, 'integer', 'createDead', 1)
    checktype(x, 'float', 'createDead', 2)
    checktype(y, 'float', 'createDead', 3)
    checktype(face, 'float', 'createDead', 4)
    checktype(scale, 'float', 'createDead', 5)
    checktype(variation, 'integer', 'createDead', 6)
--@end-debug@
    return Destructable:fromUd(Native.CreateDeadDestructable(objectid, x, y, face, scale, variation))
end

---<static> createDeadZ
---@overload fun(objectid: integer, vec: Vector3, face: float, scale: float, variation: integer): Destructable
---@param objectid integer
---@param x float
---@param y float
---@param z float
---@param face float
---@param scale float
---@param variation integer
---@return Destructable
function Destructable:createDeadZ(objectid, x, y, z, face, scale, variation)
    if type(x) == 'table' then
        face, scale, variation = y, z, face
        x, y, z = table.unpack(x)
    end
--@debug@
    checkclass(self, Destructable, 'createDeadZ', 'self')
    checktype(objectid, 'integer', 'createDeadZ', 1)
    checktype(x, 'float', 'createDeadZ', 2)
    checktype(y, 'float', 'createDeadZ', 3)
    checktype(z, 'float', 'createDeadZ', 4)
    checktype(face, 'float', 'createDeadZ', 5)
    checktype(scale, 'float', 'createDeadZ', 6)
    checktype(variation, 'integer', 'createDeadZ', 7)
--@end-debug@
    return Destructable:fromUd(Native.CreateDeadDestructableZ(objectid, x, y, z, face, scale, variation))
end

---<static> createWithSkin
---@overload fun(objectid: integer, vec: Vector, face: float, scale: float, variation: integer, skinId: integer): Destructable
---@param objectid integer
---@param x float
---@param y float
---@param face float
---@param scale float
---@param variation integer
---@param skinId integer
---@return Destructable
function Destructable:createWithSkin(objectid, x, y, face, scale, variation, skinId)
    if type(x) == 'table' then
        face, scale, variation, skinId = y, face, scale, variation
        x, y = table.unpack(x)
    end
--@debug@
    checkclass(self, Destructable, 'createWithSkin', 'self')
    checktype(objectid, 'integer', 'createWithSkin', 1)
    checktype(x, 'float', 'createWithSkin', 2)
    checktype(y, 'float', 'createWithSkin', 3)
    checktype(face, 'float', 'createWithSkin', 4)
    checktype(scale, 'float', 'createWithSkin', 5)
    checktype(variation, 'integer', 'createWithSkin', 6)
    checktype(skinId, 'integer', 'createWithSkin', 7)
--@end-debug@
    return Destructable:fromUd(Native.BlzCreateDestructableWithSkin(objectid, x, y, face, scale, variation, skinId))
end

---<static> createZWithSkin
---@overload fun(objectid: integer, vec: Vector3, face: float, scale: float, variation: integer, skinId: integer): Destructable
---@param objectid integer
---@param x float
---@param y float
---@param z float
---@param face float
---@param scale float
---@param variation integer
---@param skinId integer
---@return Destructable
function Destructable:createZWithSkin(objectid, x, y, z, face, scale, variation, skinId)
    if type(x) == 'table' then
        face, scale, variation, skinId = y, z, face, scale
        x, y, z = table.unpack(x)
    end
--@debug@
    checkclass(self, Destructable, 'createZWithSkin', 'self')
    checktype(objectid, 'integer', 'createZWithSkin', 1)
    checktype(x, 'float', 'createZWithSkin', 2)
    checktype(y, 'float', 'createZWithSkin', 3)
    checktype(z, 'float', 'createZWithSkin', 4)
    checktype(face, 'float', 'createZWithSkin', 5)
    checktype(scale, 'float', 'createZWithSkin', 6)
    checktype(variation, 'integer', 'createZWithSkin', 7)
    checktype(skinId, 'integer', 'createZWithSkin', 8)
--@end-debug@
    return Destructable:fromUd(Native.BlzCreateDestructableZWithSkin(objectid, x, y, z, face, scale, variation, skinId))
end

---<static> createDeadWithSkin
---@overload fun(objectid: integer, vec: Vector, face: float, scale: float, variation: integer, skinId: integer): Destructable
---@param objectid integer
---@param x float
---@param y float
---@param face float
---@param scale float
---@param variation integer
---@param skinId integer
---@return Destructable
function Destructable:createDeadWithSkin(objectid, x, y, face, scale, variation, skinId)
    if type(x) == 'table' then
        face, scale, variation, skinId = y, face, scale, variation
        x, y = table.unpack(x)
    end
--@debug@
    checkclass(self, Destructable, 'createDeadWithSkin', 'self')
    checktype(objectid, 'integer', 'createDeadWithSkin', 1)
    checktype(x, 'float', 'createDeadWithSkin', 2)
    checktype(y, 'float', 'createDeadWithSkin', 3)
    checktype(face, 'float', 'createDeadWithSkin', 4)
    checktype(scale, 'float', 'createDeadWithSkin', 5)
    checktype(variation, 'integer', 'createDeadWithSkin', 6)
    checktype(skinId, 'integer', 'createDeadWithSkin', 7)
--@end-debug@
    return Destructable:fromUd(Native.BlzCreateDeadDestructableWithSkin(objectid, x, y, face, scale, variation, skinId))
end

---<static> createDeadZWithSkin
---@overload fun(objectid: integer, vec: Vector3, face: float, scale: float, variation: integer, skinId: integer): Destructable
---@param objectid integer
---@param x float
---@param y float
---@param z float
---@param face float
---@param scale float
---@param variation integer
---@param skinId integer
---@return Destructable
function Destructable:createDeadZWithSkin(objectid, x, y, z, face, scale, variation, skinId)
    if type(x) == 'table' then
        face, scale, variation, skinId = y, z, face, scale
        x, y, z = table.unpack(x)
    end
--@debug@
    checkclass(self, Destructable, 'createDeadZWithSkin', 'self')
    checktype(objectid, 'integer', 'createDeadZWithSkin', 1)
    checktype(x, 'float', 'createDeadZWithSkin', 2)
    checktype(y, 'float', 'createDeadZWithSkin', 3)
    checktype(z, 'float', 'createDeadZWithSkin', 4)
    checktype(face, 'float', 'createDeadZWithSkin', 5)
    checktype(scale, 'float', 'createDeadZWithSkin', 6)
    checktype(variation, 'integer', 'createDeadZWithSkin', 7)
    checktype(skinId, 'integer', 'createDeadZWithSkin', 8)
--@end-debug@
    return Destructable:fromUd(Native.BlzCreateDeadDestructableZWithSkin(objectid, x, y, z, face, scale, variation, skinId))
end

---kill
---@return void
function Destructable:kill()
--@debug@
    checkobject(self, Destructable, 'kill', 'self')
--@end-debug@
    return Native.KillDestructable(getUd(self))
end

---setInvulnerable
---@param flag boolean
---@return void
function Destructable:setInvulnerable(flag)
--@debug@
    checkobject(self, Destructable, 'setInvulnerable', 'self')
    checktype(flag, 'boolean', 'setInvulnerable', 1)
--@end-debug@
    return Native.SetDestructableInvulnerable(getUd(self), flag)
end

---isInvulnerable
---@return boolean
function Destructable:isInvulnerable()
--@debug@
    checkobject(self, Destructable, 'isInvulnerable', 'self')
--@end-debug@
    return Native.IsDestructableInvulnerable(getUd(self))
end

---getTypeId
---@return integer
function Destructable:getTypeId()
--@debug@
    checkobject(self, Destructable, 'getTypeId', 'self')
--@end-debug@
    return Native.GetDestructableTypeId(getUd(self))
end

---getX
---@return float
function Destructable:getX()
--@debug@
    checkobject(self, Destructable, 'getX', 'self')
--@end-debug@
    return Native.GetDestructableX(getUd(self))
end

---getY
---@return float
function Destructable:getY()
--@debug@
    checkobject(self, Destructable, 'getY', 'self')
--@end-debug@
    return Native.GetDestructableY(getUd(self))
end

---setLife
---@param life float
---@return void
function Destructable:setLife(life)
--@debug@
    checkobject(self, Destructable, 'setLife', 'self')
    checktype(life, 'float', 'setLife', 1)
--@end-debug@
    return Native.SetDestructableLife(getUd(self), life)
end

---getLife
---@return float
function Destructable:getLife()
--@debug@
    checkobject(self, Destructable, 'getLife', 'self')
--@end-debug@
    return Native.GetDestructableLife(getUd(self))
end

---setMaxLife
---@param max float
---@return void
function Destructable:setMaxLife(max)
--@debug@
    checkobject(self, Destructable, 'setMaxLife', 'self')
    checktype(max, 'float', 'setMaxLife', 1)
--@end-debug@
    return Native.SetDestructableMaxLife(getUd(self), max)
end

---getMaxLife
---@return float
function Destructable:getMaxLife()
--@debug@
    checkobject(self, Destructable, 'getMaxLife', 'self')
--@end-debug@
    return Native.GetDestructableMaxLife(getUd(self))
end

---restoreLife
---@param life float
---@param birth boolean
---@return void
function Destructable:restoreLife(life, birth)
--@debug@
    checkobject(self, Destructable, 'restoreLife', 'self')
    checktype(life, 'float', 'restoreLife', 1)
    checktype(birth, 'boolean', 'restoreLife', 2)
--@end-debug@
    return Native.DestructableRestoreLife(getUd(self), life, birth)
end

---queueAnimation
---@param animation string
---@return void
function Destructable:queueAnimation(animation)
--@debug@
    checkobject(self, Destructable, 'queueAnimation', 'self')
    checktype(animation, 'string', 'queueAnimation', 1)
--@end-debug@
    return Native.QueueDestructableAnimation(getUd(self), animation)
end

---setAnimation
---@param animation string
---@return void
function Destructable:setAnimation(animation)
--@debug@
    checkobject(self, Destructable, 'setAnimation', 'self')
    checktype(animation, 'string', 'setAnimation', 1)
--@end-debug@
    return Native.SetDestructableAnimation(getUd(self), animation)
end

---setAnimationSpeed
---@param speedFactor float
---@return void
function Destructable:setAnimationSpeed(speedFactor)
--@debug@
    checkobject(self, Destructable, 'setAnimationSpeed', 'self')
    checktype(speedFactor, 'float', 'setAnimationSpeed', 1)
--@end-debug@
    return Native.SetDestructableAnimationSpeed(getUd(self), speedFactor)
end

---setShown
---@param flag boolean
---@return void
function Destructable:setShown(flag)
--@debug@
    checkobject(self, Destructable, 'setShown', 'self')
    checktype(flag, 'boolean', 'setShown', 1)
--@end-debug@
    return Native.ShowDestructable(getUd(self), flag)
end

---getOccluderHeight
---@return float
function Destructable:getOccluderHeight()
--@debug@
    checkobject(self, Destructable, 'getOccluderHeight', 'self')
--@end-debug@
    return Native.GetDestructableOccluderHeight(getUd(self))
end

---setOccluderHeight
---@param height float
---@return void
function Destructable:setOccluderHeight(height)
--@debug@
    checkobject(self, Destructable, 'setOccluderHeight', 'self')
    checktype(height, 'float', 'setOccluderHeight', 1)
--@end-debug@
    return Native.SetDestructableOccluderHeight(getUd(self), height)
end

---getName
---@return string
function Destructable:getName()
--@debug@
    checkobject(self, Destructable, 'getName', 'self')
--@end-debug@
    return Native.GetDestructableName(getUd(self))
end

return Destructable]]

P['lib/stdlib/oop/_generated/_dialog.lua'] = [[local Native = require('lib.stdlib.native')

---@class Dialog : Agent
local Dialog = class('Dialog', require('lib.stdlib.oop.agent'))

---destructor
---@return void
function Dialog:destructor()
--@debug@
    checkobject(self, Dialog, 'destructor', 'self')
--@end-debug@
    return Native.DialogDestroy(getUd(self))
end

---<**_DEPRECATED_**> destroy
---@return void
function Dialog:destroy()
--@debug@
    deprecated('Dialog.destroy', 'Dialog.delete')
--@end-debug@
    return self:delete()
end

---<static> create
---@return Dialog
function Dialog:create()
    return Dialog:fromUd(Native.DialogCreate())
end

---clear
---@return void
function Dialog:clear()
--@debug@
    checkobject(self, Dialog, 'clear', 'self')
--@end-debug@
    return Native.DialogClear(getUd(self))
end

---setMessage
---@param messageText string
---@return void
function Dialog:setMessage(messageText)
--@debug@
    checkobject(self, Dialog, 'setMessage', 'self')
    checktype(messageText, 'string', 'setMessage', 1)
--@end-debug@
    return Native.DialogSetMessage(getUd(self), messageText)
end

---addButton
---@param buttonText string
---@param hotkey integer
---@return Button
function Dialog:addButton(buttonText, hotkey)
--@debug@
    checkobject(self, Dialog, 'addButton', 'self')
    checktype(buttonText, 'string', 'addButton', 1)
    checktype(hotkey, 'integer', 'addButton', 2)
--@end-debug@
    return require('lib.stdlib.oop.button'):fromUd(Native.DialogAddButton(getUd(self), buttonText, hotkey))
end

---addQuitButton
---@param doScoreScreen boolean
---@param buttonText string
---@param hotkey integer
---@return Button
function Dialog:addQuitButton(doScoreScreen, buttonText, hotkey)
--@debug@
    checkobject(self, Dialog, 'addQuitButton', 'self')
    checktype(doScoreScreen, 'boolean', 'addQuitButton', 1)
    checktype(buttonText, 'string', 'addQuitButton', 2)
    checktype(hotkey, 'integer', 'addQuitButton', 3)
--@end-debug@
    return require('lib.stdlib.oop.button'):fromUd(Native.DialogAddQuitButton(getUd(self), doScoreScreen, buttonText, hotkey))
end

return Dialog]]

P['lib/stdlib/oop/_generated/_effect.lua'] = [[local Native = require('lib.stdlib.native')

---@class Effect : Agent
local Effect = class('Effect', require('lib.stdlib.oop.agent'))

---destructor
---@return void
function Effect:destructor()
--@debug@
    checkobject(self, Effect, 'destructor', 'self')
--@end-debug@
    return Native.DestroyEffect(getUd(self))
end

---<**_DEPRECATED_**> destroy
---@return void
function Effect:destroy()
--@debug@
    deprecated('Effect.destroy', 'Effect.delete')
--@end-debug@
    return self:delete()
end

---<static> addSpecial
---@overload fun(modelName: string, vec: Vector): Effect
---@param modelName string
---@param x float
---@param y float
---@return Effect
function Effect:addSpecial(modelName, x, y)
    if type(x) == 'table' then
        x, y = table.unpack(x)
    end
--@debug@
    checkclass(self, Effect, 'addSpecial', 'self')
    checktype(modelName, 'string', 'addSpecial', 1)
    checktype(x, 'float', 'addSpecial', 2)
    checktype(y, 'float', 'addSpecial', 3)
--@end-debug@
    return Effect:fromUd(Native.AddSpecialEffect(modelName, x, y))
end

---<static> addSpecialTarget
---@param modelName string
---@param targetWidget Widget
---@param attachPointName string
---@return Effect
function Effect:addSpecialTarget(modelName, targetWidget, attachPointName)
--@debug@
    checkclass(self, Effect, 'addSpecialTarget', 'self')
    checktype(modelName, 'string', 'addSpecialTarget', 1)
    checkobject(targetWidget, require('lib.stdlib.oop.widget'), 'addSpecialTarget', 2)
    checktype(attachPointName, 'string', 'addSpecialTarget', 3)
--@end-debug@
    return Effect:fromUd(Native.AddSpecialEffectTarget(modelName, getUd(targetWidget), attachPointName))
end

---<static> addSpell
---@overload fun(abilityString: string, t: EffectType, vec: Vector): Effect
---@param abilityString string
---@param t EffectType
---@param x float
---@param y float
---@return Effect
function Effect:addSpell(abilityString, t, x, y)
    if type(x) == 'table' then
        x, y = table.unpack(x)
    end
--@debug@
    checkclass(self, Effect, 'addSpell', 'self')
    checktype(abilityString, 'string', 'addSpell', 1)
    checkuserdata(t, 'effecttype', 'addSpell', 2)
    checktype(x, 'float', 'addSpell', 3)
    checktype(y, 'float', 'addSpell', 4)
--@end-debug@
    return Effect:fromUd(Native.AddSpellEffect(abilityString, t, x, y))
end

---<static> addSpellById
---@overload fun(abilityId: integer, t: EffectType, vec: Vector): Effect
---@param abilityId integer
---@param t EffectType
---@param x float
---@param y float
---@return Effect
function Effect:addSpellById(abilityId, t, x, y)
    if type(x) == 'table' then
        x, y = table.unpack(x)
    end
--@debug@
    checkclass(self, Effect, 'addSpellById', 'self')
    checktype(abilityId, 'integer', 'addSpellById', 1)
    checkuserdata(t, 'effecttype', 'addSpellById', 2)
    checktype(x, 'float', 'addSpellById', 3)
    checktype(y, 'float', 'addSpellById', 4)
--@end-debug@
    return Effect:fromUd(Native.AddSpellEffectById(abilityId, t, x, y))
end

---<static> addSpellTarget
---@param modelName string
---@param t EffectType
---@param targetWidget Widget
---@param attachPoint string
---@return Effect
function Effect:addSpellTarget(modelName, t, targetWidget, attachPoint)
--@debug@
    checkclass(self, Effect, 'addSpellTarget', 'self')
    checktype(modelName, 'string', 'addSpellTarget', 1)
    checkuserdata(t, 'effecttype', 'addSpellTarget', 2)
    checkobject(targetWidget, require('lib.stdlib.oop.widget'), 'addSpellTarget', 3)
    checktype(attachPoint, 'string', 'addSpellTarget', 4)
--@end-debug@
    return Effect:fromUd(Native.AddSpellEffectTarget(modelName, t, getUd(targetWidget), attachPoint))
end

---<static> addSpellTargetById
---@param abilityId integer
---@param t EffectType
---@param targetWidget Widget
---@param attachPoint string
---@return Effect
function Effect:addSpellTargetById(abilityId, t, targetWidget, attachPoint)
--@debug@
    checkclass(self, Effect, 'addSpellTargetById', 'self')
    checktype(abilityId, 'integer', 'addSpellTargetById', 1)
    checkuserdata(t, 'effecttype', 'addSpellTargetById', 2)
    checkobject(targetWidget, require('lib.stdlib.oop.widget'), 'addSpellTargetById', 3)
    checktype(attachPoint, 'string', 'addSpellTargetById', 4)
--@end-debug@
    return Effect:fromUd(Native.AddSpellEffectTargetById(abilityId, t, getUd(targetWidget), attachPoint))
end

---setSpecialColorByPlayer
---@param player Player
---@return void
function Effect:setSpecialColorByPlayer(player)
--@debug@
    checkobject(self, Effect, 'setSpecialColorByPlayer', 'self')
    checkobject(player, require('lib.stdlib.oop.player'), 'setSpecialColorByPlayer', 1)
--@end-debug@
    return Native.BlzSetSpecialEffectColorByPlayer(getUd(self), getUd(player))
end

---setSpecialColor
---@param r integer
---@param g integer
---@param b integer
---@return void
function Effect:setSpecialColor(r, g, b)
--@debug@
    checkobject(self, Effect, 'setSpecialColor', 'self')
    checktype(r, 'integer', 'setSpecialColor', 1)
    checktype(g, 'integer', 'setSpecialColor', 2)
    checktype(b, 'integer', 'setSpecialColor', 3)
--@end-debug@
    return Native.BlzSetSpecialEffectColor(getUd(self), r, g, b)
end

---setSpecialAlpha
---@param alpha integer
---@return void
function Effect:setSpecialAlpha(alpha)
--@debug@
    checkobject(self, Effect, 'setSpecialAlpha', 'self')
    checktype(alpha, 'integer', 'setSpecialAlpha', 1)
--@end-debug@
    return Native.BlzSetSpecialEffectAlpha(getUd(self), alpha)
end

---setSpecialScale
---@param scale float
---@return void
function Effect:setSpecialScale(scale)
--@debug@
    checkobject(self, Effect, 'setSpecialScale', 'self')
    checktype(scale, 'float', 'setSpecialScale', 1)
--@end-debug@
    return Native.BlzSetSpecialEffectScale(getUd(self), scale)
end

---setSpecialPosition
---@overload fun(vec: Vector3): void
---@param x float
---@param y float
---@param z float
---@return void
function Effect:setSpecialPosition(x, y, z)
    if type(x) == 'table' then
        x, y, z = table.unpack(x)
    end
--@debug@
    checkobject(self, Effect, 'setSpecialPosition', 'self')
    checktype(x, 'float', 'setSpecialPosition', 1)
    checktype(y, 'float', 'setSpecialPosition', 2)
    checktype(z, 'float', 'setSpecialPosition', 3)
--@end-debug@
    return Native.BlzSetSpecialEffectPosition(getUd(self), x, y, z)
end

---setSpecialHeight
---@param height float
---@return void
function Effect:setSpecialHeight(height)
--@debug@
    checkobject(self, Effect, 'setSpecialHeight', 'self')
    checktype(height, 'float', 'setSpecialHeight', 1)
--@end-debug@
    return Native.BlzSetSpecialEffectHeight(getUd(self), height)
end

---setSpecialTimeScale
---@param timeScale float
---@return void
function Effect:setSpecialTimeScale(timeScale)
--@debug@
    checkobject(self, Effect, 'setSpecialTimeScale', 'self')
    checktype(timeScale, 'float', 'setSpecialTimeScale', 1)
--@end-debug@
    return Native.BlzSetSpecialEffectTimeScale(getUd(self), timeScale)
end

---setSpecialTime
---@param time float
---@return void
function Effect:setSpecialTime(time)
--@debug@
    checkobject(self, Effect, 'setSpecialTime', 'self')
    checktype(time, 'float', 'setSpecialTime', 1)
--@end-debug@
    return Native.BlzSetSpecialEffectTime(getUd(self), time)
end

---setSpecialOrientation
---@param yaw float
---@param pitch float
---@param roll float
---@return void
function Effect:setSpecialOrientation(yaw, pitch, roll)
--@debug@
    checkobject(self, Effect, 'setSpecialOrientation', 'self')
    checktype(yaw, 'float', 'setSpecialOrientation', 1)
    checktype(pitch, 'float', 'setSpecialOrientation', 2)
    checktype(roll, 'float', 'setSpecialOrientation', 3)
--@end-debug@
    return Native.BlzSetSpecialEffectOrientation(getUd(self), yaw, pitch, roll)
end

---setSpecialYaw
---@param yaw float
---@return void
function Effect:setSpecialYaw(yaw)
--@debug@
    checkobject(self, Effect, 'setSpecialYaw', 'self')
    checktype(yaw, 'float', 'setSpecialYaw', 1)
--@end-debug@
    return Native.BlzSetSpecialEffectYaw(getUd(self), yaw)
end

---setSpecialPitch
---@param pitch float
---@return void
function Effect:setSpecialPitch(pitch)
--@debug@
    checkobject(self, Effect, 'setSpecialPitch', 'self')
    checktype(pitch, 'float', 'setSpecialPitch', 1)
--@end-debug@
    return Native.BlzSetSpecialEffectPitch(getUd(self), pitch)
end

---setSpecialRoll
---@param roll float
---@return void
function Effect:setSpecialRoll(roll)
--@debug@
    checkobject(self, Effect, 'setSpecialRoll', 'self')
    checktype(roll, 'float', 'setSpecialRoll', 1)
--@end-debug@
    return Native.BlzSetSpecialEffectRoll(getUd(self), roll)
end

---setSpecialX
---@param x float
---@return void
function Effect:setSpecialX(x)
--@debug@
    checkobject(self, Effect, 'setSpecialX', 'self')
    checktype(x, 'float', 'setSpecialX', 1)
--@end-debug@
    return Native.BlzSetSpecialEffectX(getUd(self), x)
end

---setSpecialY
---@param y float
---@return void
function Effect:setSpecialY(y)
--@debug@
    checkobject(self, Effect, 'setSpecialY', 'self')
    checktype(y, 'float', 'setSpecialY', 1)
--@end-debug@
    return Native.BlzSetSpecialEffectY(getUd(self), y)
end

---setSpecialZ
---@param z float
---@return void
function Effect:setSpecialZ(z)
--@debug@
    checkobject(self, Effect, 'setSpecialZ', 'self')
    checktype(z, 'float', 'setSpecialZ', 1)
--@end-debug@
    return Native.BlzSetSpecialEffectZ(getUd(self), z)
end

---getLocalSpecialX
---@return float
function Effect:getLocalSpecialX()
--@debug@
    checkobject(self, Effect, 'getLocalSpecialX', 'self')
--@end-debug@
    return Native.BlzGetLocalSpecialEffectX(getUd(self))
end

---getLocalSpecialY
---@return float
function Effect:getLocalSpecialY()
--@debug@
    checkobject(self, Effect, 'getLocalSpecialY', 'self')
--@end-debug@
    return Native.BlzGetLocalSpecialEffectY(getUd(self))
end

---getLocalSpecialZ
---@return float
function Effect:getLocalSpecialZ()
--@debug@
    checkobject(self, Effect, 'getLocalSpecialZ', 'self')
--@end-debug@
    return Native.BlzGetLocalSpecialEffectZ(getUd(self))
end

---specialClearSubAnimations
---@return void
function Effect:specialClearSubAnimations()
--@debug@
    checkobject(self, Effect, 'specialClearSubAnimations', 'self')
--@end-debug@
    return Native.BlzSpecialEffectClearSubAnimations(getUd(self))
end

---specialRemoveSubAnimation
---@param subAnim SubAnimType
---@return void
function Effect:specialRemoveSubAnimation(subAnim)
--@debug@
    checkobject(self, Effect, 'specialRemoveSubAnimation', 'self')
    checkuserdata(subAnim, 'subanimtype', 'specialRemoveSubAnimation', 1)
--@end-debug@
    return Native.BlzSpecialEffectRemoveSubAnimation(getUd(self), subAnim)
end

---specialAddSubAnimation
---@param subAnim SubAnimType
---@return void
function Effect:specialAddSubAnimation(subAnim)
--@debug@
    checkobject(self, Effect, 'specialAddSubAnimation', 'self')
    checkuserdata(subAnim, 'subanimtype', 'specialAddSubAnimation', 1)
--@end-debug@
    return Native.BlzSpecialEffectAddSubAnimation(getUd(self), subAnim)
end

---playSpecial
---@param anim AnimType
---@return void
function Effect:playSpecial(anim)
--@debug@
    checkobject(self, Effect, 'playSpecial', 'self')
    checkuserdata(anim, 'animtype', 'playSpecial', 1)
--@end-debug@
    return Native.BlzPlaySpecialEffect(getUd(self), anim)
end

---playSpecialWithTimeScale
---@param anim AnimType
---@param timeScale float
---@return void
function Effect:playSpecialWithTimeScale(anim, timeScale)
--@debug@
    checkobject(self, Effect, 'playSpecialWithTimeScale', 'self')
    checkuserdata(anim, 'animtype', 'playSpecialWithTimeScale', 1)
    checktype(timeScale, 'float', 'playSpecialWithTimeScale', 2)
--@end-debug@
    return Native.BlzPlaySpecialEffectWithTimeScale(getUd(self), anim, timeScale)
end

---getSpecialScale
---@return float
function Effect:getSpecialScale()
--@debug@
    checkobject(self, Effect, 'getSpecialScale', 'self')
--@end-debug@
    return Native.BlzGetSpecialEffectScale(getUd(self))
end

---setSpecialMatrixScale
---@overload fun(vec: Vector3): void
---@param x float
---@param y float
---@param z float
---@return void
function Effect:setSpecialMatrixScale(x, y, z)
    if type(x) == 'table' then
        x, y, z = table.unpack(x)
    end
--@debug@
    checkobject(self, Effect, 'setSpecialMatrixScale', 'self')
    checktype(x, 'float', 'setSpecialMatrixScale', 1)
    checktype(y, 'float', 'setSpecialMatrixScale', 2)
    checktype(z, 'float', 'setSpecialMatrixScale', 3)
--@end-debug@
    return Native.BlzSetSpecialEffectMatrixScale(getUd(self), x, y, z)
end

---resetSpecialMatrix
---@return void
function Effect:resetSpecialMatrix()
--@debug@
    checkobject(self, Effect, 'resetSpecialMatrix', 'self')
--@end-debug@
    return Native.BlzResetSpecialEffectMatrix(getUd(self))
end

return Effect]]

P['lib/stdlib/oop/_generated/_event.lua'] = [[local Native = require('lib.stdlib.native')

---@class Event : Agent
local Event = class('Event', require('lib.stdlib.oop.agent'))

---<static> getTriggeringTrigger
---@return Trigger
function Event:getTriggeringTrigger()
    return require('lib.stdlib.oop.trigger'):fromUd(Native.GetTriggeringTrigger())
end

---<static> getEventGameState
---@return GameState
function Event:getEventGameState()
    return Native.GetEventGameState()
end

---<static> getWinningPlayer
---@return Player
function Event:getWinningPlayer()
    return require('lib.stdlib.oop.player'):fromUd(Native.GetWinningPlayer())
end

---<static> getTriggeringRegion
---@return Region
function Event:getTriggeringRegion()
    return require('lib.stdlib.oop.region'):fromUd(Native.GetTriggeringRegion())
end

---<static> getEnteringUnit
---@return Unit
function Event:getEnteringUnit()
    return require('lib.stdlib.oop.unit'):fromUd(Native.GetEnteringUnit())
end

---<static> getLeavingUnit
---@return Unit
function Event:getLeavingUnit()
    return require('lib.stdlib.oop.unit'):fromUd(Native.GetLeavingUnit())
end

---<static> getTriggeringTrackable
---@return Trackable
function Event:getTriggeringTrackable()
    return require('lib.stdlib.oop.trackable'):fromUd(Native.GetTriggeringTrackable())
end

---<static> getClickedButton
---@return Button
function Event:getClickedButton()
    return require('lib.stdlib.oop.button'):fromUd(Native.GetClickedButton())
end

---<static> getClickedDialog
---@return Dialog
function Event:getClickedDialog()
    return require('lib.stdlib.oop.dialog'):fromUd(Native.GetClickedDialog())
end

---<static> getTournamentFinishSoonTimeRemaining
---@return float
function Event:getTournamentFinishSoonTimeRemaining()
    return Native.GetTournamentFinishSoonTimeRemaining()
end

---<static> getTournamentFinishNowRule
---@return integer
function Event:getTournamentFinishNowRule()
    return Native.GetTournamentFinishNowRule()
end

---<static> getTournamentFinishNowPlayer
---@return Player
function Event:getTournamentFinishNowPlayer()
    return require('lib.stdlib.oop.player'):fromUd(Native.GetTournamentFinishNowPlayer())
end

---<static> getSaveBasicFilename
---@return string
function Event:getSaveBasicFilename()
    return Native.GetSaveBasicFilename()
end

---<static> getTriggerPlayer
---@return Player
function Event:getTriggerPlayer()
    return require('lib.stdlib.oop.player'):fromUd(Native.GetTriggerPlayer())
end

---<static> getLevelingUnit
---@return Unit
function Event:getLevelingUnit()
    return require('lib.stdlib.oop.unit'):fromUd(Native.GetLevelingUnit())
end

---<static> getLearningUnit
---@return Unit
function Event:getLearningUnit()
    return require('lib.stdlib.oop.unit'):fromUd(Native.GetLearningUnit())
end

---<static> getLearnedSkill
---@return integer
function Event:getLearnedSkill()
    return Native.GetLearnedSkill()
end

---<static> getLearnedSkillLevel
---@return integer
function Event:getLearnedSkillLevel()
    return Native.GetLearnedSkillLevel()
end

---<static> getRevivableUnit
---@return Unit
function Event:getRevivableUnit()
    return require('lib.stdlib.oop.unit'):fromUd(Native.GetRevivableUnit())
end

---<static> getRevivingUnit
---@return Unit
function Event:getRevivingUnit()
    return require('lib.stdlib.oop.unit'):fromUd(Native.GetRevivingUnit())
end

---<static> getAttacker
---@return Unit
function Event:getAttacker()
    return require('lib.stdlib.oop.unit'):fromUd(Native.GetAttacker())
end

---<static> getRescuer
---@return Unit
function Event:getRescuer()
    return require('lib.stdlib.oop.unit'):fromUd(Native.GetRescuer())
end

---<static> getDyingUnit
---@return Unit
function Event:getDyingUnit()
    return require('lib.stdlib.oop.unit'):fromUd(Native.GetDyingUnit())
end

---<static> getKillingUnit
---@return Unit
function Event:getKillingUnit()
    return require('lib.stdlib.oop.unit'):fromUd(Native.GetKillingUnit())
end

---<static> getDecayingUnit
---@return Unit
function Event:getDecayingUnit()
    return require('lib.stdlib.oop.unit'):fromUd(Native.GetDecayingUnit())
end

---<static> getConstructingStructure
---@return Unit
function Event:getConstructingStructure()
    return require('lib.stdlib.oop.unit'):fromUd(Native.GetConstructingStructure())
end

---<static> getCancelledStructure
---@return Unit
function Event:getCancelledStructure()
    return require('lib.stdlib.oop.unit'):fromUd(Native.GetCancelledStructure())
end

---<static> getConstructedStructure
---@return Unit
function Event:getConstructedStructure()
    return require('lib.stdlib.oop.unit'):fromUd(Native.GetConstructedStructure())
end

---<static> getResearchingUnit
---@return Unit
function Event:getResearchingUnit()
    return require('lib.stdlib.oop.unit'):fromUd(Native.GetResearchingUnit())
end

---<static> getResearched
---@return integer
function Event:getResearched()
    return Native.GetResearched()
end

---<static> getTrainedUnitType
---@return integer
function Event:getTrainedUnitType()
    return Native.GetTrainedUnitType()
end

---<static> getTrainedUnit
---@return Unit
function Event:getTrainedUnit()
    return require('lib.stdlib.oop.unit'):fromUd(Native.GetTrainedUnit())
end

---<static> getDetectedUnit
---@return Unit
function Event:getDetectedUnit()
    return require('lib.stdlib.oop.unit'):fromUd(Native.GetDetectedUnit())
end

---<static> getSummoningUnit
---@return Unit
function Event:getSummoningUnit()
    return require('lib.stdlib.oop.unit'):fromUd(Native.GetSummoningUnit())
end

---<static> getSummonedUnit
---@return Unit
function Event:getSummonedUnit()
    return require('lib.stdlib.oop.unit'):fromUd(Native.GetSummonedUnit())
end

---<static> getTransportUnit
---@return Unit
function Event:getTransportUnit()
    return require('lib.stdlib.oop.unit'):fromUd(Native.GetTransportUnit())
end

---<static> getLoadedUnit
---@return Unit
function Event:getLoadedUnit()
    return require('lib.stdlib.oop.unit'):fromUd(Native.GetLoadedUnit())
end

---<static> getSellingUnit
---@return Unit
function Event:getSellingUnit()
    return require('lib.stdlib.oop.unit'):fromUd(Native.GetSellingUnit())
end

---<static> getSoldUnit
---@return Unit
function Event:getSoldUnit()
    return require('lib.stdlib.oop.unit'):fromUd(Native.GetSoldUnit())
end

---<static> getBuyingUnit
---@return Unit
function Event:getBuyingUnit()
    return require('lib.stdlib.oop.unit'):fromUd(Native.GetBuyingUnit())
end

---<static> getSoldItem
---@return Item
function Event:getSoldItem()
    return require('lib.stdlib.oop.item'):fromUd(Native.GetSoldItem())
end

---<static> getChangingUnit
---@return Unit
function Event:getChangingUnit()
    return require('lib.stdlib.oop.unit'):fromUd(Native.GetChangingUnit())
end

---<static> getChangingUnitPrevOwner
---@return Player
function Event:getChangingUnitPrevOwner()
    return require('lib.stdlib.oop.player'):fromUd(Native.GetChangingUnitPrevOwner())
end

---<static> getManipulatingUnit
---@return Unit
function Event:getManipulatingUnit()
    return require('lib.stdlib.oop.unit'):fromUd(Native.GetManipulatingUnit())
end

---<static> getManipulatedItem
---@return Item
function Event:getManipulatedItem()
    return require('lib.stdlib.oop.item'):fromUd(Native.GetManipulatedItem())
end

---<static> getOrderedUnit
---@return Unit
function Event:getOrderedUnit()
    return require('lib.stdlib.oop.unit'):fromUd(Native.GetOrderedUnit())
end

---<static> getIssuedOrder
---@return integer
function Event:getIssuedOrder()
    return Native.GetIssuedOrderId()
end

---<static> getOrderPointX
---@return float
function Event:getOrderPointX()
    return Native.GetOrderPointX()
end

---<static> getOrderPointY
---@return float
function Event:getOrderPointY()
    return Native.GetOrderPointY()
end

---<static> getOrderPointLoc
---@return Location
function Event:getOrderPointLoc()
    return require('lib.stdlib.oop.location'):fromUd(Native.GetOrderPointLoc())
end

---<static> getOrderTarget
---@return Widget
function Event:getOrderTarget()
    return require('lib.stdlib.oop.widget'):fromUd(Native.GetOrderTarget())
end

---<static> getOrderTargetDestructable
---@return Destructable
function Event:getOrderTargetDestructable()
    return require('lib.stdlib.oop.destructable'):fromUd(Native.GetOrderTargetDestructable())
end

---<static> getOrderTargetItem
---@return Item
function Event:getOrderTargetItem()
    return require('lib.stdlib.oop.item'):fromUd(Native.GetOrderTargetItem())
end

---<static> getOrderTargetUnit
---@return Unit
function Event:getOrderTargetUnit()
    return require('lib.stdlib.oop.unit'):fromUd(Native.GetOrderTargetUnit())
end

---<static> getSpellAbilityUnit
---@return Unit
function Event:getSpellAbilityUnit()
    return require('lib.stdlib.oop.unit'):fromUd(Native.GetSpellAbilityUnit())
end

---<static> getSpellAbilityId
---@return integer
function Event:getSpellAbilityId()
    return Native.GetSpellAbilityId()
end

---<static> getSpellAbility
---@return Ability
function Event:getSpellAbility()
    return require('lib.stdlib.oop.ability'):fromUd(Native.GetSpellAbility())
end

---<static> getSpellTargetLoc
---@return Location
function Event:getSpellTargetLoc()
    return require('lib.stdlib.oop.location'):fromUd(Native.GetSpellTargetLoc())
end

---<static> getSpellTargetX
---@return float
function Event:getSpellTargetX()
    return Native.GetSpellTargetX()
end

---<static> getSpellTargetY
---@return float
function Event:getSpellTargetY()
    return Native.GetSpellTargetY()
end

---<static> getSpellTargetDestructable
---@return Destructable
function Event:getSpellTargetDestructable()
    return require('lib.stdlib.oop.destructable'):fromUd(Native.GetSpellTargetDestructable())
end

---<static> getSpellTargetItem
---@return Item
function Event:getSpellTargetItem()
    return require('lib.stdlib.oop.item'):fromUd(Native.GetSpellTargetItem())
end

---<static> getSpellTargetUnit
---@return Unit
function Event:getSpellTargetUnit()
    return require('lib.stdlib.oop.unit'):fromUd(Native.GetSpellTargetUnit())
end

---<static> getEventPlayerState
---@return PlayerState
function Event:getEventPlayerState()
    return Native.GetEventPlayerState()
end

---<static> getEventPlayerChatString
---@return string
function Event:getEventPlayerChatString()
    return Native.GetEventPlayerChatString()
end

---<static> getEventPlayerChatStringMatched
---@return string
function Event:getEventPlayerChatStringMatched()
    return Native.GetEventPlayerChatStringMatched()
end

---<static> getTriggerUnit
---@return Unit
function Event:getTriggerUnit()
    return require('lib.stdlib.oop.unit'):fromUd(Native.GetTriggerUnit())
end

---<static> getEventUnitState
---@return UnitState
function Event:getEventUnitState()
    return Native.GetEventUnitState()
end

---<static> getEventDamage
---@return float
function Event:getEventDamage()
    return Native.GetEventDamage()
end

---<static> getEventDamageSource
---@return Unit
function Event:getEventDamageSource()
    return require('lib.stdlib.oop.unit'):fromUd(Native.GetEventDamageSource())
end

---<static> getEventDetectingPlayer
---@return Player
function Event:getEventDetectingPlayer()
    return require('lib.stdlib.oop.player'):fromUd(Native.GetEventDetectingPlayer())
end

---<static> getEventTargetUnit
---@return Unit
function Event:getEventTargetUnit()
    return require('lib.stdlib.oop.unit'):fromUd(Native.GetEventTargetUnit())
end

---<static> getTriggerWidget
---@return Widget
function Event:getTriggerWidget()
    return require('lib.stdlib.oop.widget'):fromUd(Native.GetTriggerWidget())
end

---<static> getTriggerDestructable
---@return Destructable
function Event:getTriggerDestructable()
    return require('lib.stdlib.oop.destructable'):fromUd(Native.GetTriggerDestructable())
end

---<static> getTriggerPlayerMouseX
---@return float
function Event:getTriggerPlayerMouseX()
    return Native.BlzGetTriggerPlayerMouseX()
end

---<static> getTriggerPlayerMouseY
---@return float
function Event:getTriggerPlayerMouseY()
    return Native.BlzGetTriggerPlayerMouseY()
end

---<static> getTriggerPlayerMousePosition
---@return Location
function Event:getTriggerPlayerMousePosition()
    return require('lib.stdlib.oop.location'):fromUd(Native.BlzGetTriggerPlayerMousePosition())
end

---<static> getTriggerPlayerMouseButton
---@return MouseButtonType
function Event:getTriggerPlayerMouseButton()
    return Native.BlzGetTriggerPlayerMouseButton()
end

---<static> getTriggerFrame
---@return Frame
function Event:getTriggerFrame()
    return require('lib.stdlib.oop.frame'):fromUd(Native.BlzGetTriggerFrame())
end

---<static> getTriggerFrameEvent
---@return FrameEventType
function Event:getTriggerFrameEvent()
    return Native.BlzGetTriggerFrameEvent()
end

---<static> getTriggerFrameValue
---@return float
function Event:getTriggerFrameValue()
    return Native.BlzGetTriggerFrameValue()
end

---<static> getTriggerFrameText
---@return string
function Event:getTriggerFrameText()
    return Native.BlzGetTriggerFrameText()
end

---<static> getTriggerSyncPrefix
---@return string
function Event:getTriggerSyncPrefix()
    return Native.BlzGetTriggerSyncPrefix()
end

---<static> getTriggerSyncData
---@return string
function Event:getTriggerSyncData()
    return Native.BlzGetTriggerSyncData()
end

---<static> getTriggerPlayerKey
---@return OsKeyType
function Event:getTriggerPlayerKey()
    return Native.BlzGetTriggerPlayerKey()
end

---<static> getTriggerPlayerMetaKey
---@return integer
function Event:getTriggerPlayerMetaKey()
    return Native.BlzGetTriggerPlayerMetaKey()
end

---<static> getTriggerPlayerIsKeyDown
---@return boolean
function Event:getTriggerPlayerIsKeyDown()
    return Native.BlzGetTriggerPlayerIsKeyDown()
end

return Event]]

P['lib/stdlib/oop/_generated/_filter.lua'] = [[local Native = require('lib.stdlib.native')

---@class Filter : BoolExpr
local Filter = class('Filter', require('lib.stdlib.oop.boolexpr'))

---- compact same name native function
setmetatable(Filter, table.merge(getmetatable(Filter), {__call = function(_, ...)
    return Native.Filter(...)
end}))

---destructor
---@return void
function Filter:destructor()
--@debug@
    checkobject(self, Filter, 'destructor', 'self')
--@end-debug@
    return Native.DestroyFilter(getUd(self))
end

---<**_DEPRECATED_**> destroy
---@return void
function Filter:destroy()
--@debug@
    deprecated('Filter.destroy', 'Filter.delete')
--@end-debug@
    return self:delete()
end

---<static> create
---@param func function
---@return Filter
function Filter:create(func)
--@debug@
    checkclass(self, Filter, 'create', 'self')
    checktype(func, 'function', 'create', 1)
--@end-debug@
    return Filter:fromUd(Native.Filter(func))
end

return Filter]]

P['lib/stdlib/oop/_generated/_fogmodifier.lua'] = [[local Native = require('lib.stdlib.native')

---@class FogModifier : Agent
local FogModifier = class('FogModifier', require('lib.stdlib.oop.agent'))

---destructor
---@return void
function FogModifier:destructor()
--@debug@
    checkobject(self, FogModifier, 'destructor', 'self')
--@end-debug@
    return Native.DestroyFogModifier(getUd(self))
end

---<**_DEPRECATED_**> destroy
---@return void
function FogModifier:destroy()
--@debug@
    deprecated('FogModifier.destroy', 'FogModifier.delete')
--@end-debug@
    return self:delete()
end

---<static> createRect
---@param forWhichPlayer Player
---@param state FogState
---@param where Rect
---@param useSharedVision boolean
---@param afterUnits boolean
---@return FogModifier
function FogModifier:createRect(forWhichPlayer, state, where, useSharedVision, afterUnits)
--@debug@
    checkclass(self, FogModifier, 'createRect', 'self')
    checkobject(forWhichPlayer, require('lib.stdlib.oop.player'), 'createRect', 1)
    checkuserdata(state, 'fogstate', 'createRect', 2)
    checkobject(where, require('lib.stdlib.oop.rect'), 'createRect', 3)
    checktype(useSharedVision, 'boolean', 'createRect', 4)
    checktype(afterUnits, 'boolean', 'createRect', 5)
--@end-debug@
    return FogModifier:fromUd(Native.CreateFogModifierRect(getUd(forWhichPlayer), state, getUd(where), useSharedVision, afterUnits))
end

---<static> createRadius
---@overload fun(forWhichPlayer: Player, state: FogState, vec: Vector, radius: float, useSharedVision: boolean, afterUnits: boolean): FogModifier
---@param forWhichPlayer Player
---@param state FogState
---@param centerx float
---@param centerY float
---@param radius float
---@param useSharedVision boolean
---@param afterUnits boolean
---@return FogModifier
function FogModifier:createRadius(forWhichPlayer, state, centerx, centerY, radius, useSharedVision, afterUnits)
    if type(centerx) == 'table' then
        radius, useSharedVision, afterUnits = centerY, radius, useSharedVision
        centerx, centerY = table.unpack(centerx)
    end
--@debug@
    checkclass(self, FogModifier, 'createRadius', 'self')
    checkobject(forWhichPlayer, require('lib.stdlib.oop.player'), 'createRadius', 1)
    checkuserdata(state, 'fogstate', 'createRadius', 2)
    checktype(centerx, 'float', 'createRadius', 3)
    checktype(centerY, 'float', 'createRadius', 4)
    checktype(radius, 'float', 'createRadius', 5)
    checktype(useSharedVision, 'boolean', 'createRadius', 6)
    checktype(afterUnits, 'boolean', 'createRadius', 7)
--@end-debug@
    return FogModifier:fromUd(Native.CreateFogModifierRadius(getUd(forWhichPlayer), state, centerx, centerY, radius, useSharedVision, afterUnits))
end

---start
---@return void
function FogModifier:start()
--@debug@
    checkobject(self, FogModifier, 'start', 'self')
--@end-debug@
    return Native.FogModifierStart(getUd(self))
end

---stop
---@return void
function FogModifier:stop()
--@debug@
    checkobject(self, FogModifier, 'stop', 'self')
--@end-debug@
    return Native.FogModifierStop(getUd(self))
end

return FogModifier]]

P['lib/stdlib/oop/_generated/_force.lua'] = [[local Native = require('lib.stdlib.native')

---@class Force : Agent
local Force = class('Force', require('lib.stdlib.oop.agent'))

---destructor
---@return void
function Force:destructor()
--@debug@
    checkobject(self, Force, 'destructor', 'self')
--@end-debug@
    return Native.DestroyForce(getUd(self))
end

---<**_DEPRECATED_**> destroy
---@return void
function Force:destroy()
--@debug@
    deprecated('Force.destroy', 'Force.delete')
--@end-debug@
    return self:delete()
end

---<static> create
---@return Force
function Force:create()
    return Force:fromUd(Native.CreateForce())
end

---addPlayer
---@param player Player
---@return void
function Force:addPlayer(player)
--@debug@
    checkobject(self, Force, 'addPlayer', 'self')
    checkobject(player, require('lib.stdlib.oop.player'), 'addPlayer', 1)
--@end-debug@
    return Native.ForceAddPlayer(getUd(self), getUd(player))
end

---removePlayer
---@param player Player
---@return void
function Force:removePlayer(player)
--@debug@
    checkobject(self, Force, 'removePlayer', 'self')
    checkobject(player, require('lib.stdlib.oop.player'), 'removePlayer', 1)
--@end-debug@
    return Native.ForceRemovePlayer(getUd(self), getUd(player))
end

---hasPlayer
---@param player Player
---@return boolean
function Force:hasPlayer(player)
--@debug@
    checkobject(self, Force, 'hasPlayer', 'self')
    checkobject(player, require('lib.stdlib.oop.player'), 'hasPlayer', 1)
--@end-debug@
    return Native.BlzForceHasPlayer(getUd(self), getUd(player))
end

---clear
---@return void
function Force:clear()
--@debug@
    checkobject(self, Force, 'clear', 'self')
--@end-debug@
    return Native.ForceClear(getUd(self))
end

---enumPlayers
---@param filter PlayerFilter
---@return void
function Force:enumPlayers(filter)
--@debug@
    checkobject(self, Force, 'enumPlayers', 'self')
    checktype(filter, 'function', 'enumPlayers', 1)
--@end-debug@
    filter = require('lib.stdlib.oop.filter'):createPlayerFilter(filter)
    Native.ForceEnumPlayers(getUd(self), getUd(filter))
    if filter then filter:delete() end
end

---enumPlayersCounted
---@param countLimit integer
---@param filter PlayerFilter
---@return void
function Force:enumPlayersCounted(countLimit, filter)
--@debug@
    checkobject(self, Force, 'enumPlayersCounted', 'self')
    checktype(countLimit, 'integer', 'enumPlayersCounted', 1)
    checktype(filter, 'function', 'enumPlayersCounted', 2)
--@end-debug@
    filter = require('lib.stdlib.oop.filter'):createPlayerFilter(filter)
    Native.ForceEnumPlayersCounted(getUd(self), getUd(filter), countLimit)
    if filter then filter:delete() end
end

---enumAllies
---@param player Player
---@param filter PlayerFilter
---@return void
function Force:enumAllies(player, filter)
--@debug@
    checkobject(self, Force, 'enumAllies', 'self')
    checkobject(player, require('lib.stdlib.oop.player'), 'enumAllies', 1)
    checktype(filter, 'function', 'enumAllies', 2)
--@end-debug@
    filter = require('lib.stdlib.oop.filter'):createPlayerFilter(filter)
    Native.ForceEnumAllies(getUd(self), getUd(player), getUd(filter))
    if filter then filter:delete() end
end

---enumEnemies
---@param player Player
---@param filter PlayerFilter
---@return void
function Force:enumEnemies(player, filter)
--@debug@
    checkobject(self, Force, 'enumEnemies', 'self')
    checkobject(player, require('lib.stdlib.oop.player'), 'enumEnemies', 1)
    checktype(filter, 'function', 'enumEnemies', 2)
--@end-debug@
    filter = require('lib.stdlib.oop.filter'):createPlayerFilter(filter)
    Native.ForceEnumEnemies(getUd(self), getUd(player), getUd(filter))
    if filter then filter:delete() end
end

---forEach
---@param callback PlayerCallback
---@return void
function Force:forEach(callback)
--@debug@
    checkobject(self, Force, 'forEach', 'self')
    checktype(callback, 'function', 'forEach', 1)
--@end-debug@
    callback = require('lib.stdlib.oop.function'):createPlayerCallback(callback)
    return Native.ForForce(getUd(self), callback)
end

return Force]]

P['lib/stdlib/oop/_generated/_frame.lua'] = [[local Native = require('lib.stdlib.native')

---@class Frame : Handle
local Frame = class('Frame', require('lib.stdlib.oop.handle'))

---<static> getOrigin
---@param frameType OriginFrameType
---@param index integer
---@return Frame
function Frame:getOrigin(frameType, index)
--@debug@
    checkclass(self, Frame, 'getOrigin', 'self')
    checkuserdata(frameType, 'originframetype', 'getOrigin', 1)
    checktype(index, 'integer', 'getOrigin', 2)
--@end-debug@
    return Frame:fromUd(Native.BlzGetOriginFrame(frameType, index))
end

---<static> create
---@param name string
---@param owner Frame
---@param priority integer
---@param createContext integer
---@return Frame
function Frame:create(name, owner, priority, createContext)
--@debug@
    checkclass(self, Frame, 'create', 'self')
    checktype(name, 'string', 'create', 1)
    checkobject(owner, require('lib.stdlib.oop.frame'), 'create', 2)
    checktype(priority, 'integer', 'create', 3)
    checktype(createContext, 'integer', 'create', 4)
--@end-debug@
    return Frame:fromUd(Native.BlzCreateFrame(name, getUd(owner), priority, createContext))
end

---<static> createSimple
---@param name string
---@param owner Frame
---@param createContext integer
---@return Frame
function Frame:createSimple(name, owner, createContext)
--@debug@
    checkclass(self, Frame, 'createSimple', 'self')
    checktype(name, 'string', 'createSimple', 1)
    checkobject(owner, require('lib.stdlib.oop.frame'), 'createSimple', 2)
    checktype(createContext, 'integer', 'createSimple', 3)
--@end-debug@
    return Frame:fromUd(Native.BlzCreateSimpleFrame(name, getUd(owner), createContext))
end

---<static> createByType
---@param typeName string
---@param name string
---@param owner Frame
---@param inherits string
---@param createContext integer
---@return Frame
function Frame:createByType(typeName, name, owner, inherits, createContext)
--@debug@
    checkclass(self, Frame, 'createByType', 'self')
    checktype(typeName, 'string', 'createByType', 1)
    checktype(name, 'string', 'createByType', 2)
    checkobject(owner, require('lib.stdlib.oop.frame'), 'createByType', 3)
    checktype(inherits, 'string', 'createByType', 4)
    checktype(createContext, 'integer', 'createByType', 5)
--@end-debug@
    return Frame:fromUd(Native.BlzCreateFrameByType(typeName, name, getUd(owner), inherits, createContext))
end

---<static> getByName
---@param name string
---@param createContext integer
---@return Frame
function Frame:getByName(name, createContext)
--@debug@
    checkclass(self, Frame, 'getByName', 'self')
    checktype(name, 'string', 'getByName', 1)
    checktype(createContext, 'integer', 'getByName', 2)
--@end-debug@
    return Frame:fromUd(Native.BlzGetFrameByName(name, createContext))
end

---destroy
---@return void
function Frame:destroy()
--@debug@
    checkobject(self, Frame, 'destroy', 'self')
--@end-debug@
    return Native.BlzDestroyFrame(getUd(self))
end

---setPoint
---@overload fun(point: FramePointType, relative: Frame, relativePoint: FramePointType, vec: Vector): void
---@param point FramePointType
---@param relative Frame
---@param relativePoint FramePointType
---@param x float
---@param y float
---@return void
function Frame:setPoint(point, relative, relativePoint, x, y)
    if type(x) == 'table' then
        x, y = table.unpack(x)
    end
--@debug@
    checkobject(self, Frame, 'setPoint', 'self')
    checkuserdata(point, 'framepointtype', 'setPoint', 1)
    checkobject(relative, require('lib.stdlib.oop.frame'), 'setPoint', 2)
    checkuserdata(relativePoint, 'framepointtype', 'setPoint', 3)
    checktype(x, 'float', 'setPoint', 4)
    checktype(y, 'float', 'setPoint', 5)
--@end-debug@
    return Native.BlzFrameSetPoint(getUd(self), point, getUd(relative), relativePoint, x, y)
end

---setAbsPoint
---@overload fun(point: FramePointType, vec: Vector): void
---@param point FramePointType
---@param x float
---@param y float
---@return void
function Frame:setAbsPoint(point, x, y)
    if type(x) == 'table' then
        x, y = table.unpack(x)
    end
--@debug@
    checkobject(self, Frame, 'setAbsPoint', 'self')
    checkuserdata(point, 'framepointtype', 'setAbsPoint', 1)
    checktype(x, 'float', 'setAbsPoint', 2)
    checktype(y, 'float', 'setAbsPoint', 3)
--@end-debug@
    return Native.BlzFrameSetAbsPoint(getUd(self), point, x, y)
end

---clearAllPoints
---@return void
function Frame:clearAllPoints()
--@debug@
    checkobject(self, Frame, 'clearAllPoints', 'self')
--@end-debug@
    return Native.BlzFrameClearAllPoints(getUd(self))
end

---setAllPoints
---@param relative Frame
---@return void
function Frame:setAllPoints(relative)
--@debug@
    checkobject(self, Frame, 'setAllPoints', 'self')
    checkobject(relative, require('lib.stdlib.oop.frame'), 'setAllPoints', 1)
--@end-debug@
    return Native.BlzFrameSetAllPoints(getUd(self), getUd(relative))
end

---setVisible
---@param visible boolean
---@return void
function Frame:setVisible(visible)
--@debug@
    checkobject(self, Frame, 'setVisible', 'self')
    checktype(visible, 'boolean', 'setVisible', 1)
--@end-debug@
    return Native.BlzFrameSetVisible(getUd(self), visible)
end

---isVisible
---@return boolean
function Frame:isVisible()
--@debug@
    checkobject(self, Frame, 'isVisible', 'self')
--@end-debug@
    return Native.BlzFrameIsVisible(getUd(self))
end

---getName
---@return string
function Frame:getName()
--@debug@
    checkobject(self, Frame, 'getName', 'self')
--@end-debug@
    return Native.BlzFrameGetName(getUd(self))
end

---click
---@return void
function Frame:click()
--@debug@
    checkobject(self, Frame, 'click', 'self')
--@end-debug@
    return Native.BlzFrameClick(getUd(self))
end

---setText
---@param text string
---@return void
function Frame:setText(text)
--@debug@
    checkobject(self, Frame, 'setText', 'self')
    checktype(text, 'string', 'setText', 1)
--@end-debug@
    return Native.BlzFrameSetText(getUd(self), text)
end

---getText
---@return string
function Frame:getText()
--@debug@
    checkobject(self, Frame, 'getText', 'self')
--@end-debug@
    return Native.BlzFrameGetText(getUd(self))
end

---addText
---@param text string
---@return void
function Frame:addText(text)
--@debug@
    checkobject(self, Frame, 'addText', 'self')
    checktype(text, 'string', 'addText', 1)
--@end-debug@
    return Native.BlzFrameAddText(getUd(self), text)
end

---setTextSizeLimit
---@param size integer
---@return void
function Frame:setTextSizeLimit(size)
--@debug@
    checkobject(self, Frame, 'setTextSizeLimit', 'self')
    checktype(size, 'integer', 'setTextSizeLimit', 1)
--@end-debug@
    return Native.BlzFrameSetTextSizeLimit(getUd(self), size)
end

---getTextSizeLimit
---@return integer
function Frame:getTextSizeLimit()
--@debug@
    checkobject(self, Frame, 'getTextSizeLimit', 'self')
--@end-debug@
    return Native.BlzFrameGetTextSizeLimit(getUd(self))
end

---setTextColor
---@param color integer
---@return void
function Frame:setTextColor(color)
--@debug@
    checkobject(self, Frame, 'setTextColor', 'self')
    checktype(color, 'integer', 'setTextColor', 1)
--@end-debug@
    return Native.BlzFrameSetTextColor(getUd(self), color)
end

---setModel
---@param modelFile string
---@param cameraIndex integer
---@return void
function Frame:setModel(modelFile, cameraIndex)
--@debug@
    checkobject(self, Frame, 'setModel', 'self')
    checktype(modelFile, 'string', 'setModel', 1)
    checktype(cameraIndex, 'integer', 'setModel', 2)
--@end-debug@
    return Native.BlzFrameSetModel(getUd(self), modelFile, cameraIndex)
end

---setEnable
---@param enabled boolean
---@return void
function Frame:setEnable(enabled)
--@debug@
    checkobject(self, Frame, 'setEnable', 'self')
    checktype(enabled, 'boolean', 'setEnable', 1)
--@end-debug@
    return Native.BlzFrameSetEnable(getUd(self), enabled)
end

---getEnable
---@return boolean
function Frame:getEnable()
--@debug@
    checkobject(self, Frame, 'getEnable', 'self')
--@end-debug@
    return Native.BlzFrameGetEnable(getUd(self))
end

---setAlpha
---@param alpha integer
---@return void
function Frame:setAlpha(alpha)
--@debug@
    checkobject(self, Frame, 'setAlpha', 'self')
    checktype(alpha, 'integer', 'setAlpha', 1)
--@end-debug@
    return Native.BlzFrameSetAlpha(getUd(self), alpha)
end

---getAlpha
---@return integer
function Frame:getAlpha()
--@debug@
    checkobject(self, Frame, 'getAlpha', 'self')
--@end-debug@
    return Native.BlzFrameGetAlpha(getUd(self))
end

---setSpriteAnimate
---@param primaryProp integer
---@param flags integer
---@return void
function Frame:setSpriteAnimate(primaryProp, flags)
--@debug@
    checkobject(self, Frame, 'setSpriteAnimate', 'self')
    checktype(primaryProp, 'integer', 'setSpriteAnimate', 1)
    checktype(flags, 'integer', 'setSpriteAnimate', 2)
--@end-debug@
    return Native.BlzFrameSetSpriteAnimate(getUd(self), primaryProp, flags)
end

---setTexture
---@param texFile string
---@param flag integer
---@param blend boolean
---@return void
function Frame:setTexture(texFile, flag, blend)
--@debug@
    checkobject(self, Frame, 'setTexture', 'self')
    checktype(texFile, 'string', 'setTexture', 1)
    checktype(flag, 'integer', 'setTexture', 2)
    checktype(blend, 'boolean', 'setTexture', 3)
--@end-debug@
    return Native.BlzFrameSetTexture(getUd(self), texFile, flag, blend)
end

---setScale
---@param scale float
---@return void
function Frame:setScale(scale)
--@debug@
    checkobject(self, Frame, 'setScale', 'self')
    checktype(scale, 'float', 'setScale', 1)
--@end-debug@
    return Native.BlzFrameSetScale(getUd(self), scale)
end

---setTooltip
---@param tooltip Frame
---@return void
function Frame:setTooltip(tooltip)
--@debug@
    checkobject(self, Frame, 'setTooltip', 'self')
    checkobject(tooltip, require('lib.stdlib.oop.frame'), 'setTooltip', 1)
--@end-debug@
    return Native.BlzFrameSetTooltip(getUd(self), getUd(tooltip))
end

---cageMouse
---@param enable boolean
---@return void
function Frame:cageMouse(enable)
--@debug@
    checkobject(self, Frame, 'cageMouse', 'self')
    checktype(enable, 'boolean', 'cageMouse', 1)
--@end-debug@
    return Native.BlzFrameCageMouse(getUd(self), enable)
end

---setValue
---@param value float
---@return void
function Frame:setValue(value)
--@debug@
    checkobject(self, Frame, 'setValue', 'self')
    checktype(value, 'float', 'setValue', 1)
--@end-debug@
    return Native.BlzFrameSetValue(getUd(self), value)
end

---getValue
---@return float
function Frame:getValue()
--@debug@
    checkobject(self, Frame, 'getValue', 'self')
--@end-debug@
    return Native.BlzFrameGetValue(getUd(self))
end

---setMinMaxValue
---@param minValue float
---@param maxValue float
---@return void
function Frame:setMinMaxValue(minValue, maxValue)
--@debug@
    checkobject(self, Frame, 'setMinMaxValue', 'self')
    checktype(minValue, 'float', 'setMinMaxValue', 1)
    checktype(maxValue, 'float', 'setMinMaxValue', 2)
--@end-debug@
    return Native.BlzFrameSetMinMaxValue(getUd(self), minValue, maxValue)
end

---setStepSize
---@param stepSize float
---@return void
function Frame:setStepSize(stepSize)
--@debug@
    checkobject(self, Frame, 'setStepSize', 'self')
    checktype(stepSize, 'float', 'setStepSize', 1)
--@end-debug@
    return Native.BlzFrameSetStepSize(getUd(self), stepSize)
end

---setSize
---@param width float
---@param height float
---@return void
function Frame:setSize(width, height)
--@debug@
    checkobject(self, Frame, 'setSize', 'self')
    checktype(width, 'float', 'setSize', 1)
    checktype(height, 'float', 'setSize', 2)
--@end-debug@
    return Native.BlzFrameSetSize(getUd(self), width, height)
end

---setVertexColor
---@param color integer
---@return void
function Frame:setVertexColor(color)
--@debug@
    checkobject(self, Frame, 'setVertexColor', 'self')
    checktype(color, 'integer', 'setVertexColor', 1)
--@end-debug@
    return Native.BlzFrameSetVertexColor(getUd(self), color)
end

---setLevel
---@param level integer
---@return void
function Frame:setLevel(level)
--@debug@
    checkobject(self, Frame, 'setLevel', 'self')
    checktype(level, 'integer', 'setLevel', 1)
--@end-debug@
    return Native.BlzFrameSetLevel(getUd(self), level)
end

---setParent
---@param parent Frame
---@return void
function Frame:setParent(parent)
--@debug@
    checkobject(self, Frame, 'setParent', 'self')
    checkobject(parent, require('lib.stdlib.oop.frame'), 'setParent', 1)
--@end-debug@
    return Native.BlzFrameSetParent(getUd(self), getUd(parent))
end

---getParent
---@return Frame
function Frame:getParent()
--@debug@
    checkobject(self, Frame, 'getParent', 'self')
--@end-debug@
    return Frame:fromUd(Native.BlzFrameGetParent(getUd(self)))
end

---getHeight
---@return float
function Frame:getHeight()
--@debug@
    checkobject(self, Frame, 'getHeight', 'self')
--@end-debug@
    return Native.BlzFrameGetHeight(getUd(self))
end

---getWidth
---@return float
function Frame:getWidth()
--@debug@
    checkobject(self, Frame, 'getWidth', 'self')
--@end-debug@
    return Native.BlzFrameGetWidth(getUd(self))
end

---setFont
---@param fileName string
---@param height float
---@param flags integer
---@return void
function Frame:setFont(fileName, height, flags)
--@debug@
    checkobject(self, Frame, 'setFont', 'self')
    checktype(fileName, 'string', 'setFont', 1)
    checktype(height, 'float', 'setFont', 2)
    checktype(flags, 'integer', 'setFont', 3)
--@end-debug@
    return Native.BlzFrameSetFont(getUd(self), fileName, height, flags)
end

---setTextAlignment
---@param vert TextAlignType
---@param horz TextAlignType
---@return void
function Frame:setTextAlignment(vert, horz)
--@debug@
    checkobject(self, Frame, 'setTextAlignment', 'self')
    checkuserdata(vert, 'textaligntype', 'setTextAlignment', 1)
    checkuserdata(horz, 'textaligntype', 'setTextAlignment', 2)
--@end-debug@
    return Native.BlzFrameSetTextAlignment(getUd(self), vert, horz)
end

return Frame]]

P['lib/stdlib/oop/_generated/_gamecache.lua'] = [[local Native = require('lib.stdlib.native')

---@class GameCache : Agent
local GameCache = class('GameCache', require('lib.stdlib.oop.agent'))

---<static> create
---@param campaignFile string
---@return GameCache
function GameCache:create(campaignFile)
--@debug@
    checkclass(self, GameCache, 'create', 'self')
    checktype(campaignFile, 'string', 'create', 1)
--@end-debug@
    return GameCache:fromUd(Native.InitGameCache(campaignFile))
end

---save
---@return boolean
function GameCache:save()
--@debug@
    checkobject(self, GameCache, 'save', 'self')
--@end-debug@
    return Native.SaveGameCache(getUd(self))
end

---storeInteger
---@param missionKey string
---@param key string
---@param value integer
---@return void
function GameCache:storeInteger(missionKey, key, value)
--@debug@
    checkobject(self, GameCache, 'storeInteger', 'self')
    checktype(missionKey, 'string', 'storeInteger', 1)
    checktype(key, 'string', 'storeInteger', 2)
    checktype(value, 'integer', 'storeInteger', 3)
--@end-debug@
    return Native.StoreInteger(getUd(self), missionKey, key, value)
end

---storeReal
---@param missionKey string
---@param key string
---@param value float
---@return void
function GameCache:storeReal(missionKey, key, value)
--@debug@
    checkobject(self, GameCache, 'storeReal', 'self')
    checktype(missionKey, 'string', 'storeReal', 1)
    checktype(key, 'string', 'storeReal', 2)
    checktype(value, 'float', 'storeReal', 3)
--@end-debug@
    return Native.StoreReal(getUd(self), missionKey, key, value)
end

---storeBoolean
---@param missionKey string
---@param key string
---@param value boolean
---@return void
function GameCache:storeBoolean(missionKey, key, value)
--@debug@
    checkobject(self, GameCache, 'storeBoolean', 'self')
    checktype(missionKey, 'string', 'storeBoolean', 1)
    checktype(key, 'string', 'storeBoolean', 2)
    checktype(value, 'boolean', 'storeBoolean', 3)
--@end-debug@
    return Native.StoreBoolean(getUd(self), missionKey, key, value)
end

---storeUnit
---@param missionKey string
---@param key string
---@param unit Unit
---@return boolean
function GameCache:storeUnit(missionKey, key, unit)
--@debug@
    checkobject(self, GameCache, 'storeUnit', 'self')
    checktype(missionKey, 'string', 'storeUnit', 1)
    checktype(key, 'string', 'storeUnit', 2)
    checkobject(unit, require('lib.stdlib.oop.unit'), 'storeUnit', 3)
--@end-debug@
    return Native.StoreUnit(getUd(self), missionKey, key, getUd(unit))
end

---storeString
---@param missionKey string
---@param key string
---@param value string
---@return boolean
function GameCache:storeString(missionKey, key, value)
--@debug@
    checkobject(self, GameCache, 'storeString', 'self')
    checktype(missionKey, 'string', 'storeString', 1)
    checktype(key, 'string', 'storeString', 2)
    checktype(value, 'string', 'storeString', 3)
--@end-debug@
    return Native.StoreString(getUd(self), missionKey, key, value)
end

---syncStoredInteger
---@param missionKey string
---@param key string
---@return void
function GameCache:syncStoredInteger(missionKey, key)
--@debug@
    checkobject(self, GameCache, 'syncStoredInteger', 'self')
    checktype(missionKey, 'string', 'syncStoredInteger', 1)
    checktype(key, 'string', 'syncStoredInteger', 2)
--@end-debug@
    return Native.SyncStoredInteger(getUd(self), missionKey, key)
end

---syncStoredReal
---@param missionKey string
---@param key string
---@return void
function GameCache:syncStoredReal(missionKey, key)
--@debug@
    checkobject(self, GameCache, 'syncStoredReal', 'self')
    checktype(missionKey, 'string', 'syncStoredReal', 1)
    checktype(key, 'string', 'syncStoredReal', 2)
--@end-debug@
    return Native.SyncStoredReal(getUd(self), missionKey, key)
end

---syncStoredBoolean
---@param missionKey string
---@param key string
---@return void
function GameCache:syncStoredBoolean(missionKey, key)
--@debug@
    checkobject(self, GameCache, 'syncStoredBoolean', 'self')
    checktype(missionKey, 'string', 'syncStoredBoolean', 1)
    checktype(key, 'string', 'syncStoredBoolean', 2)
--@end-debug@
    return Native.SyncStoredBoolean(getUd(self), missionKey, key)
end

---syncStoredUnit
---@param missionKey string
---@param key string
---@return void
function GameCache:syncStoredUnit(missionKey, key)
--@debug@
    checkobject(self, GameCache, 'syncStoredUnit', 'self')
    checktype(missionKey, 'string', 'syncStoredUnit', 1)
    checktype(key, 'string', 'syncStoredUnit', 2)
--@end-debug@
    return Native.SyncStoredUnit(getUd(self), missionKey, key)
end

---syncStoredString
---@param missionKey string
---@param key string
---@return void
function GameCache:syncStoredString(missionKey, key)
--@debug@
    checkobject(self, GameCache, 'syncStoredString', 'self')
    checktype(missionKey, 'string', 'syncStoredString', 1)
    checktype(key, 'string', 'syncStoredString', 2)
--@end-debug@
    return Native.SyncStoredString(getUd(self), missionKey, key)
end

---haveStoredInteger
---@param missionKey string
---@param key string
---@return boolean
function GameCache:haveStoredInteger(missionKey, key)
--@debug@
    checkobject(self, GameCache, 'haveStoredInteger', 'self')
    checktype(missionKey, 'string', 'haveStoredInteger', 1)
    checktype(key, 'string', 'haveStoredInteger', 2)
--@end-debug@
    return Native.HaveStoredInteger(getUd(self), missionKey, key)
end

---haveStoredReal
---@param missionKey string
---@param key string
---@return boolean
function GameCache:haveStoredReal(missionKey, key)
--@debug@
    checkobject(self, GameCache, 'haveStoredReal', 'self')
    checktype(missionKey, 'string', 'haveStoredReal', 1)
    checktype(key, 'string', 'haveStoredReal', 2)
--@end-debug@
    return Native.HaveStoredReal(getUd(self), missionKey, key)
end

---haveStoredBoolean
---@param missionKey string
---@param key string
---@return boolean
function GameCache:haveStoredBoolean(missionKey, key)
--@debug@
    checkobject(self, GameCache, 'haveStoredBoolean', 'self')
    checktype(missionKey, 'string', 'haveStoredBoolean', 1)
    checktype(key, 'string', 'haveStoredBoolean', 2)
--@end-debug@
    return Native.HaveStoredBoolean(getUd(self), missionKey, key)
end

---haveStoredUnit
---@param missionKey string
---@param key string
---@return boolean
function GameCache:haveStoredUnit(missionKey, key)
--@debug@
    checkobject(self, GameCache, 'haveStoredUnit', 'self')
    checktype(missionKey, 'string', 'haveStoredUnit', 1)
    checktype(key, 'string', 'haveStoredUnit', 2)
--@end-debug@
    return Native.HaveStoredUnit(getUd(self), missionKey, key)
end

---haveStoredString
---@param missionKey string
---@param key string
---@return boolean
function GameCache:haveStoredString(missionKey, key)
--@debug@
    checkobject(self, GameCache, 'haveStoredString', 'self')
    checktype(missionKey, 'string', 'haveStoredString', 1)
    checktype(key, 'string', 'haveStoredString', 2)
--@end-debug@
    return Native.HaveStoredString(getUd(self), missionKey, key)
end

---flush
---@return void
function GameCache:flush()
--@debug@
    checkobject(self, GameCache, 'flush', 'self')
--@end-debug@
    return Native.FlushGameCache(getUd(self))
end

---flushStoredMission
---@param missionKey string
---@return void
function GameCache:flushStoredMission(missionKey)
--@debug@
    checkobject(self, GameCache, 'flushStoredMission', 'self')
    checktype(missionKey, 'string', 'flushStoredMission', 1)
--@end-debug@
    return Native.FlushStoredMission(getUd(self), missionKey)
end

---flushStoredInteger
---@param missionKey string
---@param key string
---@return void
function GameCache:flushStoredInteger(missionKey, key)
--@debug@
    checkobject(self, GameCache, 'flushStoredInteger', 'self')
    checktype(missionKey, 'string', 'flushStoredInteger', 1)
    checktype(key, 'string', 'flushStoredInteger', 2)
--@end-debug@
    return Native.FlushStoredInteger(getUd(self), missionKey, key)
end

---flushStoredReal
---@param missionKey string
---@param key string
---@return void
function GameCache:flushStoredReal(missionKey, key)
--@debug@
    checkobject(self, GameCache, 'flushStoredReal', 'self')
    checktype(missionKey, 'string', 'flushStoredReal', 1)
    checktype(key, 'string', 'flushStoredReal', 2)
--@end-debug@
    return Native.FlushStoredReal(getUd(self), missionKey, key)
end

---flushStoredBoolean
---@param missionKey string
---@param key string
---@return void
function GameCache:flushStoredBoolean(missionKey, key)
--@debug@
    checkobject(self, GameCache, 'flushStoredBoolean', 'self')
    checktype(missionKey, 'string', 'flushStoredBoolean', 1)
    checktype(key, 'string', 'flushStoredBoolean', 2)
--@end-debug@
    return Native.FlushStoredBoolean(getUd(self), missionKey, key)
end

---flushStoredUnit
---@param missionKey string
---@param key string
---@return void
function GameCache:flushStoredUnit(missionKey, key)
--@debug@
    checkobject(self, GameCache, 'flushStoredUnit', 'self')
    checktype(missionKey, 'string', 'flushStoredUnit', 1)
    checktype(key, 'string', 'flushStoredUnit', 2)
--@end-debug@
    return Native.FlushStoredUnit(getUd(self), missionKey, key)
end

---flushStoredString
---@param missionKey string
---@param key string
---@return void
function GameCache:flushStoredString(missionKey, key)
--@debug@
    checkobject(self, GameCache, 'flushStoredString', 'self')
    checktype(missionKey, 'string', 'flushStoredString', 1)
    checktype(key, 'string', 'flushStoredString', 2)
--@end-debug@
    return Native.FlushStoredString(getUd(self), missionKey, key)
end

---getStoredInteger
---@param missionKey string
---@param key string
---@return integer
function GameCache:getStoredInteger(missionKey, key)
--@debug@
    checkobject(self, GameCache, 'getStoredInteger', 'self')
    checktype(missionKey, 'string', 'getStoredInteger', 1)
    checktype(key, 'string', 'getStoredInteger', 2)
--@end-debug@
    return Native.GetStoredInteger(getUd(self), missionKey, key)
end

---getStoredReal
---@param missionKey string
---@param key string
---@return float
function GameCache:getStoredReal(missionKey, key)
--@debug@
    checkobject(self, GameCache, 'getStoredReal', 'self')
    checktype(missionKey, 'string', 'getStoredReal', 1)
    checktype(key, 'string', 'getStoredReal', 2)
--@end-debug@
    return Native.GetStoredReal(getUd(self), missionKey, key)
end

---getStoredBoolean
---@param missionKey string
---@param key string
---@return boolean
function GameCache:getStoredBoolean(missionKey, key)
--@debug@
    checkobject(self, GameCache, 'getStoredBoolean', 'self')
    checktype(missionKey, 'string', 'getStoredBoolean', 1)
    checktype(key, 'string', 'getStoredBoolean', 2)
--@end-debug@
    return Native.GetStoredBoolean(getUd(self), missionKey, key)
end

---getStoredString
---@param missionKey string
---@param key string
---@return string
function GameCache:getStoredString(missionKey, key)
--@debug@
    checkobject(self, GameCache, 'getStoredString', 'self')
    checktype(missionKey, 'string', 'getStoredString', 1)
    checktype(key, 'string', 'getStoredString', 2)
--@end-debug@
    return Native.GetStoredString(getUd(self), missionKey, key)
end

---restoreUnit
---@overload fun(missionKey: string, key: string, forWhichPlayer: Player, vec: Vector, facing: float): Unit
---@param missionKey string
---@param key string
---@param forWhichPlayer Player
---@param x float
---@param y float
---@param facing float
---@return Unit
function GameCache:restoreUnit(missionKey, key, forWhichPlayer, x, y, facing)
    if type(x) == 'table' then
        facing = y
        x, y = table.unpack(x)
    end
--@debug@
    checkobject(self, GameCache, 'restoreUnit', 'self')
    checktype(missionKey, 'string', 'restoreUnit', 1)
    checktype(key, 'string', 'restoreUnit', 2)
    checkobject(forWhichPlayer, require('lib.stdlib.oop.player'), 'restoreUnit', 3)
    checktype(x, 'float', 'restoreUnit', 4)
    checktype(y, 'float', 'restoreUnit', 5)
    checktype(facing, 'float', 'restoreUnit', 6)
--@end-debug@
    return require('lib.stdlib.oop.unit'):fromUd(Native.RestoreUnit(getUd(self), missionKey, key, getUd(forWhichPlayer), x, y, facing))
end

return GameCache]]

P['lib/stdlib/oop/_generated/_group.lua'] = [[local Native = require('lib.stdlib.native')

---@class Group : Agent
local Group = class('Group', require('lib.stdlib.oop.agent'))

---destructor
---@return void
function Group:destructor()
--@debug@
    checkobject(self, Group, 'destructor', 'self')
--@end-debug@
    return Native.DestroyGroup(getUd(self))
end

---<**_DEPRECATED_**> destroy
---@return void
function Group:destroy()
--@debug@
    deprecated('Group.destroy', 'Group.delete')
--@end-debug@
    return self:delete()
end

---<static> create
---@return Group
function Group:create()
    return Group:fromUd(Native.CreateGroup())
end

---addUnit
---@param unit Unit
---@return boolean
function Group:addUnit(unit)
--@debug@
    checkobject(self, Group, 'addUnit', 'self')
    checkobject(unit, require('lib.stdlib.oop.unit'), 'addUnit', 1)
--@end-debug@
    return Native.GroupAddUnit(getUd(self), getUd(unit))
end

---removeUnit
---@param unit Unit
---@return boolean
function Group:removeUnit(unit)
--@debug@
    checkobject(self, Group, 'removeUnit', 'self')
    checkobject(unit, require('lib.stdlib.oop.unit'), 'removeUnit', 1)
--@end-debug@
    return Native.GroupRemoveUnit(getUd(self), getUd(unit))
end

---addGroup
---@param addGroup Group
---@return integer
function Group:addGroup(addGroup)
--@debug@
    checkobject(self, Group, 'addGroup', 'self')
    checkobject(addGroup, require('lib.stdlib.oop.group'), 'addGroup', 1)
--@end-debug@
    return Native.BlzGroupAddGroupFast(getUd(self), getUd(addGroup))
end

---removeGroup
---@param removeGroup Group
---@return integer
function Group:removeGroup(removeGroup)
--@debug@
    checkobject(self, Group, 'removeGroup', 'self')
    checkobject(removeGroup, require('lib.stdlib.oop.group'), 'removeGroup', 1)
--@end-debug@
    return Native.BlzGroupRemoveGroupFast(getUd(self), getUd(removeGroup))
end

---clear
---@return void
function Group:clear()
--@debug@
    checkobject(self, Group, 'clear', 'self')
--@end-debug@
    return Native.GroupClear(getUd(self))
end

---getSize
---@return integer
function Group:getSize()
--@debug@
    checkobject(self, Group, 'getSize', 'self')
--@end-debug@
    return Native.BlzGroupGetSize(getUd(self))
end

---unitAt
---@param index integer
---@return Unit
function Group:unitAt(index)
--@debug@
    checkobject(self, Group, 'unitAt', 'self')
    checktype(index, 'integer', 'unitAt', 1)
--@end-debug@
    return require('lib.stdlib.oop.unit'):fromUd(Native.BlzGroupUnitAt(getUd(self), index))
end

---enumUnitsOfType
---@param unitname string
---@param filter UnitFilter
---@return void
function Group:enumUnitsOfType(unitname, filter)
--@debug@
    checkobject(self, Group, 'enumUnitsOfType', 'self')
    checktype(unitname, 'string', 'enumUnitsOfType', 1)
    checktype(filter, 'function', 'enumUnitsOfType', 2)
--@end-debug@
    filter = require('lib.stdlib.oop.filter'):createUnitFilter(filter)
    Native.GroupEnumUnitsOfType(getUd(self), unitname, getUd(filter))
    if filter then filter:delete() end
end

---enumUnitsOfPlayer
---@param player Player
---@param filter UnitFilter
---@return void
function Group:enumUnitsOfPlayer(player, filter)
--@debug@
    checkobject(self, Group, 'enumUnitsOfPlayer', 'self')
    checkobject(player, require('lib.stdlib.oop.player'), 'enumUnitsOfPlayer', 1)
    checktype(filter, 'function', 'enumUnitsOfPlayer', 2)
--@end-debug@
    filter = require('lib.stdlib.oop.filter'):createUnitFilter(filter)
    Native.GroupEnumUnitsOfPlayer(getUd(self), getUd(player), getUd(filter))
    if filter then filter:delete() end
end

---enumUnitsOfTypeCounted
---@param unitname string
---@param countLimit integer
---@param filter UnitFilter
---@return void
function Group:enumUnitsOfTypeCounted(unitname, countLimit, filter)
--@debug@
    checkobject(self, Group, 'enumUnitsOfTypeCounted', 'self')
    checktype(unitname, 'string', 'enumUnitsOfTypeCounted', 1)
    checktype(countLimit, 'integer', 'enumUnitsOfTypeCounted', 2)
    checktype(filter, 'function', 'enumUnitsOfTypeCounted', 3)
--@end-debug@
    filter = require('lib.stdlib.oop.filter'):createUnitFilter(filter)
    Native.GroupEnumUnitsOfTypeCounted(getUd(self), unitname, getUd(filter), countLimit)
    if filter then filter:delete() end
end

---enumUnitsInRect
---@param r Rect
---@param filter UnitFilter
---@return void
function Group:enumUnitsInRect(r, filter)
--@debug@
    checkobject(self, Group, 'enumUnitsInRect', 'self')
    checkobject(r, require('lib.stdlib.oop.rect'), 'enumUnitsInRect', 1)
    checktype(filter, 'function', 'enumUnitsInRect', 2)
--@end-debug@
    filter = require('lib.stdlib.oop.filter'):createUnitFilter(filter)
    Native.GroupEnumUnitsInRect(getUd(self), getUd(r), getUd(filter))
    if filter then filter:delete() end
end

---enumUnitsInRectCounted
---@param r Rect
---@param countLimit integer
---@param filter UnitFilter
---@return void
function Group:enumUnitsInRectCounted(r, countLimit, filter)
--@debug@
    checkobject(self, Group, 'enumUnitsInRectCounted', 'self')
    checkobject(r, require('lib.stdlib.oop.rect'), 'enumUnitsInRectCounted', 1)
    checktype(countLimit, 'integer', 'enumUnitsInRectCounted', 2)
    checktype(filter, 'function', 'enumUnitsInRectCounted', 3)
--@end-debug@
    filter = require('lib.stdlib.oop.filter'):createUnitFilter(filter)
    Native.GroupEnumUnitsInRectCounted(getUd(self), getUd(r), getUd(filter), countLimit)
    if filter then filter:delete() end
end

---enumUnitsInRange
---@overload fun(vec: Vector, radius: float, filter: UnitFilter): void
---@param x float
---@param y float
---@param radius float
---@param filter UnitFilter
---@return void
function Group:enumUnitsInRange(x, y, radius, filter)
    if type(x) == 'table' then
        radius, filter = y, radius
        x, y = table.unpack(x)
    end
--@debug@
    checkobject(self, Group, 'enumUnitsInRange', 'self')
    checktype(x, 'float', 'enumUnitsInRange', 1)
    checktype(y, 'float', 'enumUnitsInRange', 2)
    checktype(radius, 'float', 'enumUnitsInRange', 3)
    checktype(filter, 'function', 'enumUnitsInRange', 4)
--@end-debug@
    filter = require('lib.stdlib.oop.filter'):createUnitFilter(filter)
    Native.GroupEnumUnitsInRange(getUd(self), x, y, radius, getUd(filter))
    if filter then filter:delete() end
end

---enumUnitsInRangeCounted
---@overload fun(vec: Vector, radius: float, countLimit: integer, filter: UnitFilter): void
---@param x float
---@param y float
---@param radius float
---@param countLimit integer
---@param filter UnitFilter
---@return void
function Group:enumUnitsInRangeCounted(x, y, radius, countLimit, filter)
    if type(x) == 'table' then
        radius, countLimit, filter = y, radius, countLimit
        x, y = table.unpack(x)
    end
--@debug@
    checkobject(self, Group, 'enumUnitsInRangeCounted', 'self')
    checktype(x, 'float', 'enumUnitsInRangeCounted', 1)
    checktype(y, 'float', 'enumUnitsInRangeCounted', 2)
    checktype(radius, 'float', 'enumUnitsInRangeCounted', 3)
    checktype(countLimit, 'integer', 'enumUnitsInRangeCounted', 4)
    checktype(filter, 'function', 'enumUnitsInRangeCounted', 5)
--@end-debug@
    filter = require('lib.stdlib.oop.filter'):createUnitFilter(filter)
    Native.GroupEnumUnitsInRangeCounted(getUd(self), x, y, radius, getUd(filter), countLimit)
    if filter then filter:delete() end
end

---enumUnitsSelected
---@param player Player
---@param filter UnitFilter
---@return void
function Group:enumUnitsSelected(player, filter)
--@debug@
    checkobject(self, Group, 'enumUnitsSelected', 'self')
    checkobject(player, require('lib.stdlib.oop.player'), 'enumUnitsSelected', 1)
    checktype(filter, 'function', 'enumUnitsSelected', 2)
--@end-debug@
    filter = require('lib.stdlib.oop.filter'):createUnitFilter(filter)
    Native.GroupEnumUnitsSelected(getUd(self), getUd(player), getUd(filter))
    if filter then filter:delete() end
end

---immediateOrder
---@param order integer
---@return boolean
function Group:immediateOrder(order)
--@debug@
    checkobject(self, Group, 'immediateOrder', 'self')
    checktype(order, 'integer', 'immediateOrder', 1)
--@end-debug@
    return Native.GroupImmediateOrderById(getUd(self), order)
end

---pointOrder
---@overload fun(order: integer, vec: Vector): boolean
---@param order integer
---@param x float
---@param y float
---@return boolean
function Group:pointOrder(order, x, y)
    if type(x) == 'table' then
        x, y = table.unpack(x)
    end
--@debug@
    checkobject(self, Group, 'pointOrder', 'self')
    checktype(order, 'integer', 'pointOrder', 1)
    checktype(x, 'float', 'pointOrder', 2)
    checktype(y, 'float', 'pointOrder', 3)
--@end-debug@
    return Native.GroupPointOrderById(getUd(self), order, x, y)
end

---targetOrder
---@param order integer
---@param targetWidget Widget
---@return boolean
function Group:targetOrder(order, targetWidget)
--@debug@
    checkobject(self, Group, 'targetOrder', 'self')
    checktype(order, 'integer', 'targetOrder', 1)
    checkobject(targetWidget, require('lib.stdlib.oop.widget'), 'targetOrder', 2)
--@end-debug@
    return Native.GroupTargetOrderById(getUd(self), order, getUd(targetWidget))
end

---forEach
---@param callback UnitCallback
---@return void
function Group:forEach(callback)
--@debug@
    checkobject(self, Group, 'forEach', 'self')
    checktype(callback, 'function', 'forEach', 1)
--@end-debug@
    callback = require('lib.stdlib.oop.function'):createUnitCallback(callback)
    return Native.ForGroup(getUd(self), callback)
end

---firstOf
---@return Unit
function Group:firstOf()
--@debug@
    checkobject(self, Group, 'firstOf', 'self')
--@end-debug@
    return require('lib.stdlib.oop.unit'):fromUd(Native.FirstOfGroup(getUd(self)))
end

return Group]]

P['lib/stdlib/oop/_generated/_hashtable.lua'] = [[local Native = require('lib.stdlib.native')

---@class Hashtable : Agent
local Hashtable = class('Hashtable', require('lib.stdlib.oop.agent'))

---<static> create
---@return Hashtable
function Hashtable:create()
    return Hashtable:fromUd(Native.InitHashtable())
end

---saveInteger
---@param parentKey integer
---@param childKey integer
---@param value integer
---@return void
function Hashtable:saveInteger(parentKey, childKey, value)
--@debug@
    checkobject(self, Hashtable, 'saveInteger', 'self')
    checktype(parentKey, 'integer', 'saveInteger', 1)
    checktype(childKey, 'integer', 'saveInteger', 2)
    checktype(value, 'integer', 'saveInteger', 3)
--@end-debug@
    return Native.SaveInteger(getUd(self), parentKey, childKey, value)
end

---saveReal
---@param parentKey integer
---@param childKey integer
---@param value float
---@return void
function Hashtable:saveReal(parentKey, childKey, value)
--@debug@
    checkobject(self, Hashtable, 'saveReal', 'self')
    checktype(parentKey, 'integer', 'saveReal', 1)
    checktype(childKey, 'integer', 'saveReal', 2)
    checktype(value, 'float', 'saveReal', 3)
--@end-debug@
    return Native.SaveReal(getUd(self), parentKey, childKey, value)
end

---saveBoolean
---@param parentKey integer
---@param childKey integer
---@param value boolean
---@return void
function Hashtable:saveBoolean(parentKey, childKey, value)
--@debug@
    checkobject(self, Hashtable, 'saveBoolean', 'self')
    checktype(parentKey, 'integer', 'saveBoolean', 1)
    checktype(childKey, 'integer', 'saveBoolean', 2)
    checktype(value, 'boolean', 'saveBoolean', 3)
--@end-debug@
    return Native.SaveBoolean(getUd(self), parentKey, childKey, value)
end

---saveStr
---@param parentKey integer
---@param childKey integer
---@param value string
---@return boolean
function Hashtable:saveStr(parentKey, childKey, value)
--@debug@
    checkobject(self, Hashtable, 'saveStr', 'self')
    checktype(parentKey, 'integer', 'saveStr', 1)
    checktype(childKey, 'integer', 'saveStr', 2)
    checktype(value, 'string', 'saveStr', 3)
--@end-debug@
    return Native.SaveStr(getUd(self), parentKey, childKey, value)
end

---savePlayerHandle
---@param parentKey integer
---@param childKey integer
---@param player Player
---@return boolean
function Hashtable:savePlayerHandle(parentKey, childKey, player)
--@debug@
    checkobject(self, Hashtable, 'savePlayerHandle', 'self')
    checktype(parentKey, 'integer', 'savePlayerHandle', 1)
    checktype(childKey, 'integer', 'savePlayerHandle', 2)
    checkobject(player, require('lib.stdlib.oop.player'), 'savePlayerHandle', 3)
--@end-debug@
    return Native.SavePlayerHandle(getUd(self), parentKey, childKey, getUd(player))
end

---saveWidgetHandle
---@param parentKey integer
---@param childKey integer
---@param widget Widget
---@return boolean
function Hashtable:saveWidgetHandle(parentKey, childKey, widget)
--@debug@
    checkobject(self, Hashtable, 'saveWidgetHandle', 'self')
    checktype(parentKey, 'integer', 'saveWidgetHandle', 1)
    checktype(childKey, 'integer', 'saveWidgetHandle', 2)
    checkobject(widget, require('lib.stdlib.oop.widget'), 'saveWidgetHandle', 3)
--@end-debug@
    return Native.SaveWidgetHandle(getUd(self), parentKey, childKey, getUd(widget))
end

---saveDestructableHandle
---@param parentKey integer
---@param childKey integer
---@param destructable Destructable
---@return boolean
function Hashtable:saveDestructableHandle(parentKey, childKey, destructable)
--@debug@
    checkobject(self, Hashtable, 'saveDestructableHandle', 'self')
    checktype(parentKey, 'integer', 'saveDestructableHandle', 1)
    checktype(childKey, 'integer', 'saveDestructableHandle', 2)
    checkobject(destructable, require('lib.stdlib.oop.destructable'), 'saveDestructableHandle', 3)
--@end-debug@
    return Native.SaveDestructableHandle(getUd(self), parentKey, childKey, getUd(destructable))
end

---saveItemHandle
---@param parentKey integer
---@param childKey integer
---@param item Item
---@return boolean
function Hashtable:saveItemHandle(parentKey, childKey, item)
--@debug@
    checkobject(self, Hashtable, 'saveItemHandle', 'self')
    checktype(parentKey, 'integer', 'saveItemHandle', 1)
    checktype(childKey, 'integer', 'saveItemHandle', 2)
    checkobject(item, require('lib.stdlib.oop.item'), 'saveItemHandle', 3)
--@end-debug@
    return Native.SaveItemHandle(getUd(self), parentKey, childKey, getUd(item))
end

---saveUnitHandle
---@param parentKey integer
---@param childKey integer
---@param unit Unit
---@return boolean
function Hashtable:saveUnitHandle(parentKey, childKey, unit)
--@debug@
    checkobject(self, Hashtable, 'saveUnitHandle', 'self')
    checktype(parentKey, 'integer', 'saveUnitHandle', 1)
    checktype(childKey, 'integer', 'saveUnitHandle', 2)
    checkobject(unit, require('lib.stdlib.oop.unit'), 'saveUnitHandle', 3)
--@end-debug@
    return Native.SaveUnitHandle(getUd(self), parentKey, childKey, getUd(unit))
end

---saveAbilityHandle
---@param parentKey integer
---@param childKey integer
---@param ability Ability
---@return boolean
function Hashtable:saveAbilityHandle(parentKey, childKey, ability)
--@debug@
    checkobject(self, Hashtable, 'saveAbilityHandle', 'self')
    checktype(parentKey, 'integer', 'saveAbilityHandle', 1)
    checktype(childKey, 'integer', 'saveAbilityHandle', 2)
    checkobject(ability, require('lib.stdlib.oop.ability'), 'saveAbilityHandle', 3)
--@end-debug@
    return Native.SaveAbilityHandle(getUd(self), parentKey, childKey, getUd(ability))
end

---saveTimerHandle
---@param parentKey integer
---@param childKey integer
---@param timer Timer
---@return boolean
function Hashtable:saveTimerHandle(parentKey, childKey, timer)
--@debug@
    checkobject(self, Hashtable, 'saveTimerHandle', 'self')
    checktype(parentKey, 'integer', 'saveTimerHandle', 1)
    checktype(childKey, 'integer', 'saveTimerHandle', 2)
    checkobject(timer, require('lib.stdlib.oop.timer'), 'saveTimerHandle', 3)
--@end-debug@
    return Native.SaveTimerHandle(getUd(self), parentKey, childKey, getUd(timer))
end

---saveTriggerHandle
---@param parentKey integer
---@param childKey integer
---@param trigger Trigger
---@return boolean
function Hashtable:saveTriggerHandle(parentKey, childKey, trigger)
--@debug@
    checkobject(self, Hashtable, 'saveTriggerHandle', 'self')
    checktype(parentKey, 'integer', 'saveTriggerHandle', 1)
    checktype(childKey, 'integer', 'saveTriggerHandle', 2)
    checkobject(trigger, require('lib.stdlib.oop.trigger'), 'saveTriggerHandle', 3)
--@end-debug@
    return Native.SaveTriggerHandle(getUd(self), parentKey, childKey, getUd(trigger))
end

---saveTriggerConditionHandle
---@param parentKey integer
---@param childKey integer
---@param triggercondition TriggerCondition
---@return boolean
function Hashtable:saveTriggerConditionHandle(parentKey, childKey, triggercondition)
--@debug@
    checkobject(self, Hashtable, 'saveTriggerConditionHandle', 'self')
    checktype(parentKey, 'integer', 'saveTriggerConditionHandle', 1)
    checktype(childKey, 'integer', 'saveTriggerConditionHandle', 2)
    checkobject(triggercondition, require('lib.stdlib.oop.triggercondition'), 'saveTriggerConditionHandle', 3)
--@end-debug@
    return Native.SaveTriggerConditionHandle(getUd(self), parentKey, childKey, getUd(triggercondition))
end

---saveTriggerActionHandle
---@param parentKey integer
---@param childKey integer
---@param triggeraction TriggerAction
---@return boolean
function Hashtable:saveTriggerActionHandle(parentKey, childKey, triggeraction)
--@debug@
    checkobject(self, Hashtable, 'saveTriggerActionHandle', 'self')
    checktype(parentKey, 'integer', 'saveTriggerActionHandle', 1)
    checktype(childKey, 'integer', 'saveTriggerActionHandle', 2)
    checkuserdata(triggeraction, 'triggeraction', 'saveTriggerActionHandle', 3)
--@end-debug@
    return Native.SaveTriggerActionHandle(getUd(self), parentKey, childKey, triggeraction)
end

---saveTriggerEventHandle
---@param parentKey integer
---@param childKey integer
---@param event Event
---@return boolean
function Hashtable:saveTriggerEventHandle(parentKey, childKey, event)
--@debug@
    checkobject(self, Hashtable, 'saveTriggerEventHandle', 'self')
    checktype(parentKey, 'integer', 'saveTriggerEventHandle', 1)
    checktype(childKey, 'integer', 'saveTriggerEventHandle', 2)
    checkobject(event, require('lib.stdlib.oop.event'), 'saveTriggerEventHandle', 3)
--@end-debug@
    return Native.SaveTriggerEventHandle(getUd(self), parentKey, childKey, getUd(event))
end

---saveForceHandle
---@param parentKey integer
---@param childKey integer
---@param force Force
---@return boolean
function Hashtable:saveForceHandle(parentKey, childKey, force)
--@debug@
    checkobject(self, Hashtable, 'saveForceHandle', 'self')
    checktype(parentKey, 'integer', 'saveForceHandle', 1)
    checktype(childKey, 'integer', 'saveForceHandle', 2)
    checkobject(force, require('lib.stdlib.oop.force'), 'saveForceHandle', 3)
--@end-debug@
    return Native.SaveForceHandle(getUd(self), parentKey, childKey, getUd(force))
end

---saveGroupHandle
---@param parentKey integer
---@param childKey integer
---@param group Group
---@return boolean
function Hashtable:saveGroupHandle(parentKey, childKey, group)
--@debug@
    checkobject(self, Hashtable, 'saveGroupHandle', 'self')
    checktype(parentKey, 'integer', 'saveGroupHandle', 1)
    checktype(childKey, 'integer', 'saveGroupHandle', 2)
    checkobject(group, require('lib.stdlib.oop.group'), 'saveGroupHandle', 3)
--@end-debug@
    return Native.SaveGroupHandle(getUd(self), parentKey, childKey, getUd(group))
end

---saveRectHandle
---@param parentKey integer
---@param childKey integer
---@param rect Rect
---@return boolean
function Hashtable:saveRectHandle(parentKey, childKey, rect)
--@debug@
    checkobject(self, Hashtable, 'saveRectHandle', 'self')
    checktype(parentKey, 'integer', 'saveRectHandle', 1)
    checktype(childKey, 'integer', 'saveRectHandle', 2)
    checkobject(rect, require('lib.stdlib.oop.rect'), 'saveRectHandle', 3)
--@end-debug@
    return Native.SaveRectHandle(getUd(self), parentKey, childKey, getUd(rect))
end

---saveBooleanExprHandle
---@param parentKey integer
---@param childKey integer
---@param boolexpr BoolExpr
---@return boolean
function Hashtable:saveBooleanExprHandle(parentKey, childKey, boolexpr)
--@debug@
    checkobject(self, Hashtable, 'saveBooleanExprHandle', 'self')
    checktype(parentKey, 'integer', 'saveBooleanExprHandle', 1)
    checktype(childKey, 'integer', 'saveBooleanExprHandle', 2)
    checkobject(boolexpr, require('lib.stdlib.oop.boolexpr'), 'saveBooleanExprHandle', 3)
--@end-debug@
    return Native.SaveBooleanExprHandle(getUd(self), parentKey, childKey, getUd(boolexpr))
end

---saveSoundHandle
---@param parentKey integer
---@param childKey integer
---@param sound Sound
---@return boolean
function Hashtable:saveSoundHandle(parentKey, childKey, sound)
--@debug@
    checkobject(self, Hashtable, 'saveSoundHandle', 'self')
    checktype(parentKey, 'integer', 'saveSoundHandle', 1)
    checktype(childKey, 'integer', 'saveSoundHandle', 2)
    checkobject(sound, require('lib.stdlib.oop.sound'), 'saveSoundHandle', 3)
--@end-debug@
    return Native.SaveSoundHandle(getUd(self), parentKey, childKey, getUd(sound))
end

---saveEffectHandle
---@param parentKey integer
---@param childKey integer
---@param effect Effect
---@return boolean
function Hashtable:saveEffectHandle(parentKey, childKey, effect)
--@debug@
    checkobject(self, Hashtable, 'saveEffectHandle', 'self')
    checktype(parentKey, 'integer', 'saveEffectHandle', 1)
    checktype(childKey, 'integer', 'saveEffectHandle', 2)
    checkobject(effect, require('lib.stdlib.oop.effect'), 'saveEffectHandle', 3)
--@end-debug@
    return Native.SaveEffectHandle(getUd(self), parentKey, childKey, getUd(effect))
end

---saveUnitPoolHandle
---@param parentKey integer
---@param childKey integer
---@param unitpool UnitPool
---@return boolean
function Hashtable:saveUnitPoolHandle(parentKey, childKey, unitpool)
--@debug@
    checkobject(self, Hashtable, 'saveUnitPoolHandle', 'self')
    checktype(parentKey, 'integer', 'saveUnitPoolHandle', 1)
    checktype(childKey, 'integer', 'saveUnitPoolHandle', 2)
    checkobject(unitpool, require('lib.stdlib.oop.unitpool'), 'saveUnitPoolHandle', 3)
--@end-debug@
    return Native.SaveUnitPoolHandle(getUd(self), parentKey, childKey, getUd(unitpool))
end

---saveItemPoolHandle
---@param parentKey integer
---@param childKey integer
---@param itempool ItemPool
---@return boolean
function Hashtable:saveItemPoolHandle(parentKey, childKey, itempool)
--@debug@
    checkobject(self, Hashtable, 'saveItemPoolHandle', 'self')
    checktype(parentKey, 'integer', 'saveItemPoolHandle', 1)
    checktype(childKey, 'integer', 'saveItemPoolHandle', 2)
    checkobject(itempool, require('lib.stdlib.oop.itempool'), 'saveItemPoolHandle', 3)
--@end-debug@
    return Native.SaveItemPoolHandle(getUd(self), parentKey, childKey, getUd(itempool))
end

---saveQuestHandle
---@param parentKey integer
---@param childKey integer
---@param quest Quest
---@return boolean
function Hashtable:saveQuestHandle(parentKey, childKey, quest)
--@debug@
    checkobject(self, Hashtable, 'saveQuestHandle', 'self')
    checktype(parentKey, 'integer', 'saveQuestHandle', 1)
    checktype(childKey, 'integer', 'saveQuestHandle', 2)
    checkobject(quest, require('lib.stdlib.oop.quest'), 'saveQuestHandle', 3)
--@end-debug@
    return Native.SaveQuestHandle(getUd(self), parentKey, childKey, getUd(quest))
end

---saveQuestItemHandle
---@param parentKey integer
---@param childKey integer
---@param questitem QuestItem
---@return boolean
function Hashtable:saveQuestItemHandle(parentKey, childKey, questitem)
--@debug@
    checkobject(self, Hashtable, 'saveQuestItemHandle', 'self')
    checktype(parentKey, 'integer', 'saveQuestItemHandle', 1)
    checktype(childKey, 'integer', 'saveQuestItemHandle', 2)
    checkobject(questitem, require('lib.stdlib.oop.questitem'), 'saveQuestItemHandle', 3)
--@end-debug@
    return Native.SaveQuestItemHandle(getUd(self), parentKey, childKey, getUd(questitem))
end

---saveDefeatConditionHandle
---@param parentKey integer
---@param childKey integer
---@param defeatcondition DefeatCondition
---@return boolean
function Hashtable:saveDefeatConditionHandle(parentKey, childKey, defeatcondition)
--@debug@
    checkobject(self, Hashtable, 'saveDefeatConditionHandle', 'self')
    checktype(parentKey, 'integer', 'saveDefeatConditionHandle', 1)
    checktype(childKey, 'integer', 'saveDefeatConditionHandle', 2)
    checkobject(defeatcondition, require('lib.stdlib.oop.defeatcondition'), 'saveDefeatConditionHandle', 3)
--@end-debug@
    return Native.SaveDefeatConditionHandle(getUd(self), parentKey, childKey, getUd(defeatcondition))
end

---saveTimerDialogHandle
---@param parentKey integer
---@param childKey integer
---@param timerdialog TimerDialog
---@return boolean
function Hashtable:saveTimerDialogHandle(parentKey, childKey, timerdialog)
--@debug@
    checkobject(self, Hashtable, 'saveTimerDialogHandle', 'self')
    checktype(parentKey, 'integer', 'saveTimerDialogHandle', 1)
    checktype(childKey, 'integer', 'saveTimerDialogHandle', 2)
    checkobject(timerdialog, require('lib.stdlib.oop.timerdialog'), 'saveTimerDialogHandle', 3)
--@end-debug@
    return Native.SaveTimerDialogHandle(getUd(self), parentKey, childKey, getUd(timerdialog))
end

---saveLeaderboardHandle
---@param parentKey integer
---@param childKey integer
---@param leaderboard LeaderBoard
---@return boolean
function Hashtable:saveLeaderboardHandle(parentKey, childKey, leaderboard)
--@debug@
    checkobject(self, Hashtable, 'saveLeaderboardHandle', 'self')
    checktype(parentKey, 'integer', 'saveLeaderboardHandle', 1)
    checktype(childKey, 'integer', 'saveLeaderboardHandle', 2)
    checkobject(leaderboard, require('lib.stdlib.oop.leaderboard'), 'saveLeaderboardHandle', 3)
--@end-debug@
    return Native.SaveLeaderboardHandle(getUd(self), parentKey, childKey, getUd(leaderboard))
end

---saveMultiboardHandle
---@param parentKey integer
---@param childKey integer
---@param multiboard MultiBoard
---@return boolean
function Hashtable:saveMultiboardHandle(parentKey, childKey, multiboard)
--@debug@
    checkobject(self, Hashtable, 'saveMultiboardHandle', 'self')
    checktype(parentKey, 'integer', 'saveMultiboardHandle', 1)
    checktype(childKey, 'integer', 'saveMultiboardHandle', 2)
    checkobject(multiboard, require('lib.stdlib.oop.multiboard'), 'saveMultiboardHandle', 3)
--@end-debug@
    return Native.SaveMultiboardHandle(getUd(self), parentKey, childKey, getUd(multiboard))
end

---saveMultiboardItemHandle
---@param parentKey integer
---@param childKey integer
---@param multiboarditem MultiBoardItem
---@return boolean
function Hashtable:saveMultiboardItemHandle(parentKey, childKey, multiboarditem)
--@debug@
    checkobject(self, Hashtable, 'saveMultiboardItemHandle', 'self')
    checktype(parentKey, 'integer', 'saveMultiboardItemHandle', 1)
    checktype(childKey, 'integer', 'saveMultiboardItemHandle', 2)
    checkobject(multiboarditem, require('lib.stdlib.oop.multiboarditem'), 'saveMultiboardItemHandle', 3)
--@end-debug@
    return Native.SaveMultiboardItemHandle(getUd(self), parentKey, childKey, getUd(multiboarditem))
end

---saveTrackableHandle
---@param parentKey integer
---@param childKey integer
---@param trackable Trackable
---@return boolean
function Hashtable:saveTrackableHandle(parentKey, childKey, trackable)
--@debug@
    checkobject(self, Hashtable, 'saveTrackableHandle', 'self')
    checktype(parentKey, 'integer', 'saveTrackableHandle', 1)
    checktype(childKey, 'integer', 'saveTrackableHandle', 2)
    checkobject(trackable, require('lib.stdlib.oop.trackable'), 'saveTrackableHandle', 3)
--@end-debug@
    return Native.SaveTrackableHandle(getUd(self), parentKey, childKey, getUd(trackable))
end

---saveDialogHandle
---@param parentKey integer
---@param childKey integer
---@param dialog Dialog
---@return boolean
function Hashtable:saveDialogHandle(parentKey, childKey, dialog)
--@debug@
    checkobject(self, Hashtable, 'saveDialogHandle', 'self')
    checktype(parentKey, 'integer', 'saveDialogHandle', 1)
    checktype(childKey, 'integer', 'saveDialogHandle', 2)
    checkobject(dialog, require('lib.stdlib.oop.dialog'), 'saveDialogHandle', 3)
--@end-debug@
    return Native.SaveDialogHandle(getUd(self), parentKey, childKey, getUd(dialog))
end

---saveButtonHandle
---@param parentKey integer
---@param childKey integer
---@param button Button
---@return boolean
function Hashtable:saveButtonHandle(parentKey, childKey, button)
--@debug@
    checkobject(self, Hashtable, 'saveButtonHandle', 'self')
    checktype(parentKey, 'integer', 'saveButtonHandle', 1)
    checktype(childKey, 'integer', 'saveButtonHandle', 2)
    checkobject(button, require('lib.stdlib.oop.button'), 'saveButtonHandle', 3)
--@end-debug@
    return Native.SaveButtonHandle(getUd(self), parentKey, childKey, getUd(button))
end

---saveTextTagHandle
---@param parentKey integer
---@param childKey integer
---@param texttag TextTag
---@return boolean
function Hashtable:saveTextTagHandle(parentKey, childKey, texttag)
--@debug@
    checkobject(self, Hashtable, 'saveTextTagHandle', 'self')
    checktype(parentKey, 'integer', 'saveTextTagHandle', 1)
    checktype(childKey, 'integer', 'saveTextTagHandle', 2)
    checkobject(texttag, require('lib.stdlib.oop.texttag'), 'saveTextTagHandle', 3)
--@end-debug@
    return Native.SaveTextTagHandle(getUd(self), parentKey, childKey, getUd(texttag))
end

---saveLightningHandle
---@param parentKey integer
---@param childKey integer
---@param lightning Lightning
---@return boolean
function Hashtable:saveLightningHandle(parentKey, childKey, lightning)
--@debug@
    checkobject(self, Hashtable, 'saveLightningHandle', 'self')
    checktype(parentKey, 'integer', 'saveLightningHandle', 1)
    checktype(childKey, 'integer', 'saveLightningHandle', 2)
    checkobject(lightning, require('lib.stdlib.oop.lightning'), 'saveLightningHandle', 3)
--@end-debug@
    return Native.SaveLightningHandle(getUd(self), parentKey, childKey, getUd(lightning))
end

---saveImageHandle
---@param parentKey integer
---@param childKey integer
---@param image Image
---@return boolean
function Hashtable:saveImageHandle(parentKey, childKey, image)
--@debug@
    checkobject(self, Hashtable, 'saveImageHandle', 'self')
    checktype(parentKey, 'integer', 'saveImageHandle', 1)
    checktype(childKey, 'integer', 'saveImageHandle', 2)
    checkobject(image, require('lib.stdlib.oop.image'), 'saveImageHandle', 3)
--@end-debug@
    return Native.SaveImageHandle(getUd(self), parentKey, childKey, getUd(image))
end

---saveUbersplatHandle
---@param parentKey integer
---@param childKey integer
---@param ubersplat Ubersplat
---@return boolean
function Hashtable:saveUbersplatHandle(parentKey, childKey, ubersplat)
--@debug@
    checkobject(self, Hashtable, 'saveUbersplatHandle', 'self')
    checktype(parentKey, 'integer', 'saveUbersplatHandle', 1)
    checktype(childKey, 'integer', 'saveUbersplatHandle', 2)
    checkobject(ubersplat, require('lib.stdlib.oop.ubersplat'), 'saveUbersplatHandle', 3)
--@end-debug@
    return Native.SaveUbersplatHandle(getUd(self), parentKey, childKey, getUd(ubersplat))
end

---saveRegionHandle
---@param parentKey integer
---@param childKey integer
---@param region Region
---@return boolean
function Hashtable:saveRegionHandle(parentKey, childKey, region)
--@debug@
    checkobject(self, Hashtable, 'saveRegionHandle', 'self')
    checktype(parentKey, 'integer', 'saveRegionHandle', 1)
    checktype(childKey, 'integer', 'saveRegionHandle', 2)
    checkobject(region, require('lib.stdlib.oop.region'), 'saveRegionHandle', 3)
--@end-debug@
    return Native.SaveRegionHandle(getUd(self), parentKey, childKey, getUd(region))
end

---saveFogStateHandle
---@param parentKey integer
---@param childKey integer
---@param fogState FogState
---@return boolean
function Hashtable:saveFogStateHandle(parentKey, childKey, fogState)
--@debug@
    checkobject(self, Hashtable, 'saveFogStateHandle', 'self')
    checktype(parentKey, 'integer', 'saveFogStateHandle', 1)
    checktype(childKey, 'integer', 'saveFogStateHandle', 2)
    checkuserdata(fogState, 'fogstate', 'saveFogStateHandle', 3)
--@end-debug@
    return Native.SaveFogStateHandle(getUd(self), parentKey, childKey, fogState)
end

---saveFogModifierHandle
---@param parentKey integer
---@param childKey integer
---@param fogModifier FogModifier
---@return boolean
function Hashtable:saveFogModifierHandle(parentKey, childKey, fogModifier)
--@debug@
    checkobject(self, Hashtable, 'saveFogModifierHandle', 'self')
    checktype(parentKey, 'integer', 'saveFogModifierHandle', 1)
    checktype(childKey, 'integer', 'saveFogModifierHandle', 2)
    checkobject(fogModifier, require('lib.stdlib.oop.fogmodifier'), 'saveFogModifierHandle', 3)
--@end-debug@
    return Native.SaveFogModifierHandle(getUd(self), parentKey, childKey, getUd(fogModifier))
end

---saveAgentHandle
---@param parentKey integer
---@param childKey integer
---@param agent Agent
---@return boolean
function Hashtable:saveAgentHandle(parentKey, childKey, agent)
--@debug@
    checkobject(self, Hashtable, 'saveAgentHandle', 'self')
    checktype(parentKey, 'integer', 'saveAgentHandle', 1)
    checktype(childKey, 'integer', 'saveAgentHandle', 2)
    checkobject(agent, require('lib.stdlib.oop.agent'), 'saveAgentHandle', 3)
--@end-debug@
    return Native.SaveAgentHandle(getUd(self), parentKey, childKey, getUd(agent))
end

---saveHashtableHandle
---@param parentKey integer
---@param childKey integer
---@param hashtable Hashtable
---@return boolean
function Hashtable:saveHashtableHandle(parentKey, childKey, hashtable)
--@debug@
    checkobject(self, Hashtable, 'saveHashtableHandle', 'self')
    checktype(parentKey, 'integer', 'saveHashtableHandle', 1)
    checktype(childKey, 'integer', 'saveHashtableHandle', 2)
    checkobject(hashtable, require('lib.stdlib.oop.hashtable'), 'saveHashtableHandle', 3)
--@end-debug@
    return Native.SaveHashtableHandle(getUd(self), parentKey, childKey, getUd(hashtable))
end

---saveFrameHandle
---@param parentKey integer
---@param childKey integer
---@param frameHandle Frame
---@return boolean
function Hashtable:saveFrameHandle(parentKey, childKey, frameHandle)
--@debug@
    checkobject(self, Hashtable, 'saveFrameHandle', 'self')
    checktype(parentKey, 'integer', 'saveFrameHandle', 1)
    checktype(childKey, 'integer', 'saveFrameHandle', 2)
    checkobject(frameHandle, require('lib.stdlib.oop.frame'), 'saveFrameHandle', 3)
--@end-debug@
    return Native.SaveFrameHandle(getUd(self), parentKey, childKey, getUd(frameHandle))
end

---loadInteger
---@param parentKey integer
---@param childKey integer
---@return integer
function Hashtable:loadInteger(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadInteger', 'self')
    checktype(parentKey, 'integer', 'loadInteger', 1)
    checktype(childKey, 'integer', 'loadInteger', 2)
--@end-debug@
    return Native.LoadInteger(getUd(self), parentKey, childKey)
end

---loadReal
---@param parentKey integer
---@param childKey integer
---@return float
function Hashtable:loadReal(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadReal', 'self')
    checktype(parentKey, 'integer', 'loadReal', 1)
    checktype(childKey, 'integer', 'loadReal', 2)
--@end-debug@
    return Native.LoadReal(getUd(self), parentKey, childKey)
end

---loadBoolean
---@param parentKey integer
---@param childKey integer
---@return boolean
function Hashtable:loadBoolean(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadBoolean', 'self')
    checktype(parentKey, 'integer', 'loadBoolean', 1)
    checktype(childKey, 'integer', 'loadBoolean', 2)
--@end-debug@
    return Native.LoadBoolean(getUd(self), parentKey, childKey)
end

---loadStr
---@param parentKey integer
---@param childKey integer
---@return string
function Hashtable:loadStr(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadStr', 'self')
    checktype(parentKey, 'integer', 'loadStr', 1)
    checktype(childKey, 'integer', 'loadStr', 2)
--@end-debug@
    return Native.LoadStr(getUd(self), parentKey, childKey)
end

---loadPlayerHandle
---@param parentKey integer
---@param childKey integer
---@return Player
function Hashtable:loadPlayerHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadPlayerHandle', 'self')
    checktype(parentKey, 'integer', 'loadPlayerHandle', 1)
    checktype(childKey, 'integer', 'loadPlayerHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.player'):fromUd(Native.LoadPlayerHandle(getUd(self), parentKey, childKey))
end

---loadWidgetHandle
---@param parentKey integer
---@param childKey integer
---@return Widget
function Hashtable:loadWidgetHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadWidgetHandle', 'self')
    checktype(parentKey, 'integer', 'loadWidgetHandle', 1)
    checktype(childKey, 'integer', 'loadWidgetHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.widget'):fromUd(Native.LoadWidgetHandle(getUd(self), parentKey, childKey))
end

---loadDestructableHandle
---@param parentKey integer
---@param childKey integer
---@return Destructable
function Hashtable:loadDestructableHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadDestructableHandle', 'self')
    checktype(parentKey, 'integer', 'loadDestructableHandle', 1)
    checktype(childKey, 'integer', 'loadDestructableHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.destructable'):fromUd(Native.LoadDestructableHandle(getUd(self), parentKey, childKey))
end

---loadItemHandle
---@param parentKey integer
---@param childKey integer
---@return Item
function Hashtable:loadItemHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadItemHandle', 'self')
    checktype(parentKey, 'integer', 'loadItemHandle', 1)
    checktype(childKey, 'integer', 'loadItemHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.item'):fromUd(Native.LoadItemHandle(getUd(self), parentKey, childKey))
end

---loadUnitHandle
---@param parentKey integer
---@param childKey integer
---@return Unit
function Hashtable:loadUnitHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadUnitHandle', 'self')
    checktype(parentKey, 'integer', 'loadUnitHandle', 1)
    checktype(childKey, 'integer', 'loadUnitHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.unit'):fromUd(Native.LoadUnitHandle(getUd(self), parentKey, childKey))
end

---loadAbilityHandle
---@param parentKey integer
---@param childKey integer
---@return Ability
function Hashtable:loadAbilityHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadAbilityHandle', 'self')
    checktype(parentKey, 'integer', 'loadAbilityHandle', 1)
    checktype(childKey, 'integer', 'loadAbilityHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.ability'):fromUd(Native.LoadAbilityHandle(getUd(self), parentKey, childKey))
end

---loadTimerHandle
---@param parentKey integer
---@param childKey integer
---@return Timer
function Hashtable:loadTimerHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadTimerHandle', 'self')
    checktype(parentKey, 'integer', 'loadTimerHandle', 1)
    checktype(childKey, 'integer', 'loadTimerHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.timer'):fromUd(Native.LoadTimerHandle(getUd(self), parentKey, childKey))
end

---loadTriggerHandle
---@param parentKey integer
---@param childKey integer
---@return Trigger
function Hashtable:loadTriggerHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadTriggerHandle', 'self')
    checktype(parentKey, 'integer', 'loadTriggerHandle', 1)
    checktype(childKey, 'integer', 'loadTriggerHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.trigger'):fromUd(Native.LoadTriggerHandle(getUd(self), parentKey, childKey))
end

---loadTriggerConditionHandle
---@param parentKey integer
---@param childKey integer
---@return TriggerCondition
function Hashtable:loadTriggerConditionHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadTriggerConditionHandle', 'self')
    checktype(parentKey, 'integer', 'loadTriggerConditionHandle', 1)
    checktype(childKey, 'integer', 'loadTriggerConditionHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.triggercondition'):fromUd(Native.LoadTriggerConditionHandle(getUd(self), parentKey, childKey))
end

---loadTriggerActionHandle
---@param parentKey integer
---@param childKey integer
---@return TriggerAction
function Hashtable:loadTriggerActionHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadTriggerActionHandle', 'self')
    checktype(parentKey, 'integer', 'loadTriggerActionHandle', 1)
    checktype(childKey, 'integer', 'loadTriggerActionHandle', 2)
--@end-debug@
    return Native.LoadTriggerActionHandle(getUd(self), parentKey, childKey)
end

---loadTriggerEventHandle
---@param parentKey integer
---@param childKey integer
---@return Event
function Hashtable:loadTriggerEventHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadTriggerEventHandle', 'self')
    checktype(parentKey, 'integer', 'loadTriggerEventHandle', 1)
    checktype(childKey, 'integer', 'loadTriggerEventHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.event'):fromUd(Native.LoadTriggerEventHandle(getUd(self), parentKey, childKey))
end

---loadForceHandle
---@param parentKey integer
---@param childKey integer
---@return Force
function Hashtable:loadForceHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadForceHandle', 'self')
    checktype(parentKey, 'integer', 'loadForceHandle', 1)
    checktype(childKey, 'integer', 'loadForceHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.force'):fromUd(Native.LoadForceHandle(getUd(self), parentKey, childKey))
end

---loadGroupHandle
---@param parentKey integer
---@param childKey integer
---@return Group
function Hashtable:loadGroupHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadGroupHandle', 'self')
    checktype(parentKey, 'integer', 'loadGroupHandle', 1)
    checktype(childKey, 'integer', 'loadGroupHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.group'):fromUd(Native.LoadGroupHandle(getUd(self), parentKey, childKey))
end

---loadLocationHandle
---@param parentKey integer
---@param childKey integer
---@return Location
function Hashtable:loadLocationHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadLocationHandle', 'self')
    checktype(parentKey, 'integer', 'loadLocationHandle', 1)
    checktype(childKey, 'integer', 'loadLocationHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.location'):fromUd(Native.LoadLocationHandle(getUd(self), parentKey, childKey))
end

---loadRectHandle
---@param parentKey integer
---@param childKey integer
---@return Rect
function Hashtable:loadRectHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadRectHandle', 'self')
    checktype(parentKey, 'integer', 'loadRectHandle', 1)
    checktype(childKey, 'integer', 'loadRectHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.rect'):fromUd(Native.LoadRectHandle(getUd(self), parentKey, childKey))
end

---loadBooleanExprHandle
---@param parentKey integer
---@param childKey integer
---@return BoolExpr
function Hashtable:loadBooleanExprHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadBooleanExprHandle', 'self')
    checktype(parentKey, 'integer', 'loadBooleanExprHandle', 1)
    checktype(childKey, 'integer', 'loadBooleanExprHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.boolexpr'):fromUd(Native.LoadBooleanExprHandle(getUd(self), parentKey, childKey))
end

---loadSoundHandle
---@param parentKey integer
---@param childKey integer
---@return Sound
function Hashtable:loadSoundHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadSoundHandle', 'self')
    checktype(parentKey, 'integer', 'loadSoundHandle', 1)
    checktype(childKey, 'integer', 'loadSoundHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.sound'):fromUd(Native.LoadSoundHandle(getUd(self), parentKey, childKey))
end

---loadEffectHandle
---@param parentKey integer
---@param childKey integer
---@return Effect
function Hashtable:loadEffectHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadEffectHandle', 'self')
    checktype(parentKey, 'integer', 'loadEffectHandle', 1)
    checktype(childKey, 'integer', 'loadEffectHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.effect'):fromUd(Native.LoadEffectHandle(getUd(self), parentKey, childKey))
end

---loadUnitPoolHandle
---@param parentKey integer
---@param childKey integer
---@return UnitPool
function Hashtable:loadUnitPoolHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadUnitPoolHandle', 'self')
    checktype(parentKey, 'integer', 'loadUnitPoolHandle', 1)
    checktype(childKey, 'integer', 'loadUnitPoolHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.unitpool'):fromUd(Native.LoadUnitPoolHandle(getUd(self), parentKey, childKey))
end

---loadItemPoolHandle
---@param parentKey integer
---@param childKey integer
---@return ItemPool
function Hashtable:loadItemPoolHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadItemPoolHandle', 'self')
    checktype(parentKey, 'integer', 'loadItemPoolHandle', 1)
    checktype(childKey, 'integer', 'loadItemPoolHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.itempool'):fromUd(Native.LoadItemPoolHandle(getUd(self), parentKey, childKey))
end

---loadQuestHandle
---@param parentKey integer
---@param childKey integer
---@return Quest
function Hashtable:loadQuestHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadQuestHandle', 'self')
    checktype(parentKey, 'integer', 'loadQuestHandle', 1)
    checktype(childKey, 'integer', 'loadQuestHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.quest'):fromUd(Native.LoadQuestHandle(getUd(self), parentKey, childKey))
end

---loadQuestItemHandle
---@param parentKey integer
---@param childKey integer
---@return QuestItem
function Hashtable:loadQuestItemHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadQuestItemHandle', 'self')
    checktype(parentKey, 'integer', 'loadQuestItemHandle', 1)
    checktype(childKey, 'integer', 'loadQuestItemHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.questitem'):fromUd(Native.LoadQuestItemHandle(getUd(self), parentKey, childKey))
end

---loadDefeatConditionHandle
---@param parentKey integer
---@param childKey integer
---@return DefeatCondition
function Hashtable:loadDefeatConditionHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadDefeatConditionHandle', 'self')
    checktype(parentKey, 'integer', 'loadDefeatConditionHandle', 1)
    checktype(childKey, 'integer', 'loadDefeatConditionHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.defeatcondition'):fromUd(Native.LoadDefeatConditionHandle(getUd(self), parentKey, childKey))
end

---loadTimerDialogHandle
---@param parentKey integer
---@param childKey integer
---@return TimerDialog
function Hashtable:loadTimerDialogHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadTimerDialogHandle', 'self')
    checktype(parentKey, 'integer', 'loadTimerDialogHandle', 1)
    checktype(childKey, 'integer', 'loadTimerDialogHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.timerdialog'):fromUd(Native.LoadTimerDialogHandle(getUd(self), parentKey, childKey))
end

---loadLeaderboardHandle
---@param parentKey integer
---@param childKey integer
---@return LeaderBoard
function Hashtable:loadLeaderboardHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadLeaderboardHandle', 'self')
    checktype(parentKey, 'integer', 'loadLeaderboardHandle', 1)
    checktype(childKey, 'integer', 'loadLeaderboardHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.leaderboard'):fromUd(Native.LoadLeaderboardHandle(getUd(self), parentKey, childKey))
end

---loadMultiboardHandle
---@param parentKey integer
---@param childKey integer
---@return MultiBoard
function Hashtable:loadMultiboardHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadMultiboardHandle', 'self')
    checktype(parentKey, 'integer', 'loadMultiboardHandle', 1)
    checktype(childKey, 'integer', 'loadMultiboardHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.multiboard'):fromUd(Native.LoadMultiboardHandle(getUd(self), parentKey, childKey))
end

---loadMultiboardItemHandle
---@param parentKey integer
---@param childKey integer
---@return MultiBoardItem
function Hashtable:loadMultiboardItemHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadMultiboardItemHandle', 'self')
    checktype(parentKey, 'integer', 'loadMultiboardItemHandle', 1)
    checktype(childKey, 'integer', 'loadMultiboardItemHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.multiboarditem'):fromUd(Native.LoadMultiboardItemHandle(getUd(self), parentKey, childKey))
end

---loadTrackableHandle
---@param parentKey integer
---@param childKey integer
---@return Trackable
function Hashtable:loadTrackableHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadTrackableHandle', 'self')
    checktype(parentKey, 'integer', 'loadTrackableHandle', 1)
    checktype(childKey, 'integer', 'loadTrackableHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.trackable'):fromUd(Native.LoadTrackableHandle(getUd(self), parentKey, childKey))
end

---loadDialogHandle
---@param parentKey integer
---@param childKey integer
---@return Dialog
function Hashtable:loadDialogHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadDialogHandle', 'self')
    checktype(parentKey, 'integer', 'loadDialogHandle', 1)
    checktype(childKey, 'integer', 'loadDialogHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.dialog'):fromUd(Native.LoadDialogHandle(getUd(self), parentKey, childKey))
end

---loadButtonHandle
---@param parentKey integer
---@param childKey integer
---@return Button
function Hashtable:loadButtonHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadButtonHandle', 'self')
    checktype(parentKey, 'integer', 'loadButtonHandle', 1)
    checktype(childKey, 'integer', 'loadButtonHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.button'):fromUd(Native.LoadButtonHandle(getUd(self), parentKey, childKey))
end

---loadTextTagHandle
---@param parentKey integer
---@param childKey integer
---@return TextTag
function Hashtable:loadTextTagHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadTextTagHandle', 'self')
    checktype(parentKey, 'integer', 'loadTextTagHandle', 1)
    checktype(childKey, 'integer', 'loadTextTagHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.texttag'):fromUd(Native.LoadTextTagHandle(getUd(self), parentKey, childKey))
end

---loadLightningHandle
---@param parentKey integer
---@param childKey integer
---@return Lightning
function Hashtable:loadLightningHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadLightningHandle', 'self')
    checktype(parentKey, 'integer', 'loadLightningHandle', 1)
    checktype(childKey, 'integer', 'loadLightningHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.lightning'):fromUd(Native.LoadLightningHandle(getUd(self), parentKey, childKey))
end

---loadImageHandle
---@param parentKey integer
---@param childKey integer
---@return Image
function Hashtable:loadImageHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadImageHandle', 'self')
    checktype(parentKey, 'integer', 'loadImageHandle', 1)
    checktype(childKey, 'integer', 'loadImageHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.image'):fromUd(Native.LoadImageHandle(getUd(self), parentKey, childKey))
end

---loadUbersplatHandle
---@param parentKey integer
---@param childKey integer
---@return Ubersplat
function Hashtable:loadUbersplatHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadUbersplatHandle', 'self')
    checktype(parentKey, 'integer', 'loadUbersplatHandle', 1)
    checktype(childKey, 'integer', 'loadUbersplatHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.ubersplat'):fromUd(Native.LoadUbersplatHandle(getUd(self), parentKey, childKey))
end

---loadRegionHandle
---@param parentKey integer
---@param childKey integer
---@return Region
function Hashtable:loadRegionHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadRegionHandle', 'self')
    checktype(parentKey, 'integer', 'loadRegionHandle', 1)
    checktype(childKey, 'integer', 'loadRegionHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.region'):fromUd(Native.LoadRegionHandle(getUd(self), parentKey, childKey))
end

---loadFogStateHandle
---@param parentKey integer
---@param childKey integer
---@return FogState
function Hashtable:loadFogStateHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadFogStateHandle', 'self')
    checktype(parentKey, 'integer', 'loadFogStateHandle', 1)
    checktype(childKey, 'integer', 'loadFogStateHandle', 2)
--@end-debug@
    return Native.LoadFogStateHandle(getUd(self), parentKey, childKey)
end

---loadFogModifierHandle
---@param parentKey integer
---@param childKey integer
---@return FogModifier
function Hashtable:loadFogModifierHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadFogModifierHandle', 'self')
    checktype(parentKey, 'integer', 'loadFogModifierHandle', 1)
    checktype(childKey, 'integer', 'loadFogModifierHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.fogmodifier'):fromUd(Native.LoadFogModifierHandle(getUd(self), parentKey, childKey))
end

---loadHandle
---@param parentKey integer
---@param childKey integer
---@return Hashtable
function Hashtable:loadHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadHandle', 'self')
    checktype(parentKey, 'integer', 'loadHandle', 1)
    checktype(childKey, 'integer', 'loadHandle', 2)
--@end-debug@
    return Hashtable:fromUd(Native.LoadHashtableHandle(getUd(self), parentKey, childKey))
end

---loadFrameHandle
---@param parentKey integer
---@param childKey integer
---@return Frame
function Hashtable:loadFrameHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'loadFrameHandle', 'self')
    checktype(parentKey, 'integer', 'loadFrameHandle', 1)
    checktype(childKey, 'integer', 'loadFrameHandle', 2)
--@end-debug@
    return require('lib.stdlib.oop.frame'):fromUd(Native.LoadFrameHandle(getUd(self), parentKey, childKey))
end

---haveSavedInteger
---@param parentKey integer
---@param childKey integer
---@return boolean
function Hashtable:haveSavedInteger(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'haveSavedInteger', 'self')
    checktype(parentKey, 'integer', 'haveSavedInteger', 1)
    checktype(childKey, 'integer', 'haveSavedInteger', 2)
--@end-debug@
    return Native.HaveSavedInteger(getUd(self), parentKey, childKey)
end

---haveSavedReal
---@param parentKey integer
---@param childKey integer
---@return boolean
function Hashtable:haveSavedReal(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'haveSavedReal', 'self')
    checktype(parentKey, 'integer', 'haveSavedReal', 1)
    checktype(childKey, 'integer', 'haveSavedReal', 2)
--@end-debug@
    return Native.HaveSavedReal(getUd(self), parentKey, childKey)
end

---haveSavedBoolean
---@param parentKey integer
---@param childKey integer
---@return boolean
function Hashtable:haveSavedBoolean(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'haveSavedBoolean', 'self')
    checktype(parentKey, 'integer', 'haveSavedBoolean', 1)
    checktype(childKey, 'integer', 'haveSavedBoolean', 2)
--@end-debug@
    return Native.HaveSavedBoolean(getUd(self), parentKey, childKey)
end

---haveSavedString
---@param parentKey integer
---@param childKey integer
---@return boolean
function Hashtable:haveSavedString(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'haveSavedString', 'self')
    checktype(parentKey, 'integer', 'haveSavedString', 1)
    checktype(childKey, 'integer', 'haveSavedString', 2)
--@end-debug@
    return Native.HaveSavedString(getUd(self), parentKey, childKey)
end

---haveSavedHandle
---@param parentKey integer
---@param childKey integer
---@return boolean
function Hashtable:haveSavedHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'haveSavedHandle', 'self')
    checktype(parentKey, 'integer', 'haveSavedHandle', 1)
    checktype(childKey, 'integer', 'haveSavedHandle', 2)
--@end-debug@
    return Native.HaveSavedHandle(getUd(self), parentKey, childKey)
end

---removeSavedInteger
---@param parentKey integer
---@param childKey integer
---@return void
function Hashtable:removeSavedInteger(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'removeSavedInteger', 'self')
    checktype(parentKey, 'integer', 'removeSavedInteger', 1)
    checktype(childKey, 'integer', 'removeSavedInteger', 2)
--@end-debug@
    return Native.RemoveSavedInteger(getUd(self), parentKey, childKey)
end

---removeSavedReal
---@param parentKey integer
---@param childKey integer
---@return void
function Hashtable:removeSavedReal(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'removeSavedReal', 'self')
    checktype(parentKey, 'integer', 'removeSavedReal', 1)
    checktype(childKey, 'integer', 'removeSavedReal', 2)
--@end-debug@
    return Native.RemoveSavedReal(getUd(self), parentKey, childKey)
end

---removeSavedBoolean
---@param parentKey integer
---@param childKey integer
---@return void
function Hashtable:removeSavedBoolean(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'removeSavedBoolean', 'self')
    checktype(parentKey, 'integer', 'removeSavedBoolean', 1)
    checktype(childKey, 'integer', 'removeSavedBoolean', 2)
--@end-debug@
    return Native.RemoveSavedBoolean(getUd(self), parentKey, childKey)
end

---removeSavedString
---@param parentKey integer
---@param childKey integer
---@return void
function Hashtable:removeSavedString(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'removeSavedString', 'self')
    checktype(parentKey, 'integer', 'removeSavedString', 1)
    checktype(childKey, 'integer', 'removeSavedString', 2)
--@end-debug@
    return Native.RemoveSavedString(getUd(self), parentKey, childKey)
end

---removeSavedHandle
---@param parentKey integer
---@param childKey integer
---@return void
function Hashtable:removeSavedHandle(parentKey, childKey)
--@debug@
    checkobject(self, Hashtable, 'removeSavedHandle', 'self')
    checktype(parentKey, 'integer', 'removeSavedHandle', 1)
    checktype(childKey, 'integer', 'removeSavedHandle', 2)
--@end-debug@
    return Native.RemoveSavedHandle(getUd(self), parentKey, childKey)
end

---flushParent
---@return void
function Hashtable:flushParent()
--@debug@
    checkobject(self, Hashtable, 'flushParent', 'self')
--@end-debug@
    return Native.FlushParentHashtable(getUd(self))
end

---flushChild
---@param parentKey integer
---@return void
function Hashtable:flushChild(parentKey)
--@debug@
    checkobject(self, Hashtable, 'flushChild', 'self')
    checktype(parentKey, 'integer', 'flushChild', 1)
--@end-debug@
    return Native.FlushChildHashtable(getUd(self), parentKey)
end

return Hashtable]]

P['lib/stdlib/oop/_generated/_image.lua'] = [[local Native = require('lib.stdlib.native')

---@class Image : Handle
local Image = class('Image', require('lib.stdlib.oop.handle'))

---destructor
---@return void
function Image:destructor()
--@debug@
    checkobject(self, Image, 'destructor', 'self')
--@end-debug@
    return Native.DestroyImage(getUd(self))
end

---<**_DEPRECATED_**> destroy
---@return void
function Image:destroy()
--@debug@
    deprecated('Image.destroy', 'Image.delete')
--@end-debug@
    return self:delete()
end

---setShown
---@param flag boolean
---@return void
function Image:setShown(flag)
--@debug@
    checkobject(self, Image, 'setShown', 'self')
    checktype(flag, 'boolean', 'setShown', 1)
--@end-debug@
    return Native.ShowImage(getUd(self), flag)
end

---setConstantHeight
---@param flag boolean
---@param height float
---@return void
function Image:setConstantHeight(flag, height)
--@debug@
    checkobject(self, Image, 'setConstantHeight', 'self')
    checktype(flag, 'boolean', 'setConstantHeight', 1)
    checktype(height, 'float', 'setConstantHeight', 2)
--@end-debug@
    return Native.SetImageConstantHeight(getUd(self), flag, height)
end

---setPosition
---@overload fun(vec: Vector3): void
---@param x float
---@param y float
---@param z float
---@return void
function Image:setPosition(x, y, z)
    if type(x) == 'table' then
        x, y, z = table.unpack(x)
    end
--@debug@
    checkobject(self, Image, 'setPosition', 'self')
    checktype(x, 'float', 'setPosition', 1)
    checktype(y, 'float', 'setPosition', 2)
    checktype(z, 'float', 'setPosition', 3)
--@end-debug@
    return Native.SetImagePosition(getUd(self), x, y, z)
end

---setColor
---@param red integer
---@param green integer
---@param blue integer
---@param alpha integer
---@return void
function Image:setColor(red, green, blue, alpha)
--@debug@
    checkobject(self, Image, 'setColor', 'self')
    checktype(red, 'integer', 'setColor', 1)
    checktype(green, 'integer', 'setColor', 2)
    checktype(blue, 'integer', 'setColor', 3)
    checktype(alpha, 'integer', 'setColor', 4)
--@end-debug@
    return Native.SetImageColor(getUd(self), red, green, blue, alpha)
end

---setRender
---@param flag boolean
---@return void
function Image:setRender(flag)
--@debug@
    checkobject(self, Image, 'setRender', 'self')
    checktype(flag, 'boolean', 'setRender', 1)
--@end-debug@
    return Native.SetImageRender(getUd(self), flag)
end

---setRenderAlways
---@param flag boolean
---@return void
function Image:setRenderAlways(flag)
--@debug@
    checkobject(self, Image, 'setRenderAlways', 'self')
    checktype(flag, 'boolean', 'setRenderAlways', 1)
--@end-debug@
    return Native.SetImageRenderAlways(getUd(self), flag)
end

---setAboveWater
---@param flag boolean
---@param useWaterAlpha boolean
---@return void
function Image:setAboveWater(flag, useWaterAlpha)
--@debug@
    checkobject(self, Image, 'setAboveWater', 'self')
    checktype(flag, 'boolean', 'setAboveWater', 1)
    checktype(useWaterAlpha, 'boolean', 'setAboveWater', 2)
--@end-debug@
    return Native.SetImageAboveWater(getUd(self), flag, useWaterAlpha)
end

---setType
---@param imageType integer
---@return void
function Image:setType(imageType)
--@debug@
    checkobject(self, Image, 'setType', 'self')
    checktype(imageType, 'integer', 'setType', 1)
--@end-debug@
    return Native.SetImageType(getUd(self), imageType)
end

return Image]]

P['lib/stdlib/oop/_generated/_item.lua'] = [[local Native = require('lib.stdlib.native')

---@class Item : Widget
local Item = class('Item', require('lib.stdlib.oop.widget'))

---destructor
---@return void
function Item:destructor()
--@debug@
    checkobject(self, Item, 'destructor', 'self')
--@end-debug@
    return Native.RemoveItem(getUd(self))
end

---<**_DEPRECATED_**> remove
---@return void
function Item:remove()
--@debug@
    deprecated('Item.remove', 'Item.delete')
--@end-debug@
    return self:delete()
end

---<static> create
---@overload fun(itemid: integer, vec: Vector): Item
---@param itemid integer
---@param x float
---@param y float
---@return Item
function Item:create(itemid, x, y)
    if type(x) == 'table' then
        x, y = table.unpack(x)
    end
--@debug@
    checkclass(self, Item, 'create', 'self')
    checktype(itemid, 'integer', 'create', 1)
    checktype(x, 'float', 'create', 2)
    checktype(y, 'float', 'create', 3)
--@end-debug@
    return Item:fromUd(Native.CreateItem(itemid, x, y))
end

---<static> createWithSkin
---@overload fun(itemid: integer, vec: Vector, skinId: integer): Item
---@param itemid integer
---@param x float
---@param y float
---@param skinId integer
---@return Item
function Item:createWithSkin(itemid, x, y, skinId)
    if type(x) == 'table' then
        skinId = y
        x, y = table.unpack(x)
    end
--@debug@
    checkclass(self, Item, 'createWithSkin', 'self')
    checktype(itemid, 'integer', 'createWithSkin', 1)
    checktype(x, 'float', 'createWithSkin', 2)
    checktype(y, 'float', 'createWithSkin', 3)
    checktype(skinId, 'integer', 'createWithSkin', 4)
--@end-debug@
    return Item:fromUd(Native.BlzCreateItemWithSkin(itemid, x, y, skinId))
end

---getPlayer
---@return Player
function Item:getPlayer()
--@debug@
    checkobject(self, Item, 'getPlayer', 'self')
--@end-debug@
    return require('lib.stdlib.oop.player'):fromUd(Native.GetItemPlayer(getUd(self)))
end

---getTypeId
---@return integer
function Item:getTypeId()
--@debug@
    checkobject(self, Item, 'getTypeId', 'self')
--@end-debug@
    return Native.GetItemTypeId(getUd(self))
end

---getX
---@return float
function Item:getX()
--@debug@
    checkobject(self, Item, 'getX', 'self')
--@end-debug@
    return Native.GetItemX(getUd(self))
end

---getY
---@return float
function Item:getY()
--@debug@
    checkobject(self, Item, 'getY', 'self')
--@end-debug@
    return Native.GetItemY(getUd(self))
end

---setPosition
---@overload fun(vec: Vector): void
---@param x float
---@param y float
---@return void
function Item:setPosition(x, y)
    if type(x) == 'table' then
        x, y = table.unpack(x)
    end
--@debug@
    checkobject(self, Item, 'setPosition', 'self')
    checktype(x, 'float', 'setPosition', 1)
    checktype(y, 'float', 'setPosition', 2)
--@end-debug@
    return Native.SetItemPosition(getUd(self), x, y)
end

---setDropOnDeath
---@param flag boolean
---@return void
function Item:setDropOnDeath(flag)
--@debug@
    checkobject(self, Item, 'setDropOnDeath', 'self')
    checktype(flag, 'boolean', 'setDropOnDeath', 1)
--@end-debug@
    return Native.SetItemDropOnDeath(getUd(self), flag)
end

---setDroppable
---@param flag boolean
---@return void
function Item:setDroppable(flag)
--@debug@
    checkobject(self, Item, 'setDroppable', 'self')
    checktype(flag, 'boolean', 'setDroppable', 1)
--@end-debug@
    return Native.SetItemDroppable(getUd(self), flag)
end

---setPawnable
---@param flag boolean
---@return void
function Item:setPawnable(flag)
--@debug@
    checkobject(self, Item, 'setPawnable', 'self')
    checktype(flag, 'boolean', 'setPawnable', 1)
--@end-debug@
    return Native.SetItemPawnable(getUd(self), flag)
end

---setPlayer
---@param player Player
---@param changeColor boolean
---@return void
function Item:setPlayer(player, changeColor)
--@debug@
    checkobject(self, Item, 'setPlayer', 'self')
    checkobject(player, require('lib.stdlib.oop.player'), 'setPlayer', 1)
    checktype(changeColor, 'boolean', 'setPlayer', 2)
--@end-debug@
    return Native.SetItemPlayer(getUd(self), getUd(player), changeColor)
end

---setInvulnerable
---@param flag boolean
---@return void
function Item:setInvulnerable(flag)
--@debug@
    checkobject(self, Item, 'setInvulnerable', 'self')
    checktype(flag, 'boolean', 'setInvulnerable', 1)
--@end-debug@
    return Native.SetItemInvulnerable(getUd(self), flag)
end

---isInvulnerable
---@return boolean
function Item:isInvulnerable()
--@debug@
    checkobject(self, Item, 'isInvulnerable', 'self')
--@end-debug@
    return Native.IsItemInvulnerable(getUd(self))
end

---setVisible
---@param show boolean
---@return void
function Item:setVisible(show)
--@debug@
    checkobject(self, Item, 'setVisible', 'self')
    checktype(show, 'boolean', 'setVisible', 1)
--@end-debug@
    return Native.SetItemVisible(getUd(self), show)
end

---isVisible
---@return boolean
function Item:isVisible()
--@debug@
    checkobject(self, Item, 'isVisible', 'self')
--@end-debug@
    return Native.IsItemVisible(getUd(self))
end

---isOwned
---@return boolean
function Item:isOwned()
--@debug@
    checkobject(self, Item, 'isOwned', 'self')
--@end-debug@
    return Native.IsItemOwned(getUd(self))
end

---isPowerup
---@return boolean
function Item:isPowerup()
--@debug@
    checkobject(self, Item, 'isPowerup', 'self')
--@end-debug@
    return Native.IsItemPowerup(getUd(self))
end

---isSellable
---@return boolean
function Item:isSellable()
--@debug@
    checkobject(self, Item, 'isSellable', 'self')
--@end-debug@
    return Native.IsItemSellable(getUd(self))
end

---isPawnable
---@return boolean
function Item:isPawnable()
--@debug@
    checkobject(self, Item, 'isPawnable', 'self')
--@end-debug@
    return Native.IsItemPawnable(getUd(self))
end

---getLevel
---@return integer
function Item:getLevel()
--@debug@
    checkobject(self, Item, 'getLevel', 'self')
--@end-debug@
    return Native.GetItemLevel(getUd(self))
end

---getType
---@return ItemType
function Item:getType()
--@debug@
    checkobject(self, Item, 'getType', 'self')
--@end-debug@
    return Native.GetItemType(getUd(self))
end

---setDropID
---@param unitId integer
---@return void
function Item:setDropID(unitId)
--@debug@
    checkobject(self, Item, 'setDropID', 'self')
    checktype(unitId, 'integer', 'setDropID', 1)
--@end-debug@
    return Native.SetItemDropID(getUd(self), unitId)
end

---getName
---@return string
function Item:getName()
--@debug@
    checkobject(self, Item, 'getName', 'self')
--@end-debug@
    return Native.GetItemName(getUd(self))
end

---getCharges
---@return integer
function Item:getCharges()
--@debug@
    checkobject(self, Item, 'getCharges', 'self')
--@end-debug@
    return Native.GetItemCharges(getUd(self))
end

---setCharges
---@param charges integer
---@return void
function Item:setCharges(charges)
--@debug@
    checkobject(self, Item, 'setCharges', 'self')
    checktype(charges, 'integer', 'setCharges', 1)
--@end-debug@
    return Native.SetItemCharges(getUd(self), charges)
end

---getUserData
---@return integer
function Item:getUserData()
--@debug@
    checkobject(self, Item, 'getUserData', 'self')
--@end-debug@
    return Native.GetItemUserData(getUd(self))
end

---setUserData
---@param data integer
---@return void
function Item:setUserData(data)
--@debug@
    checkobject(self, Item, 'setUserData', 'self')
    checktype(data, 'integer', 'setUserData', 1)
--@end-debug@
    return Native.SetItemUserData(getUd(self), data)
end

---setName
---@param name string
---@return void
function Item:setName(name)
--@debug@
    checkobject(self, Item, 'setName', 'self')
    checktype(name, 'string', 'setName', 1)
--@end-debug@
    return Native.BlzSetItemName(getUd(self), name)
end

---setDescription
---@param description string
---@return void
function Item:setDescription(description)
--@debug@
    checkobject(self, Item, 'setDescription', 'self')
    checktype(description, 'string', 'setDescription', 1)
--@end-debug@
    return Native.BlzSetItemDescription(getUd(self), description)
end

---getDescription
---@return string
function Item:getDescription()
--@debug@
    checkobject(self, Item, 'getDescription', 'self')
--@end-debug@
    return Native.BlzGetItemDescription(getUd(self))
end

---setTooltip
---@param tooltip string
---@return void
function Item:setTooltip(tooltip)
--@debug@
    checkobject(self, Item, 'setTooltip', 'self')
    checktype(tooltip, 'string', 'setTooltip', 1)
--@end-debug@
    return Native.BlzSetItemTooltip(getUd(self), tooltip)
end

---getTooltip
---@return string
function Item:getTooltip()
--@debug@
    checkobject(self, Item, 'getTooltip', 'self')
--@end-debug@
    return Native.BlzGetItemTooltip(getUd(self))
end

---setExtendedTooltip
---@param extendedTooltip string
---@return void
function Item:setExtendedTooltip(extendedTooltip)
--@debug@
    checkobject(self, Item, 'setExtendedTooltip', 'self')
    checktype(extendedTooltip, 'string', 'setExtendedTooltip', 1)
--@end-debug@
    return Native.BlzSetItemExtendedTooltip(getUd(self), extendedTooltip)
end

---getExtendedTooltip
---@return string
function Item:getExtendedTooltip()
--@debug@
    checkobject(self, Item, 'getExtendedTooltip', 'self')
--@end-debug@
    return Native.BlzGetItemExtendedTooltip(getUd(self))
end

---setIconPath
---@param iconPath string
---@return void
function Item:setIconPath(iconPath)
--@debug@
    checkobject(self, Item, 'setIconPath', 'self')
    checktype(iconPath, 'string', 'setIconPath', 1)
--@end-debug@
    return Native.BlzSetItemIconPath(getUd(self), iconPath)
end

---getIconPath
---@return string
function Item:getIconPath()
--@debug@
    checkobject(self, Item, 'getIconPath', 'self')
--@end-debug@
    return Native.BlzGetItemIconPath(getUd(self))
end

---getAbilityByIndex
---@param index integer
---@return Ability
function Item:getAbilityByIndex(index)
--@debug@
    checkobject(self, Item, 'getAbilityByIndex', 'self')
    checktype(index, 'integer', 'getAbilityByIndex', 1)
--@end-debug@
    return require('lib.stdlib.oop.ability'):fromUd(Native.BlzGetItemAbilityByIndex(getUd(self), index))
end

---getAbility
---@param abilCode integer
---@return Ability
function Item:getAbility(abilCode)
--@debug@
    checkobject(self, Item, 'getAbility', 'self')
    checktype(abilCode, 'integer', 'getAbility', 1)
--@end-debug@
    return require('lib.stdlib.oop.ability'):fromUd(Native.BlzGetItemAbility(getUd(self), abilCode))
end

---addAbility
---@param abilCode integer
---@return boolean
function Item:addAbility(abilCode)
--@debug@
    checkobject(self, Item, 'addAbility', 'self')
    checktype(abilCode, 'integer', 'addAbility', 1)
--@end-debug@
    return Native.BlzItemAddAbility(getUd(self), abilCode)
end

---getBooleanField
---@param field ItemBooleanField
---@return boolean
function Item:getBooleanField(field)
--@debug@
    checkobject(self, Item, 'getBooleanField', 'self')
    checkuserdata(field, 'itembooleanfield', 'getBooleanField', 1)
--@end-debug@
    return Native.BlzGetItemBooleanField(getUd(self), field)
end

---getIntegerField
---@param field ItemIntegerField
---@return integer
function Item:getIntegerField(field)
--@debug@
    checkobject(self, Item, 'getIntegerField', 'self')
    checkuserdata(field, 'itemintegerfield', 'getIntegerField', 1)
--@end-debug@
    return Native.BlzGetItemIntegerField(getUd(self), field)
end

---getRealField
---@param field ItemRealField
---@return float
function Item:getRealField(field)
--@debug@
    checkobject(self, Item, 'getRealField', 'self')
    checkuserdata(field, 'itemrealfield', 'getRealField', 1)
--@end-debug@
    return Native.BlzGetItemRealField(getUd(self), field)
end

---getStringField
---@param field ItemStringField
---@return string
function Item:getStringField(field)
--@debug@
    checkobject(self, Item, 'getStringField', 'self')
    checkuserdata(field, 'itemstringfield', 'getStringField', 1)
--@end-debug@
    return Native.BlzGetItemStringField(getUd(self), field)
end

---setBooleanField
---@param field ItemBooleanField
---@param value boolean
---@return boolean
function Item:setBooleanField(field, value)
--@debug@
    checkobject(self, Item, 'setBooleanField', 'self')
    checkuserdata(field, 'itembooleanfield', 'setBooleanField', 1)
    checktype(value, 'boolean', 'setBooleanField', 2)
--@end-debug@
    return Native.BlzSetItemBooleanField(getUd(self), field, value)
end

---setIntegerField
---@param field ItemIntegerField
---@param value integer
---@return boolean
function Item:setIntegerField(field, value)
--@debug@
    checkobject(self, Item, 'setIntegerField', 'self')
    checkuserdata(field, 'itemintegerfield', 'setIntegerField', 1)
    checktype(value, 'integer', 'setIntegerField', 2)
--@end-debug@
    return Native.BlzSetItemIntegerField(getUd(self), field, value)
end

---setRealField
---@param field ItemRealField
---@param value float
---@return boolean
function Item:setRealField(field, value)
--@debug@
    checkobject(self, Item, 'setRealField', 'self')
    checkuserdata(field, 'itemrealfield', 'setRealField', 1)
    checktype(value, 'float', 'setRealField', 2)
--@end-debug@
    return Native.BlzSetItemRealField(getUd(self), field, value)
end

---setStringField
---@param field ItemStringField
---@param value string
---@return boolean
function Item:setStringField(field, value)
--@debug@
    checkobject(self, Item, 'setStringField', 'self')
    checkuserdata(field, 'itemstringfield', 'setStringField', 1)
    checktype(value, 'string', 'setStringField', 2)
--@end-debug@
    return Native.BlzSetItemStringField(getUd(self), field, value)
end

---removeAbility
---@param abilCode integer
---@return boolean
function Item:removeAbility(abilCode)
--@debug@
    checkobject(self, Item, 'removeAbility', 'self')
    checktype(abilCode, 'integer', 'removeAbility', 1)
--@end-debug@
    return Native.BlzItemRemoveAbility(getUd(self), abilCode)
end

---getSkin
---@return integer
function Item:getSkin()
--@debug@
    checkobject(self, Item, 'getSkin', 'self')
--@end-debug@
    return Native.BlzGetItemSkin(getUd(self))
end

---setSkin
---@param skinId integer
---@return void
function Item:setSkin(skinId)
--@debug@
    checkobject(self, Item, 'setSkin', 'self')
    checktype(skinId, 'integer', 'setSkin', 1)
--@end-debug@
    return Native.BlzSetItemSkin(getUd(self), skinId)
end

return Item]]

P['lib/stdlib/oop/_generated/_itempool.lua'] = [[local Native = require('lib.stdlib.native')

---@class ItemPool : Handle
local ItemPool = class('ItemPool', require('lib.stdlib.oop.handle'))

---destructor
---@return void
function ItemPool:destructor()
--@debug@
    checkobject(self, ItemPool, 'destructor', 'self')
--@end-debug@
    return Native.DestroyItemPool(getUd(self))
end

---<**_DEPRECATED_**> destroy
---@return void
function ItemPool:destroy()
--@debug@
    deprecated('ItemPool.destroy', 'ItemPool.delete')
--@end-debug@
    return self:delete()
end

---<static> create
---@return ItemPool
function ItemPool:create()
    return ItemPool:fromUd(Native.CreateItemPool())
end

---addItemType
---@param itemId integer
---@param weight float
---@return void
function ItemPool:addItemType(itemId, weight)
--@debug@
    checkobject(self, ItemPool, 'addItemType', 'self')
    checktype(itemId, 'integer', 'addItemType', 1)
    checktype(weight, 'float', 'addItemType', 2)
--@end-debug@
    return Native.ItemPoolAddItemType(getUd(self), itemId, weight)
end

---removeItemType
---@param itemId integer
---@return void
function ItemPool:removeItemType(itemId)
--@debug@
    checkobject(self, ItemPool, 'removeItemType', 'self')
    checktype(itemId, 'integer', 'removeItemType', 1)
--@end-debug@
    return Native.ItemPoolRemoveItemType(getUd(self), itemId)
end

---placeRandomItem
---@overload fun(vec: Vector): Item
---@param x float
---@param y float
---@return Item
function ItemPool:placeRandomItem(x, y)
    if type(x) == 'table' then
        x, y = table.unpack(x)
    end
--@debug@
    checkobject(self, ItemPool, 'placeRandomItem', 'self')
    checktype(x, 'float', 'placeRandomItem', 1)
    checktype(y, 'float', 'placeRandomItem', 2)
--@end-debug@
    return require('lib.stdlib.oop.item'):fromUd(Native.PlaceRandomItem(getUd(self), x, y))
end

return ItemPool]]

P['lib/stdlib/oop/_generated/_leaderboard.lua'] = [[local Native = require('lib.stdlib.native')

---@class LeaderBoard : Agent
local LeaderBoard = class('LeaderBoard', require('lib.stdlib.oop.agent'))

---destructor
---@return void
function LeaderBoard:destructor()
--@debug@
    checkobject(self, LeaderBoard, 'destructor', 'self')
--@end-debug@
    return Native.DestroyLeaderboard(getUd(self))
end

---<**_DEPRECATED_**> destroy
---@return void
function LeaderBoard:destroy()
--@debug@
    deprecated('LeaderBoard.destroy', 'LeaderBoard.delete')
--@end-debug@
    return self:delete()
end

---<static> create
---@return LeaderBoard
function LeaderBoard:create()
    return LeaderBoard:fromUd(Native.CreateLeaderboard())
end

---display
---@param show boolean
---@return void
function LeaderBoard:display(show)
--@debug@
    checkobject(self, LeaderBoard, 'display', 'self')
    checktype(show, 'boolean', 'display', 1)
--@end-debug@
    return Native.LeaderboardDisplay(getUd(self), show)
end

---isDisplayed
---@return boolean
function LeaderBoard:isDisplayed()
--@debug@
    checkobject(self, LeaderBoard, 'isDisplayed', 'self')
--@end-debug@
    return Native.IsLeaderboardDisplayed(getUd(self))
end

---getItemCount
---@return integer
function LeaderBoard:getItemCount()
--@debug@
    checkobject(self, LeaderBoard, 'getItemCount', 'self')
--@end-debug@
    return Native.LeaderboardGetItemCount(getUd(self))
end

---setSizeByItemCount
---@param count integer
---@return void
function LeaderBoard:setSizeByItemCount(count)
--@debug@
    checkobject(self, LeaderBoard, 'setSizeByItemCount', 'self')
    checktype(count, 'integer', 'setSizeByItemCount', 1)
--@end-debug@
    return Native.LeaderboardSetSizeByItemCount(getUd(self), count)
end

---addItem
---@param label string
---@param value integer
---@param p Player
---@return void
function LeaderBoard:addItem(label, value, p)
--@debug@
    checkobject(self, LeaderBoard, 'addItem', 'self')
    checktype(label, 'string', 'addItem', 1)
    checktype(value, 'integer', 'addItem', 2)
    checkobject(p, require('lib.stdlib.oop.player'), 'addItem', 3)
--@end-debug@
    return Native.LeaderboardAddItem(getUd(self), label, value, getUd(p))
end

---removeItem
---@param index integer
---@return void
function LeaderBoard:removeItem(index)
--@debug@
    checkobject(self, LeaderBoard, 'removeItem', 'self')
    checktype(index, 'integer', 'removeItem', 1)
--@end-debug@
    return Native.LeaderboardRemoveItem(getUd(self), index)
end

---removePlayerItem
---@param p Player
---@return void
function LeaderBoard:removePlayerItem(p)
--@debug@
    checkobject(self, LeaderBoard, 'removePlayerItem', 'self')
    checkobject(p, require('lib.stdlib.oop.player'), 'removePlayerItem', 1)
--@end-debug@
    return Native.LeaderboardRemovePlayerItem(getUd(self), getUd(p))
end

---clear
---@return void
function LeaderBoard:clear()
--@debug@
    checkobject(self, LeaderBoard, 'clear', 'self')
--@end-debug@
    return Native.LeaderboardClear(getUd(self))
end

---sortItemsByValue
---@param ascending boolean
---@return void
function LeaderBoard:sortItemsByValue(ascending)
--@debug@
    checkobject(self, LeaderBoard, 'sortItemsByValue', 'self')
    checktype(ascending, 'boolean', 'sortItemsByValue', 1)
--@end-debug@
    return Native.LeaderboardSortItemsByValue(getUd(self), ascending)
end

---sortItemsByPlayer
---@param ascending boolean
---@return void
function LeaderBoard:sortItemsByPlayer(ascending)
--@debug@
    checkobject(self, LeaderBoard, 'sortItemsByPlayer', 'self')
    checktype(ascending, 'boolean', 'sortItemsByPlayer', 1)
--@end-debug@
    return Native.LeaderboardSortItemsByPlayer(getUd(self), ascending)
end

---sortItemsByLabel
---@param ascending boolean
---@return void
function LeaderBoard:sortItemsByLabel(ascending)
--@debug@
    checkobject(self, LeaderBoard, 'sortItemsByLabel', 'self')
    checktype(ascending, 'boolean', 'sortItemsByLabel', 1)
--@end-debug@
    return Native.LeaderboardSortItemsByLabel(getUd(self), ascending)
end

---hasPlayerItem
---@param p Player
---@return boolean
function LeaderBoard:hasPlayerItem(p)
--@debug@
    checkobject(self, LeaderBoard, 'hasPlayerItem', 'self')
    checkobject(p, require('lib.stdlib.oop.player'), 'hasPlayerItem', 1)
--@end-debug@
    return Native.LeaderboardHasPlayerItem(getUd(self), getUd(p))
end

---getPlayerIndex
---@param p Player
---@return integer
function LeaderBoard:getPlayerIndex(p)
--@debug@
    checkobject(self, LeaderBoard, 'getPlayerIndex', 'self')
    checkobject(p, require('lib.stdlib.oop.player'), 'getPlayerIndex', 1)
--@end-debug@
    return Native.LeaderboardGetPlayerIndex(getUd(self), getUd(p))
end

---setLabel
---@param label string
---@return void
function LeaderBoard:setLabel(label)
--@debug@
    checkobject(self, LeaderBoard, 'setLabel', 'self')
    checktype(label, 'string', 'setLabel', 1)
--@end-debug@
    return Native.LeaderboardSetLabel(getUd(self), label)
end

---getLabelText
---@return string
function LeaderBoard:getLabelText()
--@debug@
    checkobject(self, LeaderBoard, 'getLabelText', 'self')
--@end-debug@
    return Native.LeaderboardGetLabelText(getUd(self))
end

---setLabelColor
---@param red integer
---@param green integer
---@param blue integer
---@param alpha integer
---@return void
function LeaderBoard:setLabelColor(red, green, blue, alpha)
--@debug@
    checkobject(self, LeaderBoard, 'setLabelColor', 'self')
    checktype(red, 'integer', 'setLabelColor', 1)
    checktype(green, 'integer', 'setLabelColor', 2)
    checktype(blue, 'integer', 'setLabelColor', 3)
    checktype(alpha, 'integer', 'setLabelColor', 4)
--@end-debug@
    return Native.LeaderboardSetLabelColor(getUd(self), red, green, blue, alpha)
end

---setValueColor
---@param red integer
---@param green integer
---@param blue integer
---@param alpha integer
---@return void
function LeaderBoard:setValueColor(red, green, blue, alpha)
--@debug@
    checkobject(self, LeaderBoard, 'setValueColor', 'self')
    checktype(red, 'integer', 'setValueColor', 1)
    checktype(green, 'integer', 'setValueColor', 2)
    checktype(blue, 'integer', 'setValueColor', 3)
    checktype(alpha, 'integer', 'setValueColor', 4)
--@end-debug@
    return Native.LeaderboardSetValueColor(getUd(self), red, green, blue, alpha)
end

---setStyle
---@param showLabel boolean
---@param showNames boolean
---@param showValues boolean
---@param showIcons boolean
---@return void
function LeaderBoard:setStyle(showLabel, showNames, showValues, showIcons)
--@debug@
    checkobject(self, LeaderBoard, 'setStyle', 'self')
    checktype(showLabel, 'boolean', 'setStyle', 1)
    checktype(showNames, 'boolean', 'setStyle', 2)
    checktype(showValues, 'boolean', 'setStyle', 3)
    checktype(showIcons, 'boolean', 'setStyle', 4)
--@end-debug@
    return Native.LeaderboardSetStyle(getUd(self), showLabel, showNames, showValues, showIcons)
end

---setItemValue
---@param item integer
---@param val integer
---@return void
function LeaderBoard:setItemValue(item, val)
--@debug@
    checkobject(self, LeaderBoard, 'setItemValue', 'self')
    checktype(item, 'integer', 'setItemValue', 1)
    checktype(val, 'integer', 'setItemValue', 2)
--@end-debug@
    return Native.LeaderboardSetItemValue(getUd(self), item, val)
end

---setItemLabel
---@param item integer
---@param val string
---@return void
function LeaderBoard:setItemLabel(item, val)
--@debug@
    checkobject(self, LeaderBoard, 'setItemLabel', 'self')
    checktype(item, 'integer', 'setItemLabel', 1)
    checktype(val, 'string', 'setItemLabel', 2)
--@end-debug@
    return Native.LeaderboardSetItemLabel(getUd(self), item, val)
end

---setItemStyle
---@param item integer
---@param showLabel boolean
---@param showValue boolean
---@param showIcon boolean
---@return void
function LeaderBoard:setItemStyle(item, showLabel, showValue, showIcon)
--@debug@
    checkobject(self, LeaderBoard, 'setItemStyle', 'self')
    checktype(item, 'integer', 'setItemStyle', 1)
    checktype(showLabel, 'boolean', 'setItemStyle', 2)
    checktype(showValue, 'boolean', 'setItemStyle', 3)
    checktype(showIcon, 'boolean', 'setItemStyle', 4)
--@end-debug@
    return Native.LeaderboardSetItemStyle(getUd(self), item, showLabel, showValue, showIcon)
end

---setItemLabelColor
---@param item integer
---@param red integer
---@param green integer
---@param blue integer
---@param alpha integer
---@return void
function LeaderBoard:setItemLabelColor(item, red, green, blue, alpha)
--@debug@
    checkobject(self, LeaderBoard, 'setItemLabelColor', 'self')
    checktype(item, 'integer', 'setItemLabelColor', 1)
    checktype(red, 'integer', 'setItemLabelColor', 2)
    checktype(green, 'integer', 'setItemLabelColor', 3)
    checktype(blue, 'integer', 'setItemLabelColor', 4)
    checktype(alpha, 'integer', 'setItemLabelColor', 5)
--@end-debug@
    return Native.LeaderboardSetItemLabelColor(getUd(self), item, red, green, blue, alpha)
end

---setItemValueColor
---@param item integer
---@param red integer
---@param green integer
---@param blue integer
---@param alpha integer
---@return void
function LeaderBoard:setItemValueColor(item, red, green, blue, alpha)
--@debug@
    checkobject(self, LeaderBoard, 'setItemValueColor', 'self')
    checktype(item, 'integer', 'setItemValueColor', 1)
    checktype(red, 'integer', 'setItemValueColor', 2)
    checktype(green, 'integer', 'setItemValueColor', 3)
    checktype(blue, 'integer', 'setItemValueColor', 4)
    checktype(alpha, 'integer', 'setItemValueColor', 5)
--@end-debug@
    return Native.LeaderboardSetItemValueColor(getUd(self), item, red, green, blue, alpha)
end

return LeaderBoard]]

P['lib/stdlib/oop/_generated/_lightning.lua'] = [[local Native = require('lib.stdlib.native')

---@class Lightning : Handle
local Lightning = class('Lightning', require('lib.stdlib.oop.handle'))

---destructor
---@return boolean
function Lightning:destructor()
--@debug@
    checkobject(self, Lightning, 'destructor', 'self')
--@end-debug@
    return Native.DestroyLightning(getUd(self))
end

---<**_DEPRECATED_**> destroy
---@return void
function Lightning:destroy()
--@debug@
    deprecated('Lightning.destroy', 'Lightning.delete')
--@end-debug@
    return self:delete()
end

---move
---@param checkVisibility boolean
---@param x1 float
---@param y1 float
---@param x2 float
---@param y2 float
---@return boolean
function Lightning:move(checkVisibility, x1, y1, x2, y2)
--@debug@
    checkobject(self, Lightning, 'move', 'self')
    checktype(checkVisibility, 'boolean', 'move', 1)
    checktype(x1, 'float', 'move', 2)
    checktype(y1, 'float', 'move', 3)
    checktype(x2, 'float', 'move', 4)
    checktype(y2, 'float', 'move', 5)
--@end-debug@
    return Native.MoveLightning(getUd(self), checkVisibility, x1, y1, x2, y2)
end

---moveEx
---@param checkVisibility boolean
---@param x1 float
---@param y1 float
---@param z1 float
---@param x2 float
---@param y2 float
---@param z2 float
---@return boolean
function Lightning:moveEx(checkVisibility, x1, y1, z1, x2, y2, z2)
--@debug@
    checkobject(self, Lightning, 'moveEx', 'self')
    checktype(checkVisibility, 'boolean', 'moveEx', 1)
    checktype(x1, 'float', 'moveEx', 2)
    checktype(y1, 'float', 'moveEx', 3)
    checktype(z1, 'float', 'moveEx', 4)
    checktype(x2, 'float', 'moveEx', 5)
    checktype(y2, 'float', 'moveEx', 6)
    checktype(z2, 'float', 'moveEx', 7)
--@end-debug@
    return Native.MoveLightningEx(getUd(self), checkVisibility, x1, y1, z1, x2, y2, z2)
end

---getColorA
---@return float
function Lightning:getColorA()
--@debug@
    checkobject(self, Lightning, 'getColorA', 'self')
--@end-debug@
    return Native.GetLightningColorA(getUd(self))
end

---getColorR
---@return float
function Lightning:getColorR()
--@debug@
    checkobject(self, Lightning, 'getColorR', 'self')
--@end-debug@
    return Native.GetLightningColorR(getUd(self))
end

---getColorG
---@return float
function Lightning:getColorG()
--@debug@
    checkobject(self, Lightning, 'getColorG', 'self')
--@end-debug@
    return Native.GetLightningColorG(getUd(self))
end

---getColorB
---@return float
function Lightning:getColorB()
--@debug@
    checkobject(self, Lightning, 'getColorB', 'self')
--@end-debug@
    return Native.GetLightningColorB(getUd(self))
end

---setColor
---@param r float
---@param g float
---@param b float
---@param a float
---@return boolean
function Lightning:setColor(r, g, b, a)
--@debug@
    checkobject(self, Lightning, 'setColor', 'self')
    checktype(r, 'float', 'setColor', 1)
    checktype(g, 'float', 'setColor', 2)
    checktype(b, 'float', 'setColor', 3)
    checktype(a, 'float', 'setColor', 4)
--@end-debug@
    return Native.SetLightningColor(getUd(self), r, g, b, a)
end

return Lightning]]

P['lib/stdlib/oop/_generated/_location.lua'] = [[local Native = require('lib.stdlib.native')

---@class Location : Agent
local Location = class('Location', require('lib.stdlib.oop.agent'))

---- compact same name native function
setmetatable(Location, table.merge(getmetatable(Location), {__call = function(_, ...)
    return Native.Location(...)
end}))

---<static> create
---@overload fun(vec: Vector): Location
---@param x float
---@param y float
---@return Location
function Location:create(x, y)
    if type(x) == 'table' then
        x, y = table.unpack(x)
    end
--@debug@
    checkclass(self, Location, 'create', 'self')
    checktype(x, 'float', 'create', 1)
    checktype(y, 'float', 'create', 2)
--@end-debug@
    return Location:fromUd(Native.Location(x, y))
end

return Location]]

P['lib/stdlib/oop/_generated/_multiboard.lua'] = [[local Native = require('lib.stdlib.native')

---@class MultiBoard : Agent
local MultiBoard = class('MultiBoard', require('lib.stdlib.oop.agent'))

---destructor
---@return void
function MultiBoard:destructor()
--@debug@
    checkobject(self, MultiBoard, 'destructor', 'self')
--@end-debug@
    return Native.DestroyMultiboard(getUd(self))
end

---<**_DEPRECATED_**> destroy
---@return void
function MultiBoard:destroy()
--@debug@
    deprecated('MultiBoard.destroy', 'MultiBoard.delete')
--@end-debug@
    return self:delete()
end

---<static> create
---@return MultiBoard
function MultiBoard:create()
    return MultiBoard:fromUd(Native.CreateMultiboard())
end

---display
---@param show boolean
---@return void
function MultiBoard:display(show)
--@debug@
    checkobject(self, MultiBoard, 'display', 'self')
    checktype(show, 'boolean', 'display', 1)
--@end-debug@
    return Native.MultiboardDisplay(getUd(self), show)
end

---isDisplayed
---@return boolean
function MultiBoard:isDisplayed()
--@debug@
    checkobject(self, MultiBoard, 'isDisplayed', 'self')
--@end-debug@
    return Native.IsMultiboardDisplayed(getUd(self))
end

---minimize
---@param minimize boolean
---@return void
function MultiBoard:minimize(minimize)
--@debug@
    checkobject(self, MultiBoard, 'minimize', 'self')
    checktype(minimize, 'boolean', 'minimize', 1)
--@end-debug@
    return Native.MultiboardMinimize(getUd(self), minimize)
end

---isMinimized
---@return boolean
function MultiBoard:isMinimized()
--@debug@
    checkobject(self, MultiBoard, 'isMinimized', 'self')
--@end-debug@
    return Native.IsMultiboardMinimized(getUd(self))
end

---clear
---@return void
function MultiBoard:clear()
--@debug@
    checkobject(self, MultiBoard, 'clear', 'self')
--@end-debug@
    return Native.MultiboardClear(getUd(self))
end

---setTitleText
---@param label string
---@return void
function MultiBoard:setTitleText(label)
--@debug@
    checkobject(self, MultiBoard, 'setTitleText', 'self')
    checktype(label, 'string', 'setTitleText', 1)
--@end-debug@
    return Native.MultiboardSetTitleText(getUd(self), label)
end

---getTitleText
---@return string
function MultiBoard:getTitleText()
--@debug@
    checkobject(self, MultiBoard, 'getTitleText', 'self')
--@end-debug@
    return Native.MultiboardGetTitleText(getUd(self))
end

---setTitleTextColor
---@param red integer
---@param green integer
---@param blue integer
---@param alpha integer
---@return void
function MultiBoard:setTitleTextColor(red, green, blue, alpha)
--@debug@
    checkobject(self, MultiBoard, 'setTitleTextColor', 'self')
    checktype(red, 'integer', 'setTitleTextColor', 1)
    checktype(green, 'integer', 'setTitleTextColor', 2)
    checktype(blue, 'integer', 'setTitleTextColor', 3)
    checktype(alpha, 'integer', 'setTitleTextColor', 4)
--@end-debug@
    return Native.MultiboardSetTitleTextColor(getUd(self), red, green, blue, alpha)
end

---getRowCount
---@return integer
function MultiBoard:getRowCount()
--@debug@
    checkobject(self, MultiBoard, 'getRowCount', 'self')
--@end-debug@
    return Native.MultiboardGetRowCount(getUd(self))
end

---getColumnCount
---@return integer
function MultiBoard:getColumnCount()
--@debug@
    checkobject(self, MultiBoard, 'getColumnCount', 'self')
--@end-debug@
    return Native.MultiboardGetColumnCount(getUd(self))
end

---setColumnCount
---@param count integer
---@return void
function MultiBoard:setColumnCount(count)
--@debug@
    checkobject(self, MultiBoard, 'setColumnCount', 'self')
    checktype(count, 'integer', 'setColumnCount', 1)
--@end-debug@
    return Native.MultiboardSetColumnCount(getUd(self), count)
end

---setRowCount
---@param count integer
---@return void
function MultiBoard:setRowCount(count)
--@debug@
    checkobject(self, MultiBoard, 'setRowCount', 'self')
    checktype(count, 'integer', 'setRowCount', 1)
--@end-debug@
    return Native.MultiboardSetRowCount(getUd(self), count)
end

---setItemsStyle
---@param showValues boolean
---@param showIcons boolean
---@return void
function MultiBoard:setItemsStyle(showValues, showIcons)
--@debug@
    checkobject(self, MultiBoard, 'setItemsStyle', 'self')
    checktype(showValues, 'boolean', 'setItemsStyle', 1)
    checktype(showIcons, 'boolean', 'setItemsStyle', 2)
--@end-debug@
    return Native.MultiboardSetItemsStyle(getUd(self), showValues, showIcons)
end

---setItemsValue
---@param value string
---@return void
function MultiBoard:setItemsValue(value)
--@debug@
    checkobject(self, MultiBoard, 'setItemsValue', 'self')
    checktype(value, 'string', 'setItemsValue', 1)
--@end-debug@
    return Native.MultiboardSetItemsValue(getUd(self), value)
end

---setItemsValueColor
---@param red integer
---@param green integer
---@param blue integer
---@param alpha integer
---@return void
function MultiBoard:setItemsValueColor(red, green, blue, alpha)
--@debug@
    checkobject(self, MultiBoard, 'setItemsValueColor', 'self')
    checktype(red, 'integer', 'setItemsValueColor', 1)
    checktype(green, 'integer', 'setItemsValueColor', 2)
    checktype(blue, 'integer', 'setItemsValueColor', 3)
    checktype(alpha, 'integer', 'setItemsValueColor', 4)
--@end-debug@
    return Native.MultiboardSetItemsValueColor(getUd(self), red, green, blue, alpha)
end

---setItemsWidth
---@param width float
---@return void
function MultiBoard:setItemsWidth(width)
--@debug@
    checkobject(self, MultiBoard, 'setItemsWidth', 'self')
    checktype(width, 'float', 'setItemsWidth', 1)
--@end-debug@
    return Native.MultiboardSetItemsWidth(getUd(self), width)
end

---setItemsIcon
---@param iconPath string
---@return void
function MultiBoard:setItemsIcon(iconPath)
--@debug@
    checkobject(self, MultiBoard, 'setItemsIcon', 'self')
    checktype(iconPath, 'string', 'setItemsIcon', 1)
--@end-debug@
    return Native.MultiboardSetItemsIcon(getUd(self), iconPath)
end

---getItem
---@param row integer
---@param column integer
---@return MultiBoardItem
function MultiBoard:getItem(row, column)
--@debug@
    checkobject(self, MultiBoard, 'getItem', 'self')
    checktype(row, 'integer', 'getItem', 1)
    checktype(column, 'integer', 'getItem', 2)
--@end-debug@
    return require('lib.stdlib.oop.multiboarditem'):fromUd(Native.MultiboardGetItem(getUd(self), row, column))
end

return MultiBoard]]

P['lib/stdlib/oop/_generated/_multiboarditem.lua'] = [[local Native = require('lib.stdlib.native')

---@class MultiBoardItem : Agent
local MultiBoardItem = class('MultiBoardItem', require('lib.stdlib.oop.agent'))

---release
---@return void
function MultiBoardItem:release()
--@debug@
    checkobject(self, MultiBoardItem, 'release', 'self')
--@end-debug@
    return Native.MultiboardReleaseItem(getUd(self))
end

---setStyle
---@param showValue boolean
---@param showIcon boolean
---@return void
function MultiBoardItem:setStyle(showValue, showIcon)
--@debug@
    checkobject(self, MultiBoardItem, 'setStyle', 'self')
    checktype(showValue, 'boolean', 'setStyle', 1)
    checktype(showIcon, 'boolean', 'setStyle', 2)
--@end-debug@
    return Native.MultiboardSetItemStyle(getUd(self), showValue, showIcon)
end

---setValue
---@param val string
---@return void
function MultiBoardItem:setValue(val)
--@debug@
    checkobject(self, MultiBoardItem, 'setValue', 'self')
    checktype(val, 'string', 'setValue', 1)
--@end-debug@
    return Native.MultiboardSetItemValue(getUd(self), val)
end

---setValueColor
---@param red integer
---@param green integer
---@param blue integer
---@param alpha integer
---@return void
function MultiBoardItem:setValueColor(red, green, blue, alpha)
--@debug@
    checkobject(self, MultiBoardItem, 'setValueColor', 'self')
    checktype(red, 'integer', 'setValueColor', 1)
    checktype(green, 'integer', 'setValueColor', 2)
    checktype(blue, 'integer', 'setValueColor', 3)
    checktype(alpha, 'integer', 'setValueColor', 4)
--@end-debug@
    return Native.MultiboardSetItemValueColor(getUd(self), red, green, blue, alpha)
end

---setWidth
---@param width float
---@return void
function MultiBoardItem:setWidth(width)
--@debug@
    checkobject(self, MultiBoardItem, 'setWidth', 'self')
    checktype(width, 'float', 'setWidth', 1)
--@end-debug@
    return Native.MultiboardSetItemWidth(getUd(self), width)
end

---setIcon
---@param iconFileName string
---@return void
function MultiBoardItem:setIcon(iconFileName)
--@debug@
    checkobject(self, MultiBoardItem, 'setIcon', 'self')
    checktype(iconFileName, 'string', 'setIcon', 1)
--@end-debug@
    return Native.MultiboardSetItemIcon(getUd(self), iconFileName)
end

return MultiBoardItem]]

P['lib/stdlib/oop/_generated/_player.lua'] = [[local Native = require('lib.stdlib.native')

---@class Player : Agent
local Player = class('Player', require('lib.stdlib.oop.agent'))

---- compact same name native function
setmetatable(Player, table.merge(getmetatable(Player), {__call = function(_, ...)
    return Native.Player(...)
end}))

---<static> get
---@param number integer
---@return Player
function Player:get(number)
--@debug@
    checkclass(self, Player, 'get', 'self')
    checktype(number, 'integer', 'get', 1)
--@end-debug@
    return Player:fromUd(Native.Player(number))
end

---setTeam
---@param team integer
---@return void
function Player:setTeam(team)
--@debug@
    checkobject(self, Player, 'setTeam', 'self')
    checktype(team, 'integer', 'setTeam', 1)
--@end-debug@
    return Native.SetPlayerTeam(getUd(self), team)
end

---setStartLocation
---@param startLocIndex integer
---@return void
function Player:setStartLocation(startLocIndex)
--@debug@
    checkobject(self, Player, 'setStartLocation', 'self')
    checktype(startLocIndex, 'integer', 'setStartLocation', 1)
--@end-debug@
    return Native.SetPlayerStartLocation(getUd(self), startLocIndex)
end

---forceStartLocation
---@param startLocIndex integer
---@return void
function Player:forceStartLocation(startLocIndex)
--@debug@
    checkobject(self, Player, 'forceStartLocation', 'self')
    checktype(startLocIndex, 'integer', 'forceStartLocation', 1)
--@end-debug@
    return Native.ForcePlayerStartLocation(getUd(self), startLocIndex)
end

---setColor
---@param color PlayerColor
---@return void
function Player:setColor(color)
--@debug@
    checkobject(self, Player, 'setColor', 'self')
    checkuserdata(color, 'playercolor', 'setColor', 1)
--@end-debug@
    return Native.SetPlayerColor(getUd(self), color)
end

---setPlayerAlliance
---@param otherPlayer Player
---@param allianceSetting AllianceType
---@param value boolean
---@return void
function Player:setPlayerAlliance(otherPlayer, allianceSetting, value)
--@debug@
    checkobject(self, Player, 'setPlayerAlliance', 'self')
    checkobject(otherPlayer, require('lib.stdlib.oop.player'), 'setPlayerAlliance', 1)
    checkuserdata(allianceSetting, 'alliancetype', 'setPlayerAlliance', 2)
    checktype(value, 'boolean', 'setPlayerAlliance', 3)
--@end-debug@
    return Native.SetPlayerAlliance(getUd(self), getUd(otherPlayer), allianceSetting, value)
end

---setPlayerTaxRate
---@param otherPlayer Player
---@param resource PlayerState
---@param rate integer
---@return void
function Player:setPlayerTaxRate(otherPlayer, resource, rate)
--@debug@
    checkobject(self, Player, 'setPlayerTaxRate', 'self')
    checkobject(otherPlayer, require('lib.stdlib.oop.player'), 'setPlayerTaxRate', 1)
    checkuserdata(resource, 'playerstate', 'setPlayerTaxRate', 2)
    checktype(rate, 'integer', 'setPlayerTaxRate', 3)
--@end-debug@
    return Native.SetPlayerTaxRate(getUd(self), getUd(otherPlayer), resource, rate)
end

---setRacePreference
---@param racePreference RacePreference
---@return void
function Player:setRacePreference(racePreference)
--@debug@
    checkobject(self, Player, 'setRacePreference', 'self')
    checkuserdata(racePreference, 'racepreference', 'setRacePreference', 1)
--@end-debug@
    return Native.SetPlayerRacePreference(getUd(self), racePreference)
end

---setRaceSelectable
---@param value boolean
---@return void
function Player:setRaceSelectable(value)
--@debug@
    checkobject(self, Player, 'setRaceSelectable', 'self')
    checktype(value, 'boolean', 'setRaceSelectable', 1)
--@end-debug@
    return Native.SetPlayerRaceSelectable(getUd(self), value)
end

---setController
---@param controlType MapControl
---@return void
function Player:setController(controlType)
--@debug@
    checkobject(self, Player, 'setController', 'self')
    checkuserdata(controlType, 'mapcontrol', 'setController', 1)
--@end-debug@
    return Native.SetPlayerController(getUd(self), controlType)
end

---setName
---@param name string
---@return void
function Player:setName(name)
--@debug@
    checkobject(self, Player, 'setName', 'self')
    checktype(name, 'string', 'setName', 1)
--@end-debug@
    return Native.SetPlayerName(getUd(self), name)
end

---setOnScoreScreen
---@param flag boolean
---@return void
function Player:setOnScoreScreen(flag)
--@debug@
    checkobject(self, Player, 'setOnScoreScreen', 'self')
    checktype(flag, 'boolean', 'setOnScoreScreen', 1)
--@end-debug@
    return Native.SetPlayerOnScoreScreen(getUd(self), flag)
end

---getTeam
---@return integer
function Player:getTeam()
--@debug@
    checkobject(self, Player, 'getTeam', 'self')
--@end-debug@
    return Native.GetPlayerTeam(getUd(self))
end

---getStartLocation
---@return integer
function Player:getStartLocation()
--@debug@
    checkobject(self, Player, 'getStartLocation', 'self')
--@end-debug@
    return Native.GetPlayerStartLocation(getUd(self))
end

---getColor
---@return PlayerColor
function Player:getColor()
--@debug@
    checkobject(self, Player, 'getColor', 'self')
--@end-debug@
    return Native.GetPlayerColor(getUd(self))
end

---getSelectable
---@return boolean
function Player:getSelectable()
--@debug@
    checkobject(self, Player, 'getSelectable', 'self')
--@end-debug@
    return Native.GetPlayerSelectable(getUd(self))
end

---getController
---@return MapControl
function Player:getController()
--@debug@
    checkobject(self, Player, 'getController', 'self')
--@end-debug@
    return Native.GetPlayerController(getUd(self))
end

---getSlotState
---@return PlayerSlotState
function Player:getSlotState()
--@debug@
    checkobject(self, Player, 'getSlotState', 'self')
--@end-debug@
    return Native.GetPlayerSlotState(getUd(self))
end

---getPlayerTaxRate
---@param otherPlayer Player
---@param resource PlayerState
---@return integer
function Player:getPlayerTaxRate(otherPlayer, resource)
--@debug@
    checkobject(self, Player, 'getPlayerTaxRate', 'self')
    checkobject(otherPlayer, require('lib.stdlib.oop.player'), 'getPlayerTaxRate', 1)
    checkuserdata(resource, 'playerstate', 'getPlayerTaxRate', 2)
--@end-debug@
    return Native.GetPlayerTaxRate(getUd(self), getUd(otherPlayer), resource)
end

---isRacePrefSet
---@param pref RacePreference
---@return boolean
function Player:isRacePrefSet(pref)
--@debug@
    checkobject(self, Player, 'isRacePrefSet', 'self')
    checkuserdata(pref, 'racepreference', 'isRacePrefSet', 1)
--@end-debug@
    return Native.IsPlayerRacePrefSet(getUd(self), pref)
end

---getName
---@return string
function Player:getName()
--@debug@
    checkobject(self, Player, 'getName', 'self')
--@end-debug@
    return Native.GetPlayerName(getUd(self))
end

---getTournamentScore
---@return integer
function Player:getTournamentScore()
--@debug@
    checkobject(self, Player, 'getTournamentScore', 'self')
--@end-debug@
    return Native.GetTournamentScore(getUd(self))
end

---issueNeutralImmediateOrder
---@param neutralStructure Unit
---@param unitToBuild string
---@return boolean
function Player:issueNeutralImmediateOrder(neutralStructure, unitToBuild)
--@debug@
    checkobject(self, Player, 'issueNeutralImmediateOrder', 'self')
    checkobject(neutralStructure, require('lib.stdlib.oop.unit'), 'issueNeutralImmediateOrder', 1)
    checktype(unitToBuild, 'string', 'issueNeutralImmediateOrder', 2)
--@end-debug@
    return Native.IssueNeutralImmediateOrder(getUd(self), getUd(neutralStructure), unitToBuild)
end

---issueNeutralImmediateOrderById
---@param neutralStructure Unit
---@param unitId integer
---@return boolean
function Player:issueNeutralImmediateOrderById(neutralStructure, unitId)
--@debug@
    checkobject(self, Player, 'issueNeutralImmediateOrderById', 'self')
    checkobject(neutralStructure, require('lib.stdlib.oop.unit'), 'issueNeutralImmediateOrderById', 1)
    checktype(unitId, 'integer', 'issueNeutralImmediateOrderById', 2)
--@end-debug@
    return Native.IssueNeutralImmediateOrderById(getUd(self), getUd(neutralStructure), unitId)
end

---issueNeutralPointOrder
---@overload fun(neutralStructure: Unit, unitToBuild: string, vec: Vector): boolean
---@param neutralStructure Unit
---@param unitToBuild string
---@param x float
---@param y float
---@return boolean
function Player:issueNeutralPointOrder(neutralStructure, unitToBuild, x, y)
    if type(x) == 'table' then
        x, y = table.unpack(x)
    end
--@debug@
    checkobject(self, Player, 'issueNeutralPointOrder', 'self')
    checkobject(neutralStructure, require('lib.stdlib.oop.unit'), 'issueNeutralPointOrder', 1)
    checktype(unitToBuild, 'string', 'issueNeutralPointOrder', 2)
    checktype(x, 'float', 'issueNeutralPointOrder', 3)
    checktype(y, 'float', 'issueNeutralPointOrder', 4)
--@end-debug@
    return Native.IssueNeutralPointOrder(getUd(self), getUd(neutralStructure), unitToBuild, x, y)
end

---issueNeutralPointOrderById
---@overload fun(neutralStructure: Unit, unitId: integer, vec: Vector): boolean
---@param neutralStructure Unit
---@param unitId integer
---@param x float
---@param y float
---@return boolean
function Player:issueNeutralPointOrderById(neutralStructure, unitId, x, y)
    if type(x) == 'table' then
        x, y = table.unpack(x)
    end
--@debug@
    checkobject(self, Player, 'issueNeutralPointOrderById', 'self')
    checkobject(neutralStructure, require('lib.stdlib.oop.unit'), 'issueNeutralPointOrderById', 1)
    checktype(unitId, 'integer', 'issueNeutralPointOrderById', 2)
    checktype(x, 'float', 'issueNeutralPointOrderById', 3)
    checktype(y, 'float', 'issueNeutralPointOrderById', 4)
--@end-debug@
    return Native.IssueNeutralPointOrderById(getUd(self), getUd(neutralStructure), unitId, x, y)
end

---issueNeutralTargetOrder
---@param neutralStructure Unit
---@param unitToBuild string
---@param target Widget
---@return boolean
function Player:issueNeutralTargetOrder(neutralStructure, unitToBuild, target)
--@debug@
    checkobject(self, Player, 'issueNeutralTargetOrder', 'self')
    checkobject(neutralStructure, require('lib.stdlib.oop.unit'), 'issueNeutralTargetOrder', 1)
    checktype(unitToBuild, 'string', 'issueNeutralTargetOrder', 2)
    checkobject(target, require('lib.stdlib.oop.widget'), 'issueNeutralTargetOrder', 3)
--@end-debug@
    return Native.IssueNeutralTargetOrder(getUd(self), getUd(neutralStructure), unitToBuild, getUd(target))
end

---issueNeutralTargetOrderById
---@param neutralStructure Unit
---@param unitId integer
---@param target Widget
---@return boolean
function Player:issueNeutralTargetOrderById(neutralStructure, unitId, target)
--@debug@
    checkobject(self, Player, 'issueNeutralTargetOrderById', 'self')
    checkobject(neutralStructure, require('lib.stdlib.oop.unit'), 'issueNeutralTargetOrderById', 1)
    checktype(unitId, 'integer', 'issueNeutralTargetOrderById', 2)
    checkobject(target, require('lib.stdlib.oop.widget'), 'issueNeutralTargetOrderById', 3)
--@end-debug@
    return Native.IssueNeutralTargetOrderById(getUd(self), getUd(neutralStructure), unitId, getUd(target))
end

---isPlayerAlly
---@param otherPlayer Player
---@return boolean
function Player:isPlayerAlly(otherPlayer)
--@debug@
    checkobject(self, Player, 'isPlayerAlly', 'self')
    checkobject(otherPlayer, require('lib.stdlib.oop.player'), 'isPlayerAlly', 1)
--@end-debug@
    return Native.IsPlayerAlly(getUd(self), getUd(otherPlayer))
end

---isPlayerEnemy
---@param otherPlayer Player
---@return boolean
function Player:isPlayerEnemy(otherPlayer)
--@debug@
    checkobject(self, Player, 'isPlayerEnemy', 'self')
    checkobject(otherPlayer, require('lib.stdlib.oop.player'), 'isPlayerEnemy', 1)
--@end-debug@
    return Native.IsPlayerEnemy(getUd(self), getUd(otherPlayer))
end

---isInForce
---@param force Force
---@return boolean
function Player:isInForce(force)
--@debug@
    checkobject(self, Player, 'isInForce', 'self')
    checkobject(force, require('lib.stdlib.oop.force'), 'isInForce', 1)
--@end-debug@
    return Native.IsPlayerInForce(getUd(self), getUd(force))
end

---isObserver
---@return boolean
function Player:isObserver()
--@debug@
    checkobject(self, Player, 'isObserver', 'self')
--@end-debug@
    return Native.IsPlayerObserver(getUd(self))
end

---getRace
---@return Race
function Player:getRace()
--@debug@
    checkobject(self, Player, 'getRace', 'self')
--@end-debug@
    return Native.GetPlayerRace(getUd(self))
end

---getId
---@return integer
function Player:getId()
--@debug@
    checkobject(self, Player, 'getId', 'self')
--@end-debug@
    return Native.GetPlayerId(getUd(self))
end

---getUnitCount
---@param includeIncomplete boolean
---@return integer
function Player:getUnitCount(includeIncomplete)
--@debug@
    checkobject(self, Player, 'getUnitCount', 'self')
    checktype(includeIncomplete, 'boolean', 'getUnitCount', 1)
--@end-debug@
    return Native.GetPlayerUnitCount(getUd(self), includeIncomplete)
end

---getTypedUnitCount
---@param unitName string
---@param includeIncomplete boolean
---@param includeUpgrades boolean
---@return integer
function Player:getTypedUnitCount(unitName, includeIncomplete, includeUpgrades)
--@debug@
    checkobject(self, Player, 'getTypedUnitCount', 'self')
    checktype(unitName, 'string', 'getTypedUnitCount', 1)
    checktype(includeIncomplete, 'boolean', 'getTypedUnitCount', 2)
    checktype(includeUpgrades, 'boolean', 'getTypedUnitCount', 3)
--@end-debug@
    return Native.GetPlayerTypedUnitCount(getUd(self), unitName, includeIncomplete, includeUpgrades)
end

---getStructureCount
---@param includeIncomplete boolean
---@return integer
function Player:getStructureCount(includeIncomplete)
--@debug@
    checkobject(self, Player, 'getStructureCount', 'self')
    checktype(includeIncomplete, 'boolean', 'getStructureCount', 1)
--@end-debug@
    return Native.GetPlayerStructureCount(getUd(self), includeIncomplete)
end

---getState
---@param playerState PlayerState
---@return integer
function Player:getState(playerState)
--@debug@
    checkobject(self, Player, 'getState', 'self')
    checkuserdata(playerState, 'playerstate', 'getState', 1)
--@end-debug@
    return Native.GetPlayerState(getUd(self), playerState)
end

---getScore
---@param playerScore PlayerScore
---@return integer
function Player:getScore(playerScore)
--@debug@
    checkobject(self, Player, 'getScore', 'self')
    checkuserdata(playerScore, 'playerscore', 'getScore', 1)
--@end-debug@
    return Native.GetPlayerScore(getUd(self), playerScore)
end

---getPlayerAlliance
---@param otherPlayer Player
---@param allianceSetting AllianceType
---@return boolean
function Player:getPlayerAlliance(otherPlayer, allianceSetting)
--@debug@
    checkobject(self, Player, 'getPlayerAlliance', 'self')
    checkobject(otherPlayer, require('lib.stdlib.oop.player'), 'getPlayerAlliance', 1)
    checkuserdata(allianceSetting, 'alliancetype', 'getPlayerAlliance', 2)
--@end-debug@
    return Native.GetPlayerAlliance(getUd(self), getUd(otherPlayer), allianceSetting)
end

---getHandicap
---@return float
function Player:getHandicap()
--@debug@
    checkobject(self, Player, 'getHandicap', 'self')
--@end-debug@
    return Native.GetPlayerHandicap(getUd(self))
end

---getHandicapXP
---@return float
function Player:getHandicapXP()
--@debug@
    checkobject(self, Player, 'getHandicapXP', 'self')
--@end-debug@
    return Native.GetPlayerHandicapXP(getUd(self))
end

---getHandicapReviveTime
---@return float
function Player:getHandicapReviveTime()
--@debug@
    checkobject(self, Player, 'getHandicapReviveTime', 'self')
--@end-debug@
    return Native.GetPlayerHandicapReviveTime(getUd(self))
end

---getHandicapDamage
---@return float
function Player:getHandicapDamage()
--@debug@
    checkobject(self, Player, 'getHandicapDamage', 'self')
--@end-debug@
    return Native.GetPlayerHandicapDamage(getUd(self))
end

---setHandicap
---@param handicap float
---@return void
function Player:setHandicap(handicap)
--@debug@
    checkobject(self, Player, 'setHandicap', 'self')
    checktype(handicap, 'float', 'setHandicap', 1)
--@end-debug@
    return Native.SetPlayerHandicap(getUd(self), handicap)
end

---setHandicapXP
---@param handicap float
---@return void
function Player:setHandicapXP(handicap)
--@debug@
    checkobject(self, Player, 'setHandicapXP', 'self')
    checktype(handicap, 'float', 'setHandicapXP', 1)
--@end-debug@
    return Native.SetPlayerHandicapXP(getUd(self), handicap)
end

---setHandicapReviveTime
---@param handicap float
---@return void
function Player:setHandicapReviveTime(handicap)
--@debug@
    checkobject(self, Player, 'setHandicapReviveTime', 'self')
    checktype(handicap, 'float', 'setHandicapReviveTime', 1)
--@end-debug@
    return Native.SetPlayerHandicapReviveTime(getUd(self), handicap)
end

---setHandicapDamage
---@param handicap float
---@return void
function Player:setHandicapDamage(handicap)
--@debug@
    checkobject(self, Player, 'setHandicapDamage', 'self')
    checktype(handicap, 'float', 'setHandicapDamage', 1)
--@end-debug@
    return Native.SetPlayerHandicapDamage(getUd(self), handicap)
end

---setTechMaxAllowed
---@param techid integer
---@param maximum integer
---@return void
function Player:setTechMaxAllowed(techid, maximum)
--@debug@
    checkobject(self, Player, 'setTechMaxAllowed', 'self')
    checktype(techid, 'integer', 'setTechMaxAllowed', 1)
    checktype(maximum, 'integer', 'setTechMaxAllowed', 2)
--@end-debug@
    return Native.SetPlayerTechMaxAllowed(getUd(self), techid, maximum)
end

---getTechMaxAllowed
---@param techid integer
---@return integer
function Player:getTechMaxAllowed(techid)
--@debug@
    checkobject(self, Player, 'getTechMaxAllowed', 'self')
    checktype(techid, 'integer', 'getTechMaxAllowed', 1)
--@end-debug@
    return Native.GetPlayerTechMaxAllowed(getUd(self), techid)
end

---addTechResearched
---@param techid integer
---@param levels integer
---@return void
function Player:addTechResearched(techid, levels)
--@debug@
    checkobject(self, Player, 'addTechResearched', 'self')
    checktype(techid, 'integer', 'addTechResearched', 1)
    checktype(levels, 'integer', 'addTechResearched', 2)
--@end-debug@
    return Native.AddPlayerTechResearched(getUd(self), techid, levels)
end

---setTechResearched
---@param techid integer
---@param setToLevel integer
---@return void
function Player:setTechResearched(techid, setToLevel)
--@debug@
    checkobject(self, Player, 'setTechResearched', 'self')
    checktype(techid, 'integer', 'setTechResearched', 1)
    checktype(setToLevel, 'integer', 'setTechResearched', 2)
--@end-debug@
    return Native.SetPlayerTechResearched(getUd(self), techid, setToLevel)
end

---getTechResearched
---@param techid integer
---@param specificonly boolean
---@return boolean
function Player:getTechResearched(techid, specificonly)
--@debug@
    checkobject(self, Player, 'getTechResearched', 'self')
    checktype(techid, 'integer', 'getTechResearched', 1)
    checktype(specificonly, 'boolean', 'getTechResearched', 2)
--@end-debug@
    return Native.GetPlayerTechResearched(getUd(self), techid, specificonly)
end

---getTechCount
---@param techid integer
---@param specificonly boolean
---@return integer
function Player:getTechCount(techid, specificonly)
--@debug@
    checkobject(self, Player, 'getTechCount', 'self')
    checktype(techid, 'integer', 'getTechCount', 1)
    checktype(specificonly, 'boolean', 'getTechCount', 2)
--@end-debug@
    return Native.GetPlayerTechCount(getUd(self), techid, specificonly)
end

---setUnitsOwner
---@param owner integer
---@return void
function Player:setUnitsOwner(owner)
--@debug@
    checkobject(self, Player, 'setUnitsOwner', 'self')
    checktype(owner, 'integer', 'setUnitsOwner', 1)
--@end-debug@
    return Native.SetPlayerUnitsOwner(getUd(self), owner)
end

---cripple
---@param toWhichPlayers Force
---@param flag boolean
---@return void
function Player:cripple(toWhichPlayers, flag)
--@debug@
    checkobject(self, Player, 'cripple', 'self')
    checkobject(toWhichPlayers, require('lib.stdlib.oop.force'), 'cripple', 1)
    checktype(flag, 'boolean', 'cripple', 2)
--@end-debug@
    return Native.CripplePlayer(getUd(self), getUd(toWhichPlayers), flag)
end

---setAbilityAvailable
---@param abilid integer
---@param avail boolean
---@return void
function Player:setAbilityAvailable(abilid, avail)
--@debug@
    checkobject(self, Player, 'setAbilityAvailable', 'self')
    checktype(abilid, 'integer', 'setAbilityAvailable', 1)
    checktype(avail, 'boolean', 'setAbilityAvailable', 2)
--@end-debug@
    return Native.SetPlayerAbilityAvailable(getUd(self), abilid, avail)
end

---setState
---@param playerState PlayerState
---@param value integer
---@return void
function Player:setState(playerState, value)
--@debug@
    checkobject(self, Player, 'setState', 'self')
    checkuserdata(playerState, 'playerstate', 'setState', 1)
    checktype(value, 'integer', 'setState', 2)
--@end-debug@
    return Native.SetPlayerState(getUd(self), playerState, value)
end

---remove
---@param gameResult PlayerGameResult
---@return void
function Player:remove(gameResult)
--@debug@
    checkobject(self, Player, 'remove', 'self')
    checkuserdata(gameResult, 'playergameresult', 'remove', 1)
--@end-debug@
    return Native.RemovePlayer(getUd(self), gameResult)
end

---cacheHeroData
---@return void
function Player:cacheHeroData()
--@debug@
    checkobject(self, Player, 'cacheHeroData', 'self')
--@end-debug@
    return Native.CachePlayerHeroData(getUd(self))
end

---setFogStateRect
---@param state FogState
---@param where Rect
---@param useSharedVision boolean
---@return void
function Player:setFogStateRect(state, where, useSharedVision)
--@debug@
    checkobject(self, Player, 'setFogStateRect', 'self')
    checkuserdata(state, 'fogstate', 'setFogStateRect', 1)
    checkobject(where, require('lib.stdlib.oop.rect'), 'setFogStateRect', 2)
    checktype(useSharedVision, 'boolean', 'setFogStateRect', 3)
--@end-debug@
    return Native.SetFogStateRect(getUd(self), state, getUd(where), useSharedVision)
end

---setFogStateRadius
---@overload fun(state: FogState, vec: Vector, radius: float, useSharedVision: boolean): void
---@param state FogState
---@param centerx float
---@param centerY float
---@param radius float
---@param useSharedVision boolean
---@return void
function Player:setFogStateRadius(state, centerx, centerY, radius, useSharedVision)
    if type(centerx) == 'table' then
        radius, useSharedVision = centerY, radius
        centerx, centerY = table.unpack(centerx)
    end
--@debug@
    checkobject(self, Player, 'setFogStateRadius', 'self')
    checkuserdata(state, 'fogstate', 'setFogStateRadius', 1)
    checktype(centerx, 'float', 'setFogStateRadius', 2)
    checktype(centerY, 'float', 'setFogStateRadius', 3)
    checktype(radius, 'float', 'setFogStateRadius', 4)
    checktype(useSharedVision, 'boolean', 'setFogStateRadius', 5)
--@end-debug@
    return Native.SetFogStateRadius(getUd(self), state, centerx, centerY, radius, useSharedVision)
end

---dialogDisplay
---@param dialog Dialog
---@param flag boolean
---@return void
function Player:dialogDisplay(dialog, flag)
--@debug@
    checkobject(self, Player, 'dialogDisplay', 'self')
    checkobject(dialog, require('lib.stdlib.oop.dialog'), 'dialogDisplay', 1)
    checktype(flag, 'boolean', 'dialogDisplay', 2)
--@end-debug@
    return Native.DialogDisplay(getUd(self), getUd(dialog), flag)
end

---displayTextTo
---@overload fun(vec: Vector, message: string): void
---@param x float
---@param y float
---@param message string
---@return void
function Player:displayTextTo(x, y, message)
    if type(x) == 'table' then
        message = y
        x, y = table.unpack(x)
    end
--@debug@
    checkobject(self, Player, 'displayTextTo', 'self')
    checktype(x, 'float', 'displayTextTo', 1)
    checktype(y, 'float', 'displayTextTo', 2)
    checktype(message, 'string', 'displayTextTo', 3)
--@end-debug@
    return Native.DisplayTextToPlayer(getUd(self), x, y, message)
end

---displayTimedTextTo
---@overload fun(vec: Vector, duration: float, message: string): void
---@param x float
---@param y float
---@param duration float
---@param message string
---@return void
function Player:displayTimedTextTo(x, y, duration, message)
    if type(x) == 'table' then
        duration, message = y, duration
        x, y = table.unpack(x)
    end
--@debug@
    checkobject(self, Player, 'displayTimedTextTo', 'self')
    checktype(x, 'float', 'displayTimedTextTo', 1)
    checktype(y, 'float', 'displayTimedTextTo', 2)
    checktype(duration, 'float', 'displayTimedTextTo', 3)
    checktype(message, 'string', 'displayTimedTextTo', 4)
--@end-debug@
    return Native.DisplayTimedTextToPlayer(getUd(self), x, y, duration, message)
end

---displayTimedTextFrom
---@overload fun(vec: Vector, duration: float, message: string): void
---@param x float
---@param y float
---@param duration float
---@param message string
---@return void
function Player:displayTimedTextFrom(x, y, duration, message)
    if type(x) == 'table' then
        duration, message = y, duration
        x, y = table.unpack(x)
    end
--@debug@
    checkobject(self, Player, 'displayTimedTextFrom', 'self')
    checktype(x, 'float', 'displayTimedTextFrom', 1)
    checktype(y, 'float', 'displayTimedTextFrom', 2)
    checktype(duration, 'float', 'displayTimedTextFrom', 3)
    checktype(message, 'string', 'displayTimedTextFrom', 4)
--@end-debug@
    return Native.DisplayTimedTextFromPlayer(getUd(self), x, y, duration, message)
end

---setLeaderboard
---@param lb LeaderBoard
---@return void
function Player:setLeaderboard(lb)
--@debug@
    checkobject(self, Player, 'setLeaderboard', 'self')
    checkobject(lb, require('lib.stdlib.oop.leaderboard'), 'setLeaderboard', 1)
--@end-debug@
    return Native.PlayerSetLeaderboard(getUd(self), getUd(lb))
end

---getLeaderboard
---@return LeaderBoard
function Player:getLeaderboard()
--@debug@
    checkobject(self, Player, 'getLeaderboard', 'self')
--@end-debug@
    return require('lib.stdlib.oop.leaderboard'):fromUd(Native.PlayerGetLeaderboard(getUd(self)))
end

---setBlight
---@overload fun(vec: Vector, radius: float, addBlight: boolean): void
---@param x float
---@param y float
---@param radius float
---@param addBlight boolean
---@return void
function Player:setBlight(x, y, radius, addBlight)
    if type(x) == 'table' then
        radius, addBlight = y, radius
        x, y = table.unpack(x)
    end
--@debug@
    checkobject(self, Player, 'setBlight', 'self')
    checktype(x, 'float', 'setBlight', 1)
    checktype(y, 'float', 'setBlight', 2)
    checktype(radius, 'float', 'setBlight', 3)
    checktype(addBlight, 'boolean', 'setBlight', 4)
--@end-debug@
    return Native.SetBlight(getUd(self), x, y, radius, addBlight)
end

---setBlightRect
---@param r Rect
---@param addBlight boolean
---@return void
function Player:setBlightRect(r, addBlight)
--@debug@
    checkobject(self, Player, 'setBlightRect', 'self')
    checkobject(r, require('lib.stdlib.oop.rect'), 'setBlightRect', 1)
    checktype(addBlight, 'boolean', 'setBlightRect', 2)
--@end-debug@
    return Native.SetBlightRect(getUd(self), getUd(r), addBlight)
end

---setBlightPoint
---@overload fun(vec: Vector, addBlight: boolean): void
---@param x float
---@param y float
---@param addBlight boolean
---@return void
function Player:setBlightPoint(x, y, addBlight)
    if type(x) == 'table' then
        addBlight = y
        x, y = table.unpack(x)
    end
--@debug@
    checkobject(self, Player, 'setBlightPoint', 'self')
    checktype(x, 'float', 'setBlightPoint', 1)
    checktype(y, 'float', 'setBlightPoint', 2)
    checktype(addBlight, 'boolean', 'setBlightPoint', 3)
--@end-debug@
    return Native.SetBlightPoint(getUd(self), x, y, addBlight)
end

---startMeleeAI
---@param script string
---@return void
function Player:startMeleeAI(script)
--@debug@
    checkobject(self, Player, 'startMeleeAI', 'self')
    checktype(script, 'string', 'startMeleeAI', 1)
--@end-debug@
    return Native.StartMeleeAI(getUd(self), script)
end

---startCampaignAI
---@param script string
---@return void
function Player:startCampaignAI(script)
--@debug@
    checkobject(self, Player, 'startCampaignAI', 'self')
    checktype(script, 'string', 'startCampaignAI', 1)
--@end-debug@
    return Native.StartCampaignAI(getUd(self), script)
end

---commandAI
---@param command integer
---@param data integer
---@return void
function Player:commandAI(command, data)
--@debug@
    checkobject(self, Player, 'commandAI', 'self')
    checktype(command, 'integer', 'commandAI', 1)
    checktype(data, 'integer', 'commandAI', 2)
--@end-debug@
    return Native.CommandAI(getUd(self), command, data)
end

---pauseCompAI
---@param pause boolean
---@return void
function Player:pauseCompAI(pause)
--@debug@
    checkobject(self, Player, 'pauseCompAI', 'self')
    checktype(pause, 'boolean', 'pauseCompAI', 1)
--@end-debug@
    return Native.PauseCompAI(getUd(self), pause)
end

---getAIDifficulty
---@return AiDifficulty
function Player:getAIDifficulty()
--@debug@
    checkobject(self, Player, 'getAIDifficulty', 'self')
--@end-debug@
    return Native.GetAIDifficulty(getUd(self))
end

---removeAllGuardPositions
---@return void
function Player:removeAllGuardPositions()
--@debug@
    checkobject(self, Player, 'removeAllGuardPositions', 'self')
--@end-debug@
    return Native.RemoveAllGuardPositions(getUd(self))
end

---decTechResearched
---@param techid integer
---@param levels integer
---@return void
function Player:decTechResearched(techid, levels)
--@debug@
    checkobject(self, Player, 'decTechResearched', 'self')
    checktype(techid, 'integer', 'decTechResearched', 1)
    checktype(levels, 'integer', 'decTechResearched', 2)
--@end-debug@
    return Native.BlzDecPlayerTechResearched(getUd(self), techid, levels)
end

---displayChatMessage
---@param recipient integer
---@param message string
---@return void
function Player:displayChatMessage(recipient, message)
--@debug@
    checkobject(self, Player, 'displayChatMessage', 'self')
    checktype(recipient, 'integer', 'displayChatMessage', 1)
    checktype(message, 'string', 'displayChatMessage', 2)
--@end-debug@
    return Native.BlzDisplayChatMessage(getUd(self), recipient, message)
end

---getTownHallCount
---@return integer
function Player:getTownHallCount()
--@debug@
    checkobject(self, Player, 'getTownHallCount', 'self')
--@end-debug@
    return Native.BlzGetPlayerTownHallCount(getUd(self))
end

return Player]]

P['lib/stdlib/oop/_generated/_quest.lua'] = [[local Native = require('lib.stdlib.native')

---@class Quest : Agent
local Quest = class('Quest', require('lib.stdlib.oop.agent'))

---destructor
---@return void
function Quest:destructor()
--@debug@
    checkobject(self, Quest, 'destructor', 'self')
--@end-debug@
    return Native.DestroyQuest(getUd(self))
end

---<**_DEPRECATED_**> destroy
---@return void
function Quest:destroy()
--@debug@
    deprecated('Quest.destroy', 'Quest.delete')
--@end-debug@
    return self:delete()
end

---<static> create
---@return Quest
function Quest:create()
    return Quest:fromUd(Native.CreateQuest())
end

---setTitle
---@param title string
---@return void
function Quest:setTitle(title)
--@debug@
    checkobject(self, Quest, 'setTitle', 'self')
    checktype(title, 'string', 'setTitle', 1)
--@end-debug@
    return Native.QuestSetTitle(getUd(self), title)
end

---setDescription
---@param description string
---@return void
function Quest:setDescription(description)
--@debug@
    checkobject(self, Quest, 'setDescription', 'self')
    checktype(description, 'string', 'setDescription', 1)
--@end-debug@
    return Native.QuestSetDescription(getUd(self), description)
end

---setIconPath
---@param iconPath string
---@return void
function Quest:setIconPath(iconPath)
--@debug@
    checkobject(self, Quest, 'setIconPath', 'self')
    checktype(iconPath, 'string', 'setIconPath', 1)
--@end-debug@
    return Native.QuestSetIconPath(getUd(self), iconPath)
end

---setRequired
---@param required boolean
---@return void
function Quest:setRequired(required)
--@debug@
    checkobject(self, Quest, 'setRequired', 'self')
    checktype(required, 'boolean', 'setRequired', 1)
--@end-debug@
    return Native.QuestSetRequired(getUd(self), required)
end

---setCompleted
---@param completed boolean
---@return void
function Quest:setCompleted(completed)
--@debug@
    checkobject(self, Quest, 'setCompleted', 'self')
    checktype(completed, 'boolean', 'setCompleted', 1)
--@end-debug@
    return Native.QuestSetCompleted(getUd(self), completed)
end

---setDiscovered
---@param discovered boolean
---@return void
function Quest:setDiscovered(discovered)
--@debug@
    checkobject(self, Quest, 'setDiscovered', 'self')
    checktype(discovered, 'boolean', 'setDiscovered', 1)
--@end-debug@
    return Native.QuestSetDiscovered(getUd(self), discovered)
end

---setFailed
---@param failed boolean
---@return void
function Quest:setFailed(failed)
--@debug@
    checkobject(self, Quest, 'setFailed', 'self')
    checktype(failed, 'boolean', 'setFailed', 1)
--@end-debug@
    return Native.QuestSetFailed(getUd(self), failed)
end

---setEnabled
---@param enabled boolean
---@return void
function Quest:setEnabled(enabled)
--@debug@
    checkobject(self, Quest, 'setEnabled', 'self')
    checktype(enabled, 'boolean', 'setEnabled', 1)
--@end-debug@
    return Native.QuestSetEnabled(getUd(self), enabled)
end

---isRequired
---@return boolean
function Quest:isRequired()
--@debug@
    checkobject(self, Quest, 'isRequired', 'self')
--@end-debug@
    return Native.IsQuestRequired(getUd(self))
end

---isCompleted
---@return boolean
function Quest:isCompleted()
--@debug@
    checkobject(self, Quest, 'isCompleted', 'self')
--@end-debug@
    return Native.IsQuestCompleted(getUd(self))
end

---isDiscovered
---@return boolean
function Quest:isDiscovered()
--@debug@
    checkobject(self, Quest, 'isDiscovered', 'self')
--@end-debug@
    return Native.IsQuestDiscovered(getUd(self))
end

---isFailed
---@return boolean
function Quest:isFailed()
--@debug@
    checkobject(self, Quest, 'isFailed', 'self')
--@end-debug@
    return Native.IsQuestFailed(getUd(self))
end

---isEnabled
---@return boolean
function Quest:isEnabled()
--@debug@
    checkobject(self, Quest, 'isEnabled', 'self')
--@end-debug@
    return Native.IsQuestEnabled(getUd(self))
end

---createItem
---@return QuestItem
function Quest:createItem()
--@debug@
    checkobject(self, Quest, 'createItem', 'self')
--@end-debug@
    return require('lib.stdlib.oop.questitem'):fromUd(Native.QuestCreateItem(getUd(self)))
end

return Quest]]

P['lib/stdlib/oop/_generated/_questitem.lua'] = [[local Native = require('lib.stdlib.native')

---@class QuestItem : Agent
local QuestItem = class('QuestItem', require('lib.stdlib.oop.agent'))

---setDescription
---@param description string
---@return void
function QuestItem:setDescription(description)
--@debug@
    checkobject(self, QuestItem, 'setDescription', 'self')
    checktype(description, 'string', 'setDescription', 1)
--@end-debug@
    return Native.QuestItemSetDescription(getUd(self), description)
end

---setCompleted
---@param completed boolean
---@return void
function QuestItem:setCompleted(completed)
--@debug@
    checkobject(self, QuestItem, 'setCompleted', 'self')
    checktype(completed, 'boolean', 'setCompleted', 1)
--@end-debug@
    return Native.QuestItemSetCompleted(getUd(self), completed)
end

---isCompleted
---@return boolean
function QuestItem:isCompleted()
--@debug@
    checkobject(self, QuestItem, 'isCompleted', 'self')
--@end-debug@
    return Native.IsQuestItemCompleted(getUd(self))
end

return QuestItem]]

P['lib/stdlib/oop/_generated/_rect.lua'] = [[local Native = require('lib.stdlib.native')

---@class Rect : Agent
local Rect = class('Rect', require('lib.stdlib.oop.agent'))

---- compact same name native function
setmetatable(Rect, table.merge(getmetatable(Rect), {__call = function(_, ...)
    return Native.Rect(...)
end}))

---destructor
---@return void
function Rect:destructor()
--@debug@
    checkobject(self, Rect, 'destructor', 'self')
--@end-debug@
    return Native.RemoveRect(getUd(self))
end

---<**_DEPRECATED_**> remove
---@return void
function Rect:remove()
--@debug@
    deprecated('Rect.remove', 'Rect.delete')
--@end-debug@
    return self:delete()
end

---moveTo
---@overload fun(vec: Vector): void
---@param centerX float
---@param centerY float
---@return void
function Rect:moveTo(centerX, centerY)
    if type(centerX) == 'table' then
        centerX, centerY = table.unpack(centerX)
    end
--@debug@
    checkobject(self, Rect, 'moveTo', 'self')
    checktype(centerX, 'float', 'moveTo', 1)
    checktype(centerY, 'float', 'moveTo', 2)
--@end-debug@
    return Native.MoveRectTo(getUd(self), centerX, centerY)
end

---getCenterX
---@return float
function Rect:getCenterX()
--@debug@
    checkobject(self, Rect, 'getCenterX', 'self')
--@end-debug@
    return Native.GetRectCenterX(getUd(self))
end

---getCenterY
---@return float
function Rect:getCenterY()
--@debug@
    checkobject(self, Rect, 'getCenterY', 'self')
--@end-debug@
    return Native.GetRectCenterY(getUd(self))
end

---getMinX
---@return float
function Rect:getMinX()
--@debug@
    checkobject(self, Rect, 'getMinX', 'self')
--@end-debug@
    return Native.GetRectMinX(getUd(self))
end

---getMinY
---@return float
function Rect:getMinY()
--@debug@
    checkobject(self, Rect, 'getMinY', 'self')
--@end-debug@
    return Native.GetRectMinY(getUd(self))
end

---getMaxX
---@return float
function Rect:getMaxX()
--@debug@
    checkobject(self, Rect, 'getMaxX', 'self')
--@end-debug@
    return Native.GetRectMaxX(getUd(self))
end

---getMaxY
---@return float
function Rect:getMaxY()
--@debug@
    checkobject(self, Rect, 'getMaxY', 'self')
--@end-debug@
    return Native.GetRectMaxY(getUd(self))
end

---enumDestructablesIn
---@param filter DestructableFilter
---@param actionFunc DestructableCallback
---@return void
function Rect:enumDestructablesIn(filter, actionFunc)
--@debug@
    checkobject(self, Rect, 'enumDestructablesIn', 'self')
    checktype(filter, 'function', 'enumDestructablesIn', 1)
    checktype(actionFunc, 'function', 'enumDestructablesIn', 2)
--@end-debug@
    filter = require('lib.stdlib.oop.filter'):createDestructableFilter(filter)
    actionFunc = require('lib.stdlib.oop.function'):createDestructableCallback(actionFunc)
    Native.EnumDestructablesInRect(getUd(self), getUd(filter), actionFunc)
    if filter then filter:delete() end
end

---enumItemsIn
---@param filter ItemFilter
---@param actionFunc ItemCallback
---@return void
function Rect:enumItemsIn(filter, actionFunc)
--@debug@
    checkobject(self, Rect, 'enumItemsIn', 'self')
    checktype(filter, 'function', 'enumItemsIn', 1)
    checktype(actionFunc, 'function', 'enumItemsIn', 2)
--@end-debug@
    filter = require('lib.stdlib.oop.filter'):createItemFilter(filter)
    actionFunc = require('lib.stdlib.oop.function'):createItemCallback(actionFunc)
    Native.EnumItemsInRect(getUd(self), getUd(filter), actionFunc)
    if filter then filter:delete() end
end

---addWeatherEffect
---@param effectID integer
---@return WeatherEffect
function Rect:addWeatherEffect(effectID)
--@debug@
    checkobject(self, Rect, 'addWeatherEffect', 'self')
    checktype(effectID, 'integer', 'addWeatherEffect', 1)
--@end-debug@
    return require('lib.stdlib.oop.weathereffect'):fromUd(Native.AddWeatherEffect(getUd(self), effectID))
end

---setDoodadAnimation
---@param doodadID integer
---@param animName string
---@param animRandom boolean
---@return void
function Rect:setDoodadAnimation(doodadID, animName, animRandom)
--@debug@
    checkobject(self, Rect, 'setDoodadAnimation', 'self')
    checktype(doodadID, 'integer', 'setDoodadAnimation', 1)
    checktype(animName, 'string', 'setDoodadAnimation', 2)
    checktype(animRandom, 'boolean', 'setDoodadAnimation', 3)
--@end-debug@
    return Native.SetDoodadAnimationRect(getUd(self), doodadID, animName, animRandom)
end

return Rect]]

P['lib/stdlib/oop/_generated/_region.lua'] = [[local Native = require('lib.stdlib.native')

---@class Region : Agent
local Region = class('Region', require('lib.stdlib.oop.agent'))

---destructor
---@return void
function Region:destructor()
--@debug@
    checkobject(self, Region, 'destructor', 'self')
--@end-debug@
    return Native.RemoveRegion(getUd(self))
end

---<**_DEPRECATED_**> remove
---@return void
function Region:remove()
--@debug@
    deprecated('Region.remove', 'Region.delete')
--@end-debug@
    return self:delete()
end

---<static> create
---@return Region
function Region:create()
    return Region:fromUd(Native.CreateRegion())
end

---addRect
---@param r Rect
---@return void
function Region:addRect(r)
--@debug@
    checkobject(self, Region, 'addRect', 'self')
    checkobject(r, require('lib.stdlib.oop.rect'), 'addRect', 1)
--@end-debug@
    return Native.RegionAddRect(getUd(self), getUd(r))
end

---clearRect
---@param r Rect
---@return void
function Region:clearRect(r)
--@debug@
    checkobject(self, Region, 'clearRect', 'self')
    checkobject(r, require('lib.stdlib.oop.rect'), 'clearRect', 1)
--@end-debug@
    return Native.RegionClearRect(getUd(self), getUd(r))
end

---addCell
---@overload fun(vec: Vector): void
---@param x float
---@param y float
---@return void
function Region:addCell(x, y)
    if type(x) == 'table' then
        x, y = table.unpack(x)
    end
--@debug@
    checkobject(self, Region, 'addCell', 'self')
    checktype(x, 'float', 'addCell', 1)
    checktype(y, 'float', 'addCell', 2)
--@end-debug@
    return Native.RegionAddCell(getUd(self), x, y)
end

---clearCell
---@overload fun(vec: Vector): void
---@param x float
---@param y float
---@return void
function Region:clearCell(x, y)
    if type(x) == 'table' then
        x, y = table.unpack(x)
    end
--@debug@
    checkobject(self, Region, 'clearCell', 'self')
    checktype(x, 'float', 'clearCell', 1)
    checktype(y, 'float', 'clearCell', 2)
--@end-debug@
    return Native.RegionClearCell(getUd(self), x, y)
end

---isUnitIn
---@param unit Unit
---@return boolean
function Region:isUnitIn(unit)
--@debug@
    checkobject(self, Region, 'isUnitIn', 'self')
    checkobject(unit, require('lib.stdlib.oop.unit'), 'isUnitIn', 1)
--@end-debug@
    return Native.IsUnitInRegion(getUd(self), getUd(unit))
end

---isPointIn
---@overload fun(vec: Vector): boolean
---@param x float
---@param y float
---@return boolean
function Region:isPointIn(x, y)
    if type(x) == 'table' then
        x, y = table.unpack(x)
    end
--@debug@
    checkobject(self, Region, 'isPointIn', 'self')
    checktype(x, 'float', 'isPointIn', 1)
    checktype(y, 'float', 'isPointIn', 2)
--@end-debug@
    return Native.IsPointInRegion(getUd(self), x, y)
end

return Region]]

P['lib/stdlib/oop/_generated/_sound.lua'] = [[local Native = require('lib.stdlib.native')

---@class Sound : Agent
local Sound = class('Sound', require('lib.stdlib.oop.agent'))

---<static> create
---@param fileName string
---@param looping boolean
---@param is3D boolean
---@param stopwhenoutofrange boolean
---@param fadeInRate integer
---@param fadeOutRate integer
---@param eaxSetting string
---@return Sound
function Sound:create(fileName, looping, is3D, stopwhenoutofrange, fadeInRate, fadeOutRate, eaxSetting)
--@debug@
    checkclass(self, Sound, 'create', 'self')
    checktype(fileName, 'string', 'create', 1)
    checktype(looping, 'boolean', 'create', 2)
    checktype(is3D, 'boolean', 'create', 3)
    checktype(stopwhenoutofrange, 'boolean', 'create', 4)
    checktype(fadeInRate, 'integer', 'create', 5)
    checktype(fadeOutRate, 'integer', 'create', 6)
    checktype(eaxSetting, 'string', 'create', 7)
--@end-debug@
    return Sound:fromUd(Native.CreateSound(fileName, looping, is3D, stopwhenoutofrange, fadeInRate, fadeOutRate, eaxSetting))
end

---<static> createFilenameWithLabel
---@param fileName string
---@param looping boolean
---@param is3D boolean
---@param stopwhenoutofrange boolean
---@param fadeInRate integer
---@param fadeOutRate integer
---@param SLKEntryName string
---@return Sound
function Sound:createFilenameWithLabel(fileName, looping, is3D, stopwhenoutofrange, fadeInRate, fadeOutRate, SLKEntryName)
--@debug@
    checkclass(self, Sound, 'createFilenameWithLabel', 'self')
    checktype(fileName, 'string', 'createFilenameWithLabel', 1)
    checktype(looping, 'boolean', 'createFilenameWithLabel', 2)
    checktype(is3D, 'boolean', 'createFilenameWithLabel', 3)
    checktype(stopwhenoutofrange, 'boolean', 'createFilenameWithLabel', 4)
    checktype(fadeInRate, 'integer', 'createFilenameWithLabel', 5)
    checktype(fadeOutRate, 'integer', 'createFilenameWithLabel', 6)
    checktype(SLKEntryName, 'string', 'createFilenameWithLabel', 7)
--@end-debug@
    return Sound:fromUd(Native.CreateSoundFilenameWithLabel(fileName, looping, is3D, stopwhenoutofrange, fadeInRate, fadeOutRate, SLKEntryName))
end

---<static> createFromLabel
---@param soundLabel string
---@param looping boolean
---@param is3D boolean
---@param stopwhenoutofrange boolean
---@param fadeInRate integer
---@param fadeOutRate integer
---@return Sound
function Sound:createFromLabel(soundLabel, looping, is3D, stopwhenoutofrange, fadeInRate, fadeOutRate)
--@debug@
    checkclass(self, Sound, 'createFromLabel', 'self')
    checktype(soundLabel, 'string', 'createFromLabel', 1)
    checktype(looping, 'boolean', 'createFromLabel', 2)
    checktype(is3D, 'boolean', 'createFromLabel', 3)
    checktype(stopwhenoutofrange, 'boolean', 'createFromLabel', 4)
    checktype(fadeInRate, 'integer', 'createFromLabel', 5)
    checktype(fadeOutRate, 'integer', 'createFromLabel', 6)
--@end-debug@
    return Sound:fromUd(Native.CreateSoundFromLabel(soundLabel, looping, is3D, stopwhenoutofrange, fadeInRate, fadeOutRate))
end

---<static> createMIDI
---@param soundLabel string
---@param fadeInRate integer
---@param fadeOutRate integer
---@return Sound
function Sound:createMIDI(soundLabel, fadeInRate, fadeOutRate)
--@debug@
    checkclass(self, Sound, 'createMIDI', 'self')
    checktype(soundLabel, 'string', 'createMIDI', 1)
    checktype(fadeInRate, 'integer', 'createMIDI', 2)
    checktype(fadeOutRate, 'integer', 'createMIDI', 3)
--@end-debug@
    return Sound:fromUd(Native.CreateMIDISound(soundLabel, fadeInRate, fadeOutRate))
end

---setParamsFromLabel
---@param soundLabel string
---@return void
function Sound:setParamsFromLabel(soundLabel)
--@debug@
    checkobject(self, Sound, 'setParamsFromLabel', 'self')
    checktype(soundLabel, 'string', 'setParamsFromLabel', 1)
--@end-debug@
    return Native.SetSoundParamsFromLabel(getUd(self), soundLabel)
end

---setDistanceCutoff
---@param cutoff float
---@return void
function Sound:setDistanceCutoff(cutoff)
--@debug@
    checkobject(self, Sound, 'setDistanceCutoff', 'self')
    checktype(cutoff, 'float', 'setDistanceCutoff', 1)
--@end-debug@
    return Native.SetSoundDistanceCutoff(getUd(self), cutoff)
end

---setChannel
---@param channel integer
---@return void
function Sound:setChannel(channel)
--@debug@
    checkobject(self, Sound, 'setChannel', 'self')
    checktype(channel, 'integer', 'setChannel', 1)
--@end-debug@
    return Native.SetSoundChannel(getUd(self), channel)
end

---setVolume
---@param volume integer
---@return void
function Sound:setVolume(volume)
--@debug@
    checkobject(self, Sound, 'setVolume', 'self')
    checktype(volume, 'integer', 'setVolume', 1)
--@end-debug@
    return Native.SetSoundVolume(getUd(self), volume)
end

---setPitch
---@param pitch float
---@return void
function Sound:setPitch(pitch)
--@debug@
    checkobject(self, Sound, 'setPitch', 'self')
    checktype(pitch, 'float', 'setPitch', 1)
--@end-debug@
    return Native.SetSoundPitch(getUd(self), pitch)
end

---setPlayPosition
---@param millisecs integer
---@return void
function Sound:setPlayPosition(millisecs)
--@debug@
    checkobject(self, Sound, 'setPlayPosition', 'self')
    checktype(millisecs, 'integer', 'setPlayPosition', 1)
--@end-debug@
    return Native.SetSoundPlayPosition(getUd(self), millisecs)
end

---setDistances
---@param minDist float
---@param maxDist float
---@return void
function Sound:setDistances(minDist, maxDist)
--@debug@
    checkobject(self, Sound, 'setDistances', 'self')
    checktype(minDist, 'float', 'setDistances', 1)
    checktype(maxDist, 'float', 'setDistances', 2)
--@end-debug@
    return Native.SetSoundDistances(getUd(self), minDist, maxDist)
end

---setConeAngles
---@param inside float
---@param outside float
---@param outsideVolume integer
---@return void
function Sound:setConeAngles(inside, outside, outsideVolume)
--@debug@
    checkobject(self, Sound, 'setConeAngles', 'self')
    checktype(inside, 'float', 'setConeAngles', 1)
    checktype(outside, 'float', 'setConeAngles', 2)
    checktype(outsideVolume, 'integer', 'setConeAngles', 3)
--@end-debug@
    return Native.SetSoundConeAngles(getUd(self), inside, outside, outsideVolume)
end

---setConeOrientation
---@overload fun(vec: Vector3): void
---@param x float
---@param y float
---@param z float
---@return void
function Sound:setConeOrientation(x, y, z)
    if type(x) == 'table' then
        x, y, z = table.unpack(x)
    end
--@debug@
    checkobject(self, Sound, 'setConeOrientation', 'self')
    checktype(x, 'float', 'setConeOrientation', 1)
    checktype(y, 'float', 'setConeOrientation', 2)
    checktype(z, 'float', 'setConeOrientation', 3)
--@end-debug@
    return Native.SetSoundConeOrientation(getUd(self), x, y, z)
end

---setPosition
---@overload fun(vec: Vector3): void
---@param x float
---@param y float
---@param z float
---@return void
function Sound:setPosition(x, y, z)
    if type(x) == 'table' then
        x, y, z = table.unpack(x)
    end
--@debug@
    checkobject(self, Sound, 'setPosition', 'self')
    checktype(x, 'float', 'setPosition', 1)
    checktype(y, 'float', 'setPosition', 2)
    checktype(z, 'float', 'setPosition', 3)
--@end-debug@
    return Native.SetSoundPosition(getUd(self), x, y, z)
end

---setVelocity
---@overload fun(vec: Vector3): void
---@param x float
---@param y float
---@param z float
---@return void
function Sound:setVelocity(x, y, z)
    if type(x) == 'table' then
        x, y, z = table.unpack(x)
    end
--@debug@
    checkobject(self, Sound, 'setVelocity', 'self')
    checktype(x, 'float', 'setVelocity', 1)
    checktype(y, 'float', 'setVelocity', 2)
    checktype(z, 'float', 'setVelocity', 3)
--@end-debug@
    return Native.SetSoundVelocity(getUd(self), x, y, z)
end

---attachToUnit
---@param unit Unit
---@return void
function Sound:attachToUnit(unit)
--@debug@
    checkobject(self, Sound, 'attachToUnit', 'self')
    checkobject(unit, require('lib.stdlib.oop.unit'), 'attachToUnit', 1)
--@end-debug@
    return Native.AttachSoundToUnit(getUd(self), getUd(unit))
end

---start
---@return void
function Sound:start()
--@debug@
    checkobject(self, Sound, 'start', 'self')
--@end-debug@
    return Native.StartSound(getUd(self))
end

---stop
---@param killWhenDone boolean
---@param fadeOut boolean
---@return void
function Sound:stop(killWhenDone, fadeOut)
--@debug@
    checkobject(self, Sound, 'stop', 'self')
    checktype(killWhenDone, 'boolean', 'stop', 1)
    checktype(fadeOut, 'boolean', 'stop', 2)
--@end-debug@
    return Native.StopSound(getUd(self), killWhenDone, fadeOut)
end

---killWhenDone
---@return void
function Sound:killWhenDone()
--@debug@
    checkobject(self, Sound, 'killWhenDone', 'self')
--@end-debug@
    return Native.KillSoundWhenDone(getUd(self))
end

---setDuration
---@param duration integer
---@return void
function Sound:setDuration(duration)
--@debug@
    checkobject(self, Sound, 'setDuration', 'self')
    checktype(duration, 'integer', 'setDuration', 1)
--@end-debug@
    return Native.SetSoundDuration(getUd(self), duration)
end

---getDuration
---@return integer
function Sound:getDuration()
--@debug@
    checkobject(self, Sound, 'getDuration', 'self')
--@end-debug@
    return Native.GetSoundDuration(getUd(self))
end

---getIsPlaying
---@return boolean
function Sound:getIsPlaying()
--@debug@
    checkobject(self, Sound, 'getIsPlaying', 'self')
--@end-debug@
    return Native.GetSoundIsPlaying(getUd(self))
end

---getIsLoading
---@return boolean
function Sound:getIsLoading()
--@debug@
    checkobject(self, Sound, 'getIsLoading', 'self')
--@end-debug@
    return Native.GetSoundIsLoading(getUd(self))
end

---registerStacked
---@param byPosition boolean
---@param rectwidth float
---@param rectheight float
---@return void
function Sound:registerStacked(byPosition, rectwidth, rectheight)
--@debug@
    checkobject(self, Sound, 'registerStacked', 'self')
    checktype(byPosition, 'boolean', 'registerStacked', 1)
    checktype(rectwidth, 'float', 'registerStacked', 2)
    checktype(rectheight, 'float', 'registerStacked', 3)
--@end-debug@
    return Native.RegisterStackedSound(getUd(self), byPosition, rectwidth, rectheight)
end

---unregisterStacked
---@param byPosition boolean
---@param rectwidth float
---@param rectheight float
---@return void
function Sound:unregisterStacked(byPosition, rectwidth, rectheight)
--@debug@
    checkobject(self, Sound, 'unregisterStacked', 'self')
    checktype(byPosition, 'boolean', 'unregisterStacked', 1)
    checktype(rectwidth, 'float', 'unregisterStacked', 2)
    checktype(rectheight, 'float', 'unregisterStacked', 3)
--@end-debug@
    return Native.UnregisterStackedSound(getUd(self), byPosition, rectwidth, rectheight)
end

---setFacialAnimationLabel
---@param animationLabel string
---@return boolean
function Sound:setFacialAnimationLabel(animationLabel)
--@debug@
    checkobject(self, Sound, 'setFacialAnimationLabel', 'self')
    checktype(animationLabel, 'string', 'setFacialAnimationLabel', 1)
--@end-debug@
    return Native.SetSoundFacialAnimationLabel(getUd(self), animationLabel)
end

---setFacialAnimationGroupLabel
---@param groupLabel string
---@return boolean
function Sound:setFacialAnimationGroupLabel(groupLabel)
--@debug@
    checkobject(self, Sound, 'setFacialAnimationGroupLabel', 'self')
    checktype(groupLabel, 'string', 'setFacialAnimationGroupLabel', 1)
--@end-debug@
    return Native.SetSoundFacialAnimationGroupLabel(getUd(self), groupLabel)
end

---setFacialAnimationSetFilepath
---@param animationSetFilepath string
---@return boolean
function Sound:setFacialAnimationSetFilepath(animationSetFilepath)
--@debug@
    checkobject(self, Sound, 'setFacialAnimationSetFilepath', 'self')
    checktype(animationSetFilepath, 'string', 'setFacialAnimationSetFilepath', 1)
--@end-debug@
    return Native.SetSoundFacialAnimationSetFilepath(getUd(self), animationSetFilepath)
end

---setDialogueSpeakerNameKey
---@param speakerName string
---@return boolean
function Sound:setDialogueSpeakerNameKey(speakerName)
--@debug@
    checkobject(self, Sound, 'setDialogueSpeakerNameKey', 'self')
    checktype(speakerName, 'string', 'setDialogueSpeakerNameKey', 1)
--@end-debug@
    return Native.SetDialogueSpeakerNameKey(getUd(self), speakerName)
end

---getDialogueSpeakerNameKey
---@return string
function Sound:getDialogueSpeakerNameKey()
--@debug@
    checkobject(self, Sound, 'getDialogueSpeakerNameKey', 'self')
--@end-debug@
    return Native.GetDialogueSpeakerNameKey(getUd(self))
end

---setDialogueTextKey
---@param dialogueText string
---@return boolean
function Sound:setDialogueTextKey(dialogueText)
--@debug@
    checkobject(self, Sound, 'setDialogueTextKey', 'self')
    checktype(dialogueText, 'string', 'setDialogueTextKey', 1)
--@end-debug@
    return Native.SetDialogueTextKey(getUd(self), dialogueText)
end

---getDialogueTextKey
---@return string
function Sound:getDialogueTextKey()
--@debug@
    checkobject(self, Sound, 'getDialogueTextKey', 'self')
--@end-debug@
    return Native.GetDialogueTextKey(getUd(self))
end

return Sound]]

P['lib/stdlib/oop/_generated/_terraindeform.lua'] = [[local Native = require('lib.stdlib.native')

---@class TerrainDeform : Handle
local TerrainDeform = class('TerrainDeform', require('lib.stdlib.oop.handle'))

---<static> crater
---@overload fun(vec: Vector, radius: float, depth: float, duration: integer, permanent: boolean): TerrainDeform
---@param x float
---@param y float
---@param radius float
---@param depth float
---@param duration integer
---@param permanent boolean
---@return TerrainDeform
function TerrainDeform:crater(x, y, radius, depth, duration, permanent)
    if type(x) == 'table' then
        radius, depth, duration, permanent = y, radius, depth, duration
        x, y = table.unpack(x)
    end
--@debug@
    checkclass(self, TerrainDeform, 'crater', 'self')
    checktype(x, 'float', 'crater', 1)
    checktype(y, 'float', 'crater', 2)
    checktype(radius, 'float', 'crater', 3)
    checktype(depth, 'float', 'crater', 4)
    checktype(duration, 'integer', 'crater', 5)
    checktype(permanent, 'boolean', 'crater', 6)
--@end-debug@
    return TerrainDeform:fromUd(Native.TerrainDeformCrater(x, y, radius, depth, duration, permanent))
end

---<static> ripple
---@overload fun(vec: Vector, radius: float, depth: float, duration: integer, count: integer, spaceWaves: float, timeWaves: float, radiusStartPct: float, limitNeg: boolean): TerrainDeform
---@param x float
---@param y float
---@param radius float
---@param depth float
---@param duration integer
---@param count integer
---@param spaceWaves float
---@param timeWaves float
---@param radiusStartPct float
---@param limitNeg boolean
---@return TerrainDeform
function TerrainDeform:ripple(x, y, radius, depth, duration, count, spaceWaves, timeWaves, radiusStartPct, limitNeg)
    if type(x) == 'table' then
        radius, depth, duration, count, spaceWaves, timeWaves, radiusStartPct, limitNeg = y, radius, depth, duration, count, spaceWaves, timeWaves, radiusStartPct
        x, y = table.unpack(x)
    end
--@debug@
    checkclass(self, TerrainDeform, 'ripple', 'self')
    checktype(x, 'float', 'ripple', 1)
    checktype(y, 'float', 'ripple', 2)
    checktype(radius, 'float', 'ripple', 3)
    checktype(depth, 'float', 'ripple', 4)
    checktype(duration, 'integer', 'ripple', 5)
    checktype(count, 'integer', 'ripple', 6)
    checktype(spaceWaves, 'float', 'ripple', 7)
    checktype(timeWaves, 'float', 'ripple', 8)
    checktype(radiusStartPct, 'float', 'ripple', 9)
    checktype(limitNeg, 'boolean', 'ripple', 10)
--@end-debug@
    return TerrainDeform:fromUd(Native.TerrainDeformRipple(x, y, radius, depth, duration, count, spaceWaves, timeWaves, radiusStartPct, limitNeg))
end

---<static> random
---@overload fun(vec: Vector, radius: float, minDelta: float, maxDelta: float, duration: integer, updateInterval: integer): TerrainDeform
---@param x float
---@param y float
---@param radius float
---@param minDelta float
---@param maxDelta float
---@param duration integer
---@param updateInterval integer
---@return TerrainDeform
function TerrainDeform:random(x, y, radius, minDelta, maxDelta, duration, updateInterval)
    if type(x) == 'table' then
        radius, minDelta, maxDelta, duration, updateInterval = y, radius, minDelta, maxDelta, duration
        x, y = table.unpack(x)
    end
--@debug@
    checkclass(self, TerrainDeform, 'random', 'self')
    checktype(x, 'float', 'random', 1)
    checktype(y, 'float', 'random', 2)
    checktype(radius, 'float', 'random', 3)
    checktype(minDelta, 'float', 'random', 4)
    checktype(maxDelta, 'float', 'random', 5)
    checktype(duration, 'integer', 'random', 6)
    checktype(updateInterval, 'integer', 'random', 7)
--@end-debug@
    return TerrainDeform:fromUd(Native.TerrainDeformRandom(x, y, radius, minDelta, maxDelta, duration, updateInterval))
end

---stop
---@param duration integer
---@return void
function TerrainDeform:stop(duration)
--@debug@
    checkobject(self, TerrainDeform, 'stop', 'self')
    checktype(duration, 'integer', 'stop', 1)
--@end-debug@
    return Native.TerrainDeformStop(getUd(self), duration)
end

return TerrainDeform]]

P['lib/stdlib/oop/_generated/_texttag.lua'] = [[local Native = require('lib.stdlib.native')

---@class TextTag : Handle
local TextTag = class('TextTag', require('lib.stdlib.oop.handle'))

---destructor
---@return void
function TextTag:destructor()
--@debug@
    checkobject(self, TextTag, 'destructor', 'self')
--@end-debug@
    return Native.DestroyTextTag(getUd(self))
end

---<**_DEPRECATED_**> destroy
---@return void
function TextTag:destroy()
--@debug@
    deprecated('TextTag.destroy', 'TextTag.delete')
--@end-debug@
    return self:delete()
end

---<static> create
---@return TextTag
function TextTag:create()
    return TextTag:fromUd(Native.CreateTextTag())
end

---setText
---@param s string
---@param height float
---@return void
function TextTag:setText(s, height)
--@debug@
    checkobject(self, TextTag, 'setText', 'self')
    checktype(s, 'string', 'setText', 1)
    checktype(height, 'float', 'setText', 2)
--@end-debug@
    return Native.SetTextTagText(getUd(self), s, height)
end

---setPos
---@overload fun(vec: Vector, heightOffset: float): void
---@param x float
---@param y float
---@param heightOffset float
---@return void
function TextTag:setPos(x, y, heightOffset)
    if type(x) == 'table' then
        heightOffset = y
        x, y = table.unpack(x)
    end
--@debug@
    checkobject(self, TextTag, 'setPos', 'self')
    checktype(x, 'float', 'setPos', 1)
    checktype(y, 'float', 'setPos', 2)
    checktype(heightOffset, 'float', 'setPos', 3)
--@end-debug@
    return Native.SetTextTagPos(getUd(self), x, y, heightOffset)
end

---setPosUnit
---@param unit Unit
---@param heightOffset float
---@return void
function TextTag:setPosUnit(unit, heightOffset)
--@debug@
    checkobject(self, TextTag, 'setPosUnit', 'self')
    checkobject(unit, require('lib.stdlib.oop.unit'), 'setPosUnit', 1)
    checktype(heightOffset, 'float', 'setPosUnit', 2)
--@end-debug@
    return Native.SetTextTagPosUnit(getUd(self), getUd(unit), heightOffset)
end

---setColor
---@param red integer
---@param green integer
---@param blue integer
---@param alpha integer
---@return void
function TextTag:setColor(red, green, blue, alpha)
--@debug@
    checkobject(self, TextTag, 'setColor', 'self')
    checktype(red, 'integer', 'setColor', 1)
    checktype(green, 'integer', 'setColor', 2)
    checktype(blue, 'integer', 'setColor', 3)
    checktype(alpha, 'integer', 'setColor', 4)
--@end-debug@
    return Native.SetTextTagColor(getUd(self), red, green, blue, alpha)
end

---setVelocity
---@param xvel float
---@param yvel float
---@return void
function TextTag:setVelocity(xvel, yvel)
--@debug@
    checkobject(self, TextTag, 'setVelocity', 'self')
    checktype(xvel, 'float', 'setVelocity', 1)
    checktype(yvel, 'float', 'setVelocity', 2)
--@end-debug@
    return Native.SetTextTagVelocity(getUd(self), xvel, yvel)
end

---setVisibility
---@param flag boolean
---@return void
function TextTag:setVisibility(flag)
--@debug@
    checkobject(self, TextTag, 'setVisibility', 'self')
    checktype(flag, 'boolean', 'setVisibility', 1)
--@end-debug@
    return Native.SetTextTagVisibility(getUd(self), flag)
end

---setSuspended
---@param flag boolean
---@return void
function TextTag:setSuspended(flag)
--@debug@
    checkobject(self, TextTag, 'setSuspended', 'self')
    checktype(flag, 'boolean', 'setSuspended', 1)
--@end-debug@
    return Native.SetTextTagSuspended(getUd(self), flag)
end

---setPermanent
---@param flag boolean
---@return void
function TextTag:setPermanent(flag)
--@debug@
    checkobject(self, TextTag, 'setPermanent', 'self')
    checktype(flag, 'boolean', 'setPermanent', 1)
--@end-debug@
    return Native.SetTextTagPermanent(getUd(self), flag)
end

---setAge
---@param age float
---@return void
function TextTag:setAge(age)
--@debug@
    checkobject(self, TextTag, 'setAge', 'self')
    checktype(age, 'float', 'setAge', 1)
--@end-debug@
    return Native.SetTextTagAge(getUd(self), age)
end

---setLifespan
---@param lifespan float
---@return void
function TextTag:setLifespan(lifespan)
--@debug@
    checkobject(self, TextTag, 'setLifespan', 'self')
    checktype(lifespan, 'float', 'setLifespan', 1)
--@end-debug@
    return Native.SetTextTagLifespan(getUd(self), lifespan)
end

---setFadepoint
---@param fadepoint float
---@return void
function TextTag:setFadepoint(fadepoint)
--@debug@
    checkobject(self, TextTag, 'setFadepoint', 'self')
    checktype(fadepoint, 'float', 'setFadepoint', 1)
--@end-debug@
    return Native.SetTextTagFadepoint(getUd(self), fadepoint)
end

return TextTag]]

P['lib/stdlib/oop/_generated/_timer.lua'] = [[local Native = require('lib.stdlib.native')

---@class Timer : Agent
local Timer = class('Timer', require('lib.stdlib.oop.agent'))

---destructor
---@return void
function Timer:destructor()
--@debug@
    checkobject(self, Timer, 'destructor', 'self')
--@end-debug@
    return Native.DestroyTimer(getUd(self))
end

---<**_DEPRECATED_**> destroy
---@return void
function Timer:destroy()
--@debug@
    deprecated('Timer.destroy', 'Timer.delete')
--@end-debug@
    return self:delete()
end

---<static> create
---@return Timer
function Timer:create()
    return Timer:fromUd(Native.CreateTimer())
end

---getElapsed
---@return float
function Timer:getElapsed()
--@debug@
    checkobject(self, Timer, 'getElapsed', 'self')
--@end-debug@
    return Native.TimerGetElapsed(getUd(self))
end

---getRemaining
---@return float
function Timer:getRemaining()
--@debug@
    checkobject(self, Timer, 'getRemaining', 'self')
--@end-debug@
    return Native.TimerGetRemaining(getUd(self))
end

---getTimeout
---@return float
function Timer:getTimeout()
--@debug@
    checkobject(self, Timer, 'getTimeout', 'self')
--@end-debug@
    return Native.TimerGetTimeout(getUd(self))
end

---pause
---@return void
function Timer:pause()
--@debug@
    checkobject(self, Timer, 'pause', 'self')
--@end-debug@
    return Native.PauseTimer(getUd(self))
end

---resume
---@return void
function Timer:resume()
--@debug@
    checkobject(self, Timer, 'resume', 'self')
--@end-debug@
    return Native.ResumeTimer(getUd(self))
end

return Timer]]

P['lib/stdlib/oop/_generated/_timerdialog.lua'] = [[local Native = require('lib.stdlib.native')

---@class TimerDialog : Agent
local TimerDialog = class('TimerDialog', require('lib.stdlib.oop.agent'))

---destructor
---@return void
function TimerDialog:destructor()
--@debug@
    checkobject(self, TimerDialog, 'destructor', 'self')
--@end-debug@
    return Native.DestroyTimerDialog(getUd(self))
end

---<**_DEPRECATED_**> destroy
---@return void
function TimerDialog:destroy()
--@debug@
    deprecated('TimerDialog.destroy', 'TimerDialog.delete')
--@end-debug@
    return self:delete()
end

---<static> create
---@param t Timer
---@return TimerDialog
function TimerDialog:create(t)
--@debug@
    checkclass(self, TimerDialog, 'create', 'self')
    checkobject(t, require('lib.stdlib.oop.timer'), 'create', 1)
--@end-debug@
    return TimerDialog:fromUd(Native.CreateTimerDialog(getUd(t)))
end

---setTitle
---@param title string
---@return void
function TimerDialog:setTitle(title)
--@debug@
    checkobject(self, TimerDialog, 'setTitle', 'self')
    checktype(title, 'string', 'setTitle', 1)
--@end-debug@
    return Native.TimerDialogSetTitle(getUd(self), title)
end

---setTitleColor
---@param red integer
---@param green integer
---@param blue integer
---@param alpha integer
---@return void
function TimerDialog:setTitleColor(red, green, blue, alpha)
--@debug@
    checkobject(self, TimerDialog, 'setTitleColor', 'self')
    checktype(red, 'integer', 'setTitleColor', 1)
    checktype(green, 'integer', 'setTitleColor', 2)
    checktype(blue, 'integer', 'setTitleColor', 3)
    checktype(alpha, 'integer', 'setTitleColor', 4)
--@end-debug@
    return Native.TimerDialogSetTitleColor(getUd(self), red, green, blue, alpha)
end

---setTimeColor
---@param red integer
---@param green integer
---@param blue integer
---@param alpha integer
---@return void
function TimerDialog:setTimeColor(red, green, blue, alpha)
--@debug@
    checkobject(self, TimerDialog, 'setTimeColor', 'self')
    checktype(red, 'integer', 'setTimeColor', 1)
    checktype(green, 'integer', 'setTimeColor', 2)
    checktype(blue, 'integer', 'setTimeColor', 3)
    checktype(alpha, 'integer', 'setTimeColor', 4)
--@end-debug@
    return Native.TimerDialogSetTimeColor(getUd(self), red, green, blue, alpha)
end

---setSpeed
---@param speedMultFactor float
---@return void
function TimerDialog:setSpeed(speedMultFactor)
--@debug@
    checkobject(self, TimerDialog, 'setSpeed', 'self')
    checktype(speedMultFactor, 'float', 'setSpeed', 1)
--@end-debug@
    return Native.TimerDialogSetSpeed(getUd(self), speedMultFactor)
end

---display
---@param display boolean
---@return void
function TimerDialog:display(display)
--@debug@
    checkobject(self, TimerDialog, 'display', 'self')
    checktype(display, 'boolean', 'display', 1)
--@end-debug@
    return Native.TimerDialogDisplay(getUd(self), display)
end

---isDisplayed
---@return boolean
function TimerDialog:isDisplayed()
--@debug@
    checkobject(self, TimerDialog, 'isDisplayed', 'self')
--@end-debug@
    return Native.IsTimerDialogDisplayed(getUd(self))
end

---setRealTimeRemaining
---@param timeRemaining float
---@return void
function TimerDialog:setRealTimeRemaining(timeRemaining)
--@debug@
    checkobject(self, TimerDialog, 'setRealTimeRemaining', 'self')
    checktype(timeRemaining, 'float', 'setRealTimeRemaining', 1)
--@end-debug@
    return Native.TimerDialogSetRealTimeRemaining(getUd(self), timeRemaining)
end

return TimerDialog]]

P['lib/stdlib/oop/_generated/_trackable.lua'] = [[local Native = require('lib.stdlib.native')

---@class Trackable : Agent
local Trackable = class('Trackable', require('lib.stdlib.oop.agent'))

---<static> create
---@overload fun(trackableModelPath: string, vec: Vector, facing: float): Trackable
---@param trackableModelPath string
---@param x float
---@param y float
---@param facing float
---@return Trackable
function Trackable:create(trackableModelPath, x, y, facing)
    if type(x) == 'table' then
        facing = y
        x, y = table.unpack(x)
    end
--@debug@
    checkclass(self, Trackable, 'create', 'self')
    checktype(trackableModelPath, 'string', 'create', 1)
    checktype(x, 'float', 'create', 2)
    checktype(y, 'float', 'create', 3)
    checktype(facing, 'float', 'create', 4)
--@end-debug@
    return Trackable:fromUd(Native.CreateTrackable(trackableModelPath, x, y, facing))
end

return Trackable]]

P['lib/stdlib/oop/_generated/_trigger.lua'] = [[local Native = require('lib.stdlib.native')

---@class Trigger : Agent
local Trigger = class('Trigger', require('lib.stdlib.oop.agent'))

---destructor
---@return void
function Trigger:destructor()
--@debug@
    checkobject(self, Trigger, 'destructor', 'self')
--@end-debug@
    return Native.DestroyTrigger(getUd(self))
end

---<**_DEPRECATED_**> destroy
---@return void
function Trigger:destroy()
--@debug@
    deprecated('Trigger.destroy', 'Trigger.delete')
--@end-debug@
    return self:delete()
end

---<static> create
---@return Trigger
function Trigger:create()
    return Trigger:fromUd(Native.CreateTrigger())
end

---<static> sleepAction
---@param timeout float
---@return void
function Trigger:sleepAction(timeout)
--@debug@
    checkclass(self, Trigger, 'sleepAction', 'self')
    checktype(timeout, 'float', 'sleepAction', 1)
--@end-debug@
    return Native.TriggerSleepAction(timeout)
end

---<static> waitForSound
---@param s Sound
---@param offset float
---@return void
function Trigger:waitForSound(s, offset)
--@debug@
    checkclass(self, Trigger, 'waitForSound', 'self')
    checkobject(s, require('lib.stdlib.oop.sound'), 'waitForSound', 1)
    checktype(offset, 'float', 'waitForSound', 2)
--@end-debug@
    return Native.TriggerWaitForSound(getUd(s), offset)
end

---<static> syncStart
---@return void
function Trigger:syncStart()
    return Native.TriggerSyncStart()
end

---<static> syncReady
---@return void
function Trigger:syncReady()
    return Native.TriggerSyncReady()
end

---reset
---@return void
function Trigger:reset()
--@debug@
    checkobject(self, Trigger, 'reset', 'self')
--@end-debug@
    return Native.ResetTrigger(getUd(self))
end

---enable
---@return void
function Trigger:enable()
--@debug@
    checkobject(self, Trigger, 'enable', 'self')
--@end-debug@
    return Native.EnableTrigger(getUd(self))
end

---disable
---@return void
function Trigger:disable()
--@debug@
    checkobject(self, Trigger, 'disable', 'self')
--@end-debug@
    return Native.DisableTrigger(getUd(self))
end

---isEnabled
---@return boolean
function Trigger:isEnabled()
--@debug@
    checkobject(self, Trigger, 'isEnabled', 'self')
--@end-debug@
    return Native.IsTriggerEnabled(getUd(self))
end

---waitOnSleeps
---@param flag boolean
---@return void
function Trigger:waitOnSleeps(flag)
--@debug@
    checkobject(self, Trigger, 'waitOnSleeps', 'self')
    checktype(flag, 'boolean', 'waitOnSleeps', 1)
--@end-debug@
    return Native.TriggerWaitOnSleeps(getUd(self), flag)
end

---isWaitOnSleeps
---@return boolean
function Trigger:isWaitOnSleeps()
--@debug@
    checkobject(self, Trigger, 'isWaitOnSleeps', 'self')
--@end-debug@
    return Native.IsTriggerWaitOnSleeps(getUd(self))
end

---getEvalCount
---@return integer
function Trigger:getEvalCount()
--@debug@
    checkobject(self, Trigger, 'getEvalCount', 'self')
--@end-debug@
    return Native.GetTriggerEvalCount(getUd(self))
end

---getExecCount
---@return integer
function Trigger:getExecCount()
--@debug@
    checkobject(self, Trigger, 'getExecCount', 'self')
--@end-debug@
    return Native.GetTriggerExecCount(getUd(self))
end

---registerVariableEvent
---@param varName string
---@param opcode LimitOp
---@param limitval float
---@return Event
function Trigger:registerVariableEvent(varName, opcode, limitval)
--@debug@
    checkobject(self, Trigger, 'registerVariableEvent', 'self')
    checktype(varName, 'string', 'registerVariableEvent', 1)
    checkuserdata(opcode, 'limitop', 'registerVariableEvent', 2)
    checktype(limitval, 'float', 'registerVariableEvent', 3)
--@end-debug@
    return require('lib.stdlib.oop.event'):fromUd(Native.TriggerRegisterVariableEvent(getUd(self), varName, opcode, limitval))
end

---registerTimerEvent
---@param timeout float
---@param periodic boolean
---@return Event
function Trigger:registerTimerEvent(timeout, periodic)
--@debug@
    checkobject(self, Trigger, 'registerTimerEvent', 'self')
    checktype(timeout, 'float', 'registerTimerEvent', 1)
    checktype(periodic, 'boolean', 'registerTimerEvent', 2)
--@end-debug@
    return require('lib.stdlib.oop.event'):fromUd(Native.TriggerRegisterTimerEvent(getUd(self), timeout, periodic))
end

---registerTimerExpireEvent
---@param t Timer
---@return Event
function Trigger:registerTimerExpireEvent(t)
--@debug@
    checkobject(self, Trigger, 'registerTimerExpireEvent', 'self')
    checkobject(t, require('lib.stdlib.oop.timer'), 'registerTimerExpireEvent', 1)
--@end-debug@
    return require('lib.stdlib.oop.event'):fromUd(Native.TriggerRegisterTimerExpireEvent(getUd(self), getUd(t)))
end

---registerGameStateEvent
---@param state GameState
---@param opcode LimitOp
---@param limitval float
---@return Event
function Trigger:registerGameStateEvent(state, opcode, limitval)
--@debug@
    checkobject(self, Trigger, 'registerGameStateEvent', 'self')
    checkuserdata(state, 'gamestate', 'registerGameStateEvent', 1)
    checkuserdata(opcode, 'limitop', 'registerGameStateEvent', 2)
    checktype(limitval, 'float', 'registerGameStateEvent', 3)
--@end-debug@
    return require('lib.stdlib.oop.event'):fromUd(Native.TriggerRegisterGameStateEvent(getUd(self), state, opcode, limitval))
end

---registerDialogEvent
---@param dialog Dialog
---@return Event
function Trigger:registerDialogEvent(dialog)
--@debug@
    checkobject(self, Trigger, 'registerDialogEvent', 'self')
    checkobject(dialog, require('lib.stdlib.oop.dialog'), 'registerDialogEvent', 1)
--@end-debug@
    return require('lib.stdlib.oop.event'):fromUd(Native.TriggerRegisterDialogEvent(getUd(self), getUd(dialog)))
end

---registerDialogButtonEvent
---@param button Button
---@return Event
function Trigger:registerDialogButtonEvent(button)
--@debug@
    checkobject(self, Trigger, 'registerDialogButtonEvent', 'self')
    checkobject(button, require('lib.stdlib.oop.button'), 'registerDialogButtonEvent', 1)
--@end-debug@
    return require('lib.stdlib.oop.event'):fromUd(Native.TriggerRegisterDialogButtonEvent(getUd(self), getUd(button)))
end

---registerGameEvent
---@param gameEvent GameEvent
---@return Event
function Trigger:registerGameEvent(gameEvent)
--@debug@
    checkobject(self, Trigger, 'registerGameEvent', 'self')
    checkuserdata(gameEvent, 'gameevent', 'registerGameEvent', 1)
--@end-debug@
    return require('lib.stdlib.oop.event'):fromUd(Native.TriggerRegisterGameEvent(getUd(self), gameEvent))
end

---registerEnterRegion
---@param region Region
---@param filter BoolExpr
---@return Event
function Trigger:registerEnterRegion(region, filter)
--@debug@
    checkobject(self, Trigger, 'registerEnterRegion', 'self')
    checkobject(region, require('lib.stdlib.oop.region'), 'registerEnterRegion', 1)
    checkobject(filter, require('lib.stdlib.oop.boolexpr'), 'registerEnterRegion', 2)
--@end-debug@
    return require('lib.stdlib.oop.event'):fromUd(Native.TriggerRegisterEnterRegion(getUd(self), getUd(region), getUd(filter)))
end

---registerLeaveRegion
---@param region Region
---@param filter BoolExpr
---@return Event
function Trigger:registerLeaveRegion(region, filter)
--@debug@
    checkobject(self, Trigger, 'registerLeaveRegion', 'self')
    checkobject(region, require('lib.stdlib.oop.region'), 'registerLeaveRegion', 1)
    checkobject(filter, require('lib.stdlib.oop.boolexpr'), 'registerLeaveRegion', 2)
--@end-debug@
    return require('lib.stdlib.oop.event'):fromUd(Native.TriggerRegisterLeaveRegion(getUd(self), getUd(region), getUd(filter)))
end

---registerTrackableHitEvent
---@param t Trackable
---@return Event
function Trigger:registerTrackableHitEvent(t)
--@debug@
    checkobject(self, Trigger, 'registerTrackableHitEvent', 'self')
    checkobject(t, require('lib.stdlib.oop.trackable'), 'registerTrackableHitEvent', 1)
--@end-debug@
    return require('lib.stdlib.oop.event'):fromUd(Native.TriggerRegisterTrackableHitEvent(getUd(self), getUd(t)))
end

---registerTrackableTrackEvent
---@param t Trackable
---@return Event
function Trigger:registerTrackableTrackEvent(t)
--@debug@
    checkobject(self, Trigger, 'registerTrackableTrackEvent', 'self')
    checkobject(t, require('lib.stdlib.oop.trackable'), 'registerTrackableTrackEvent', 1)
--@end-debug@
    return require('lib.stdlib.oop.event'):fromUd(Native.TriggerRegisterTrackableTrackEvent(getUd(self), getUd(t)))
end

---registerCommandEvent
---@param ability integer
---@param order string
---@return Event
function Trigger:registerCommandEvent(ability, order)
--@debug@
    checkobject(self, Trigger, 'registerCommandEvent', 'self')
    checktype(ability, 'integer', 'registerCommandEvent', 1)
    checktype(order, 'string', 'registerCommandEvent', 2)
--@end-debug@
    return require('lib.stdlib.oop.event'):fromUd(Native.TriggerRegisterCommandEvent(getUd(self), ability, order))
end

---registerUpgradeCommandEvent
---@param upgrade integer
---@return Event
function Trigger:registerUpgradeCommandEvent(upgrade)
--@debug@
    checkobject(self, Trigger, 'registerUpgradeCommandEvent', 'self')
    checktype(upgrade, 'integer', 'registerUpgradeCommandEvent', 1)
--@end-debug@
    return require('lib.stdlib.oop.event'):fromUd(Native.TriggerRegisterUpgradeCommandEvent(getUd(self), upgrade))
end

---registerPlayerEvent
---@param player Player
---@param playerEvent PlayerEvent
---@return Event
function Trigger:registerPlayerEvent(player, playerEvent)
--@debug@
    checkobject(self, Trigger, 'registerPlayerEvent', 'self')
    checkobject(player, require('lib.stdlib.oop.player'), 'registerPlayerEvent', 1)
    checkuserdata(playerEvent, 'playerevent', 'registerPlayerEvent', 2)
--@end-debug@
    return require('lib.stdlib.oop.event'):fromUd(Native.TriggerRegisterPlayerEvent(getUd(self), getUd(player), playerEvent))
end

---registerPlayerUnitEvent
---@param player Player
---@param playerUnitEvent PlayerUnitEvent
---@param filter BoolExpr
---@return Event
function Trigger:registerPlayerUnitEvent(player, playerUnitEvent, filter)
--@debug@
    checkobject(self, Trigger, 'registerPlayerUnitEvent', 'self')
    checkobject(player, require('lib.stdlib.oop.player'), 'registerPlayerUnitEvent', 1)
    checkuserdata(playerUnitEvent, 'playerunitevent', 'registerPlayerUnitEvent', 2)
    checkobject(filter, require('lib.stdlib.oop.boolexpr'), 'registerPlayerUnitEvent', 3)
--@end-debug@
    return require('lib.stdlib.oop.event'):fromUd(Native.TriggerRegisterPlayerUnitEvent(getUd(self), getUd(player), playerUnitEvent, getUd(filter)))
end

---registerPlayerAllianceChange
---@param player Player
---@param alliance AllianceType
---@return Event
function Trigger:registerPlayerAllianceChange(player, alliance)
--@debug@
    checkobject(self, Trigger, 'registerPlayerAllianceChange', 'self')
    checkobject(player, require('lib.stdlib.oop.player'), 'registerPlayerAllianceChange', 1)
    checkuserdata(alliance, 'alliancetype', 'registerPlayerAllianceChange', 2)
--@end-debug@
    return require('lib.stdlib.oop.event'):fromUd(Native.TriggerRegisterPlayerAllianceChange(getUd(self), getUd(player), alliance))
end

---registerPlayerStateEvent
---@param player Player
---@param state PlayerState
---@param opcode LimitOp
---@param limitval float
---@return Event
function Trigger:registerPlayerStateEvent(player, state, opcode, limitval)
--@debug@
    checkobject(self, Trigger, 'registerPlayerStateEvent', 'self')
    checkobject(player, require('lib.stdlib.oop.player'), 'registerPlayerStateEvent', 1)
    checkuserdata(state, 'playerstate', 'registerPlayerStateEvent', 2)
    checkuserdata(opcode, 'limitop', 'registerPlayerStateEvent', 3)
    checktype(limitval, 'float', 'registerPlayerStateEvent', 4)
--@end-debug@
    return require('lib.stdlib.oop.event'):fromUd(Native.TriggerRegisterPlayerStateEvent(getUd(self), getUd(player), state, opcode, limitval))
end

---registerPlayerChatEvent
---@param player Player
---@param chatMessageToDetect string
---@param exactMatchOnly boolean
---@return Event
function Trigger:registerPlayerChatEvent(player, chatMessageToDetect, exactMatchOnly)
--@debug@
    checkobject(self, Trigger, 'registerPlayerChatEvent', 'self')
    checkobject(player, require('lib.stdlib.oop.player'), 'registerPlayerChatEvent', 1)
    checktype(chatMessageToDetect, 'string', 'registerPlayerChatEvent', 2)
    checktype(exactMatchOnly, 'boolean', 'registerPlayerChatEvent', 3)
--@end-debug@
    return require('lib.stdlib.oop.event'):fromUd(Native.TriggerRegisterPlayerChatEvent(getUd(self), getUd(player), chatMessageToDetect, exactMatchOnly))
end

---registerDeathEvent
---@param widget Widget
---@return Event
function Trigger:registerDeathEvent(widget)
--@debug@
    checkobject(self, Trigger, 'registerDeathEvent', 'self')
    checkobject(widget, require('lib.stdlib.oop.widget'), 'registerDeathEvent', 1)
--@end-debug@
    return require('lib.stdlib.oop.event'):fromUd(Native.TriggerRegisterDeathEvent(getUd(self), getUd(widget)))
end

---registerUnitStateEvent
---@param unit Unit
---@param state UnitState
---@param opcode LimitOp
---@param limitval float
---@return Event
function Trigger:registerUnitStateEvent(unit, state, opcode, limitval)
--@debug@
    checkobject(self, Trigger, 'registerUnitStateEvent', 'self')
    checkobject(unit, require('lib.stdlib.oop.unit'), 'registerUnitStateEvent', 1)
    checkuserdata(state, 'unitstate', 'registerUnitStateEvent', 2)
    checkuserdata(opcode, 'limitop', 'registerUnitStateEvent', 3)
    checktype(limitval, 'float', 'registerUnitStateEvent', 4)
--@end-debug@
    return require('lib.stdlib.oop.event'):fromUd(Native.TriggerRegisterUnitStateEvent(getUd(self), getUd(unit), state, opcode, limitval))
end

---registerUnitEvent
---@param unit Unit
---@param event UnitEvent
---@return Event
function Trigger:registerUnitEvent(unit, event)
--@debug@
    checkobject(self, Trigger, 'registerUnitEvent', 'self')
    checkobject(unit, require('lib.stdlib.oop.unit'), 'registerUnitEvent', 1)
    checkuserdata(event, 'unitevent', 'registerUnitEvent', 2)
--@end-debug@
    return require('lib.stdlib.oop.event'):fromUd(Native.TriggerRegisterUnitEvent(getUd(self), getUd(unit), event))
end

---registerFilterUnitEvent
---@param unit Unit
---@param event UnitEvent
---@param filter BoolExpr
---@return Event
function Trigger:registerFilterUnitEvent(unit, event, filter)
--@debug@
    checkobject(self, Trigger, 'registerFilterUnitEvent', 'self')
    checkobject(unit, require('lib.stdlib.oop.unit'), 'registerFilterUnitEvent', 1)
    checkuserdata(event, 'unitevent', 'registerFilterUnitEvent', 2)
    checkobject(filter, require('lib.stdlib.oop.boolexpr'), 'registerFilterUnitEvent', 3)
--@end-debug@
    return require('lib.stdlib.oop.event'):fromUd(Native.TriggerRegisterFilterUnitEvent(getUd(self), getUd(unit), event, getUd(filter)))
end

---registerUnitInRange
---@param unit Unit
---@param range float
---@param filter BoolExpr
---@return Event
function Trigger:registerUnitInRange(unit, range, filter)
--@debug@
    checkobject(self, Trigger, 'registerUnitInRange', 'self')
    checkobject(unit, require('lib.stdlib.oop.unit'), 'registerUnitInRange', 1)
    checktype(range, 'float', 'registerUnitInRange', 2)
    checkobject(filter, require('lib.stdlib.oop.boolexpr'), 'registerUnitInRange', 3)
--@end-debug@
    return require('lib.stdlib.oop.event'):fromUd(Native.TriggerRegisterUnitInRange(getUd(self), getUd(unit), range, getUd(filter)))
end

---addCondition
---@param condition function
---@return TriggerCondition
function Trigger:addCondition(condition)
--@debug@
    checkobject(self, Trigger, 'addCondition', 'self')
    checktype(condition, 'function', 'addCondition', 1)
--@end-debug@
    condition = Native.Condition(condition)
    return require('lib.stdlib.oop.triggercondition'):fromUd(Native.TriggerAddCondition(getUd(self), condition))
end

---removeCondition
---@param condition TriggerCondition
---@return void
function Trigger:removeCondition(condition)
--@debug@
    checkobject(self, Trigger, 'removeCondition', 'self')
    checkobject(condition, require('lib.stdlib.oop.triggercondition'), 'removeCondition', 1)
--@end-debug@
    return Native.TriggerRemoveCondition(getUd(self), getUd(condition))
end

---clearConditions
---@return void
function Trigger:clearConditions()
--@debug@
    checkobject(self, Trigger, 'clearConditions', 'self')
--@end-debug@
    return Native.TriggerClearConditions(getUd(self))
end

---addAction
---@param actionFunc function
---@return TriggerAction
function Trigger:addAction(actionFunc)
--@debug@
    checkobject(self, Trigger, 'addAction', 'self')
    checktype(actionFunc, 'function', 'addAction', 1)
--@end-debug@
    return Native.TriggerAddAction(getUd(self), actionFunc)
end

---removeAction
---@param action TriggerAction
---@return void
function Trigger:removeAction(action)
--@debug@
    checkobject(self, Trigger, 'removeAction', 'self')
    checkuserdata(action, 'triggeraction', 'removeAction', 1)
--@end-debug@
    return Native.TriggerRemoveAction(getUd(self), action)
end

---clearActions
---@return void
function Trigger:clearActions()
--@debug@
    checkobject(self, Trigger, 'clearActions', 'self')
--@end-debug@
    return Native.TriggerClearActions(getUd(self))
end

---evaluate
---@return boolean
function Trigger:evaluate()
--@debug@
    checkobject(self, Trigger, 'evaluate', 'self')
--@end-debug@
    return Native.TriggerEvaluate(getUd(self))
end

---execute
---@return void
function Trigger:execute()
--@debug@
    checkobject(self, Trigger, 'execute', 'self')
--@end-debug@
    return Native.TriggerExecute(getUd(self))
end

---executeWait
---@return void
function Trigger:executeWait()
--@debug@
    checkobject(self, Trigger, 'executeWait', 'self')
--@end-debug@
    return Native.TriggerExecuteWait(getUd(self))
end

---registerFrameEvent
---@param frame Frame
---@param eventId FrameEventType
---@return Event
function Trigger:registerFrameEvent(frame, eventId)
--@debug@
    checkobject(self, Trigger, 'registerFrameEvent', 'self')
    checkobject(frame, require('lib.stdlib.oop.frame'), 'registerFrameEvent', 1)
    checkuserdata(eventId, 'frameeventtype', 'registerFrameEvent', 2)
--@end-debug@
    return require('lib.stdlib.oop.event'):fromUd(Native.BlzTriggerRegisterFrameEvent(getUd(self), getUd(frame), eventId))
end

---registerPlayerSyncEvent
---@param player Player
---@param prefix string
---@param fromServer boolean
---@return Event
function Trigger:registerPlayerSyncEvent(player, prefix, fromServer)
--@debug@
    checkobject(self, Trigger, 'registerPlayerSyncEvent', 'self')
    checkobject(player, require('lib.stdlib.oop.player'), 'registerPlayerSyncEvent', 1)
    checktype(prefix, 'string', 'registerPlayerSyncEvent', 2)
    checktype(fromServer, 'boolean', 'registerPlayerSyncEvent', 3)
--@end-debug@
    return require('lib.stdlib.oop.event'):fromUd(Native.BlzTriggerRegisterPlayerSyncEvent(getUd(self), getUd(player), prefix, fromServer))
end

---registerPlayerKeyEvent
---@param player Player
---@param key OsKeyType
---@param metaKey integer
---@param keyDown boolean
---@return Event
function Trigger:registerPlayerKeyEvent(player, key, metaKey, keyDown)
--@debug@
    checkobject(self, Trigger, 'registerPlayerKeyEvent', 'self')
    checkobject(player, require('lib.stdlib.oop.player'), 'registerPlayerKeyEvent', 1)
    checkuserdata(key, 'oskeytype', 'registerPlayerKeyEvent', 2)
    checktype(metaKey, 'integer', 'registerPlayerKeyEvent', 3)
    checktype(keyDown, 'boolean', 'registerPlayerKeyEvent', 4)
--@end-debug@
    return require('lib.stdlib.oop.event'):fromUd(Native.BlzTriggerRegisterPlayerKeyEvent(getUd(self), getUd(player), key, metaKey, keyDown))
end

return Trigger]]

P['lib/stdlib/oop/_generated/_triggercondition.lua'] = [[local Native = require('lib.stdlib.native')

---@class TriggerCondition : Agent
local TriggerCondition = class('TriggerCondition', require('lib.stdlib.oop.agent'))

return TriggerCondition]]

P['lib/stdlib/oop/_generated/_ubersplat.lua'] = [[local Native = require('lib.stdlib.native')

---@class Ubersplat : Handle
local Ubersplat = class('Ubersplat', require('lib.stdlib.oop.handle'))

---destructor
---@return void
function Ubersplat:destructor()
--@debug@
    checkobject(self, Ubersplat, 'destructor', 'self')
--@end-debug@
    return Native.DestroyUbersplat(getUd(self))
end

---<**_DEPRECATED_**> destroy
---@return void
function Ubersplat:destroy()
--@debug@
    deprecated('Ubersplat.destroy', 'Ubersplat.delete')
--@end-debug@
    return self:delete()
end

---<static> create
---@overload fun(vec: Vector, name: string, red: integer, green: integer, blue: integer, alpha: integer, forcePaused: boolean, noBirthTime: boolean): Ubersplat
---@param x float
---@param y float
---@param name string
---@param red integer
---@param green integer
---@param blue integer
---@param alpha integer
---@param forcePaused boolean
---@param noBirthTime boolean
---@return Ubersplat
function Ubersplat:create(x, y, name, red, green, blue, alpha, forcePaused, noBirthTime)
    if type(x) == 'table' then
        name, red, green, blue, alpha, forcePaused, noBirthTime = y, name, red, green, blue, alpha, forcePaused
        x, y = table.unpack(x)
    end
--@debug@
    checkclass(self, Ubersplat, 'create', 'self')
    checktype(x, 'float', 'create', 1)
    checktype(y, 'float', 'create', 2)
    checktype(name, 'string', 'create', 3)
    checktype(red, 'integer', 'create', 4)
    checktype(green, 'integer', 'create', 5)
    checktype(blue, 'integer', 'create', 6)
    checktype(alpha, 'integer', 'create', 7)
    checktype(forcePaused, 'boolean', 'create', 8)
    checktype(noBirthTime, 'boolean', 'create', 9)
--@end-debug@
    return Ubersplat:fromUd(Native.CreateUbersplat(x, y, name, red, green, blue, alpha, forcePaused, noBirthTime))
end

---reset
---@return void
function Ubersplat:reset()
--@debug@
    checkobject(self, Ubersplat, 'reset', 'self')
--@end-debug@
    return Native.ResetUbersplat(getUd(self))
end

---finish
---@return void
function Ubersplat:finish()
--@debug@
    checkobject(self, Ubersplat, 'finish', 'self')
--@end-debug@
    return Native.FinishUbersplat(getUd(self))
end

---setShown
---@param flag boolean
---@return void
function Ubersplat:setShown(flag)
--@debug@
    checkobject(self, Ubersplat, 'setShown', 'self')
    checktype(flag, 'boolean', 'setShown', 1)
--@end-debug@
    return Native.ShowUbersplat(getUd(self), flag)
end

---setRender
---@param flag boolean
---@return void
function Ubersplat:setRender(flag)
--@debug@
    checkobject(self, Ubersplat, 'setRender', 'self')
    checktype(flag, 'boolean', 'setRender', 1)
--@end-debug@
    return Native.SetUbersplatRender(getUd(self), flag)
end

---setRenderAlways
---@param flag boolean
---@return void
function Ubersplat:setRenderAlways(flag)
--@debug@
    checkobject(self, Ubersplat, 'setRenderAlways', 'self')
    checktype(flag, 'boolean', 'setRenderAlways', 1)
--@end-debug@
    return Native.SetUbersplatRenderAlways(getUd(self), flag)
end

return Ubersplat]]

P['lib/stdlib/oop/_generated/_unit.lua'] = [[local Native = require('lib.stdlib.native')

---@class Unit : Widget
local Unit = class('Unit', require('lib.stdlib.oop.widget'))

---destructor
---@return void
function Unit:destructor()
--@debug@
    checkobject(self, Unit, 'destructor', 'self')
--@end-debug@
    return Native.RemoveUnit(getUd(self))
end

---<**_DEPRECATED_**> remove
---@return void
function Unit:remove()
--@debug@
    deprecated('Unit.remove', 'Unit.delete')
--@end-debug@
    return self:delete()
end

---<static> create
---@overload fun(id: Player, unitid: integer, vec: Vector, face: float): Unit
---@param id Player
---@param unitid integer
---@param x float
---@param y float
---@param face float
---@return Unit
function Unit:create(id, unitid, x, y, face)
    if type(x) == 'table' then
        face = y
        x, y = table.unpack(x)
    end
--@debug@
    checkclass(self, Unit, 'create', 'self')
    checkobject(id, require('lib.stdlib.oop.player'), 'create', 1)
    checktype(unitid, 'integer', 'create', 2)
    checktype(x, 'float', 'create', 3)
    checktype(y, 'float', 'create', 4)
    checktype(face, 'float', 'create', 5)
--@end-debug@
    return Unit:fromUd(Native.CreateUnit(getUd(id), unitid, x, y, face))
end

---<static> createByName
---@overload fun(player: Player, unitname: string, vec: Vector, face: float): Unit
---@param player Player
---@param unitname string
---@param x float
---@param y float
---@param face float
---@return Unit
function Unit:createByName(player, unitname, x, y, face)
    if type(x) == 'table' then
        face = y
        x, y = table.unpack(x)
    end
--@debug@
    checkclass(self, Unit, 'createByName', 'self')
    checkobject(player, require('lib.stdlib.oop.player'), 'createByName', 1)
    checktype(unitname, 'string', 'createByName', 2)
    checktype(x, 'float', 'createByName', 3)
    checktype(y, 'float', 'createByName', 4)
    checktype(face, 'float', 'createByName', 5)
--@end-debug@
    return Unit:fromUd(Native.CreateUnitByName(getUd(player), unitname, x, y, face))
end

---<static> createCorpse
---@overload fun(player: Player, unitid: integer, vec: Vector, face: float): Unit
---@param player Player
---@param unitid integer
---@param x float
---@param y float
---@param face float
---@return Unit
function Unit:createCorpse(player, unitid, x, y, face)
    if type(x) == 'table' then
        face = y
        x, y = table.unpack(x)
    end
--@debug@
    checkclass(self, Unit, 'createCorpse', 'self')
    checkobject(player, require('lib.stdlib.oop.player'), 'createCorpse', 1)
    checktype(unitid, 'integer', 'createCorpse', 2)
    checktype(x, 'float', 'createCorpse', 3)
    checktype(y, 'float', 'createCorpse', 4)
    checktype(face, 'float', 'createCorpse', 5)
--@end-debug@
    return Unit:fromUd(Native.CreateCorpse(getUd(player), unitid, x, y, face))
end

---<static> createBlightedGoldmine
---@overload fun(id: Player, vec: Vector, face: float): Unit
---@param id Player
---@param x float
---@param y float
---@param face float
---@return Unit
function Unit:createBlightedGoldmine(id, x, y, face)
    if type(x) == 'table' then
        face = y
        x, y = table.unpack(x)
    end
--@debug@
    checkclass(self, Unit, 'createBlightedGoldmine', 'self')
    checkobject(id, require('lib.stdlib.oop.player'), 'createBlightedGoldmine', 1)
    checktype(x, 'float', 'createBlightedGoldmine', 2)
    checktype(y, 'float', 'createBlightedGoldmine', 3)
    checktype(face, 'float', 'createBlightedGoldmine', 4)
--@end-debug@
    return Unit:fromUd(Native.CreateBlightedGoldmine(getUd(id), x, y, face))
end

---<static> createWithSkin
---@overload fun(id: Player, unitid: integer, vec: Vector, face: float, skinId: integer): Unit
---@param id Player
---@param unitid integer
---@param x float
---@param y float
---@param face float
---@param skinId integer
---@return Unit
function Unit:createWithSkin(id, unitid, x, y, face, skinId)
    if type(x) == 'table' then
        face, skinId = y, face
        x, y = table.unpack(x)
    end
--@debug@
    checkclass(self, Unit, 'createWithSkin', 'self')
    checkobject(id, require('lib.stdlib.oop.player'), 'createWithSkin', 1)
    checktype(unitid, 'integer', 'createWithSkin', 2)
    checktype(x, 'float', 'createWithSkin', 3)
    checktype(y, 'float', 'createWithSkin', 4)
    checktype(face, 'float', 'createWithSkin', 5)
    checktype(skinId, 'integer', 'createWithSkin', 6)
--@end-debug@
    return Unit:fromUd(Native.BlzCreateUnitWithSkin(getUd(id), unitid, x, y, face, skinId))
end

---kill
---@return void
function Unit:kill()
--@debug@
    checkobject(self, Unit, 'kill', 'self')
--@end-debug@
    return Native.KillUnit(getUd(self))
end

---setShown
---@param show boolean
---@return void
function Unit:setShown(show)
--@debug@
    checkobject(self, Unit, 'setShown', 'self')
    checktype(show, 'boolean', 'setShown', 1)
--@end-debug@
    return Native.ShowUnit(getUd(self), show)
end

---setState
---@param unitState UnitState
---@param val float
---@return void
function Unit:setState(unitState, val)
--@debug@
    checkobject(self, Unit, 'setState', 'self')
    checkuserdata(unitState, 'unitstate', 'setState', 1)
    checktype(val, 'float', 'setState', 2)
--@end-debug@
    return Native.SetUnitState(getUd(self), unitState, val)
end

---setX
---@param x float
---@return void
function Unit:setX(x)
--@debug@
    checkobject(self, Unit, 'setX', 'self')
    checktype(x, 'float', 'setX', 1)
--@end-debug@
    return Native.SetUnitX(getUd(self), x)
end

---setY
---@param y float
---@return void
function Unit:setY(y)
--@debug@
    checkobject(self, Unit, 'setY', 'self')
    checktype(y, 'float', 'setY', 1)
--@end-debug@
    return Native.SetUnitY(getUd(self), y)
end

---setPosition
---@overload fun(vec: Vector): void
---@param x float
---@param y float
---@return void
function Unit:setPosition(x, y)
    if type(x) == 'table' then
        x, y = table.unpack(x)
    end
--@debug@
    checkobject(self, Unit, 'setPosition', 'self')
    checktype(x, 'float', 'setPosition', 1)
    checktype(y, 'float', 'setPosition', 2)
--@end-debug@
    return Native.SetUnitPosition(getUd(self), x, y)
end

---setFacing
---@param facingAngle float
---@return void
function Unit:setFacing(facingAngle)
--@debug@
    checkobject(self, Unit, 'setFacing', 'self')
    checktype(facingAngle, 'float', 'setFacing', 1)
--@end-debug@
    return Native.SetUnitFacing(getUd(self), facingAngle)
end

---setFacingTimed
---@param facingAngle float
---@param duration float
---@return void
function Unit:setFacingTimed(facingAngle, duration)
--@debug@
    checkobject(self, Unit, 'setFacingTimed', 'self')
    checktype(facingAngle, 'float', 'setFacingTimed', 1)
    checktype(duration, 'float', 'setFacingTimed', 2)
--@end-debug@
    return Native.SetUnitFacingTimed(getUd(self), facingAngle, duration)
end

---setMoveSpeed
---@param speed float
---@return void
function Unit:setMoveSpeed(speed)
--@debug@
    checkobject(self, Unit, 'setMoveSpeed', 'self')
    checktype(speed, 'float', 'setMoveSpeed', 1)
--@end-debug@
    return Native.SetUnitMoveSpeed(getUd(self), speed)
end

---setFlyHeight
---@param height float
---@param rate float
---@return void
function Unit:setFlyHeight(height, rate)
--@debug@
    checkobject(self, Unit, 'setFlyHeight', 'self')
    checktype(height, 'float', 'setFlyHeight', 1)
    checktype(rate, 'float', 'setFlyHeight', 2)
--@end-debug@
    return Native.SetUnitFlyHeight(getUd(self), height, rate)
end

---setTurnSpeed
---@param turnSpeed float
---@return void
function Unit:setTurnSpeed(turnSpeed)
--@debug@
    checkobject(self, Unit, 'setTurnSpeed', 'self')
    checktype(turnSpeed, 'float', 'setTurnSpeed', 1)
--@end-debug@
    return Native.SetUnitTurnSpeed(getUd(self), turnSpeed)
end

---setPropWindow
---@param propWindowAngle float
---@return void
function Unit:setPropWindow(propWindowAngle)
--@debug@
    checkobject(self, Unit, 'setPropWindow', 'self')
    checktype(propWindowAngle, 'float', 'setPropWindow', 1)
--@end-debug@
    return Native.SetUnitPropWindow(getUd(self), propWindowAngle)
end

---setAcquireRange
---@param acquireRange float
---@return void
function Unit:setAcquireRange(acquireRange)
--@debug@
    checkobject(self, Unit, 'setAcquireRange', 'self')
    checktype(acquireRange, 'float', 'setAcquireRange', 1)
--@end-debug@
    return Native.SetUnitAcquireRange(getUd(self), acquireRange)
end

---setCreepGuard
---@param creepGuard boolean
---@return void
function Unit:setCreepGuard(creepGuard)
--@debug@
    checkobject(self, Unit, 'setCreepGuard', 'self')
    checktype(creepGuard, 'boolean', 'setCreepGuard', 1)
--@end-debug@
    return Native.SetUnitCreepGuard(getUd(self), creepGuard)
end

---getAcquireRange
---@return float
function Unit:getAcquireRange()
--@debug@
    checkobject(self, Unit, 'getAcquireRange', 'self')
--@end-debug@
    return Native.GetUnitAcquireRange(getUd(self))
end

---getTurnSpeed
---@return float
function Unit:getTurnSpeed()
--@debug@
    checkobject(self, Unit, 'getTurnSpeed', 'self')
--@end-debug@
    return Native.GetUnitTurnSpeed(getUd(self))
end

---getPropWindow
---@return float
function Unit:getPropWindow()
--@debug@
    checkobject(self, Unit, 'getPropWindow', 'self')
--@end-debug@
    return Native.GetUnitPropWindow(getUd(self))
end

---getFlyHeight
---@return float
function Unit:getFlyHeight()
--@debug@
    checkobject(self, Unit, 'getFlyHeight', 'self')
--@end-debug@
    return Native.GetUnitFlyHeight(getUd(self))
end

---getDefaultAcquireRange
---@return float
function Unit:getDefaultAcquireRange()
--@debug@
    checkobject(self, Unit, 'getDefaultAcquireRange', 'self')
--@end-debug@
    return Native.GetUnitDefaultAcquireRange(getUd(self))
end

---getDefaultTurnSpeed
---@return float
function Unit:getDefaultTurnSpeed()
--@debug@
    checkobject(self, Unit, 'getDefaultTurnSpeed', 'self')
--@end-debug@
    return Native.GetUnitDefaultTurnSpeed(getUd(self))
end

---getDefaultPropWindow
---@return float
function Unit:getDefaultPropWindow()
--@debug@
    checkobject(self, Unit, 'getDefaultPropWindow', 'self')
--@end-debug@
    return Native.GetUnitDefaultPropWindow(getUd(self))
end

---getDefaultFlyHeight
---@return float
function Unit:getDefaultFlyHeight()
--@debug@
    checkobject(self, Unit, 'getDefaultFlyHeight', 'self')
--@end-debug@
    return Native.GetUnitDefaultFlyHeight(getUd(self))
end

---setOwner
---@param player Player
---@param changeColor boolean
---@return void
function Unit:setOwner(player, changeColor)
--@debug@
    checkobject(self, Unit, 'setOwner', 'self')
    checkobject(player, require('lib.stdlib.oop.player'), 'setOwner', 1)
    checktype(changeColor, 'boolean', 'setOwner', 2)
--@end-debug@
    return Native.SetUnitOwner(getUd(self), getUd(player), changeColor)
end

---setColor
---@param color PlayerColor
---@return void
function Unit:setColor(color)
--@debug@
    checkobject(self, Unit, 'setColor', 'self')
    checkuserdata(color, 'playercolor', 'setColor', 1)
--@end-debug@
    return Native.SetUnitColor(getUd(self), color)
end

---setScale
---@overload fun(vec: Vector3): void
---@param scaleX float
---@param scaleY float
---@param scaleZ float
---@return void
function Unit:setScale(scaleX, scaleY, scaleZ)
    if type(scaleX) == 'table' then
        scaleX, scaleY, scaleZ = table.unpack(scaleX)
    end
--@debug@
    checkobject(self, Unit, 'setScale', 'self')
    checktype(scaleX, 'float', 'setScale', 1)
    checktype(scaleY, 'float', 'setScale', 2)
    checktype(scaleZ, 'float', 'setScale', 3)
--@end-debug@
    return Native.SetUnitScale(getUd(self), scaleX, scaleY, scaleZ)
end

---setTimeScale
---@param timeScale float
---@return void
function Unit:setTimeScale(timeScale)
--@debug@
    checkobject(self, Unit, 'setTimeScale', 'self')
    checktype(timeScale, 'float', 'setTimeScale', 1)
--@end-debug@
    return Native.SetUnitTimeScale(getUd(self), timeScale)
end

---setBlendTime
---@param blendTime float
---@return void
function Unit:setBlendTime(blendTime)
--@debug@
    checkobject(self, Unit, 'setBlendTime', 'self')
    checktype(blendTime, 'float', 'setBlendTime', 1)
--@end-debug@
    return Native.SetUnitBlendTime(getUd(self), blendTime)
end

---setVertexColor
---@param red integer
---@param green integer
---@param blue integer
---@param alpha integer
---@return void
function Unit:setVertexColor(red, green, blue, alpha)
--@debug@
    checkobject(self, Unit, 'setVertexColor', 'self')
    checktype(red, 'integer', 'setVertexColor', 1)
    checktype(green, 'integer', 'setVertexColor', 2)
    checktype(blue, 'integer', 'setVertexColor', 3)
    checktype(alpha, 'integer', 'setVertexColor', 4)
--@end-debug@
    return Native.SetUnitVertexColor(getUd(self), red, green, blue, alpha)
end

---queueAnimation
---@param animation string
---@return void
function Unit:queueAnimation(animation)
--@debug@
    checkobject(self, Unit, 'queueAnimation', 'self')
    checktype(animation, 'string', 'queueAnimation', 1)
--@end-debug@
    return Native.QueueUnitAnimation(getUd(self), animation)
end

---setAnimation
---@param animation string
---@return void
function Unit:setAnimation(animation)
--@debug@
    checkobject(self, Unit, 'setAnimation', 'self')
    checktype(animation, 'string', 'setAnimation', 1)
--@end-debug@
    return Native.SetUnitAnimation(getUd(self), animation)
end

---setAnimationByIndex
---@param animation integer
---@return void
function Unit:setAnimationByIndex(animation)
--@debug@
    checkobject(self, Unit, 'setAnimationByIndex', 'self')
    checktype(animation, 'integer', 'setAnimationByIndex', 1)
--@end-debug@
    return Native.SetUnitAnimationByIndex(getUd(self), animation)
end

---setAnimationWithRarity
---@param animation string
---@param rarity RarityControl
---@return void
function Unit:setAnimationWithRarity(animation, rarity)
--@debug@
    checkobject(self, Unit, 'setAnimationWithRarity', 'self')
    checktype(animation, 'string', 'setAnimationWithRarity', 1)
    checkuserdata(rarity, 'raritycontrol', 'setAnimationWithRarity', 2)
--@end-debug@
    return Native.SetUnitAnimationWithRarity(getUd(self), animation, rarity)
end

---addAnimationProperties
---@param animProperties string
---@param add boolean
---@return void
function Unit:addAnimationProperties(animProperties, add)
--@debug@
    checkobject(self, Unit, 'addAnimationProperties', 'self')
    checktype(animProperties, 'string', 'addAnimationProperties', 1)
    checktype(add, 'boolean', 'addAnimationProperties', 2)
--@end-debug@
    return Native.AddUnitAnimationProperties(getUd(self), animProperties, add)
end

---setUnitLookAt
---@overload fun(bone: string, lookAtTarget: Unit, vec: Vector3): void
---@param bone string
---@param lookAtTarget Unit
---@param offsetX float
---@param offsetY float
---@param offsetZ float
---@return void
function Unit:setUnitLookAt(bone, lookAtTarget, offsetX, offsetY, offsetZ)
    if type(offsetX) == 'table' then
        offsetX, offsetY, offsetZ = table.unpack(offsetX)
    end
--@debug@
    checkobject(self, Unit, 'setUnitLookAt', 'self')
    checktype(bone, 'string', 'setUnitLookAt', 1)
    checkobject(lookAtTarget, require('lib.stdlib.oop.unit'), 'setUnitLookAt', 2)
    checktype(offsetX, 'float', 'setUnitLookAt', 3)
    checktype(offsetY, 'float', 'setUnitLookAt', 4)
    checktype(offsetZ, 'float', 'setUnitLookAt', 5)
--@end-debug@
    return Native.SetUnitLookAt(getUd(self), bone, getUd(lookAtTarget), offsetX, offsetY, offsetZ)
end

---resetLookAt
---@return void
function Unit:resetLookAt()
--@debug@
    checkobject(self, Unit, 'resetLookAt', 'self')
--@end-debug@
    return Native.ResetUnitLookAt(getUd(self))
end

---setRescuable
---@param byWhichPlayer Player
---@param flag boolean
---@return void
function Unit:setRescuable(byWhichPlayer, flag)
--@debug@
    checkobject(self, Unit, 'setRescuable', 'self')
    checkobject(byWhichPlayer, require('lib.stdlib.oop.player'), 'setRescuable', 1)
    checktype(flag, 'boolean', 'setRescuable', 2)
--@end-debug@
    return Native.SetUnitRescuable(getUd(self), getUd(byWhichPlayer), flag)
end

---setRescueRange
---@param range float
---@return void
function Unit:setRescueRange(range)
--@debug@
    checkobject(self, Unit, 'setRescueRange', 'self')
    checktype(range, 'float', 'setRescueRange', 1)
--@end-debug@
    return Native.SetUnitRescueRange(getUd(self), range)
end

---setHeroStr
---@param str integer
---@param permanent boolean
---@return void
function Unit:setHeroStr(str, permanent)
--@debug@
    checkobject(self, Unit, 'setHeroStr', 'self')
    checktype(str, 'integer', 'setHeroStr', 1)
    checktype(permanent, 'boolean', 'setHeroStr', 2)
--@end-debug@
    return Native.SetHeroStr(getUd(self), str, permanent)
end

---setHeroAgi
---@param agi integer
---@param permanent boolean
---@return void
function Unit:setHeroAgi(agi, permanent)
--@debug@
    checkobject(self, Unit, 'setHeroAgi', 'self')
    checktype(agi, 'integer', 'setHeroAgi', 1)
    checktype(permanent, 'boolean', 'setHeroAgi', 2)
--@end-debug@
    return Native.SetHeroAgi(getUd(self), agi, permanent)
end

---setHeroInt
---@param int integer
---@param permanent boolean
---@return void
function Unit:setHeroInt(int, permanent)
--@debug@
    checkobject(self, Unit, 'setHeroInt', 'self')
    checktype(int, 'integer', 'setHeroInt', 1)
    checktype(permanent, 'boolean', 'setHeroInt', 2)
--@end-debug@
    return Native.SetHeroInt(getUd(self), int, permanent)
end

---getHeroStr
---@param includeBonuses boolean
---@return integer
function Unit:getHeroStr(includeBonuses)
--@debug@
    checkobject(self, Unit, 'getHeroStr', 'self')
    checktype(includeBonuses, 'boolean', 'getHeroStr', 1)
--@end-debug@
    return Native.GetHeroStr(getUd(self), includeBonuses)
end

---getHeroAgi
---@param includeBonuses boolean
---@return integer
function Unit:getHeroAgi(includeBonuses)
--@debug@
    checkobject(self, Unit, 'getHeroAgi', 'self')
    checktype(includeBonuses, 'boolean', 'getHeroAgi', 1)
--@end-debug@
    return Native.GetHeroAgi(getUd(self), includeBonuses)
end

---getHeroInt
---@param includeBonuses boolean
---@return integer
function Unit:getHeroInt(includeBonuses)
--@debug@
    checkobject(self, Unit, 'getHeroInt', 'self')
    checktype(includeBonuses, 'boolean', 'getHeroInt', 1)
--@end-debug@
    return Native.GetHeroInt(getUd(self), includeBonuses)
end

---stripHeroLevel
---@param howManyLevels integer
---@return boolean
function Unit:stripHeroLevel(howManyLevels)
--@debug@
    checkobject(self, Unit, 'stripHeroLevel', 'self')
    checktype(howManyLevels, 'integer', 'stripHeroLevel', 1)
--@end-debug@
    return Native.UnitStripHeroLevel(getUd(self), howManyLevels)
end

---getHeroXP
---@return integer
function Unit:getHeroXP()
--@debug@
    checkobject(self, Unit, 'getHeroXP', 'self')
--@end-debug@
    return Native.GetHeroXP(getUd(self))
end

---setHeroXP
---@param xpVal integer
---@param showEyeCandy boolean
---@return void
function Unit:setHeroXP(xpVal, showEyeCandy)
--@debug@
    checkobject(self, Unit, 'setHeroXP', 'self')
    checktype(xpVal, 'integer', 'setHeroXP', 1)
    checktype(showEyeCandy, 'boolean', 'setHeroXP', 2)
--@end-debug@
    return Native.SetHeroXP(getUd(self), xpVal, showEyeCandy)
end

---getHeroSkillPoints
---@return integer
function Unit:getHeroSkillPoints()
--@debug@
    checkobject(self, Unit, 'getHeroSkillPoints', 'self')
--@end-debug@
    return Native.GetHeroSkillPoints(getUd(self))
end

---modifySkillPoints
---@param skillPointDelta integer
---@return boolean
function Unit:modifySkillPoints(skillPointDelta)
--@debug@
    checkobject(self, Unit, 'modifySkillPoints', 'self')
    checktype(skillPointDelta, 'integer', 'modifySkillPoints', 1)
--@end-debug@
    return Native.UnitModifySkillPoints(getUd(self), skillPointDelta)
end

---addHeroXP
---@param xpToAdd integer
---@param showEyeCandy boolean
---@return void
function Unit:addHeroXP(xpToAdd, showEyeCandy)
--@debug@
    checkobject(self, Unit, 'addHeroXP', 'self')
    checktype(xpToAdd, 'integer', 'addHeroXP', 1)
    checktype(showEyeCandy, 'boolean', 'addHeroXP', 2)
--@end-debug@
    return Native.AddHeroXP(getUd(self), xpToAdd, showEyeCandy)
end

---setHeroLevel
---@param level integer
---@param showEyeCandy boolean
---@return void
function Unit:setHeroLevel(level, showEyeCandy)
--@debug@
    checkobject(self, Unit, 'setHeroLevel', 'self')
    checktype(level, 'integer', 'setHeroLevel', 1)
    checktype(showEyeCandy, 'boolean', 'setHeroLevel', 2)
--@end-debug@
    return Native.SetHeroLevel(getUd(self), level, showEyeCandy)
end

---getHeroLevel
---@return integer
function Unit:getHeroLevel()
--@debug@
    checkobject(self, Unit, 'getHeroLevel', 'self')
--@end-debug@
    return Native.GetHeroLevel(getUd(self))
end

---getLevel
---@return integer
function Unit:getLevel()
--@debug@
    checkobject(self, Unit, 'getLevel', 'self')
--@end-debug@
    return Native.GetUnitLevel(getUd(self))
end

---getHeroProperName
---@return string
function Unit:getHeroProperName()
--@debug@
    checkobject(self, Unit, 'getHeroProperName', 'self')
--@end-debug@
    return Native.GetHeroProperName(getUd(self))
end

---suspendHeroXP
---@param flag boolean
---@return void
function Unit:suspendHeroXP(flag)
--@debug@
    checkobject(self, Unit, 'suspendHeroXP', 'self')
    checktype(flag, 'boolean', 'suspendHeroXP', 1)
--@end-debug@
    return Native.SuspendHeroXP(getUd(self), flag)
end

---isSuspendedXP
---@return boolean
function Unit:isSuspendedXP()
--@debug@
    checkobject(self, Unit, 'isSuspendedXP', 'self')
--@end-debug@
    return Native.IsSuspendedXP(getUd(self))
end

---selectHeroSkill
---@param abilcode integer
---@return void
function Unit:selectHeroSkill(abilcode)
--@debug@
    checkobject(self, Unit, 'selectHeroSkill', 'self')
    checktype(abilcode, 'integer', 'selectHeroSkill', 1)
--@end-debug@
    return Native.SelectHeroSkill(getUd(self), abilcode)
end

---getAbilityLevel
---@param abilcode integer
---@return integer
function Unit:getAbilityLevel(abilcode)
--@debug@
    checkobject(self, Unit, 'getAbilityLevel', 'self')
    checktype(abilcode, 'integer', 'getAbilityLevel', 1)
--@end-debug@
    return Native.GetUnitAbilityLevel(getUd(self), abilcode)
end

---decAbilityLevel
---@param abilcode integer
---@return integer
function Unit:decAbilityLevel(abilcode)
--@debug@
    checkobject(self, Unit, 'decAbilityLevel', 'self')
    checktype(abilcode, 'integer', 'decAbilityLevel', 1)
--@end-debug@
    return Native.DecUnitAbilityLevel(getUd(self), abilcode)
end

---incAbilityLevel
---@param abilcode integer
---@return integer
function Unit:incAbilityLevel(abilcode)
--@debug@
    checkobject(self, Unit, 'incAbilityLevel', 'self')
    checktype(abilcode, 'integer', 'incAbilityLevel', 1)
--@end-debug@
    return Native.IncUnitAbilityLevel(getUd(self), abilcode)
end

---setAbilityLevel
---@param abilcode integer
---@param level integer
---@return integer
function Unit:setAbilityLevel(abilcode, level)
--@debug@
    checkobject(self, Unit, 'setAbilityLevel', 'self')
    checktype(abilcode, 'integer', 'setAbilityLevel', 1)
    checktype(level, 'integer', 'setAbilityLevel', 2)
--@end-debug@
    return Native.SetUnitAbilityLevel(getUd(self), abilcode, level)
end

---reviveHero
---@overload fun(vec: Vector, doEyecandy: boolean): boolean
---@param x float
---@param y float
---@param doEyecandy boolean
---@return boolean
function Unit:reviveHero(x, y, doEyecandy)
    if type(x) == 'table' then
        doEyecandy = y
        x, y = table.unpack(x)
    end
--@debug@
    checkobject(self, Unit, 'reviveHero', 'self')
    checktype(x, 'float', 'reviveHero', 1)
    checktype(y, 'float', 'reviveHero', 2)
    checktype(doEyecandy, 'boolean', 'reviveHero', 3)
--@end-debug@
    return Native.ReviveHero(getUd(self), x, y, doEyecandy)
end

---setExploded
---@param exploded boolean
---@return void
function Unit:setExploded(exploded)
--@debug@
    checkobject(self, Unit, 'setExploded', 'self')
    checktype(exploded, 'boolean', 'setExploded', 1)
--@end-debug@
    return Native.SetUnitExploded(getUd(self), exploded)
end

---setInvulnerable
---@param flag boolean
---@return void
function Unit:setInvulnerable(flag)
--@debug@
    checkobject(self, Unit, 'setInvulnerable', 'self')
    checktype(flag, 'boolean', 'setInvulnerable', 1)
--@end-debug@
    return Native.SetUnitInvulnerable(getUd(self), flag)
end

---setPaused
---@param flag boolean
---@return void
function Unit:setPaused(flag)
--@debug@
    checkobject(self, Unit, 'setPaused', 'self')
    checktype(flag, 'boolean', 'setPaused', 1)
--@end-debug@
    return Native.PauseUnit(getUd(self), flag)
end

---isPaused
---@return boolean
function Unit:isPaused()
--@debug@
    checkobject(self, Unit, 'isPaused', 'self')
--@end-debug@
    return Native.IsUnitPaused(getUd(self))
end

---setPathing
---@param flag boolean
---@return void
function Unit:setPathing(flag)
--@debug@
    checkobject(self, Unit, 'setPathing', 'self')
    checktype(flag, 'boolean', 'setPathing', 1)
--@end-debug@
    return Native.SetUnitPathing(getUd(self), flag)
end

---setSelected
---@param flag boolean
---@return void
function Unit:setSelected(flag)
--@debug@
    checkobject(self, Unit, 'setSelected', 'self')
    checktype(flag, 'boolean', 'setSelected', 1)
--@end-debug@
    return Native.SelectUnit(getUd(self), flag)
end

---getPointValue
---@return integer
function Unit:getPointValue()
--@debug@
    checkobject(self, Unit, 'getPointValue', 'self')
--@end-debug@
    return Native.GetUnitPointValue(getUd(self))
end

---addItem
---@param item Item
---@return boolean
function Unit:addItem(item)
--@debug@
    checkobject(self, Unit, 'addItem', 'self')
    checkobject(item, require('lib.stdlib.oop.item'), 'addItem', 1)
--@end-debug@
    return Native.UnitAddItem(getUd(self), getUd(item))
end

---addItemById
---@param itemId integer
---@return Item
function Unit:addItemById(itemId)
--@debug@
    checkobject(self, Unit, 'addItemById', 'self')
    checktype(itemId, 'integer', 'addItemById', 1)
--@end-debug@
    return require('lib.stdlib.oop.item'):fromUd(Native.UnitAddItemById(getUd(self), itemId))
end

---addItemToSlotById
---@param itemId integer
---@param itemSlot integer
---@return boolean
function Unit:addItemToSlotById(itemId, itemSlot)
--@debug@
    checkobject(self, Unit, 'addItemToSlotById', 'self')
    checktype(itemId, 'integer', 'addItemToSlotById', 1)
    checktype(itemSlot, 'integer', 'addItemToSlotById', 2)
--@end-debug@
    return Native.UnitAddItemToSlotById(getUd(self), itemId, itemSlot)
end

---removeItem
---@param item Item
---@return void
function Unit:removeItem(item)
--@debug@
    checkobject(self, Unit, 'removeItem', 'self')
    checkobject(item, require('lib.stdlib.oop.item'), 'removeItem', 1)
--@end-debug@
    return Native.UnitRemoveItem(getUd(self), getUd(item))
end

---removeItemFromSlot
---@param itemSlot integer
---@return Item
function Unit:removeItemFromSlot(itemSlot)
--@debug@
    checkobject(self, Unit, 'removeItemFromSlot', 'self')
    checktype(itemSlot, 'integer', 'removeItemFromSlot', 1)
--@end-debug@
    return require('lib.stdlib.oop.item'):fromUd(Native.UnitRemoveItemFromSlot(getUd(self), itemSlot))
end

---hasItem
---@param item Item
---@return boolean
function Unit:hasItem(item)
--@debug@
    checkobject(self, Unit, 'hasItem', 'self')
    checkobject(item, require('lib.stdlib.oop.item'), 'hasItem', 1)
--@end-debug@
    return Native.UnitHasItem(getUd(self), getUd(item))
end

---itemInSlot
---@param itemSlot integer
---@return Item
function Unit:itemInSlot(itemSlot)
--@debug@
    checkobject(self, Unit, 'itemInSlot', 'self')
    checktype(itemSlot, 'integer', 'itemInSlot', 1)
--@end-debug@
    return require('lib.stdlib.oop.item'):fromUd(Native.UnitItemInSlot(getUd(self), itemSlot))
end

---inventorySize
---@return integer
function Unit:inventorySize()
--@debug@
    checkobject(self, Unit, 'inventorySize', 'self')
--@end-debug@
    return Native.UnitInventorySize(getUd(self))
end

---dropItemPoint
---@overload fun(item: Item, vec: Vector): boolean
---@param item Item
---@param x float
---@param y float
---@return boolean
function Unit:dropItemPoint(item, x, y)
    if type(x) == 'table' then
        x, y = table.unpack(x)
    end
--@debug@
    checkobject(self, Unit, 'dropItemPoint', 'self')
    checkobject(item, require('lib.stdlib.oop.item'), 'dropItemPoint', 1)
    checktype(x, 'float', 'dropItemPoint', 2)
    checktype(y, 'float', 'dropItemPoint', 3)
--@end-debug@
    return Native.UnitDropItemPoint(getUd(self), getUd(item), x, y)
end

---dropItemSlot
---@param item Item
---@param slot integer
---@return boolean
function Unit:dropItemSlot(item, slot)
--@debug@
    checkobject(self, Unit, 'dropItemSlot', 'self')
    checkobject(item, require('lib.stdlib.oop.item'), 'dropItemSlot', 1)
    checktype(slot, 'integer', 'dropItemSlot', 2)
--@end-debug@
    return Native.UnitDropItemSlot(getUd(self), getUd(item), slot)
end

---dropItemTarget
---@param item Item
---@param target Widget
---@return boolean
function Unit:dropItemTarget(item, target)
--@debug@
    checkobject(self, Unit, 'dropItemTarget', 'self')
    checkobject(item, require('lib.stdlib.oop.item'), 'dropItemTarget', 1)
    checkobject(target, require('lib.stdlib.oop.widget'), 'dropItemTarget', 2)
--@end-debug@
    return Native.UnitDropItemTarget(getUd(self), getUd(item), getUd(target))
end

---useItem
---@param item Item
---@return boolean
function Unit:useItem(item)
--@debug@
    checkobject(self, Unit, 'useItem', 'self')
    checkobject(item, require('lib.stdlib.oop.item'), 'useItem', 1)
--@end-debug@
    return Native.UnitUseItem(getUd(self), getUd(item))
end

---useItemPoint
---@overload fun(item: Item, vec: Vector): boolean
---@param item Item
---@param x float
---@param y float
---@return boolean
function Unit:useItemPoint(item, x, y)
    if type(x) == 'table' then
        x, y = table.unpack(x)
    end
--@debug@
    checkobject(self, Unit, 'useItemPoint', 'self')
    checkobject(item, require('lib.stdlib.oop.item'), 'useItemPoint', 1)
    checktype(x, 'float', 'useItemPoint', 2)
    checktype(y, 'float', 'useItemPoint', 3)
--@end-debug@
    return Native.UnitUseItemPoint(getUd(self), getUd(item), x, y)
end

---useItemTarget
---@param item Item
---@param target Widget
---@return boolean
function Unit:useItemTarget(item, target)
--@debug@
    checkobject(self, Unit, 'useItemTarget', 'self')
    checkobject(item, require('lib.stdlib.oop.item'), 'useItemTarget', 1)
    checkobject(target, require('lib.stdlib.oop.widget'), 'useItemTarget', 2)
--@end-debug@
    return Native.UnitUseItemTarget(getUd(self), getUd(item), getUd(target))
end

---getX
---@return float
function Unit:getX()
--@debug@
    checkobject(self, Unit, 'getX', 'self')
--@end-debug@
    return Native.GetUnitX(getUd(self))
end

---getY
---@return float
function Unit:getY()
--@debug@
    checkobject(self, Unit, 'getY', 'self')
--@end-debug@
    return Native.GetUnitY(getUd(self))
end

---getLoc
---@return Location
function Unit:getLoc()
--@debug@
    checkobject(self, Unit, 'getLoc', 'self')
--@end-debug@
    return require('lib.stdlib.oop.location'):fromUd(Native.GetUnitLoc(getUd(self)))
end

---getFacing
---@return float
function Unit:getFacing()
--@debug@
    checkobject(self, Unit, 'getFacing', 'self')
--@end-debug@
    return Native.GetUnitFacing(getUd(self))
end

---getMoveSpeed
---@return float
function Unit:getMoveSpeed()
--@debug@
    checkobject(self, Unit, 'getMoveSpeed', 'self')
--@end-debug@
    return Native.GetUnitMoveSpeed(getUd(self))
end

---getDefaultMoveSpeed
---@return float
function Unit:getDefaultMoveSpeed()
--@debug@
    checkobject(self, Unit, 'getDefaultMoveSpeed', 'self')
--@end-debug@
    return Native.GetUnitDefaultMoveSpeed(getUd(self))
end

---getState
---@param unitState UnitState
---@return float
function Unit:getState(unitState)
--@debug@
    checkobject(self, Unit, 'getState', 'self')
    checkuserdata(unitState, 'unitstate', 'getState', 1)
--@end-debug@
    return Native.GetUnitState(getUd(self), unitState)
end

---getOwner
---@return Player
function Unit:getOwner()
--@debug@
    checkobject(self, Unit, 'getOwner', 'self')
--@end-debug@
    return require('lib.stdlib.oop.player'):fromUd(Native.GetOwningPlayer(getUd(self)))
end

---getTypeId
---@return integer
function Unit:getTypeId()
--@debug@
    checkobject(self, Unit, 'getTypeId', 'self')
--@end-debug@
    return Native.GetUnitTypeId(getUd(self))
end

---getRace
---@return Race
function Unit:getRace()
--@debug@
    checkobject(self, Unit, 'getRace', 'self')
--@end-debug@
    return Native.GetUnitRace(getUd(self))
end

---getName
---@return string
function Unit:getName()
--@debug@
    checkobject(self, Unit, 'getName', 'self')
--@end-debug@
    return Native.GetUnitName(getUd(self))
end

---getFoodUsed
---@return integer
function Unit:getFoodUsed()
--@debug@
    checkobject(self, Unit, 'getFoodUsed', 'self')
--@end-debug@
    return Native.GetUnitFoodUsed(getUd(self))
end

---getFoodMade
---@return integer
function Unit:getFoodMade()
--@debug@
    checkobject(self, Unit, 'getFoodMade', 'self')
--@end-debug@
    return Native.GetUnitFoodMade(getUd(self))
end

---setUseFood
---@param useFood boolean
---@return void
function Unit:setUseFood(useFood)
--@debug@
    checkobject(self, Unit, 'setUseFood', 'self')
    checktype(useFood, 'boolean', 'setUseFood', 1)
--@end-debug@
    return Native.SetUnitUseFood(getUd(self), useFood)
end

---getRallyPoint
---@return Location
function Unit:getRallyPoint()
--@debug@
    checkobject(self, Unit, 'getRallyPoint', 'self')
--@end-debug@
    return require('lib.stdlib.oop.location'):fromUd(Native.GetUnitRallyPoint(getUd(self)))
end

---getRallyUnit
---@return Unit
function Unit:getRallyUnit()
--@debug@
    checkobject(self, Unit, 'getRallyUnit', 'self')
--@end-debug@
    return Unit:fromUd(Native.GetUnitRallyUnit(getUd(self)))
end

---getRallyDestructable
---@return Destructable
function Unit:getRallyDestructable()
--@debug@
    checkobject(self, Unit, 'getRallyDestructable', 'self')
--@end-debug@
    return require('lib.stdlib.oop.destructable'):fromUd(Native.GetUnitRallyDestructable(getUd(self)))
end

---isInGroup
---@param group Group
---@return boolean
function Unit:isInGroup(group)
--@debug@
    checkobject(self, Unit, 'isInGroup', 'self')
    checkobject(group, require('lib.stdlib.oop.group'), 'isInGroup', 1)
--@end-debug@
    return Native.IsUnitInGroup(getUd(self), getUd(group))
end

---isInForce
---@param force Force
---@return boolean
function Unit:isInForce(force)
--@debug@
    checkobject(self, Unit, 'isInForce', 'self')
    checkobject(force, require('lib.stdlib.oop.force'), 'isInForce', 1)
--@end-debug@
    return Native.IsUnitInForce(getUd(self), getUd(force))
end

---isOwnedByPlayer
---@param player Player
---@return boolean
function Unit:isOwnedByPlayer(player)
--@debug@
    checkobject(self, Unit, 'isOwnedByPlayer', 'self')
    checkobject(player, require('lib.stdlib.oop.player'), 'isOwnedByPlayer', 1)
--@end-debug@
    return Native.IsUnitOwnedByPlayer(getUd(self), getUd(player))
end

---isAlly
---@param player Player
---@return boolean
function Unit:isAlly(player)
--@debug@
    checkobject(self, Unit, 'isAlly', 'self')
    checkobject(player, require('lib.stdlib.oop.player'), 'isAlly', 1)
--@end-debug@
    return Native.IsUnitAlly(getUd(self), getUd(player))
end

---isEnemy
---@param player Player
---@return boolean
function Unit:isEnemy(player)
--@debug@
    checkobject(self, Unit, 'isEnemy', 'self')
    checkobject(player, require('lib.stdlib.oop.player'), 'isEnemy', 1)
--@end-debug@
    return Native.IsUnitEnemy(getUd(self), getUd(player))
end

---isVisible
---@param player Player
---@return boolean
function Unit:isVisible(player)
--@debug@
    checkobject(self, Unit, 'isVisible', 'self')
    checkobject(player, require('lib.stdlib.oop.player'), 'isVisible', 1)
--@end-debug@
    return Native.IsUnitVisible(getUd(self), getUd(player))
end

---isDetected
---@param player Player
---@return boolean
function Unit:isDetected(player)
--@debug@
    checkobject(self, Unit, 'isDetected', 'self')
    checkobject(player, require('lib.stdlib.oop.player'), 'isDetected', 1)
--@end-debug@
    return Native.IsUnitDetected(getUd(self), getUd(player))
end

---isInvisible
---@param player Player
---@return boolean
function Unit:isInvisible(player)
--@debug@
    checkobject(self, Unit, 'isInvisible', 'self')
    checkobject(player, require('lib.stdlib.oop.player'), 'isInvisible', 1)
--@end-debug@
    return Native.IsUnitInvisible(getUd(self), getUd(player))
end

---isFogged
---@param player Player
---@return boolean
function Unit:isFogged(player)
--@debug@
    checkobject(self, Unit, 'isFogged', 'self')
    checkobject(player, require('lib.stdlib.oop.player'), 'isFogged', 1)
--@end-debug@
    return Native.IsUnitFogged(getUd(self), getUd(player))
end

---isMasked
---@param player Player
---@return boolean
function Unit:isMasked(player)
--@debug@
    checkobject(self, Unit, 'isMasked', 'self')
    checkobject(player, require('lib.stdlib.oop.player'), 'isMasked', 1)
--@end-debug@
    return Native.IsUnitMasked(getUd(self), getUd(player))
end

---isSelected
---@param player Player
---@return boolean
function Unit:isSelected(player)
--@debug@
    checkobject(self, Unit, 'isSelected', 'self')
    checkobject(player, require('lib.stdlib.oop.player'), 'isSelected', 1)
--@end-debug@
    return Native.IsUnitSelected(getUd(self), getUd(player))
end

---isRace
---@param race Race
---@return boolean
function Unit:isRace(race)
--@debug@
    checkobject(self, Unit, 'isRace', 'self')
    checkuserdata(race, 'race', 'isRace', 1)
--@end-debug@
    return Native.IsUnitRace(getUd(self), race)
end

---isType
---@param unitType UnitType
---@return boolean
function Unit:isType(unitType)
--@debug@
    checkobject(self, Unit, 'isType', 'self')
    checkuserdata(unitType, 'unittype', 'isType', 1)
--@end-debug@
    return Native.IsUnitType(getUd(self), unitType)
end

---isUnit
---@param specifiedUnit Unit
---@return boolean
function Unit:isUnit(specifiedUnit)
--@debug@
    checkobject(self, Unit, 'isUnit', 'self')
    checkobject(specifiedUnit, require('lib.stdlib.oop.unit'), 'isUnit', 1)
--@end-debug@
    return Native.IsUnit(getUd(self), getUd(specifiedUnit))
end

---isUnitInRange
---@param otherUnit Unit
---@param distance float
---@return boolean
function Unit:isUnitInRange(otherUnit, distance)
--@debug@
    checkobject(self, Unit, 'isUnitInRange', 'self')
    checkobject(otherUnit, require('lib.stdlib.oop.unit'), 'isUnitInRange', 1)
    checktype(distance, 'float', 'isUnitInRange', 2)
--@end-debug@
    return Native.IsUnitInRange(getUd(self), getUd(otherUnit), distance)
end

---isInRangeXY
---@overload fun(vec: Vector, distance: float): boolean
---@param x float
---@param y float
---@param distance float
---@return boolean
function Unit:isInRangeXY(x, y, distance)
    if type(x) == 'table' then
        distance = y
        x, y = table.unpack(x)
    end
--@debug@
    checkobject(self, Unit, 'isInRangeXY', 'self')
    checktype(x, 'float', 'isInRangeXY', 1)
    checktype(y, 'float', 'isInRangeXY', 2)
    checktype(distance, 'float', 'isInRangeXY', 3)
--@end-debug@
    return Native.IsUnitInRangeXY(getUd(self), x, y, distance)
end

---isHidden
---@return boolean
function Unit:isHidden()
--@debug@
    checkobject(self, Unit, 'isHidden', 'self')
--@end-debug@
    return Native.IsUnitHidden(getUd(self))
end

---isIllusion
---@return boolean
function Unit:isIllusion()
--@debug@
    checkobject(self, Unit, 'isIllusion', 'self')
--@end-debug@
    return Native.IsUnitIllusion(getUd(self))
end

---isUnitInTransport
---@param transport Unit
---@return boolean
function Unit:isUnitInTransport(transport)
--@debug@
    checkobject(self, Unit, 'isUnitInTransport', 'self')
    checkobject(transport, require('lib.stdlib.oop.unit'), 'isUnitInTransport', 1)
--@end-debug@
    return Native.IsUnitInTransport(getUd(self), getUd(transport))
end

---isLoaded
---@return boolean
function Unit:isLoaded()
--@debug@
    checkobject(self, Unit, 'isLoaded', 'self')
--@end-debug@
    return Native.IsUnitLoaded(getUd(self))
end

---shareVision
---@param player Player
---@param share boolean
---@return void
function Unit:shareVision(player, share)
--@debug@
    checkobject(self, Unit, 'shareVision', 'self')
    checkobject(player, require('lib.stdlib.oop.player'), 'shareVision', 1)
    checktype(share, 'boolean', 'shareVision', 2)
--@end-debug@
    return Native.UnitShareVision(getUd(self), getUd(player), share)
end

---suspendDecay
---@param suspend boolean
---@return void
function Unit:suspendDecay(suspend)
--@debug@
    checkobject(self, Unit, 'suspendDecay', 'self')
    checktype(suspend, 'boolean', 'suspendDecay', 1)
--@end-debug@
    return Native.UnitSuspendDecay(getUd(self), suspend)
end

---addType
---@param unitType UnitType
---@return boolean
function Unit:addType(unitType)
--@debug@
    checkobject(self, Unit, 'addType', 'self')
    checkuserdata(unitType, 'unittype', 'addType', 1)
--@end-debug@
    return Native.UnitAddType(getUd(self), unitType)
end

---removeType
---@param unitType UnitType
---@return boolean
function Unit:removeType(unitType)
--@debug@
    checkobject(self, Unit, 'removeType', 'self')
    checkuserdata(unitType, 'unittype', 'removeType', 1)
--@end-debug@
    return Native.UnitRemoveType(getUd(self), unitType)
end

---addAbility
---@param abilityId integer
---@return boolean
function Unit:addAbility(abilityId)
--@debug@
    checkobject(self, Unit, 'addAbility', 'self')
    checktype(abilityId, 'integer', 'addAbility', 1)
--@end-debug@
    return Native.UnitAddAbility(getUd(self), abilityId)
end

---removeAbility
---@param abilityId integer
---@return boolean
function Unit:removeAbility(abilityId)
--@debug@
    checkobject(self, Unit, 'removeAbility', 'self')
    checktype(abilityId, 'integer', 'removeAbility', 1)
--@end-debug@
    return Native.UnitRemoveAbility(getUd(self), abilityId)
end

---makeAbilityPermanent
---@param permanent boolean
---@param abilityId integer
---@return boolean
function Unit:makeAbilityPermanent(permanent, abilityId)
--@debug@
    checkobject(self, Unit, 'makeAbilityPermanent', 'self')
    checktype(permanent, 'boolean', 'makeAbilityPermanent', 1)
    checktype(abilityId, 'integer', 'makeAbilityPermanent', 2)
--@end-debug@
    return Native.UnitMakeAbilityPermanent(getUd(self), permanent, abilityId)
end

---removeBuffs
---@param removePositive boolean
---@param removeNegative boolean
---@return void
function Unit:removeBuffs(removePositive, removeNegative)
--@debug@
    checkobject(self, Unit, 'removeBuffs', 'self')
    checktype(removePositive, 'boolean', 'removeBuffs', 1)
    checktype(removeNegative, 'boolean', 'removeBuffs', 2)
--@end-debug@
    return Native.UnitRemoveBuffs(getUd(self), removePositive, removeNegative)
end

---removeBuffsEx
---@param removePositive boolean
---@param removeNegative boolean
---@param magic boolean
---@param physical boolean
---@param timedLife boolean
---@param aura boolean
---@param autoDispel boolean
---@return void
function Unit:removeBuffsEx(removePositive, removeNegative, magic, physical, timedLife, aura, autoDispel)
--@debug@
    checkobject(self, Unit, 'removeBuffsEx', 'self')
    checktype(removePositive, 'boolean', 'removeBuffsEx', 1)
    checktype(removeNegative, 'boolean', 'removeBuffsEx', 2)
    checktype(magic, 'boolean', 'removeBuffsEx', 3)
    checktype(physical, 'boolean', 'removeBuffsEx', 4)
    checktype(timedLife, 'boolean', 'removeBuffsEx', 5)
    checktype(aura, 'boolean', 'removeBuffsEx', 6)
    checktype(autoDispel, 'boolean', 'removeBuffsEx', 7)
--@end-debug@
    return Native.UnitRemoveBuffsEx(getUd(self), removePositive, removeNegative, magic, physical, timedLife, aura, autoDispel)
end

---hasBuffsEx
---@param removePositive boolean
---@param removeNegative boolean
---@param magic boolean
---@param physical boolean
---@param timedLife boolean
---@param aura boolean
---@param autoDispel boolean
---@return boolean
function Unit:hasBuffsEx(removePositive, removeNegative, magic, physical, timedLife, aura, autoDispel)
--@debug@
    checkobject(self, Unit, 'hasBuffsEx', 'self')
    checktype(removePositive, 'boolean', 'hasBuffsEx', 1)
    checktype(removeNegative, 'boolean', 'hasBuffsEx', 2)
    checktype(magic, 'boolean', 'hasBuffsEx', 3)
    checktype(physical, 'boolean', 'hasBuffsEx', 4)
    checktype(timedLife, 'boolean', 'hasBuffsEx', 5)
    checktype(aura, 'boolean', 'hasBuffsEx', 6)
    checktype(autoDispel, 'boolean', 'hasBuffsEx', 7)
--@end-debug@
    return Native.UnitHasBuffsEx(getUd(self), removePositive, removeNegative, magic, physical, timedLife, aura, autoDispel)
end

---countBuffsEx
---@param removePositive boolean
---@param removeNegative boolean
---@param magic boolean
---@param physical boolean
---@param timedLife boolean
---@param aura boolean
---@param autoDispel boolean
---@return integer
function Unit:countBuffsEx(removePositive, removeNegative, magic, physical, timedLife, aura, autoDispel)
--@debug@
    checkobject(self, Unit, 'countBuffsEx', 'self')
    checktype(removePositive, 'boolean', 'countBuffsEx', 1)
    checktype(removeNegative, 'boolean', 'countBuffsEx', 2)
    checktype(magic, 'boolean', 'countBuffsEx', 3)
    checktype(physical, 'boolean', 'countBuffsEx', 4)
    checktype(timedLife, 'boolean', 'countBuffsEx', 5)
    checktype(aura, 'boolean', 'countBuffsEx', 6)
    checktype(autoDispel, 'boolean', 'countBuffsEx', 7)
--@end-debug@
    return Native.UnitCountBuffsEx(getUd(self), removePositive, removeNegative, magic, physical, timedLife, aura, autoDispel)
end

---addSleep
---@param add boolean
---@return void
function Unit:addSleep(add)
--@debug@
    checkobject(self, Unit, 'addSleep', 'self')
    checktype(add, 'boolean', 'addSleep', 1)
--@end-debug@
    return Native.UnitAddSleep(getUd(self), add)
end

---canSleep
---@return boolean
function Unit:canSleep()
--@debug@
    checkobject(self, Unit, 'canSleep', 'self')
--@end-debug@
    return Native.UnitCanSleep(getUd(self))
end

---addSleepPerm
---@param add boolean
---@return void
function Unit:addSleepPerm(add)
--@debug@
    checkobject(self, Unit, 'addSleepPerm', 'self')
    checktype(add, 'boolean', 'addSleepPerm', 1)
--@end-debug@
    return Native.UnitAddSleepPerm(getUd(self), add)
end

---canSleepPerm
---@return boolean
function Unit:canSleepPerm()
--@debug@
    checkobject(self, Unit, 'canSleepPerm', 'self')
--@end-debug@
    return Native.UnitCanSleepPerm(getUd(self))
end

---isSleeping
---@return boolean
function Unit:isSleeping()
--@debug@
    checkobject(self, Unit, 'isSleeping', 'self')
--@end-debug@
    return Native.UnitIsSleeping(getUd(self))
end

---wakeUp
---@return void
function Unit:wakeUp()
--@debug@
    checkobject(self, Unit, 'wakeUp', 'self')
--@end-debug@
    return Native.UnitWakeUp(getUd(self))
end

---applyTimedLife
---@param buffId integer
---@param duration float
---@return void
function Unit:applyTimedLife(buffId, duration)
--@debug@
    checkobject(self, Unit, 'applyTimedLife', 'self')
    checktype(buffId, 'integer', 'applyTimedLife', 1)
    checktype(duration, 'float', 'applyTimedLife', 2)
--@end-debug@
    return Native.UnitApplyTimedLife(getUd(self), buffId, duration)
end

---ignoreAlarm
---@param flag boolean
---@return boolean
function Unit:ignoreAlarm(flag)
--@debug@
    checkobject(self, Unit, 'ignoreAlarm', 'self')
    checktype(flag, 'boolean', 'ignoreAlarm', 1)
--@end-debug@
    return Native.UnitIgnoreAlarm(getUd(self), flag)
end

---ignoreAlarmToggled
---@return boolean
function Unit:ignoreAlarmToggled()
--@debug@
    checkobject(self, Unit, 'ignoreAlarmToggled', 'self')
--@end-debug@
    return Native.UnitIgnoreAlarmToggled(getUd(self))
end

---resetCooldown
---@return void
function Unit:resetCooldown()
--@debug@
    checkobject(self, Unit, 'resetCooldown', 'self')
--@end-debug@
    return Native.UnitResetCooldown(getUd(self))
end

---setConstructionProgress
---@param constructionPercentage integer
---@return void
function Unit:setConstructionProgress(constructionPercentage)
--@debug@
    checkobject(self, Unit, 'setConstructionProgress', 'self')
    checktype(constructionPercentage, 'integer', 'setConstructionProgress', 1)
--@end-debug@
    return Native.UnitSetConstructionProgress(getUd(self), constructionPercentage)
end

---setUpgradeProgress
---@param upgradePercentage integer
---@return void
function Unit:setUpgradeProgress(upgradePercentage)
--@debug@
    checkobject(self, Unit, 'setUpgradeProgress', 'self')
    checktype(upgradePercentage, 'integer', 'setUpgradeProgress', 1)
--@end-debug@
    return Native.UnitSetUpgradeProgress(getUd(self), upgradePercentage)
end

---pauseTimedLife
---@param flag boolean
---@return void
function Unit:pauseTimedLife(flag)
--@debug@
    checkobject(self, Unit, 'pauseTimedLife', 'self')
    checktype(flag, 'boolean', 'pauseTimedLife', 1)
--@end-debug@
    return Native.UnitPauseTimedLife(getUd(self), flag)
end

---setUsesAltIcon
---@param flag boolean
---@return void
function Unit:setUsesAltIcon(flag)
--@debug@
    checkobject(self, Unit, 'setUsesAltIcon', 'self')
    checktype(flag, 'boolean', 'setUsesAltIcon', 1)
--@end-debug@
    return Native.UnitSetUsesAltIcon(getUd(self), flag)
end

---damagePoint
---@overload fun(delay: float, radius: float, vec: Vector, amount: float, attack: boolean, ranged: boolean, attackType: AttackType, damageType: DamageType, weaponType: WeaponType): boolean
---@param delay float
---@param radius float
---@param x float
---@param y float
---@param amount float
---@param attack boolean
---@param ranged boolean
---@param attackType AttackType
---@param damageType DamageType
---@param weaponType WeaponType
---@return boolean
function Unit:damagePoint(delay, radius, x, y, amount, attack, ranged, attackType, damageType, weaponType)
    if type(x) == 'table' then
        amount, attack, ranged, attackType, damageType, weaponType = y, amount, attack, ranged, attackType, damageType
        x, y = table.unpack(x)
    end
--@debug@
    checkobject(self, Unit, 'damagePoint', 'self')
    checktype(delay, 'float', 'damagePoint', 1)
    checktype(radius, 'float', 'damagePoint', 2)
    checktype(x, 'float', 'damagePoint', 3)
    checktype(y, 'float', 'damagePoint', 4)
    checktype(amount, 'float', 'damagePoint', 5)
    checktype(attack, 'boolean', 'damagePoint', 6)
    checktype(ranged, 'boolean', 'damagePoint', 7)
    checkuserdata(attackType, 'attacktype', 'damagePoint', 8)
    checkuserdata(damageType, 'damagetype', 'damagePoint', 9)
    checkuserdata(weaponType, 'weapontype', 'damagePoint', 10)
--@end-debug@
    return Native.UnitDamagePoint(getUd(self), delay, radius, x, y, amount, attack, ranged, attackType, damageType, weaponType)
end

---damageTarget
---@param target Widget
---@param amount float
---@param attack boolean
---@param ranged boolean
---@param attackType AttackType
---@param damageType DamageType
---@param weaponType WeaponType
---@return boolean
function Unit:damageTarget(target, amount, attack, ranged, attackType, damageType, weaponType)
--@debug@
    checkobject(self, Unit, 'damageTarget', 'self')
    checkobject(target, require('lib.stdlib.oop.widget'), 'damageTarget', 1)
    checktype(amount, 'float', 'damageTarget', 2)
    checktype(attack, 'boolean', 'damageTarget', 3)
    checktype(ranged, 'boolean', 'damageTarget', 4)
    checkuserdata(attackType, 'attacktype', 'damageTarget', 5)
    checkuserdata(damageType, 'damagetype', 'damageTarget', 6)
    checkuserdata(weaponType, 'weapontype', 'damageTarget', 7)
--@end-debug@
    return Native.UnitDamageTarget(getUd(self), getUd(target), amount, attack, ranged, attackType, damageType, weaponType)
end

---issueImmediateOrder
---@param order integer
---@return boolean
function Unit:issueImmediateOrder(order)
--@debug@
    checkobject(self, Unit, 'issueImmediateOrder', 'self')
    checktype(order, 'integer', 'issueImmediateOrder', 1)
--@end-debug@
    return Native.IssueImmediateOrderById(getUd(self), order)
end

---issuePointOrder
---@overload fun(order: integer, vec: Vector): boolean
---@param order integer
---@param x float
---@param y float
---@return boolean
function Unit:issuePointOrder(order, x, y)
    if type(x) == 'table' then
        x, y = table.unpack(x)
    end
--@debug@
    checkobject(self, Unit, 'issuePointOrder', 'self')
    checktype(order, 'integer', 'issuePointOrder', 1)
    checktype(x, 'float', 'issuePointOrder', 2)
    checktype(y, 'float', 'issuePointOrder', 3)
--@end-debug@
    return Native.IssuePointOrderById(getUd(self), order, x, y)
end

---issueTargetOrder
---@param order integer
---@param targetWidget Widget
---@return boolean
function Unit:issueTargetOrder(order, targetWidget)
--@debug@
    checkobject(self, Unit, 'issueTargetOrder', 'self')
    checktype(order, 'integer', 'issueTargetOrder', 1)
    checkobject(targetWidget, require('lib.stdlib.oop.widget'), 'issueTargetOrder', 2)
--@end-debug@
    return Native.IssueTargetOrderById(getUd(self), order, getUd(targetWidget))
end

---issueInstantPointOrder
---@overload fun(order: integer, vec: Vector, instantTargetWidget: Widget): boolean
---@param order integer
---@param x float
---@param y float
---@param instantTargetWidget Widget
---@return boolean
function Unit:issueInstantPointOrder(order, x, y, instantTargetWidget)
    if type(x) == 'table' then
        instantTargetWidget = y
        x, y = table.unpack(x)
    end
--@debug@
    checkobject(self, Unit, 'issueInstantPointOrder', 'self')
    checktype(order, 'integer', 'issueInstantPointOrder', 1)
    checktype(x, 'float', 'issueInstantPointOrder', 2)
    checktype(y, 'float', 'issueInstantPointOrder', 3)
    checkobject(instantTargetWidget, require('lib.stdlib.oop.widget'), 'issueInstantPointOrder', 4)
--@end-debug@
    return Native.IssueInstantPointOrderById(getUd(self), order, x, y, getUd(instantTargetWidget))
end

---issueInstantTargetOrder
---@param order integer
---@param targetWidget Widget
---@param instantTargetWidget Widget
---@return boolean
function Unit:issueInstantTargetOrder(order, targetWidget, instantTargetWidget)
--@debug@
    checkobject(self, Unit, 'issueInstantTargetOrder', 'self')
    checktype(order, 'integer', 'issueInstantTargetOrder', 1)
    checkobject(targetWidget, require('lib.stdlib.oop.widget'), 'issueInstantTargetOrder', 2)
    checkobject(instantTargetWidget, require('lib.stdlib.oop.widget'), 'issueInstantTargetOrder', 3)
--@end-debug@
    return Native.IssueInstantTargetOrderById(getUd(self), order, getUd(targetWidget), getUd(instantTargetWidget))
end

---issueBuildOrder
---@overload fun(unitToBuild: string, vec: Vector): boolean
---@param unitToBuild string
---@param x float
---@param y float
---@return boolean
function Unit:issueBuildOrder(unitToBuild, x, y)
    if type(x) == 'table' then
        x, y = table.unpack(x)
    end
--@debug@
    checkobject(self, Unit, 'issueBuildOrder', 'self')
    checktype(unitToBuild, 'string', 'issueBuildOrder', 1)
    checktype(x, 'float', 'issueBuildOrder', 2)
    checktype(y, 'float', 'issueBuildOrder', 3)
--@end-debug@
    return Native.IssueBuildOrder(getUd(self), unitToBuild, x, y)
end

---issueBuildOrderById
---@overload fun(unitId: integer, vec: Vector): boolean
---@param unitId integer
---@param x float
---@param y float
---@return boolean
function Unit:issueBuildOrderById(unitId, x, y)
    if type(x) == 'table' then
        x, y = table.unpack(x)
    end
--@debug@
    checkobject(self, Unit, 'issueBuildOrderById', 'self')
    checktype(unitId, 'integer', 'issueBuildOrderById', 1)
    checktype(x, 'float', 'issueBuildOrderById', 2)
    checktype(y, 'float', 'issueBuildOrderById', 3)
--@end-debug@
    return Native.IssueBuildOrderById(getUd(self), unitId, x, y)
end

---getCurrentOrder
---@return integer
function Unit:getCurrentOrder()
--@debug@
    checkobject(self, Unit, 'getCurrentOrder', 'self')
--@end-debug@
    return Native.GetUnitCurrentOrder(getUd(self))
end

---setResourceAmount
---@param amount integer
---@return void
function Unit:setResourceAmount(amount)
--@debug@
    checkobject(self, Unit, 'setResourceAmount', 'self')
    checktype(amount, 'integer', 'setResourceAmount', 1)
--@end-debug@
    return Native.SetResourceAmount(getUd(self), amount)
end

---addResourceAmount
---@param amount integer
---@return void
function Unit:addResourceAmount(amount)
--@debug@
    checkobject(self, Unit, 'addResourceAmount', 'self')
    checktype(amount, 'integer', 'addResourceAmount', 1)
--@end-debug@
    return Native.AddResourceAmount(getUd(self), amount)
end

---getResourceAmount
---@return integer
function Unit:getResourceAmount()
--@debug@
    checkobject(self, Unit, 'getResourceAmount', 'self')
--@end-debug@
    return Native.GetResourceAmount(getUd(self))
end

---waygateGetDestinationX
---@return float
function Unit:waygateGetDestinationX()
--@debug@
    checkobject(self, Unit, 'waygateGetDestinationX', 'self')
--@end-debug@
    return Native.WaygateGetDestinationX(getUd(self))
end

---waygateGetDestinationY
---@return float
function Unit:waygateGetDestinationY()
--@debug@
    checkobject(self, Unit, 'waygateGetDestinationY', 'self')
--@end-debug@
    return Native.WaygateGetDestinationY(getUd(self))
end

---waygateSetDestination
---@overload fun(vec: Vector): void
---@param x float
---@param y float
---@return void
function Unit:waygateSetDestination(x, y)
    if type(x) == 'table' then
        x, y = table.unpack(x)
    end
--@debug@
    checkobject(self, Unit, 'waygateSetDestination', 'self')
    checktype(x, 'float', 'waygateSetDestination', 1)
    checktype(y, 'float', 'waygateSetDestination', 2)
--@end-debug@
    return Native.WaygateSetDestination(getUd(self), x, y)
end

---waygateActivate
---@param activate boolean
---@return void
function Unit:waygateActivate(activate)
--@debug@
    checkobject(self, Unit, 'waygateActivate', 'self')
    checktype(activate, 'boolean', 'waygateActivate', 1)
--@end-debug@
    return Native.WaygateActivate(getUd(self), activate)
end

---waygateIsActive
---@return boolean
function Unit:waygateIsActive()
--@debug@
    checkobject(self, Unit, 'waygateIsActive', 'self')
--@end-debug@
    return Native.WaygateIsActive(getUd(self))
end

---addItemToStock
---@param itemId integer
---@param currentStock integer
---@param stockMax integer
---@return void
function Unit:addItemToStock(itemId, currentStock, stockMax)
--@debug@
    checkobject(self, Unit, 'addItemToStock', 'self')
    checktype(itemId, 'integer', 'addItemToStock', 1)
    checktype(currentStock, 'integer', 'addItemToStock', 2)
    checktype(stockMax, 'integer', 'addItemToStock', 3)
--@end-debug@
    return Native.AddItemToStock(getUd(self), itemId, currentStock, stockMax)
end

---addToStock
---@param unitId integer
---@param currentStock integer
---@param stockMax integer
---@return void
function Unit:addToStock(unitId, currentStock, stockMax)
--@debug@
    checkobject(self, Unit, 'addToStock', 'self')
    checktype(unitId, 'integer', 'addToStock', 1)
    checktype(currentStock, 'integer', 'addToStock', 2)
    checktype(stockMax, 'integer', 'addToStock', 3)
--@end-debug@
    return Native.AddUnitToStock(getUd(self), unitId, currentStock, stockMax)
end

---removeItemFromStock
---@param itemId integer
---@return void
function Unit:removeItemFromStock(itemId)
--@debug@
    checkobject(self, Unit, 'removeItemFromStock', 'self')
    checktype(itemId, 'integer', 'removeItemFromStock', 1)
--@end-debug@
    return Native.RemoveItemFromStock(getUd(self), itemId)
end

---removeFromStock
---@param unitId integer
---@return void
function Unit:removeFromStock(unitId)
--@debug@
    checkobject(self, Unit, 'removeFromStock', 'self')
    checktype(unitId, 'integer', 'removeFromStock', 1)
--@end-debug@
    return Native.RemoveUnitFromStock(getUd(self), unitId)
end

---setItemTypeSlots
---@param slots integer
---@return void
function Unit:setItemTypeSlots(slots)
--@debug@
    checkobject(self, Unit, 'setItemTypeSlots', 'self')
    checktype(slots, 'integer', 'setItemTypeSlots', 1)
--@end-debug@
    return Native.SetItemTypeSlots(getUd(self), slots)
end

---setTypeSlots
---@param slots integer
---@return void
function Unit:setTypeSlots(slots)
--@debug@
    checkobject(self, Unit, 'setTypeSlots', 'self')
    checktype(slots, 'integer', 'setTypeSlots', 1)
--@end-debug@
    return Native.SetUnitTypeSlots(getUd(self), slots)
end

---getUserData
---@return integer
function Unit:getUserData()
--@debug@
    checkobject(self, Unit, 'getUserData', 'self')
--@end-debug@
    return Native.GetUnitUserData(getUd(self))
end

---setUserData
---@param data integer
---@return void
function Unit:setUserData(data)
--@debug@
    checkobject(self, Unit, 'setUserData', 'self')
    checktype(data, 'integer', 'setUserData', 1)
--@end-debug@
    return Native.SetUnitUserData(getUd(self), data)
end

---addIndicator
---@param red integer
---@param green integer
---@param blue integer
---@param alpha integer
---@return void
function Unit:addIndicator(red, green, blue, alpha)
--@debug@
    checkobject(self, Unit, 'addIndicator', 'self')
    checktype(red, 'integer', 'addIndicator', 1)
    checktype(green, 'integer', 'addIndicator', 2)
    checktype(blue, 'integer', 'addIndicator', 3)
    checktype(alpha, 'integer', 'addIndicator', 4)
--@end-debug@
    return Native.UnitAddIndicator(getUd(self), red, green, blue, alpha)
end

---createMinimapIconOn
---@param red integer
---@param green integer
---@param blue integer
---@param pingPath string
---@param fogVisibility FogState
---@return minimapicon
function Unit:createMinimapIconOn(red, green, blue, pingPath, fogVisibility)
--@debug@
    checkobject(self, Unit, 'createMinimapIconOn', 'self')
    checktype(red, 'integer', 'createMinimapIconOn', 1)
    checktype(green, 'integer', 'createMinimapIconOn', 2)
    checktype(blue, 'integer', 'createMinimapIconOn', 3)
    checktype(pingPath, 'string', 'createMinimapIconOn', 4)
    checkuserdata(fogVisibility, 'fogstate', 'createMinimapIconOn', 5)
--@end-debug@
    return Native.CreateMinimapIconOnUnit(getUd(self), red, green, blue, pingPath, fogVisibility)
end

---setCameraTargetController
---@param xoffset float
---@param yoffset float
---@param inheritOrientation boolean
---@return void
function Unit:setCameraTargetController(xoffset, yoffset, inheritOrientation)
--@debug@
    checkobject(self, Unit, 'setCameraTargetController', 'self')
    checktype(xoffset, 'float', 'setCameraTargetController', 1)
    checktype(yoffset, 'float', 'setCameraTargetController', 2)
    checktype(inheritOrientation, 'boolean', 'setCameraTargetController', 3)
--@end-debug@
    return Native.SetCameraTargetController(getUd(self), xoffset, yoffset, inheritOrientation)
end

---setCameraOrientController
---@param xoffset float
---@param yoffset float
---@return void
function Unit:setCameraOrientController(xoffset, yoffset)
--@debug@
    checkobject(self, Unit, 'setCameraOrientController', 'self')
    checktype(xoffset, 'float', 'setCameraOrientController', 1)
    checktype(yoffset, 'float', 'setCameraOrientController', 2)
--@end-debug@
    return Native.SetCameraOrientController(getUd(self), xoffset, yoffset)
end

---removeGuardPosition
---@return void
function Unit:removeGuardPosition()
--@debug@
    checkobject(self, Unit, 'removeGuardPosition', 'self')
--@end-debug@
    return Native.RemoveGuardPosition(getUd(self))
end

---recycleGuardPosition
---@return void
function Unit:recycleGuardPosition()
--@debug@
    checkobject(self, Unit, 'recycleGuardPosition', 'self')
--@end-debug@
    return Native.RecycleGuardPosition(getUd(self))
end

---getMaxHP
---@return integer
function Unit:getMaxHP()
--@debug@
    checkobject(self, Unit, 'getMaxHP', 'self')
--@end-debug@
    return Native.BlzGetUnitMaxHP(getUd(self))
end

---setMaxHP
---@param hp integer
---@return void
function Unit:setMaxHP(hp)
--@debug@
    checkobject(self, Unit, 'setMaxHP', 'self')
    checktype(hp, 'integer', 'setMaxHP', 1)
--@end-debug@
    return Native.BlzSetUnitMaxHP(getUd(self), hp)
end

---getMaxMana
---@return integer
function Unit:getMaxMana()
--@debug@
    checkobject(self, Unit, 'getMaxMana', 'self')
--@end-debug@
    return Native.BlzGetUnitMaxMana(getUd(self))
end

---setMaxMana
---@param mana integer
---@return void
function Unit:setMaxMana(mana)
--@debug@
    checkobject(self, Unit, 'setMaxMana', 'self')
    checktype(mana, 'integer', 'setMaxMana', 1)
--@end-debug@
    return Native.BlzSetUnitMaxMana(getUd(self), mana)
end

---setName
---@param name string
---@return void
function Unit:setName(name)
--@debug@
    checkobject(self, Unit, 'setName', 'self')
    checktype(name, 'string', 'setName', 1)
--@end-debug@
    return Native.BlzSetUnitName(getUd(self), name)
end

---setHeroProperName
---@param heroProperName string
---@return void
function Unit:setHeroProperName(heroProperName)
--@debug@
    checkobject(self, Unit, 'setHeroProperName', 'self')
    checktype(heroProperName, 'string', 'setHeroProperName', 1)
--@end-debug@
    return Native.BlzSetHeroProperName(getUd(self), heroProperName)
end

---getBaseDamage
---@param weaponIndex integer
---@return integer
function Unit:getBaseDamage(weaponIndex)
--@debug@
    checkobject(self, Unit, 'getBaseDamage', 'self')
    checktype(weaponIndex, 'integer', 'getBaseDamage', 1)
--@end-debug@
    return Native.BlzGetUnitBaseDamage(getUd(self), weaponIndex)
end

---setBaseDamage
---@param baseDamage integer
---@param weaponIndex integer
---@return void
function Unit:setBaseDamage(baseDamage, weaponIndex)
--@debug@
    checkobject(self, Unit, 'setBaseDamage', 'self')
    checktype(baseDamage, 'integer', 'setBaseDamage', 1)
    checktype(weaponIndex, 'integer', 'setBaseDamage', 2)
--@end-debug@
    return Native.BlzSetUnitBaseDamage(getUd(self), baseDamage, weaponIndex)
end

---getDiceNumber
---@param weaponIndex integer
---@return integer
function Unit:getDiceNumber(weaponIndex)
--@debug@
    checkobject(self, Unit, 'getDiceNumber', 'self')
    checktype(weaponIndex, 'integer', 'getDiceNumber', 1)
--@end-debug@
    return Native.BlzGetUnitDiceNumber(getUd(self), weaponIndex)
end

---setDiceNumber
---@param diceNumber integer
---@param weaponIndex integer
---@return void
function Unit:setDiceNumber(diceNumber, weaponIndex)
--@debug@
    checkobject(self, Unit, 'setDiceNumber', 'self')
    checktype(diceNumber, 'integer', 'setDiceNumber', 1)
    checktype(weaponIndex, 'integer', 'setDiceNumber', 2)
--@end-debug@
    return Native.BlzSetUnitDiceNumber(getUd(self), diceNumber, weaponIndex)
end

---getDiceSides
---@param weaponIndex integer
---@return integer
function Unit:getDiceSides(weaponIndex)
--@debug@
    checkobject(self, Unit, 'getDiceSides', 'self')
    checktype(weaponIndex, 'integer', 'getDiceSides', 1)
--@end-debug@
    return Native.BlzGetUnitDiceSides(getUd(self), weaponIndex)
end

---setDiceSides
---@param diceSides integer
---@param weaponIndex integer
---@return void
function Unit:setDiceSides(diceSides, weaponIndex)
--@debug@
    checkobject(self, Unit, 'setDiceSides', 'self')
    checktype(diceSides, 'integer', 'setDiceSides', 1)
    checktype(weaponIndex, 'integer', 'setDiceSides', 2)
--@end-debug@
    return Native.BlzSetUnitDiceSides(getUd(self), diceSides, weaponIndex)
end

---getAttackCooldown
---@param weaponIndex integer
---@return float
function Unit:getAttackCooldown(weaponIndex)
--@debug@
    checkobject(self, Unit, 'getAttackCooldown', 'self')
    checktype(weaponIndex, 'integer', 'getAttackCooldown', 1)
--@end-debug@
    return Native.BlzGetUnitAttackCooldown(getUd(self), weaponIndex)
end

---setAttackCooldown
---@param cooldown float
---@param weaponIndex integer
---@return void
function Unit:setAttackCooldown(cooldown, weaponIndex)
--@debug@
    checkobject(self, Unit, 'setAttackCooldown', 'self')
    checktype(cooldown, 'float', 'setAttackCooldown', 1)
    checktype(weaponIndex, 'integer', 'setAttackCooldown', 2)
--@end-debug@
    return Native.BlzSetUnitAttackCooldown(getUd(self), cooldown, weaponIndex)
end

---getArmor
---@return float
function Unit:getArmor()
--@debug@
    checkobject(self, Unit, 'getArmor', 'self')
--@end-debug@
    return Native.BlzGetUnitArmor(getUd(self))
end

---setArmor
---@param armorAmount float
---@return void
function Unit:setArmor(armorAmount)
--@debug@
    checkobject(self, Unit, 'setArmor', 'self')
    checktype(armorAmount, 'float', 'setArmor', 1)
--@end-debug@
    return Native.BlzSetUnitArmor(getUd(self), armorAmount)
end

---hideAbility
---@param abilId integer
---@param flag boolean
---@return void
function Unit:hideAbility(abilId, flag)
--@debug@
    checkobject(self, Unit, 'hideAbility', 'self')
    checktype(abilId, 'integer', 'hideAbility', 1)
    checktype(flag, 'boolean', 'hideAbility', 2)
--@end-debug@
    return Native.BlzUnitHideAbility(getUd(self), abilId, flag)
end

---disableAbility
---@param abilId integer
---@param flag boolean
---@param hideUI boolean
---@return void
function Unit:disableAbility(abilId, flag, hideUI)
--@debug@
    checkobject(self, Unit, 'disableAbility', 'self')
    checktype(abilId, 'integer', 'disableAbility', 1)
    checktype(flag, 'boolean', 'disableAbility', 2)
    checktype(hideUI, 'boolean', 'disableAbility', 3)
--@end-debug@
    return Native.BlzUnitDisableAbility(getUd(self), abilId, flag, hideUI)
end

---cancelTimedLife
---@return void
function Unit:cancelTimedLife()
--@debug@
    checkobject(self, Unit, 'cancelTimedLife', 'self')
--@end-debug@
    return Native.BlzUnitCancelTimedLife(getUd(self))
end

---isSelectable
---@return boolean
function Unit:isSelectable()
--@debug@
    checkobject(self, Unit, 'isSelectable', 'self')
--@end-debug@
    return Native.BlzIsUnitSelectable(getUd(self))
end

---isInvulnerable
---@return boolean
function Unit:isInvulnerable()
--@debug@
    checkobject(self, Unit, 'isInvulnerable', 'self')
--@end-debug@
    return Native.BlzIsUnitInvulnerable(getUd(self))
end

---interruptAttack
---@return void
function Unit:interruptAttack()
--@debug@
    checkobject(self, Unit, 'interruptAttack', 'self')
--@end-debug@
    return Native.BlzUnitInterruptAttack(getUd(self))
end

---getCollisionSize
---@return float
function Unit:getCollisionSize()
--@debug@
    checkobject(self, Unit, 'getCollisionSize', 'self')
--@end-debug@
    return Native.BlzGetUnitCollisionSize(getUd(self))
end

---setAbilityCooldown
---@param abilId integer
---@param level integer
---@param cooldown float
---@return void
function Unit:setAbilityCooldown(abilId, level, cooldown)
--@debug@
    checkobject(self, Unit, 'setAbilityCooldown', 'self')
    checktype(abilId, 'integer', 'setAbilityCooldown', 1)
    checktype(level, 'integer', 'setAbilityCooldown', 2)
    checktype(cooldown, 'float', 'setAbilityCooldown', 3)
--@end-debug@
    return Native.BlzSetUnitAbilityCooldown(getUd(self), abilId, level, cooldown)
end

---getAbilityCooldown
---@param abilId integer
---@param level integer
---@return float
function Unit:getAbilityCooldown(abilId, level)
--@debug@
    checkobject(self, Unit, 'getAbilityCooldown', 'self')
    checktype(abilId, 'integer', 'getAbilityCooldown', 1)
    checktype(level, 'integer', 'getAbilityCooldown', 2)
--@end-debug@
    return Native.BlzGetUnitAbilityCooldown(getUd(self), abilId, level)
end

---getAbilityCooldownRemaining
---@param abilId integer
---@return float
function Unit:getAbilityCooldownRemaining(abilId)
--@debug@
    checkobject(self, Unit, 'getAbilityCooldownRemaining', 'self')
    checktype(abilId, 'integer', 'getAbilityCooldownRemaining', 1)
--@end-debug@
    return Native.BlzGetUnitAbilityCooldownRemaining(getUd(self), abilId)
end

---endAbilityCooldown
---@param abilCode integer
---@return void
function Unit:endAbilityCooldown(abilCode)
--@debug@
    checkobject(self, Unit, 'endAbilityCooldown', 'self')
    checktype(abilCode, 'integer', 'endAbilityCooldown', 1)
--@end-debug@
    return Native.BlzEndUnitAbilityCooldown(getUd(self), abilCode)
end

---startAbilityCooldown
---@param abilCode integer
---@param cooldown float
---@return void
function Unit:startAbilityCooldown(abilCode, cooldown)
--@debug@
    checkobject(self, Unit, 'startAbilityCooldown', 'self')
    checktype(abilCode, 'integer', 'startAbilityCooldown', 1)
    checktype(cooldown, 'float', 'startAbilityCooldown', 2)
--@end-debug@
    return Native.BlzStartUnitAbilityCooldown(getUd(self), abilCode, cooldown)
end

---getAbilityManaCost
---@param abilId integer
---@param level integer
---@return integer
function Unit:getAbilityManaCost(abilId, level)
--@debug@
    checkobject(self, Unit, 'getAbilityManaCost', 'self')
    checktype(abilId, 'integer', 'getAbilityManaCost', 1)
    checktype(level, 'integer', 'getAbilityManaCost', 2)
--@end-debug@
    return Native.BlzGetUnitAbilityManaCost(getUd(self), abilId, level)
end

---setAbilityManaCost
---@param abilId integer
---@param level integer
---@param manaCost integer
---@return void
function Unit:setAbilityManaCost(abilId, level, manaCost)
--@debug@
    checkobject(self, Unit, 'setAbilityManaCost', 'self')
    checktype(abilId, 'integer', 'setAbilityManaCost', 1)
    checktype(level, 'integer', 'setAbilityManaCost', 2)
    checktype(manaCost, 'integer', 'setAbilityManaCost', 3)
--@end-debug@
    return Native.BlzSetUnitAbilityManaCost(getUd(self), abilId, level, manaCost)
end

---getLocalZ
---@return float
function Unit:getLocalZ()
--@debug@
    checkobject(self, Unit, 'getLocalZ', 'self')
--@end-debug@
    return Native.BlzGetLocalUnitZ(getUd(self))
end

---getZ
---@return float
function Unit:getZ()
--@debug@
    checkobject(self, Unit, 'getZ', 'self')
--@end-debug@
    return Native.BlzGetUnitZ(getUd(self))
end

---showTeamGlow
---@param show boolean
---@return void
function Unit:showTeamGlow(show)
--@debug@
    checkobject(self, Unit, 'showTeamGlow', 'self')
    checktype(show, 'boolean', 'showTeamGlow', 1)
--@end-debug@
    return Native.BlzShowUnitTeamGlow(getUd(self), show)
end

---getAbility
---@param abilId integer
---@return Ability
function Unit:getAbility(abilId)
--@debug@
    checkobject(self, Unit, 'getAbility', 'self')
    checktype(abilId, 'integer', 'getAbility', 1)
--@end-debug@
    return require('lib.stdlib.oop.ability'):fromUd(Native.BlzGetUnitAbility(getUd(self), abilId))
end

---getAbilityByIndex
---@param index integer
---@return Ability
function Unit:getAbilityByIndex(index)
--@debug@
    checkobject(self, Unit, 'getAbilityByIndex', 'self')
    checktype(index, 'integer', 'getAbilityByIndex', 1)
--@end-debug@
    return require('lib.stdlib.oop.ability'):fromUd(Native.BlzGetUnitAbilityByIndex(getUd(self), index))
end

---pauseEx
---@param flag boolean
---@return void
function Unit:pauseEx(flag)
--@debug@
    checkobject(self, Unit, 'pauseEx', 'self')
    checktype(flag, 'boolean', 'pauseEx', 1)
--@end-debug@
    return Native.BlzPauseUnitEx(getUd(self), flag)
end

---setFacingEx
---@param facingAngle float
---@return void
function Unit:setFacingEx(facingAngle)
--@debug@
    checkobject(self, Unit, 'setFacingEx', 'self')
    checktype(facingAngle, 'float', 'setFacingEx', 1)
--@end-debug@
    return Native.BlzSetUnitFacingEx(getUd(self), facingAngle)
end

---getBooleanField
---@param field UnitBooleanField
---@return boolean
function Unit:getBooleanField(field)
--@debug@
    checkobject(self, Unit, 'getBooleanField', 'self')
    checkuserdata(field, 'unitbooleanfield', 'getBooleanField', 1)
--@end-debug@
    return Native.BlzGetUnitBooleanField(getUd(self), field)
end

---getIntegerField
---@param field UnitIntegerField
---@return integer
function Unit:getIntegerField(field)
--@debug@
    checkobject(self, Unit, 'getIntegerField', 'self')
    checkuserdata(field, 'unitintegerfield', 'getIntegerField', 1)
--@end-debug@
    return Native.BlzGetUnitIntegerField(getUd(self), field)
end

---getRealField
---@param field UnitRealField
---@return float
function Unit:getRealField(field)
--@debug@
    checkobject(self, Unit, 'getRealField', 'self')
    checkuserdata(field, 'unitrealfield', 'getRealField', 1)
--@end-debug@
    return Native.BlzGetUnitRealField(getUd(self), field)
end

---getStringField
---@param field UnitStringField
---@return string
function Unit:getStringField(field)
--@debug@
    checkobject(self, Unit, 'getStringField', 'self')
    checkuserdata(field, 'unitstringfield', 'getStringField', 1)
--@end-debug@
    return Native.BlzGetUnitStringField(getUd(self), field)
end

---setBooleanField
---@param field UnitBooleanField
---@param value boolean
---@return boolean
function Unit:setBooleanField(field, value)
--@debug@
    checkobject(self, Unit, 'setBooleanField', 'self')
    checkuserdata(field, 'unitbooleanfield', 'setBooleanField', 1)
    checktype(value, 'boolean', 'setBooleanField', 2)
--@end-debug@
    return Native.BlzSetUnitBooleanField(getUd(self), field, value)
end

---setIntegerField
---@param field UnitIntegerField
---@param value integer
---@return boolean
function Unit:setIntegerField(field, value)
--@debug@
    checkobject(self, Unit, 'setIntegerField', 'self')
    checkuserdata(field, 'unitintegerfield', 'setIntegerField', 1)
    checktype(value, 'integer', 'setIntegerField', 2)
--@end-debug@
    return Native.BlzSetUnitIntegerField(getUd(self), field, value)
end

---setRealField
---@param field UnitRealField
---@param value float
---@return boolean
function Unit:setRealField(field, value)
--@debug@
    checkobject(self, Unit, 'setRealField', 'self')
    checkuserdata(field, 'unitrealfield', 'setRealField', 1)
    checktype(value, 'float', 'setRealField', 2)
--@end-debug@
    return Native.BlzSetUnitRealField(getUd(self), field, value)
end

---setStringField
---@param field UnitStringField
---@param value string
---@return boolean
function Unit:setStringField(field, value)
--@debug@
    checkobject(self, Unit, 'setStringField', 'self')
    checkuserdata(field, 'unitstringfield', 'setStringField', 1)
    checktype(value, 'string', 'setStringField', 2)
--@end-debug@
    return Native.BlzSetUnitStringField(getUd(self), field, value)
end

---getWeaponBooleanField
---@param field UnitWeaponBooleanField
---@param index integer
---@return boolean
function Unit:getWeaponBooleanField(field, index)
--@debug@
    checkobject(self, Unit, 'getWeaponBooleanField', 'self')
    checkuserdata(field, 'unitweaponbooleanfield', 'getWeaponBooleanField', 1)
    checktype(index, 'integer', 'getWeaponBooleanField', 2)
--@end-debug@
    return Native.BlzGetUnitWeaponBooleanField(getUd(self), field, index)
end

---getWeaponIntegerField
---@param field UnitWeaponIntegerField
---@param index integer
---@return integer
function Unit:getWeaponIntegerField(field, index)
--@debug@
    checkobject(self, Unit, 'getWeaponIntegerField', 'self')
    checkuserdata(field, 'unitweaponintegerfield', 'getWeaponIntegerField', 1)
    checktype(index, 'integer', 'getWeaponIntegerField', 2)
--@end-debug@
    return Native.BlzGetUnitWeaponIntegerField(getUd(self), field, index)
end

---getWeaponRealField
---@param field UnitWeaponRealField
---@param index integer
---@return float
function Unit:getWeaponRealField(field, index)
--@debug@
    checkobject(self, Unit, 'getWeaponRealField', 'self')
    checkuserdata(field, 'unitweaponrealfield', 'getWeaponRealField', 1)
    checktype(index, 'integer', 'getWeaponRealField', 2)
--@end-debug@
    return Native.BlzGetUnitWeaponRealField(getUd(self), field, index)
end

---getWeaponStringField
---@param field UnitWeaponStringField
---@param index integer
---@return string
function Unit:getWeaponStringField(field, index)
--@debug@
    checkobject(self, Unit, 'getWeaponStringField', 'self')
    checkuserdata(field, 'unitweaponstringfield', 'getWeaponStringField', 1)
    checktype(index, 'integer', 'getWeaponStringField', 2)
--@end-debug@
    return Native.BlzGetUnitWeaponStringField(getUd(self), field, index)
end

---setWeaponBooleanField
---@param field UnitWeaponBooleanField
---@param index integer
---@param value boolean
---@return boolean
function Unit:setWeaponBooleanField(field, index, value)
--@debug@
    checkobject(self, Unit, 'setWeaponBooleanField', 'self')
    checkuserdata(field, 'unitweaponbooleanfield', 'setWeaponBooleanField', 1)
    checktype(index, 'integer', 'setWeaponBooleanField', 2)
    checktype(value, 'boolean', 'setWeaponBooleanField', 3)
--@end-debug@
    return Native.BlzSetUnitWeaponBooleanField(getUd(self), field, index, value)
end

---setWeaponIntegerField
---@param field UnitWeaponIntegerField
---@param index integer
---@param value integer
---@return boolean
function Unit:setWeaponIntegerField(field, index, value)
--@debug@
    checkobject(self, Unit, 'setWeaponIntegerField', 'self')
    checkuserdata(field, 'unitweaponintegerfield', 'setWeaponIntegerField', 1)
    checktype(index, 'integer', 'setWeaponIntegerField', 2)
    checktype(value, 'integer', 'setWeaponIntegerField', 3)
--@end-debug@
    return Native.BlzSetUnitWeaponIntegerField(getUd(self), field, index, value)
end

---setWeaponRealField
---@param field UnitWeaponRealField
---@param index integer
---@param value float
---@return boolean
function Unit:setWeaponRealField(field, index, value)
--@debug@
    checkobject(self, Unit, 'setWeaponRealField', 'self')
    checkuserdata(field, 'unitweaponrealfield', 'setWeaponRealField', 1)
    checktype(index, 'integer', 'setWeaponRealField', 2)
    checktype(value, 'float', 'setWeaponRealField', 3)
--@end-debug@
    return Native.BlzSetUnitWeaponRealField(getUd(self), field, index, value)
end

---setWeaponStringField
---@param field UnitWeaponStringField
---@param index integer
---@param value string
---@return boolean
function Unit:setWeaponStringField(field, index, value)
--@debug@
    checkobject(self, Unit, 'setWeaponStringField', 'self')
    checkuserdata(field, 'unitweaponstringfield', 'setWeaponStringField', 1)
    checktype(index, 'integer', 'setWeaponStringField', 2)
    checktype(value, 'string', 'setWeaponStringField', 3)
--@end-debug@
    return Native.BlzSetUnitWeaponStringField(getUd(self), field, index, value)
end

---getSkin
---@return integer
function Unit:getSkin()
--@debug@
    checkobject(self, Unit, 'getSkin', 'self')
--@end-debug@
    return Native.BlzGetUnitSkin(getUd(self))
end

---setSkin
---@param skinId integer
---@return void
function Unit:setSkin(skinId)
--@debug@
    checkobject(self, Unit, 'setSkin', 'self')
    checktype(skinId, 'integer', 'setSkin', 1)
--@end-debug@
    return Native.BlzSetUnitSkin(getUd(self), skinId)
end

return Unit]]

P['lib/stdlib/oop/_generated/_unitpool.lua'] = [[local Native = require('lib.stdlib.native')

---@class UnitPool : Handle
local UnitPool = class('UnitPool', require('lib.stdlib.oop.handle'))

---destructor
---@return void
function UnitPool:destructor()
--@debug@
    checkobject(self, UnitPool, 'destructor', 'self')
--@end-debug@
    return Native.DestroyUnitPool(getUd(self))
end

---<**_DEPRECATED_**> destroy
---@return void
function UnitPool:destroy()
--@debug@
    deprecated('UnitPool.destroy', 'UnitPool.delete')
--@end-debug@
    return self:delete()
end

---<static> create
---@return UnitPool
function UnitPool:create()
    return UnitPool:fromUd(Native.CreateUnitPool())
end

---addUnitType
---@param unitId integer
---@param weight float
---@return void
function UnitPool:addUnitType(unitId, weight)
--@debug@
    checkobject(self, UnitPool, 'addUnitType', 'self')
    checktype(unitId, 'integer', 'addUnitType', 1)
    checktype(weight, 'float', 'addUnitType', 2)
--@end-debug@
    return Native.UnitPoolAddUnitType(getUd(self), unitId, weight)
end

---removeUnitType
---@param unitId integer
---@return void
function UnitPool:removeUnitType(unitId)
--@debug@
    checkobject(self, UnitPool, 'removeUnitType', 'self')
    checktype(unitId, 'integer', 'removeUnitType', 1)
--@end-debug@
    return Native.UnitPoolRemoveUnitType(getUd(self), unitId)
end

---placeRandomUnit
---@overload fun(forWhichPlayer: Player, vec: Vector, facing: float): Unit
---@param forWhichPlayer Player
---@param x float
---@param y float
---@param facing float
---@return Unit
function UnitPool:placeRandomUnit(forWhichPlayer, x, y, facing)
    if type(x) == 'table' then
        facing = y
        x, y = table.unpack(x)
    end
--@debug@
    checkobject(self, UnitPool, 'placeRandomUnit', 'self')
    checkobject(forWhichPlayer, require('lib.stdlib.oop.player'), 'placeRandomUnit', 1)
    checktype(x, 'float', 'placeRandomUnit', 2)
    checktype(y, 'float', 'placeRandomUnit', 3)
    checktype(facing, 'float', 'placeRandomUnit', 4)
--@end-debug@
    return require('lib.stdlib.oop.unit'):fromUd(Native.PlaceRandomUnit(getUd(self), getUd(forWhichPlayer), x, y, facing))
end

return UnitPool]]

P['lib/stdlib/oop/_generated/_weathereffect.lua'] = [[local Native = require('lib.stdlib.native')

---@class WeatherEffect : Handle
local WeatherEffect = class('WeatherEffect', require('lib.stdlib.oop.handle'))

---destructor
---@return void
function WeatherEffect:destructor()
--@debug@
    checkobject(self, WeatherEffect, 'destructor', 'self')
--@end-debug@
    return Native.RemoveWeatherEffect(getUd(self))
end

---<**_DEPRECATED_**> remove
---@return void
function WeatherEffect:remove()
--@debug@
    deprecated('WeatherEffect.remove', 'WeatherEffect.delete')
--@end-debug@
    return self:delete()
end

---enable
---@param enable boolean
---@return void
function WeatherEffect:enable(enable)
--@debug@
    checkobject(self, WeatherEffect, 'enable', 'self')
    checktype(enable, 'boolean', 'enable', 1)
--@end-debug@
    return Native.EnableWeatherEffect(getUd(self), enable)
end

return WeatherEffect]]

P['lib/stdlib/oop/_generated/_widget.lua'] = [[local Native = require('lib.stdlib.native')

---@class Widget : Agent
local Widget = class('Widget', require('lib.stdlib.oop.agent'))

---getLife
---@return float
function Widget:getLife()
--@debug@
    checkobject(self, Widget, 'getLife', 'self')
--@end-debug@
    return Native.GetWidgetLife(getUd(self))
end

---setLife
---@param life float
---@return void
function Widget:setLife(life)
--@debug@
    checkobject(self, Widget, 'setLife', 'self')
    checktype(life, 'float', 'setLife', 1)
--@end-debug@
    return Native.SetWidgetLife(getUd(self), life)
end

---getX
---@return float
function Widget:getX()
--@debug@
    checkobject(self, Widget, 'getX', 'self')
--@end-debug@
    return Native.GetWidgetX(getUd(self))
end

---getY
---@return float
function Widget:getY()
--@debug@
    checkobject(self, Widget, 'getY', 'self')
--@end-debug@
    return Native.GetWidgetY(getUd(self))
end

---addIndicator
---@param red integer
---@param green integer
---@param blue integer
---@param alpha integer
---@return void
function Widget:addIndicator(red, green, blue, alpha)
--@debug@
    checkobject(self, Widget, 'addIndicator', 'self')
    checktype(red, 'integer', 'addIndicator', 1)
    checktype(green, 'integer', 'addIndicator', 2)
    checktype(blue, 'integer', 'addIndicator', 3)
    checktype(alpha, 'integer', 'addIndicator', 4)
--@end-debug@
    return Native.AddIndicator(getUd(self), red, green, blue, alpha)
end

return Widget]]

P['lib/stdlib/oop/ability.lua'] = [[return require('lib.stdlib.oop._generated._ability')]]

P['lib/stdlib/oop/agent.lua'] = [[return require('lib.stdlib.oop._generated._agent')]]

P['lib/stdlib/oop/boolexpr.lua'] = [[return require('lib.stdlib.oop._generated._boolexpr')]]

P['lib/stdlib/oop/buff.lua'] = [[return require('lib.stdlib.oop._generated._buff')]]

P['lib/stdlib/oop/button.lua'] = [[return require('lib.stdlib.oop._generated._button')]]

P['lib/stdlib/oop/camerasetup.lua'] = [[return require('lib.stdlib.oop._generated._camerasetup')]]

P['lib/stdlib/oop/condition.lua'] = [[return require('lib.stdlib.oop._generated._condition')]]

P['lib/stdlib/oop/defeatcondition.lua'] = [[return require('lib.stdlib.oop._generated._defeatcondition')]]

P['lib/stdlib/oop/destructable.lua'] = [[---@type Destructable
local Destructable = require('lib.stdlib.oop._generated._destructable')

---show
---@return void
function Destructable:show()
    return self:setShown(true)
end

---hide
---@return void
function Destructable:hide()
    return self:setShown(false)
end

return Destructable]]

P['lib/stdlib/oop/dialog.lua'] = [[return require('lib.stdlib.oop._generated._dialog')]]

P['lib/stdlib/oop/effect.lua'] = [[return require('lib.stdlib.oop._generated._effect')]]

P['lib/stdlib/oop/event.lua'] = [[---@type Event
local Event = require('lib.stdlib.oop._generated._event')

---getTriggerRect
---@return Rect
function Event:getTriggerRect()
    return self:getTriggeringTrigger()._rect
end

return Event]]

P['lib/stdlib/oop/filter.lua'] = [[local Filter = require('lib.stdlib.oop._generated._filter')

---@alias UnitFilter fun(unit: Unit): boolean
---@alias PlayerFilter fun(player: Player): boolean
---@alias DestructableFilter fun(destructable: Destructable): boolean
---@alias ItemFilter fun(item: Item): boolean

local function generateFilterCreator(cls, method)
    return function(_, filter)
        if not filter then
            return
        end

        return Filter:create(function()
            return filter(cls:fromUd(method()))
        end)
    end
end

---createUnitFilter
---@param filter UnitFilter
---@return Filter
Filter.createUnitFilter = generateFilterCreator(Unit, GetFilterUnit)

---createPlayerFilter
---@param filter PlayerFilter
---@return Filter
Filter.createPlayerFilter = generateFilterCreator(Player, GetFilterPlayer)

---createDestructableFilter
---@param filter DestructableFilter
---@return Filter
Filter.createDestructableFilter = generateFilterCreator(Destructable, GetFilterDestructable)

---createItemFilter
---@param filter ItemFilter
---@return Filter
Filter.createItemFilter = generateFilterCreator(Item, GetFilterItem)

return Filter]]

P['lib/stdlib/oop/fogmodifier.lua'] = [[return require('lib.stdlib.oop._generated._fogmodifier')]]

P['lib/stdlib/oop/force.lua'] = [[---@type Force
local Force = require('lib.stdlib.oop._generated._force')

---size
---@return integer
function Force:size()
    local count = 0
    self:forEach(function()
        count = count + 1
    end)
    return count
end

---@type Force
local ALL_PLAYERS
do
    if bj_FORCE_ALL_PLAYERS then
        ALL_PLAYERS = Force:fromUd(bj_FORCE_ALL_PLAYERS)
    else
        ALL_PLAYERS = Force:create()
        ALL_PLAYERS:enumPlayers()
    end
end

---<static> allPlayers
---@return Force
function Force:allPlayers()
    return ALL_PLAYERS
end

---getPlayers
---@return Player[]
function Force:getPlayers()
    local players = {}
    self:forEach(function(player)
        table.insert(players, player)
    end)
    return players
end

---iteratePlayers
---@return fun(): Player
function Force:iteratePlayers()
    return vipairs(self:getPlayers())
end

return Force]]

P['lib/stdlib/oop/frame.lua'] = [[local Frame = require('lib.stdlib.oop._generated._frame')
local Native = require('lib.stdlib.native.native')

---show
---@return void
function Frame:show()
    return self:setVisible(true)
end

---hide
---@return void
function Frame:hide()
    return self:setVisible(false)
end

---clearFocus
---@return void
function Frame:clearFocus()
    return Native.BlzFrameSetFocus(getUd(self), false)
end

---setFocus
---@return void
function Frame:setFocus()
    return Native.BlzFrameSetFocus(getUd(self), true)
end

return Frame]]

P['lib/stdlib/oop/function.lua'] = [==[-- function.lua
-- @Author : DengSir (tdaddon@163.com)
-- @Link   : https://dengsir.github.io
-- @Date   : 4/10/2019 6:34 PM

--[[generate begin]]
--[[generate end]]

---@alias UnitCallback fun(unit: Unit): void
---@alias PlayerCallback fun(player: Player): void
---@alias DestructableCallback fun(destructable: Destructable): void
---@alias ItemCallback fun(item: Item): void

local Function = {}

--[=[@remove@

---createUnitCallback
---@param filter UnitCallback
---@return function
function Function:createUnitCallback(filter) end

---createPlayerCallback
---@param filter PlayerCallback
---@return function
function Function:createPlayerCallback(filter) end

---createDestructableCallback
---@param filter DestructableCallback
---@return function
function Function:createDestructableCallback(filter) end

---createItemCallback
---@param filter ItemCallback
---@return function
function Function:createItemCallback(filter) end

--@end-remove@]=]

local function generateCallbackCreator(cls, method)
    return function(_, callback)
        if type(callback) ~= 'function' then
            return callback
        end

        return function()
            return callback(cls:fromUd(method()))
        end
    end
end

Function.createUnitCallback = generateCallbackCreator(Unit, GetEnumUnit)
Function.createPlayerCallback = generateCallbackCreator(Player, GetEnumPlayer)
Function.createDestructableCallback = generateCallbackCreator(Destructable, GetEnumDestructable)
Function.createItemCallback = generateCallbackCreator(Item, GetEnumItem)

return Function]==]

P['lib/stdlib/oop/gamecache.lua'] = [[return require('lib.stdlib.oop._generated._gamecache')]]

P['lib/stdlib/oop/group.lua'] = [[---@type Group
local Group = require('lib.stdlib.oop._generated._group')

---getUnits
---@return Unit[]
function Group:getUnits()
    local units = {}
    self:forEach(function(unit)
        table.insert(units, unit)
    end)
    return units
end

return Group]]

P['lib/stdlib/oop/handle.lua'] = [[-- handle.lua
-- @Author : DengSir (tdaddon@163.com)
-- @Link   : https://dengsir.github.io
-- @Date   : 4/10/2019 6:43 PM

---@class Handle: object
local Handle = class('Handle')

---inherit
---@private
function Handle:inherit()
    self._object = {}
end

---constructor
---@private
---@param ud userdata
---@return void
function Handle:constructor(ud)
    self[0] = ud
    self._object[ud] = self
end

---delete
---@return void
function Handle:delete()
    self._object[self:getUd()] = nil
    object.delete(self)
end

---fromUd
---@generic T
---@param ud userdata
---@return T
function Handle:fromUd(ud)
    if not ud then
        return
    end
    return  self._object[ud] or self:new(ud)
end

---getUd
---@return userdata
function Handle:getUd()
    return self[0]
end

function getUd(obj)
    if obj then
        return obj[0]
    end
end

return Handle]]

P['lib/stdlib/oop/hashtable.lua'] = [[return require('lib.stdlib.oop._generated._hashtable')]]

P['lib/stdlib/oop/image.lua'] = [[---@type Image
local Image = require('lib.stdlib.oop._generated._image')

---<static> create
---@overload fun(file: string, size: Vector3, pos: Vector3, origin: Vector3, imageType: integer): Image
---@param file string
---@param sizeX float
---@param sizeY float
---@param sizeZ float
---@param posX float
---@param posY float
---@param posZ float
---@param originX float
---@param originY float
---@param originZ float
---@param imageType integer
---@return Image
function Image:create(file, sizeX, sizeY, sizeZ, posX, posY, posZ, originX, originY, originZ, imageType)
    if type(sizeX) == 'table' and type(sizeY) == 'table' and type(sizeZ) == 'table' then
        imageType = posX
        originX, originY, originZ = table.unpack(sizeZ)
        posX, posY, posZ = table.unpack(sizeY)
        sizeX, sizeY, sizeZ = table.unpack(sizeZ)
    end
    -- @debug@
    checkclass(self, Image, 'create', 'self')
    checktype(file, 'string', 'create', 1)
    checktype(sizeX, 'float', 'create', 2)
    checktype(sizeY, 'float', 'create', 3)
    checktype(sizeZ, 'float', 'create', 4)
    checktype(posX, 'float', 'create', 5)
    checktype(posY, 'float', 'create', 6)
    checktype(posZ, 'float', 'create', 7)
    checktype(originX, 'float', 'create', 8)
    checktype(originY, 'float', 'create', 9)
    checktype(originZ, 'float', 'create', 10)
    checktype(imageType, 'integer', 'create', 11)
    -- @end-debug@
    return Image:fromUd(Native.CreateImage(file, sizeX, sizeY, sizeZ, posX, posY, posZ, originX, originY, originZ,
                                           imageType))
end

---show
---@return void
function Image:show()
    return self:setShown(true)
end

---hide
---@return void
function Image:hide()
    return self:setShown(false)
end

return Image]]

P['lib/stdlib/oop/init.lua'] = [[Agent = require('lib.stdlib.oop.agent')
Event = require('lib.stdlib.oop.event')
Player = require('lib.stdlib.oop.player')
Widget = require('lib.stdlib.oop.widget')
Unit = require('lib.stdlib.oop.unit')
Destructable = require('lib.stdlib.oop.destructable')
Item = require('lib.stdlib.oop.item')
Ability = require('lib.stdlib.oop.ability')
Buff = require('lib.stdlib.oop.buff')
Force = require('lib.stdlib.oop.force')
Group = require('lib.stdlib.oop.group')
Trigger = require('lib.stdlib.oop.trigger')
TriggerCondition = require('lib.stdlib.oop.triggercondition')
Timer = require('lib.stdlib.oop.timer')
Location = require('lib.stdlib.oop.location')
Region = require('lib.stdlib.oop.region')
Rect = require('lib.stdlib.oop.rect')
BoolExpr = require('lib.stdlib.oop.boolexpr')
Sound = require('lib.stdlib.oop.sound')
Condition = require('lib.stdlib.oop.condition')
Filter = require('lib.stdlib.oop.filter')
UnitPool = require('lib.stdlib.oop.unitpool')
ItemPool = require('lib.stdlib.oop.itempool')
CameraSetup = require('lib.stdlib.oop.camerasetup')
Effect = require('lib.stdlib.oop.effect')
WeatherEffect = require('lib.stdlib.oop.weathereffect')
TerrainDeform = require('lib.stdlib.oop.terraindeform')
FogModifier = require('lib.stdlib.oop.fogmodifier')
Dialog = require('lib.stdlib.oop.dialog')
Button = require('lib.stdlib.oop.button')
Quest = require('lib.stdlib.oop.quest')
QuestItem = require('lib.stdlib.oop.questitem')
DefeatCondition = require('lib.stdlib.oop.defeatcondition')
TimerDialog = require('lib.stdlib.oop.timerdialog')
LeaderBoard = require('lib.stdlib.oop.leaderboard')
MultiBoard = require('lib.stdlib.oop.multiboard')
MultiBoardItem = require('lib.stdlib.oop.multiboarditem')
Trackable = require('lib.stdlib.oop.trackable')
GameCache = require('lib.stdlib.oop.gamecache')
TextTag = require('lib.stdlib.oop.texttag')
Lightning = require('lib.stdlib.oop.lightning')
Image = require('lib.stdlib.oop.image')
Ubersplat = require('lib.stdlib.oop.ubersplat')
Hashtable = require('lib.stdlib.oop.hashtable')
Frame = require('lib.stdlib.oop.frame')]]

P['lib/stdlib/oop/item.lua'] = [[return require('lib.stdlib.oop._generated._item')]]

P['lib/stdlib/oop/itempool.lua'] = [[return require('lib.stdlib.oop._generated._itempool')]]

P['lib/stdlib/oop/leaderboard.lua'] = [[return require('lib.stdlib.oop._generated._leaderboard')]]

P['lib/stdlib/oop/lightning.lua'] = [[return require('lib.stdlib.oop._generated._lightning')]]

P['lib/stdlib/oop/location.lua'] = [[return require('lib.stdlib.oop._generated._location')]]

P['lib/stdlib/oop/multiboard.lua'] = [[return require('lib.stdlib.oop._generated._multiboard')]]

P['lib/stdlib/oop/multiboarditem.lua'] = [[return require('lib.stdlib.oop._generated._multiboarditem')]]

P['lib/stdlib/oop/player.lua'] = [[---@type Player
local Player = require('lib.stdlib.oop._generated._player')
local PlayerState = require('lib.stdlib.enum.playerstate')
local Native = require('lib.stdlib.native.native')
local Group = require('lib.stdlib.oop.group')
local Vector = require('lib.stdlib.oop.vector')

---@type Player
local _localPlayer = Player:fromUd(Native.GetLocalPlayer())

---@type Player[]
local _players = {}
do
    for id = 0, bj_MAX_PLAYER_SLOTS - 1 do
        table.insert(_players, Player:fromUd(Native.Player(id)))
    end
end

---<static> get
---@param id integer
---@return Player
function Player:get(id)
    return _players[id + 1]
end

---<static> at
---@return Player
function Player:at(index)
    return _players[index]
end

---<static> getLocal
---@return Player
function Player:getLocal()
    return _localPlayer
end

---adjustState
---@param state PlayerState
---@param delta integer
---@return void
function Player:adjustState(state, delta)
    if delta > 0 then
        if state == PlayerState.ResourceGold then
            self:adjustState(PlayerState.GoldGathered, delta)
        elseif state == PlayerState.ResourceLumber then
            self:adjustState(PlayerState.LumberGathered, delta)
        end
    end
    return self:setState(state, self:getState(state) + delta)
end

---adjustGold
---@param delta integer
---@return void
function Player:adjustGold(delta)
    return self:adjustState(PlayerState.ResourceGold, delta)
end

---adjustLumber
---@param delta integer
---@return void
function Player:adjustLumber(delta)
    return self:adjustState(PlayerState.ResourceLumber, delta)
end

---iterateAll
---@return fun(): Player
function Player:iterateAll()
    return vipairs(_players)
end

---getUnits
---@param filter UnitFilter
---@return Unit[]
function Player:getUnits(filter)
    local group = Group:create()
    group:enumUnitsOfPlayer(self, filter)
    local units = group:getUnits()
    group:delete()
    return units
end

---iterateUnits
---@param filter UnitFilter
---@return fun(): Unit
function Player:iterateUnits(filter)
    return vipairs(self:getUnits(filter))
end

---clearSelected
---@return void
function Player:clearSelected()
    if self:isLocal() then
        Native.ClearSelection()
    end
end

---selectUnitSingle
---@param unit Unit
---@return void
function Player:selectUnitSingle(unit)
    self:clearSelected()
    self:selectUnit(unit)
end

---setUnitSelected
---@param unit Unit
---@param flag boolean
---@return void
function Player:setUnitSelected(unit, flag)
    if self:isLocal() then
        return unit:setSelected(flag)
    end
end

---selectUnit
---@param unit Unit
---@return void
function Player:selectUnit(unit)
    return self:setUnitSelected(unit, true)
end

---deselectUnit
---@param unit Unit
function Player:deselectUnit(unit)
    return self:setUnitSelected(unit, false)
end

---showDialog
---@param dialog Dialog
---@return void
function Player:showDialog(dialog)
    return self:dialogDisplay(dialog, true)
end

---hideDialog
---@param dialog Dialog
---@return void
function Player:hideDialog(dialog)
    return self:dialogDisplay(dialog, false)
end

---isLocal
---@return boolean
function Player:isLocal()
    return self == _localPlayer
end

---getStartPos
---@return Vector
function Player:getStartPos()
    local s = Native.GetPlayerStartLocation(self:getUd())
    return Vector:new(Native.GetStartLocationX(s), Native.GetStartLocationY(s))
end

return Player]]

P['lib/stdlib/oop/quest.lua'] = [[---@type Quest 
---@field private state StateType
local Quest = require('lib.stdlib.oop._generated._quest')

---StateType
---@type StateType table<string, integer>
Quest.StateType = {None = 0, Failed = 1, Completed = 2, Undiscovered = 3, Discovered = 4}

function Quest:constructor()
    self.state = Quest.StateType.None
end

---getState
---@return StateType
function Quest:getState()
    return self.state
end

---setState
---@param state StateType
function Quest:setState(state)
    self.state = state
    if state == Quest.StateType.Completed then
        self:setCompleted(true)
    elseif state == Quest.StateType.Failed then
        self:setFailed(true)
    elseif state == Quest.StateType.Undiscovered then
        self:setDiscovered(false)
    elseif state == Quest.StateType.Discovered then
        self:setDiscovered(true)
    end
end

return Quest]]

P['lib/stdlib/oop/questitem.lua'] = [[return require('lib.stdlib.oop._generated._questitem')]]

P['lib/stdlib/oop/rect.lua'] = [[---@type Rect
local Rect = require('lib.stdlib.oop._generated._rect')

---<static> create
---@overload fun(min: Vector, max: Vector): Rect
---@param minx float
---@param miny float
---@param maxx float
---@param maxy float
---@return Rect
function Rect:create(minx, miny, maxx, maxy)
    if type(minx) == 'table' and type(miny) == 'table' then
        maxx, maxy = table.unpack(miny)
        minx, miny = table.unpack(minx)
    end
    -- @debug@
    checkclass(self, Rect, 'create', 'self')
    checktype(minx, 'float', 'create', 1)
    checktype(miny, 'float', 'create', 2)
    checktype(maxx, 'float', 'create', 3)
    checktype(maxy, 'float', 'create', 4)
    -- @end-debug@
    return Rect:fromUd(Native.Rect(minx, miny, maxx, maxy))
end

---set
---@overload fun(min: Vector, max: Vector): void
---@param minx float
---@param miny float
---@param maxx float
---@param maxy float
---@return void
function Rect:set(minx, miny, maxx, maxy)
    if type(minx) == 'table' and type(miny) == 'table' then
        maxx, maxy = table.unpack(miny)
        minx, miny = table.unpack(minx)
    end
    -- @debug@
    checkobject(self, Rect, 'set', 'self')
    checktype(minx, 'float', 'set', 1)
    checktype(miny, 'float', 'set', 2)
    checktype(maxx, 'float', 'set', 3)
    checktype(maxy, 'float', 'set', 4)
    -- @end-debug@
    return Native.SetRect(getUd(self), minx, miny, maxx, maxy)
end

return Rect]]

P['lib/stdlib/oop/region.lua'] = [[return require('lib.stdlib.oop._generated._region')]]

P['lib/stdlib/oop/sound.lua'] = [[return require('lib.stdlib.oop._generated._sound')]]

P['lib/stdlib/oop/terraindeform.lua'] = [[---@type TerrainDeform
local TerrainDeform = require('lib.stdlib.oop._generated._terraindeform')

---<static> wave
---@overload fun(vec: Vector, dir: Vector, distance: float, speed: float, radius: float, depth: float, trailTime: integer, count: integer): TerrainDeform
---@param x float
---@param y float
---@param dirX float
---@param dirY float
---@param distance float
---@param speed float
---@param radius float
---@param depth float
---@param trailTime integer
---@param count integer
---@return TerrainDeform
function TerrainDeform:wave(x, y, dirX, dirY, distance, speed, radius, depth, trailTime, count)
    if type(x) == 'table' and type(y) == 'table' then
        distance, speed, radius, depth, trailTime, count = dirX, dirY, distance, speed, radius, depth
        dirX, dirY = table.unpack(y)
        x, y = table.unpack(x)
    end
    -- @debug@
    checkclass(self, TerrainDeform, 'wave', 'self')
    checktype(x, 'float', 'wave', 1)
    checktype(y, 'float', 'wave', 2)
    checktype(dirX, 'float', 'wave', 3)
    checktype(dirY, 'float', 'wave', 4)
    checktype(distance, 'float', 'wave', 5)
    checktype(speed, 'float', 'wave', 6)
    checktype(radius, 'float', 'wave', 7)
    checktype(depth, 'float', 'wave', 8)
    checktype(trailTime, 'integer', 'wave', 9)
    checktype(count, 'integer', 'wave', 10)
    -- @end-debug@
    return TerrainDeform:fromUd(Native.TerrainDeformWave(x, y, dirX, dirY, distance, speed, radius, depth, trailTime,
                                                         count))
end

return TerrainDeform]]

P['lib/stdlib/oop/texttag.lua'] = [[return require('lib.stdlib.oop._generated._texttag')]]

P['lib/stdlib/oop/timer.lua'] = [[---@type Timer
local Timer = require('lib.stdlib.oop._generated._timer')
local Native = require('lib.stdlib.native')

---<static> after
---@param duration number
---@param func function
---@return Timer
function Timer:after(duration, func)
    local timer = Timer:create()
    Native.TimerStart(timer:getUd(), duration, false, function()
        func()
        timer:delete()
    end)
    return timer
end

---start
---@param duration number
---@param func function
function Timer:start(duration, func)
    Native.TimerStart(getUd(self), duration, true, func)
end

return Timer]]

P['lib/stdlib/oop/timerdialog.lua'] = [[return require('lib.stdlib.oop._generated._timerdialog')]]

P['lib/stdlib/oop/trackable.lua'] = [[return require('lib.stdlib.oop._generated._trackable')]]

P['lib/stdlib/oop/trigger.lua'] = [=[---@type Trigger
local Trigger = require('lib.stdlib.oop._generated._trigger')
local Player = require('lib.stdlib.oop.player')

--[[@remove@

---registerAllPlayersEvent
---@param event PlayerEvent
function Trigger:registerAllPlayersEvent(event)
end

---registerAllPlayersUnitEvent
---@param event PlayerUnitEvent
---@param filter BoolExpr
function Trigger:registerAllPlayersUnitEvent(event, filter)
end

---registerAllPlayersAllianceChange
---@param alliance AllianceType
function Trigger:registerAllPlayersAllianceChange(alliance)
end

---registerAllPlayersStateEvent
---@param state PlayerState
---@param opcode LimitOp
---@param limitval float
function Trigger:registerAllPlayersStateEvent(state, opcode, limitval)
end

---registerAllPlayersChatEvent
---@param chatMessageToDetect string
---@param exactMatchOnly boolean
function Trigger:registerAllPlayersChatEvent(chatMessageToDetect, exactMatchOnly)
end

---registerAllPlayersSyncEvent
---@param prefix string
---@param fromServer boolean
function Trigger:registerAllPlayersSyncEvent(prefix, fromServer)
end

---registerAllPlayersKeyEvent
---@param key OsKeyType
---@param metaKey integer
---@param keyDown boolean
function Trigger:registerAllPlayersKeyEvent(key, metaKey, keyDown)
end

--@end-remove@]]

local function generateRegisterAllPlayers(method)
    return function(self, ...)
        for player in Player:iterateAll() do
            method(self, player, ...)
        end
    end
end

Trigger.registerAllPlayersEvent = generateRegisterAllPlayers(Trigger.registerPlayerEvent)
Trigger.registerAllPlayersUnitEvent = generateRegisterAllPlayers(Trigger.registerPlayerUnitEvent)
Trigger.registerAllPlayersAllianceChange = generateRegisterAllPlayers(Trigger.registerPlayerAllianceChange)
Trigger.registerAllPlayersStateEvent = generateRegisterAllPlayers(Trigger.registerPlayerStateEvent)
Trigger.registerAllPlayersChatEvent = generateRegisterAllPlayers(Trigger.registerPlayerChatEvent)
Trigger.registerAllPlayersSyncEvent = generateRegisterAllPlayers(Trigger.registerPlayerSyncEvent)
Trigger.registerAllPlayersKeyEvent = generateRegisterAllPlayers(Trigger.registerPlayerKeyEvent)

---registerEnterRect
---@param rect Rect
---@return Event
function Trigger:registerEnterRect(rect)
    if self._rect then
        error('Can`t registerEnterRect twice', 2)
    end
    local region = Region:create()
    region:addRect(rect)
    self._rect = rect
    return self:registerEnterRegion(region)
end

return Trigger]=]

P['lib/stdlib/oop/triggercondition.lua'] = [[return require('lib.stdlib.oop._generated._triggercondition')]]

P['lib/stdlib/oop/ubersplat.lua'] = [[---@type Ubersplat
local Ubersplat = require('lib.stdlib.oop._generated._ubersplat')

---show
---@return void
function Ubersplat:show()
    return self:setShown(true)
end

---hide
---@return void
function Ubersplat:hide()
    return self:setShown(false)
end

return Ubersplat]]

P['lib/stdlib/oop/unit.lua'] = [[---@type Unit
local Unit = require('lib.stdlib.oop._generated._unit')

---isDead
---@return boolean
function Unit:isDead()
    return self:getState(UnitState.Life) <= 0
end

---isAlive
---@return boolean
function Unit:isAlive()
    return not self:isDead()
end

---replace
---@param id integer
---@param method ReplaceUnitStateMethod
---@return Unit
function Unit:replace(id, method)
    return Unit:fromUd(ReplaceUnitBJ(getUd(self), id, method))
end

---pause
---@return void
function Unit:pause()
    return self:setPaused(true)
end

---resume
---@return void
function Unit:resume()
    return self:setPaused(false)
end

---show
---@return void
function Unit:show()
    return self:setShown(true)
end

---hide
---@return void
function Unit:hide()
    return self:setShown(false)
end

---<**_DEPRECATED_**>getOwningPlayer
---@return Player
function Unit:getOwningPlayer()
    -- @debug@
    deprecated('getOwningPlayer', 'getOwner')
    -- @end-debug@
    return self:getOwner()
end

return Unit]]

P['lib/stdlib/oop/unitpool.lua'] = [[return require('lib.stdlib.oop._generated._unitpool')]]

P['lib/stdlib/oop/vector.lua'] = [[-- vector.lua
-- @Author : Dencer (tdaddon@163.com)
-- @Link   : https://dengsir.github.io
-- @Date   : 7/5/2019, 9:28:48 PM

---@class Vector: object
local Vector = class('Vector')

function Vector:constructor(x, y)
    self[1] = x
    self[2] = y
end

---getX
---@return float
function Vector:getX()
    return self[1]
end

---getY
---@return float
function Vector:getY()
    return self[2]
end

---getXY
---@return float, float
function Vector:getXY()
    return self[1], self[2]
end

---setX
---@param x float
---@return void
function Vector:setX(x)
    self[1] = x
end

---setY
---@param y float
---@return void
function Vector:setY(y)
    self[2] = y
end

---toVector3
---@return Vector3
function Vector:toVector3()
    return require('lib.stdlib.oop.vector3'):new(self[1], self[2], 0)
end

return Vector]]

P['lib/stdlib/oop/vector3.lua'] = [[-- vector3.lua
-- @Author : Dencer (tdaddon@163.com)
-- @Link   : https://dengsir.github.io
-- @Date   : 7/5/2019, 9:33:38 PM

---@class Vector3: Vector
local Vector3 = class('Vector3', require('lib.stdlib.oop.vector'))

function Vector3:constructor(x, y, z)
    self[3] = z
end

---getZ
---@return float
function Vector3:getZ()
    return self[3]
end

---setZ
---@return float
function Vector3:setZ(z)
    self[3] = z
end

---getXYZ
---@return float, float, float
function Vector3:getXYZ()
    return self[1], self[2], self[3]
end]]

P['lib/stdlib/oop/weathereffect.lua'] = [[return require('lib.stdlib.oop._generated._weathereffect')]]

P['lib/stdlib/oop/widget.lua'] = [[return require('lib.stdlib.oop._generated._widget')]]

P['lib/stdlib/ui/changelog.lua'] = [[local Quest = require('stdlib.oop.quest')
local Trigger = require('stdlib.oop.trigger')
local CommandLine = require('stdlib.utils.commandline')
local Icons = require('stdlib.ui.icons')
local Message = require('utils.message')

---@class ChangeLog : object
---@field private major integer
---@field private minor integer
---@field private rev integer
---@field protected logs string[]
---@field protected quest Quest
local ChangeLog = class('ChangeLog')

---@class table<string, ChangeLog>
local versionMap = {}

---@type ChangeLog[]
local versionList = {}

---LogType
ChangeLog.LogType = {
    Normal = 1, --
    Feature = 2, --
    Improve = 3, --
    Bug = 4, --
    Other = 5, --
    [1] = 'Normal',
    [2] = 'Feature',
    [3] = 'Improve',
    [4] = 'Bug',
    [5] = 'Other',
}

function ChangeLog:constructor()
    self.major = 0
    self.minor = 0
    self.rev = 0
    self.logs = {}
    for i, v in ipairs(ChangeLog.LogType) do
        self.logs[i] = {}
    end
end

function ChangeLog:destructor()
    versionMap[self:getVersionString()] = nil
    for i, v in ipairs(versionList) do
        if v == self then
            table.remove(versionList, i)
            break
        end
    end
    if self.quest then
        self.quest:delete()
    end
end

---<static> setVersion
---@param major integer
---@param minor integer
---@param rev integer
function ChangeLog:create(major, minor, rev)
    local cl = ChangeLog:new()
    cl.major = major
    cl.minor = minor
    cl.rev = rev
    versionMap[cl:getVersionString()] = cl
    table.insert(versionList, cl)
    return cl
end

---getVersionString
---@return string
function ChangeLog:getVersionString()
    return string.format('v%s.%s.%s', self.major, self.minor, self.rev)
end

---add
---@param logType LogType
---@param change string
function ChangeLog:add(logType, change)
    self.logs[logType] = self.logs[logType] or {}
    table.insert(self.logs[logType], change)
    return self
end

---feature
---@param change string
function ChangeLog:feature(change)
    return self:add(ChangeLog.LogType.Feature, change)
end

---improve
---@param change string
function ChangeLog:improve(change)
    return self:add(ChangeLog.LogType.Improve, change)
end

---bug
---@param change string
function ChangeLog:bug(change)
    return self:add(ChangeLog.LogType.Bug, change)
end

---other
---@param change string
function ChangeLog:other(change)
    return self:add(ChangeLog.LogType.Other, change)
end

---normal
---@param change string
function ChangeLog:normal(change)
    return self:add(ChangeLog.LogType.Normal, change)
end

---getLog
---@return string
function ChangeLog:getLog()
    local msg = {}
    for i, changes in ipairs(self.logs) do
        if #changes > 0 then
            table.insert(msg, ChangeLog.LogType[i])
            for _, change in ipairs(changes) do
                table.insert(msg, string.format('|cffb8860b - |r|cffc2e8eb%s|r', change))
            end
        end
    end
    return msg
end

---<static> getVersion
---@param version string
---@return ChangeLog
function ChangeLog:getVersion(version)
    return versionMap[version]
end

---<static> getVersions
---@return ChangeLog[]
function ChangeLog:getVersions()
    table.sort(versionList, function(a, b)
        return a.major ~= b.major and b.major - a.major or a.minor ~= b.minor and b.minor - a.minor or b.rev - a.rev
    end)
    return versionList
end

---<static> update
function ChangeLog:update()
    for _, changeLog in ipairs(ChangeLog:getVersions()) do
        local title = string.format(L['|cffff6347Change Log for |cffffd700%s'], changeLog:getVersionString())
        local quest
        if not changeLog.quest then
            quest = Quest:create()
            changeLog.quest = quest
        else
            quest = changeLog.quest
        end
        quest:setRequired(false)
        quest:setTitle(title)
        quest:setDescription(table.concat(changeLog:getLog(), '|n'))
        quest:setIconPath(Icons.bTNTome)
        quest:setState(Quest.StateType.Discovered)
    end
end

CommandLine:addOptionToAll('-changelog|-cl', function(player, str)
    if not str then
        local versions = ChangeLog:getVersions()
        if not versions or #versions == 0 then
            Message:toPlayer(player, L['no valid change log'])
            return
        end
        str = versions[#versions]:getVersionString()
    elseif not string.startswith(str, 'v') then
        str = 'v' .. str
    end
    local ver = ChangeLog:getVersion(str)
    if not ver then
        Message:toPlayer(player, string.format(L['Not find version: %s'], str), 15)
    else
        local title = string.format(L['|cff6495edChange Log for |cffffd700%s'], ver:getVersionString())
        Message:toPlayer(player, title, 15)
        for _, msg in ipairs(ver:getLog()) do
            Message:toPlayer(player, msg)
        end
    end
end)

return ChangeLog]]

P['lib/stdlib/ui/dialogbox.lua'] = [[local Dialog = require('lib.stdlib.oop.dialog')
local Trigger = require('lib.stdlib.oop.trigger')
local Event = require('lib.stdlib.oop.event')
local Player = require('lib.stdlib.oop.player')

---@class DialogBox : object
---@field private title string
---@field private dlg Dialog
---@field private trigger Trigger
---@field private buttons table<Button, integer>
---@field private callback fun(id: integer)
local DialogBox = class('DialogBox')

---DialogBoxCallback
---@type fun(id: integer)

function DialogBox:constructor()
    local dlg = Dialog:create()
    local trigger = Trigger:create()
    trigger:registerDialogEvent(dlg)
    trigger:addAction(function()
        self:buttonClicked(Event:getClickedButton())
    end)
    self.dlg = dlg
    self.trigger = trigger
    self.buttons = {}
end

function DialogBox:destructor()
    for btn in pairs(self.buttons) do
        btn:delete()
    end

    self.dlg:clear()
    self.dlg:delete()
    self.trigger:delete()
end

---setCallback
---@param cb fun(id: integer)
function DialogBox:setCallback(cb)
    self.callback = cb
end

---setTitle
---@param text string
function DialogBox:setTitle(text)
    self.title = text
    self.dlg:setMessage(text)
end

---addButton
---@param id integer
---@param text string
---@param hotkey integer
function DialogBox:addButton(id, text, hotkey)
    local btn = self.dlg:addButton(text, hotkey or 0)
    self.buttons[btn] = id
end

---addQuitButton
---@param doScoreScreen boolean
---@param text string
---@param hotkey integer
function DialogBox:addQuitButton(doScoreScreen, text, hotkey)
    local btn = self.dlg:addQuitButton(doScoreScreen, text, hotkey or 0)
    self.buttons[btn] = -1
end

---display
---@param player Player
---@param flag boolean
function DialogBox:display(player, flag)
    player:dialogDisplay(self.dlg, flag)
end

---displayToAllPlayers
---@param flag boolean
function DialogBox:displayToAllPlayers(flag)
    for player in Player:iterateAll() do
        self:display(player, flag)
    end
end

---getTitle
---@return string
function DialogBox:getTitle()
    return self.title
end

---buttonClicked
---@param btn Button
function DialogBox:buttonClicked(btn)
    local id = self.buttons[btn]
    if id ~= nil and self.callback then
        self.callback(id)
    end
end

---@class DialogItem : table
---@field text string
---@field value integer
---@field hotkey integer

---<static> question
---@overload fun(title: string, dialogItems: DialogItem[], callback: fun(dialogItem: DialogItem))
---@param player Player
---@param title string
---@param dialogItems DialogItem[]
---@param callback fun(dialogItem: DialogItem)
function DialogBox:question(player, title, dialogItems, callback)
    if not isInstanceOf(player, Player) then
        player, title, dialogItems, callback = nil, player, title, dialogItems
    end

    local dlgBox = DialogBox:new()
    dlgBox:setTitle(title)
    for i, v in ipairs(dialogItems) do
        dlgBox:addButton(i, v.text, v.hotkey)
    end

    dlgBox:setCallback(function(i)
        callback(dialogItems[i])
        dlgBox:delete()
    end)

    if player then
        dlgBox:display(player, true)
    else
        dlgBox:displayToAllPlayers(true)
    end

    return dlgBox
end

return DialogBox]]

P['lib/stdlib/ui/icons.lua'] = [[local Icons = {
    bTN3M1 = 'ReplaceableTextures\\CommandButtons\\BTN3M1.blp',
    bTN3M2 = 'ReplaceableTextures\\CommandButtons\\BTN3M2.blp',
    bTN3M3 = 'ReplaceableTextures\\CommandButtons\\BTN3M3.blp',
    bTNAbomination = 'ReplaceableTextures\\CommandButtons\\BTNAbomination.blp',
    bTNAbsorbMagic = 'ReplaceableTextures\\CommandButtons\\BTNAbsorbMagic.blp',
    bTNAcidBomb = 'ReplaceableTextures\\CommandButtons\\BTNAcidBomb.blp',
    bTNAcolyte = 'ReplaceableTextures\\CommandButtons\\BTNAcolyte.blp',
    bTNAcorn = 'UI\\Cursor\\BTNAcorn.blp',
    bTNAcorn1 = 'ReplaceableTextures\\CommandButtons\\BTNAcorn.blp',
    bTNAdvStruct = 'ReplaceableTextures\\CommandButtons\\BTNAdvStruct.blp',
    bTNAdvancedCreatureAttack = 'ReplaceableTextures\\CommandButtons\\BTNAdvancedCreatureAttack.blp',
    bTNAdvancedCreatureCarapace = 'ReplaceableTextures\\CommandButtons\\BTNAdvancedCreatureCarapace.blp',
    bTNAdvancedDeathTower = 'ReplaceableTextures\\CommandButtons\\BTNAdvancedDeathTower.blp',
    bTNAdvancedEnergyTower = 'ReplaceableTextures\\CommandButtons\\BTNAdvancedEnergyTower.blp',
    bTNAdvancedFlameTower = 'ReplaceableTextures\\CommandButtons\\BTNAdvancedFlameTower.blp',
    bTNAdvancedFrostTower = 'ReplaceableTextures\\CommandButtons\\BTNAdvancedFrostTower.blp',
    bTNAdvancedMoonArmor = 'ReplaceableTextures\\CommandButtons\\BTNAdvancedMoonArmor.blp',
    bTNAdvancedReinforcedHides = 'ReplaceableTextures\\CommandButtons\\BTNAdvancedReinforcedHides.blp',
    bTNAdvancedRockTower = 'ReplaceableTextures\\CommandButtons\\BTNAdvancedRockTower.blp',
    bTNAdvancedSpikedBarricades = 'ReplaceableTextures\\CommandButtons\\BTNAdvancedSpikedBarricades.blp',
    bTNAdvancedStrengthOfTheMoon = 'ReplaceableTextures\\CommandButtons\\BTNAdvancedStrengthOfTheMoon.blp',
    bTNAdvancedStrengthOfTheWild = 'ReplaceableTextures\\CommandButtons\\BTNAdvancedStrengthOfTheWild.blp',
    bTNAdvancedUnholyArmor = 'ReplaceableTextures\\CommandButtons\\BTNAdvancedUnholyArmor.blp',
    bTNAdvancedUnholyStrength = 'ReplaceableTextures\\CommandButtons\\BTNAdvancedUnholyStrength.blp',
    bTNAkama = 'ReplaceableTextures\\CommandButtons\\BTNAkama.blp',
    bTNAlbatross = 'ReplaceableTextures\\CommandButtons\\BTNAlbatross.blp',
    bTNAlleriaFlute = 'ReplaceableTextures\\CommandButtons\\BTNAlleriaFlute.blp',
    bTNAltarOfDarkness = 'ReplaceableTextures\\CommandButtons\\BTNAltarOfDarkness.blp',
    bTNAltarOfDepths = 'ReplaceableTextures\\CommandButtons\\BTNAltarOfDepths.blp',
    bTNAltarOfElders = 'ReplaceableTextures\\CommandButtons\\BTNAltarOfElders.blp',
    bTNAltarOfKings = 'ReplaceableTextures\\CommandButtons\\BTNAltarOfKings.blp',
    bTNAltarOfStorms = 'ReplaceableTextures\\CommandButtons\\BTNAltarOfStorms.blp',
    bTNAmbush = 'ReplaceableTextures\\CommandButtons\\BTNAmbush.blp',
    bTNAmmoDump = 'ReplaceableTextures\\CommandButtons\\BTNAmmoDump.blp',
    bTNAmulet = 'ReplaceableTextures\\CommandButtons\\BTNAmulet.blp',
    bTNAmuletOftheWild = 'ReplaceableTextures\\CommandButtons\\BTNAmuletOftheWild.blp',
    bTNAncestralSpirit = 'ReplaceableTextures\\CommandButtons\\BTNAncestralSpirit.blp',
    bTNAncientOfLore = 'ReplaceableTextures\\CommandButtons\\BTNAncientOfLore.blp',
    bTNAncientOfTheEarth = 'ReplaceableTextures\\CommandButtons\\BTNAncientOfTheEarth.blp',
    bTNAncientOfTheMoon = 'ReplaceableTextures\\CommandButtons\\BTNAncientOfTheMoon.blp',
    bTNAncientOfWonders = 'ReplaceableTextures\\CommandButtons\\BTNAncientOfWonders.blp',
    bTNAnimalWarTraining = 'ReplaceableTextures\\CommandButtons\\BTNAnimalWarTraining.blp',
    bTNAnimateDead = 'ReplaceableTextures\\CommandButtons\\BTNAnimateDead.blp',
    bTNAnkh = 'ReplaceableTextures\\CommandButtons\\BTNAnkh.blp',
    bTNAntiMagicShell = 'ReplaceableTextures\\CommandButtons\\BTNAntiMagicShell.blp',
    bTNArachnathid = 'ReplaceableTextures\\CommandButtons\\BTNArachnathid.blp',
    bTNArachnathidGreen = 'ReplaceableTextures\\CommandButtons\\BTNArachnathidGreen.blp',
    bTNArachnathidpurple = 'ReplaceableTextures\\CommandButtons\\BTNArachnathidpurple.blp',
    bTNArcaneObservatory = 'ReplaceableTextures\\CommandButtons\\BTNArcaneObservatory.blp',
    bTNArcaneSanctum = 'ReplaceableTextures\\CommandButtons\\BTNArcaneSanctum.blp',
    bTNArcaneTower = 'ReplaceableTextures\\CommandButtons\\BTNArcaneTower.blp',
    bTNArcaneVault = 'ReplaceableTextures\\CommandButtons\\BTNArcaneVault.blp',
    bTNArcaniteArchitecture = 'ReplaceableTextures\\CommandButtons\\BTNArcaniteArchitecture.blp',
    bTNArcaniteArmor = 'ReplaceableTextures\\CommandButtons\\BTNArcaniteArmor.blp',
    bTNArcaniteMelee = 'ReplaceableTextures\\CommandButtons\\BTNArcaniteMelee.blp',
    bTNArcaniteRanged = 'ReplaceableTextures\\CommandButtons\\BTNArcaniteRanged.blp',
    bTNArcher = 'ReplaceableTextures\\CommandButtons\\BTNArcher.blp',
    bTNArchimonde = 'ReplaceableTextures\\CommandButtons\\BTNArchimonde.blp',
    bTNArmorGolem = 'ReplaceableTextures\\CommandButtons\\BTNArmorGolem.blp',
    bTNArmoredOge = 'ReplaceableTextures\\CommandButtons\\BTNArmoredOge.blp',
    bTNArthas = 'ReplaceableTextures\\CommandButtons\\BTNArthas.blp',
    bTNAssassin = 'ReplaceableTextures\\CommandButtons\\BTNAssassin.blp',
    bTNAttack = 'ReplaceableTextures\\CommandButtons\\BTNAttack.blp',
    bTNAttackGround = 'ReplaceableTextures\\CommandButtons\\BTNAttackGround.blp',
    bTNAuraOfDarkness = 'ReplaceableTextures\\CommandButtons\\BTNAuraOfDarkness.blp',
    bTNAvatar = 'ReplaceableTextures\\CommandButtons\\BTNAvatar.blp',
    bTNAvatarOff = 'ReplaceableTextures\\CommandButtons\\BTNAvatarOff.blp',
    bTNAvatarOn = 'ReplaceableTextures\\CommandButtons\\BTNAvatarOn.blp',
    bTNAvengingAssassin = 'ReplaceableTextures\\CommandButtons\\BTNAvengingAssassin.blp',
    bTNAvengingWatcher = 'ReplaceableTextures\\CommandButtons\\BTNAvengingWatcher.blp',
    bTNAvengingWatcherOff = 'ReplaceableTextures\\CommandButtons\\BTNAvengingWatcherOff.blp',
    bTNAvengingWatcherOn = 'ReplaceableTextures\\CommandButtons\\BTNAvengingWatcherOn.blp',
    bTNAzureDragon = 'ReplaceableTextures\\CommandButtons\\BTNAzureDragon.blp',
    bTNBLoodMage2 = 'ReplaceableTextures\\CommandButtons\\BTNBLoodMage2.blp',
    bTNBacktoWork = 'ReplaceableTextures\\CommandButtons\\BTNBacktoWork.blp',
    bTNBallista = 'ReplaceableTextures\\CommandButtons\\BTNBallista.blp',
    bTNBandit = 'ReplaceableTextures\\CommandButtons\\BTNBandit.blp',
    bTNBanditLord = 'ReplaceableTextures\\CommandButtons\\BTNBanditLord.blp',
    bTNBanditMage = 'ReplaceableTextures\\CommandButtons\\BTNBanditMage.blp',
    bTNBanditSpearThrower = 'ReplaceableTextures\\CommandButtons\\BTNBanditSpearThrower.blp',
    bTNBanish = 'ReplaceableTextures\\CommandButtons\\BTNBanish.blp',
    bTNBanshee = 'ReplaceableTextures\\CommandButtons\\BTNBanshee.blp',
    bTNBansheeAdept = 'ReplaceableTextures\\CommandButtons\\BTNBansheeAdept.blp',
    bTNBansheeMaster = 'ReplaceableTextures\\CommandButtons\\BTNBansheeMaster.blp',
    bTNBansheeRanger = 'ReplaceableTextures\\CommandButtons\\BTNBansheeRanger.blp',
    bTNBarkSkin = 'ReplaceableTextures\\CommandButtons\\BTNBarkSkin.blp',
    bTNBarkSkinOff = 'ReplaceableTextures\\CommandButtons\\BTNBarkSkinOff.blp',
    bTNBarkSkinOn = 'ReplaceableTextures\\CommandButtons\\BTNBarkSkinOn.blp',
    bTNBarracks = 'ReplaceableTextures\\CommandButtons\\BTNBarracks.blp',
    bTNBarrel = 'ReplaceableTextures\\CommandButtons\\BTNBarrel.blp',
    bTNBash = 'ReplaceableTextures\\CommandButtons\\BTNBash.blp',
    bTNBasicStruct = 'ReplaceableTextures\\CommandButtons\\BTNBasicStruct.blp',
    bTNBattleRoar = 'ReplaceableTextures\\CommandButtons\\BTNBattleRoar.blp',
    bTNBattleShip = 'ReplaceableTextures\\CommandButtons\\BTNBattleShip.blp',
    bTNBattleStations = 'ReplaceableTextures\\CommandButtons\\BTNBattleStations.blp',
    bTNBearBlink = 'ReplaceableTextures\\CommandButtons\\BTNBearBlink.blp',
    bTNBearDen = 'ReplaceableTextures\\CommandButtons\\BTNBearDen.blp',
    bTNBearForm = 'ReplaceableTextures\\CommandButtons\\BTNBearForm.blp',
    bTNBeastMaster = 'ReplaceableTextures\\CommandButtons\\BTNBeastMaster.blp',
    bTNBeastiary = 'ReplaceableTextures\\CommandButtons\\BTNBeastiary.blp',
    bTNBelt = 'ReplaceableTextures\\CommandButtons\\BTNBelt.blp',
    bTNBerserk = 'ReplaceableTextures\\CommandButtons\\BTNBerserk.blp',
    bTNBerserkForTrolls = 'ReplaceableTextures\\CommandButtons\\BTNBerserkForTrolls.blp',
    bTNBigBadVoodooSpell = 'ReplaceableTextures\\CommandButtons\\BTNBigBadVoodooSpell.blp',
    bTNBlackCitadel = 'ReplaceableTextures\\CommandButtons\\BTNBlackCitadel.blp',
    bTNBlackDragon = 'ReplaceableTextures\\CommandButtons\\BTNBlackDragon.blp',
    bTNBlackDragonRoost = 'ReplaceableTextures\\CommandButtons\\BTNBlackDragonRoost.blp',
    bTNBlackMammoth = 'ReplaceableTextures\\CommandButtons\\BTNBlackMammoth.blp',
    bTNBlackMarket = 'ReplaceableTextures\\CommandButtons\\BTNBlackMarket.blp',
    bTNBlacksmith = 'ReplaceableTextures\\CommandButtons\\BTNBlacksmith.blp',
    bTNBlink = 'ReplaceableTextures\\CommandButtons\\BTNBlink.blp',
    bTNBlizzard = 'ReplaceableTextures\\CommandButtons\\BTNBlizzard.blp',
    bTNBloodElfPeasant = 'ReplaceableTextures\\CommandButtons\\BTNBloodElfPeasant.blp',
    bTNBloodElfSupplyWagon = 'ReplaceableTextures\\CommandButtons\\BTNBloodElfSupplyWagon.blp',
    bTNBloodGhostKey = 'ReplaceableTextures\\CommandButtons\\BTNBlood&GhostKey.blp',
    bTNBloodKey = 'ReplaceableTextures\\CommandButtons\\BTNBloodKey.blp',
    bTNBloodLust = 'ReplaceableTextures\\CommandButtons\\BTNBloodLust.blp',
    bTNBloodLustOff = 'ReplaceableTextures\\CommandButtons\\BTNBloodLustOff.blp',
    bTNBloodLustOn = 'ReplaceableTextures\\CommandButtons\\BTNBloodLustOn.blp',
    bTNBlueDemoness = 'ReplaceableTextures\\CommandButtons\\BTNBlueDemoness.blp',
    bTNBlueDragonRoost = 'ReplaceableTextures\\CommandButtons\\BTNBlueDragonRoost.blp',
    bTNBlueDragonSpawn = 'ReplaceableTextures\\CommandButtons\\BTNBlueDragonSpawn.blp',
    bTNBlueMagnataur = 'ReplaceableTextures\\CommandButtons\\BTNBlueMagnataur.blp',
    bTNBoneChimes = 'ReplaceableTextures\\CommandButtons\\BTNBoneChimes.blp',
    bTNBoneYard = 'ReplaceableTextures\\CommandButtons\\BTNBoneYard.blp',
    bTNBookOfSummoning = 'ReplaceableTextures\\CommandButtons\\BTNBookOfSummoning.blp',
    bTNBookOfTheDead = 'ReplaceableTextures\\CommandButtons\\BTNBookOfTheDead.blp',
    bTNBoots = 'ReplaceableTextures\\CommandButtons\\BTNBoots.blp',
    bTNBootsOfSpeed = 'ReplaceableTextures\\CommandButtons\\BTNBootsOfSpeed.blp',
    bTNBox = 'ReplaceableTextures\\CommandButtons\\BTNBox.blp',
    bTNBreathOfFire = 'ReplaceableTextures\\CommandButtons\\BTNBreathOfFire.blp',
    bTNBreathOfFrost = 'ReplaceableTextures\\CommandButtons\\BTNBreathOfFrost.blp',
    bTNBrilliance = 'ReplaceableTextures\\CommandButtons\\BTNBrilliance.blp',
    bTNBronzeBowl = 'ReplaceableTextures\\CommandButtons\\BTNBronzeBowl.blp',
    bTNBronzeBowlFull = 'ReplaceableTextures\\CommandButtons\\BTNBronzeBowlFull.blp',
    bTNBronzeDragon = 'ReplaceableTextures\\CommandButtons\\BTNBronzeDragon.blp',
    bTNBundleOfLumber = 'ReplaceableTextures\\CommandButtons\\BTNBundleOfLumber.blp',
    bTNCOP = 'ReplaceableTextures\\CommandButtons\\BTNCOP.blp',
    bTNCage = 'ReplaceableTextures\\CommandButtons\\BTNCage.blp',
    bTNCagedIllidan = 'ReplaceableTextures\\CommandButtons\\BTNCagedIllidan.blp',
    bTNCallToArms = 'ReplaceableTextures\\CommandButtons\\BTNCallToArms.blp',
    bTNCancel = 'ReplaceableTextures\\CommandButtons\\BTNCancel.blp',
    bTNCannibalize = 'ReplaceableTextures\\CommandButtons\\BTNCannibalize.blp',
    bTNCannonTower = 'ReplaceableTextures\\CommandButtons\\BTNCannonTower.blp',
    bTNCarrionScarabs = 'ReplaceableTextures\\CommandButtons\\BTNCarrionScarabs.blp',
    bTNCarrionScarabsOff = 'ReplaceableTextures\\CommandButtons\\BTNCarrionScarabsOff.blp',
    bTNCarrionScarabsOn = 'ReplaceableTextures\\CommandButtons\\BTNCarrionScarabsOn.blp',
    bTNCarrionSwarm = 'ReplaceableTextures\\CommandButtons\\BTNCarrionSwarm.blp',
    bTNCastle = 'ReplaceableTextures\\CommandButtons\\BTNCastle.blp',
    bTNCatapult = 'ReplaceableTextures\\CommandButtons\\BTNCatapult.blp',
    bTNCentaur = 'ReplaceableTextures\\CommandButtons\\BTNCentaur.blp',
    bTNCentaurArcher = 'ReplaceableTextures\\CommandButtons\\BTNCentaurArcher.blp',
    bTNCentaurKhan = 'ReplaceableTextures\\CommandButtons\\BTNCentaurKhan.blp',
    bTNChainLightning = 'ReplaceableTextures\\CommandButtons\\BTNChainLightning.blp',
    bTNChaosBlademaster = 'ReplaceableTextures\\CommandButtons\\BTNChaosBlademaster.blp',
    bTNChaosGrom = 'ReplaceableTextures\\CommandButtons\\BTNChaosGrom.blp',
    bTNChaosGrunt = 'ReplaceableTextures\\CommandButtons\\BTNChaosGrunt.blp',
    bTNChaosKotoBeast = 'ReplaceableTextures\\CommandButtons\\BTNChaosKotoBeast.blp',
    bTNChaosPeon = 'ReplaceableTextures\\CommandButtons\\BTNChaosPeon.blp',
    bTNChaosSpaceOrc = 'ReplaceableTextures\\CommandButtons\\BTNChaosSpaceOrc.blp',
    bTNChaosWarlock = 'ReplaceableTextures\\CommandButtons\\BTNChaosWarlock.blp',
    bTNChaosWarlockGreen = 'ReplaceableTextures\\CommandButtons\\BTNChaosWarlockGreen.blp',
    bTNChaosWarlord = 'ReplaceableTextures\\CommandButtons\\BTNChaosWarlord.blp',
    bTNChaosWolfRider = 'ReplaceableTextures\\CommandButtons\\BTNChaosWolfRider.blp',
    bTNCharm = 'ReplaceableTextures\\CommandButtons\\BTNCharm.blp',
    bTNCharm1 = 'ReplaceableTextures\\CommandButtons\\BTNCharm.blp',
    bTNCheese = 'ReplaceableTextures\\CommandButtons\\BTNCheese.blp',
    bTNChemicalRage = 'ReplaceableTextures\\CommandButtons\\BTNChemicalRage.blp',
    bTNChestOfGold = 'ReplaceableTextures\\CommandButtons\\BTNChestOfGold.blp',
    bTNChimaera = 'ReplaceableTextures\\CommandButtons\\BTNChimaera.blp',
    bTNChimaeraRoost = 'ReplaceableTextures\\CommandButtons\\BTNChimaeraRoost.blp',
    bTNChime = 'ReplaceableTextures\\CommandButtons\\BTNChime.blp',
    bTNCirclet = 'ReplaceableTextures\\CommandButtons\\BTNCirclet.blp',
    bTNClawsOfAttack = 'ReplaceableTextures\\CommandButtons\\BTNClawsOfAttack.blp',
    bTNClayFigurine = 'ReplaceableTextures\\CommandButtons\\BTNClayFigurine.blp',
    bTNCleavingAttack = 'ReplaceableTextures\\CommandButtons\\BTNCleavingAttack.blp',
    bTNCloak = 'ReplaceableTextures\\CommandButtons\\BTNCloak.blp',
    bTNCloakOfFlames = 'ReplaceableTextures\\CommandButtons\\BTNCloakOfFlames.blp',
    bTNClockWerkGoblin = 'ReplaceableTextures\\CommandButtons\\BTNClockWerkGoblin.blp',
    bTNCloudOfFog = 'ReplaceableTextures\\CommandButtons\\BTNCloudOfFog.blp',
    bTNClusterRockets = 'ReplaceableTextures\\CommandButtons\\BTNClusterRockets.blp',
    bTNColdArrows = 'ReplaceableTextures\\CommandButtons\\BTNColdArrows.blp',
    bTNColdArrowsOff = 'ReplaceableTextures\\CommandButtons\\BTNColdArrowsOff.blp',
    bTNColdArrowsOn = 'ReplaceableTextures\\CommandButtons\\BTNColdArrowsOn.blp',
    bTNColdTower = 'ReplaceableTextures\\CommandButtons\\BTNColdTower.blp',
    bTNCommand = 'ReplaceableTextures\\CommandButtons\\BTNCommand.blp',
    bTNControlMagic = 'ReplaceableTextures\\CommandButtons\\BTNControlMagic.blp',
    bTNCoralBed = 'ReplaceableTextures\\CommandButtons\\BTNCoralBed.blp',
    bTNCorpseExplode = 'ReplaceableTextures\\CommandButtons\\BTNCorpseExplode.blp',
    bTNCorrosiveBreath = 'ReplaceableTextures\\CommandButtons\\BTNCorrosiveBreath.blp',
    bTNCorruptedAncientOfWar = 'ReplaceableTextures\\CommandButtons\\BTNCorruptedAncientOfWar.blp',
    bTNCorruptedAncientProtector = 'ReplaceableTextures\\CommandButtons\\BTNCorruptedAncientProtector.blp',
    bTNCorruptedEnt = 'ReplaceableTextures\\CommandButtons\\BTNCorruptedEnt.blp',
    bTNCorruptedMoonWell = 'ReplaceableTextures\\CommandButtons\\BTNCorruptedMoonWell.blp',
    bTNCorruptedTreeOfLife = 'ReplaceableTextures\\CommandButtons\\BTNCorruptedTreeOfLife.blp',
    bTNCrate = 'ReplaceableTextures\\CommandButtons\\BTNCrate.blp',
    bTNCreatureAttack = 'ReplaceableTextures\\CommandButtons\\BTNCreatureAttack.blp',
    bTNCreatureCarapace = 'ReplaceableTextures\\CommandButtons\\BTNCreatureCarapace.blp',
    bTNCripple = 'ReplaceableTextures\\CommandButtons\\BTNCripple.blp',
    bTNCriticalStrike = 'ReplaceableTextures\\CommandButtons\\BTNCriticalStrike.blp',
    bTNCritterChicken = 'ReplaceableTextures\\CommandButtons\\BTNCritterChicken.blp',
    bTNCritterRabbit = 'ReplaceableTextures\\CommandButtons\\BTNCritterRabbit.blp',
    bTNCrushingWave = 'ReplaceableTextures\\CommandButtons\\BTNCrushingWave.blp',
    bTNCrypt = 'ReplaceableTextures\\CommandButtons\\BTNCrypt.blp',
    bTNCryptFiend = 'ReplaceableTextures\\CommandButtons\\BTNCryptFiend.blp',
    bTNCryptFiendBurrow = 'ReplaceableTextures\\CommandButtons\\BTNCryptFiendBurrow.blp',
    bTNCryptFiendUnBurrow = 'ReplaceableTextures\\CommandButtons\\BTNCryptFiendUnBurrow.blp',
    bTNCrystalBall = 'ReplaceableTextures\\CommandButtons\\BTNCrystalBall.blp',
    bTNCurse = 'ReplaceableTextures\\CommandButtons\\BTNCurse.blp',
    bTNCurseOff = 'ReplaceableTextures\\CommandButtons\\BTNCurseOff.blp',
    bTNCurseOn = 'ReplaceableTextures\\CommandButtons\\BTNCurseOn.blp',
    bTNCyclone = 'ReplaceableTextures\\CommandButtons\\BTNCyclone.blp',
    bTNDOCAdeptTraining = 'ReplaceableTextures\\CommandButtons\\BTNDOCAdeptTraining.blp',
    bTNDOCMasterTraining = 'ReplaceableTextures\\CommandButtons\\BTNDOCMasterTraining.blp',
    bTNDOTAdeptTraining = 'ReplaceableTextures\\CommandButtons\\BTNDOTAdeptTraining.blp',
    bTNDOTMasterTraining = 'ReplaceableTextures\\CommandButtons\\BTNDOTMasterTraining.blp',
    bTNDaggerOfEscape = 'ReplaceableTextures\\CommandButtons\\BTNDaggerOfEscape.blp',
    bTNDalaranGuardTower = 'ReplaceableTextures\\CommandButtons\\BTNDalaranGuardTower.blp',
    bTNDalaranMutant = 'ReplaceableTextures\\CommandButtons\\BTNDalaranMutant.blp',
    bTNDalaranReject = 'ReplaceableTextures\\CommandButtons\\BTNDalaranReject.blp',
    bTNDarkPortal = 'ReplaceableTextures\\CommandButtons\\BTNDarkPortal.blp',
    bTNDarkRitual = 'ReplaceableTextures\\CommandButtons\\BTNDarkRitual.blp',
    bTNDarkSummoning = 'ReplaceableTextures\\CommandButtons\\BTNDarkSummoning.blp',
    bTNDarkTroll = 'ReplaceableTextures\\CommandButtons\\BTNDarkTroll.blp',
    bTNDarkTrollShadowPriest = 'ReplaceableTextures\\CommandButtons\\BTNDarkTrollShadowPriest.blp',
    bTNDarkTrollTrapper = 'ReplaceableTextures\\CommandButtons\\BTNDarkTrollTrapper.blp',
    bTNDeathAndDecay = 'ReplaceableTextures\\CommandButtons\\BTNDeathAndDecay.blp',
    bTNDeathCoil = 'ReplaceableTextures\\CommandButtons\\BTNDeathCoil.blp',
    bTNDeathPact = 'ReplaceableTextures\\CommandButtons\\BTNDeathPact.blp',
    bTNDeathTower = 'ReplaceableTextures\\CommandButtons\\BTNDeathTower.blp',
    bTNDeepLordRevenant = 'ReplaceableTextures\\CommandButtons\\BTNDeepLordRevenant.blp',
    bTNDefend = 'ReplaceableTextures\\CommandButtons\\BTNDefend.blp',
    bTNDefendStop = 'ReplaceableTextures\\CommandButtons\\BTNDefendStop.blp',
    bTNDemolish = 'ReplaceableTextures\\CommandButtons\\BTNDemolish.blp',
    bTNDemolisher = 'ReplaceableTextures\\CommandButtons\\BTNDemolisher.blp',
    bTNDemonGate = 'ReplaceableTextures\\CommandButtons\\BTNDemonGate.blp',
    bTNDemoness = 'ReplaceableTextures\\CommandButtons\\BTNDemoness.blp',
    bTNDenOfWonders = 'ReplaceableTextures\\CommandButtons\\BTNDenOfWonders.blp',
    bTNDestroyer = 'ReplaceableTextures\\CommandButtons\\BTNDestroyer.blp',
    bTNDevotion = 'ReplaceableTextures\\CommandButtons\\BTNDevotion.blp',
    bTNDevour = 'ReplaceableTextures\\CommandButtons\\BTNDevour.blp',
    bTNDevourMagic = 'ReplaceableTextures\\CommandButtons\\BTNDevourMagic.blp',
    bTNDiabloCar = 'ReplaceableTextures\\CommandButtons\\BTNDiabloCar.blp',
    bTNDireWolf = 'ReplaceableTextures\\CommandButtons\\BTNDireWolf.blp',
    bTNDisenchant = 'ReplaceableTextures\\CommandButtons\\BTNDisenchant.blp',
    bTNDispelMagic = 'ReplaceableTextures\\CommandButtons\\BTNDispelMagic.blp',
    bTNDivineIntervention = 'ReplaceableTextures\\CommandButtons\\BTNDivineIntervention.blp',
    bTNDivineShieldOff = 'ReplaceableTextures\\CommandButtons\\BTNDivineShieldOff.blp',
    bTNDizzy = 'ReplaceableTextures\\CommandButtons\\BTNDizzy.blp',
    bTNDoom = 'ReplaceableTextures\\CommandButtons\\BTNDoom.blp',
    bTNDoomGuard = 'ReplaceableTextures\\CommandButtons\\BTNDoomGuard.blp',
    bTNDragonHawk = 'ReplaceableTextures\\CommandButtons\\BTNDragonHawk.blp',
    bTNDragonRoost = 'ReplaceableTextures\\CommandButtons\\BTNDragonRoost.blp',
    bTNDrain = 'ReplaceableTextures\\CommandButtons\\BTNDrain.blp',
    bTNDranai = 'ReplaceableTextures\\CommandButtons\\BTNDranai.blp',
    bTNDranaiAkama = 'ReplaceableTextures\\CommandButtons\\BTNDranaiAkama.blp',
    bTNDranaiChiefHut = 'ReplaceableTextures\\CommandButtons\\BTNDranaiChiefHut.blp',
    bTNDranaiHut = 'ReplaceableTextures\\CommandButtons\\BTNDranaiHut.blp',
    bTNDranaiMage = 'ReplaceableTextures\\CommandButtons\\BTNDranaiMage.blp',
    bTNDruidOfTheClaw = 'ReplaceableTextures\\CommandButtons\\BTNDruidOfTheClaw.blp',
    bTNDruidOfTheTalon = 'ReplaceableTextures\\CommandButtons\\BTNDruidOfTheTalon.blp',
    bTNDrum = 'ReplaceableTextures\\CommandButtons\\BTNDrum.blp',
    bTNDrunkenDodge = 'ReplaceableTextures\\CommandButtons\\BTNDrunkenDodge.blp',
    bTNDryad = 'ReplaceableTextures\\CommandButtons\\BTNDryad.blp',
    bTNDryadDispelMagic = 'ReplaceableTextures\\CommandButtons\\BTNDryadDispelMagic.blp',
    bTNDryadDispelMagicOff = 'ReplaceableTextures\\CommandButtons\\BTNDryadDispelMagicOff.blp',
    bTNDryadDispelMagicOn = 'ReplaceableTextures\\CommandButtons\\BTNDryadDispelMagicOn.blp',
    bTNDuneWorm = 'ReplaceableTextures\\CommandButtons\\BTNDuneWorm.blp',
    bTNDust = 'ReplaceableTextures\\CommandButtons\\BTNDust.blp',
    bTNDustOfAppearance = 'ReplaceableTextures\\CommandButtons\\BTNDustOfAppearance.blp',
    bTNDwarfCar = 'ReplaceableTextures\\CommandButtons\\BTNDwarfCar.blp',
    bTNDwarvenLongRifle = 'ReplaceableTextures\\CommandButtons\\BTNDwarvenLongRifle.blp',
    bTNEarthBrewMaster = 'ReplaceableTextures\\CommandButtons\\BTNEarthBrewMaster.blp',
    bTNEarthquake = 'ReplaceableTextures\\CommandButtons\\BTNEarthquake.blp',
    bTNEatTree = 'ReplaceableTextures\\CommandButtons\\BTNEatTree.blp',
    bTNElfVillager = 'ReplaceableTextures\\CommandButtons\\BTNElfVillager.blp',
    bTNElunesBlessing = 'ReplaceableTextures\\CommandButtons\\BTNElunesBlessing.blp',
    bTNElvenFarm = 'ReplaceableTextures\\CommandButtons\\BTNElvenFarm.blp',
    bTNElvenGuardTower = 'ReplaceableTextures\\CommandButtons\\BTNElvenGuardTower.blp',
    bTNEnchantedBears = 'ReplaceableTextures\\CommandButtons\\BTNEnchantedBears.blp',
    bTNEnchantedCrows = 'ReplaceableTextures\\CommandButtons\\BTNEnchantedCrows.blp',
    bTNEnchantedGemstone = 'ReplaceableTextures\\CommandButtons\\BTNEnchantedGemstone.blp',
    bTNEnergyTower = 'ReplaceableTextures\\CommandButtons\\BTNEnergyTower.blp',
    bTNEngineeringUpgrade = 'ReplaceableTextures\\CommandButtons\\BTNEngineeringUpgrade.blp',
    bTNEnsnare = 'ReplaceableTextures\\CommandButtons\\BTNEnsnare.blp',
    bTNEnt = 'ReplaceableTextures\\CommandButtons\\BTNEnt.blp',
    bTNEntangleMine = 'ReplaceableTextures\\CommandButtons\\BTNEntangleMine.blp',
    bTNEntanglingRoots = 'ReplaceableTextures\\CommandButtons\\BTNEntanglingRoots.blp',
    bTNEntrapmentWard = 'ReplaceableTextures\\CommandButtons\\BTNEntrapmentWard.blp',
    bTNEntrapmentWard1 = 'ReplaceableTextures\\CommandButtons\\BTNEntrapmentWard.blp',
    bTNEnvenomedSpear = 'ReplaceableTextures\\CommandButtons\\BTNEnvenomedSpear.blp',
    bTNEredarWarlockPurple = 'ReplaceableTextures\\CommandButtons\\BTNEredarWarlockPurple.blp',
    bTNEtherealFormOn = 'ReplaceableTextures\\CommandButtons\\BTNEtherealFormOn.blp',
    bTNEvasion = 'ReplaceableTextures\\CommandButtons\\BTNEvasion.blp',
    bTNEvilIllidan = 'ReplaceableTextures\\CommandButtons\\BTNEvilIllidan.blp',
    bTNExhumeCorpses = 'ReplaceableTextures\\CommandButtons\\BTNExhumeCorpses.blp',
    bTNExpandedView = 'ReplaceableTextures\\CommandButtons\\BTNExpandedView.blp',
    bTNFacelessOne = 'ReplaceableTextures\\CommandButtons\\BTNFacelessOne.blp',
    bTNFaerieDragon = 'ReplaceableTextures\\CommandButtons\\BTNFaerieDragon.blp',
    bTNFaerieFire = 'ReplaceableTextures\\CommandButtons\\BTNFaerieFire.blp',
    bTNFaerieFireOff = 'ReplaceableTextures\\CommandButtons\\BTNFaerieFireOff.blp',
    bTNFaerieFireOn = 'ReplaceableTextures\\CommandButtons\\BTNFaerieFireOn.blp',
    bTNFanOfKnives = 'ReplaceableTextures\\CommandButtons\\BTNFanOfKnives.blp',
    bTNFarSight = 'ReplaceableTextures\\CommandButtons\\BTNFarSight.blp',
    bTNFarm = 'ReplaceableTextures\\CommandButtons\\BTNFarm.blp',
    bTNFeedBack = 'ReplaceableTextures\\CommandButtons\\BTNFeedBack.blp',
    bTNFelBoar = 'ReplaceableTextures\\CommandButtons\\BTNFelBoar.blp',
    bTNFelGuard = 'ReplaceableTextures\\CommandButtons\\BTNFelGuard.blp',
    bTNFelGuardBlue = 'ReplaceableTextures\\CommandButtons\\BTNFelGuardBlue.blp',
    bTNFelHound = 'ReplaceableTextures\\CommandButtons\\BTNFelHound.blp',
    bTNFemaleElfVillager = 'ReplaceableTextures\\CommandButtons\\BTNFemaleElfVillager.blp',
    bTNFire = 'ReplaceableTextures\\CommandButtons\\BTNFire.blp',
    bTNFireBolt = 'ReplaceableTextures\\CommandButtons\\BTNFireBolt.blp',
    bTNFireBrewMaster = 'ReplaceableTextures\\CommandButtons\\BTNFireBrewMaster.blp',
    bTNFireForTheCannon = 'ReplaceableTextures\\CommandButtons\\BTNFireForTheCannon.blp',
    bTNFireRocks = 'ReplaceableTextures\\CommandButtons\\BTNFireRocks.blp',
    bTNFlakCannons = 'ReplaceableTextures\\CommandButtons\\BTNFlakCannons.blp',
    bTNFlameTower = 'ReplaceableTextures\\CommandButtons\\BTNFlameTower.blp',
    bTNFlamingArrows = 'ReplaceableTextures\\CommandButtons\\BTNFlamingArrows.blp',
    bTNFlare = 'ReplaceableTextures\\CommandButtons\\BTNFlare.blp',
    bTNFleshGolem = 'ReplaceableTextures\\CommandButtons\\BTNFleshGolem.blp',
    bTNFlute = 'ReplaceableTextures\\CommandButtons\\BTNFlute.blp',
    bTNFlyingMachine = 'ReplaceableTextures\\CommandButtons\\BTNFlyingMachine.blp',
    bTNFootman = 'ReplaceableTextures\\CommandButtons\\BTNFootman.blp',
    bTNForceOfNature = 'ReplaceableTextures\\CommandButtons\\BTNForceOfNature.blp',
    bTNForestTroll = 'ReplaceableTextures\\CommandButtons\\BTNForestTroll.blp',
    bTNForestTrollShadowPriest = 'ReplaceableTextures\\CommandButtons\\BTNForestTrollShadowPriest.blp',
    bTNForestTrollTrapper = 'ReplaceableTextures\\CommandButtons\\BTNForestTrollTrapper.blp',
    bTNForestTrollTrapper1 = 'ReplaceableTextures\\CommandButtons\\BTNForestTrollTrapper.blp',
    bTNForge = 'ReplaceableTextures\\CommandButtons\\BTNForge.blp',
    bTNForgottenOne = 'ReplaceableTextures\\CommandButtons\\BTNForgottenOne.blp',
    bTNFortress = 'ReplaceableTextures\\CommandButtons\\BTNFortress.blp',
    bTNFountainOfLife = 'ReplaceableTextures\\CommandButtons\\BTNFountainOfLife.blp',
    bTNFountainOfLifeBlood = 'ReplaceableTextures\\CommandButtons\\BTNFountainOfLifeBlood.blp',
    bTNFountainOfLifeDefiled = 'ReplaceableTextures\\CommandButtons\\BTNFountainOfLifeDefiled.blp',
    bTNFragmentationBombs = 'ReplaceableTextures\\CommandButtons\\BTNFragmentationBombs.blp',
    bTNFreezingBreath = 'ReplaceableTextures\\CommandButtons\\BTNFreezingBreath.blp',
    bTNFrost = 'ReplaceableTextures\\CommandButtons\\BTNFrost.blp',
    bTNFrostArmor = 'ReplaceableTextures\\CommandButtons\\BTNFrostArmor.blp',
    bTNFrostArmorOff = 'ReplaceableTextures\\CommandButtons\\BTNFrostArmorOff.blp',
    bTNFrostArmorOff1 = 'ReplaceableTextures\\CommandButtons\\BTNFrostArmorOff.blp',
    bTNFrostArmorOn = 'ReplaceableTextures\\CommandButtons\\BTNFrostArmorOn.blp',
    bTNFrostArmorOn1 = 'ReplaceableTextures\\CommandButtons\\BTNFrostArmorOn.blp',
    bTNFrostBear = 'ReplaceableTextures\\CommandButtons\\BTNFrostBear.blp',
    bTNFrostBolt = 'ReplaceableTextures\\CommandButtons\\BTNFrostBolt.blp',
    bTNFrostMourne = 'ReplaceableTextures\\CommandButtons\\BTNFrostMourne.blp',
    bTNFrostTower = 'ReplaceableTextures\\CommandButtons\\BTNFrostTower.blp',
    bTNFrostWyrm = 'ReplaceableTextures\\CommandButtons\\BTNFrostWyrm.blp',
    bTNFurbolg = 'ReplaceableTextures\\CommandButtons\\BTNFurbolg.blp',
    bTNFurbolgElder = 'ReplaceableTextures\\CommandButtons\\BTNFurbolgElder.blp',
    bTNFurbolgPanda = 'ReplaceableTextures\\CommandButtons\\BTNFurbolgPanda.blp',
    bTNFurbolgShaman = 'ReplaceableTextures\\CommandButtons\\BTNFurbolgShaman.blp',
    bTNFurbolgTracker = 'ReplaceableTextures\\CommandButtons\\BTNFurbolgTracker.blp',
    bTNFurion = 'ReplaceableTextures\\CommandButtons\\BTNFurion.blp',
    bTNGLExchange = 'ReplaceableTextures\\CommandButtons\\BTNGLExchange.blp',
    bTNGMExchange = 'ReplaceableTextures\\CommandButtons\\BTNGMExchange.blp',
    bTNGargoyle = 'ReplaceableTextures\\CommandButtons\\BTNGargoyle.blp',
    bTNGarithos = 'ReplaceableTextures\\CommandButtons\\BTNGarithos.blp',
    bTNGatherGold = 'ReplaceableTextures\\CommandButtons\\BTNGatherGold.blp',
    bTNGauntletsOfOgrePower = 'ReplaceableTextures\\CommandButtons\\BTNGauntletsOfOgrePower.blp',
    bTNGem = 'ReplaceableTextures\\CommandButtons\\BTNGem.blp',
    bTNGenericCreepBuilding = 'ReplaceableTextures\\CommandButtons\\BTNGenericCreepBuilding.blp',
    bTNGenericHumanBuilding = 'ReplaceableTextures\\CommandButtons\\BTNGenericHumanBuilding.blp',
    bTNGenericSpellImmunity = 'ReplaceableTextures\\CommandButtons\\BTNGenericSpellImmunity.blp',
    bTNGhost = 'ReplaceableTextures\\CommandButtons\\BTNGhost.blp',
    bTNGhostKey = 'ReplaceableTextures\\CommandButtons\\BTNGhostKey.blp',
    bTNGhostMage = 'ReplaceableTextures\\CommandButtons\\BTNGhostMage.blp',
    bTNGhostOfKelThuzad = 'ReplaceableTextures\\CommandButtons\\BTNGhostOfKelThuzad.blp',
    bTNGhoul = 'ReplaceableTextures\\CommandButtons\\BTNGhoul.blp',
    bTNGhoulFrenzy = 'ReplaceableTextures\\CommandButtons\\BTNGhoulFrenzy.blp',
    bTNGlacier = 'ReplaceableTextures\\CommandButtons\\BTNGlacier.blp',
    bTNGlaiveThrower = 'ReplaceableTextures\\CommandButtons\\BTNGlaiveThrower.blp',
    bTNGlove = 'ReplaceableTextures\\CommandButtons\\BTNGlove.blp',
    bTNGlyph = 'ReplaceableTextures\\CommandButtons\\BTNGlyph.blp',
    bTNGlyph1 = 'ReplaceableTextures\\CommandButtons\\BTNGlyph.blp',
    bTNGnoll = 'ReplaceableTextures\\CommandButtons\\BTNGnoll.blp',
    bTNGnollArcher = 'ReplaceableTextures\\CommandButtons\\BTNGnollArcher.blp',
    bTNGnollCommandAura = 'ReplaceableTextures\\CommandButtons\\BTNGnollCommandAura.blp',
    bTNGnollKing = 'ReplaceableTextures\\CommandButtons\\BTNGnollKing.blp',
    bTNGnollWarden = 'ReplaceableTextures\\CommandButtons\\BTNGnollWarden.blp',
    bTNGoblinLandMine = 'ReplaceableTextures\\CommandButtons\\BTNGoblinLandMine.blp',
    bTNGoblinSapper = 'ReplaceableTextures\\CommandButtons\\BTNGoblinSapper.blp',
    bTNGoblinShipyard = 'ReplaceableTextures\\CommandButtons\\BTNGoblinShipyard.blp',
    bTNGoblinZeppelin = 'ReplaceableTextures\\CommandButtons\\BTNGoblinZeppelin.blp',
    bTNGoldRing = 'ReplaceableTextures\\CommandButtons\\BTNGoldRing.blp',
    bTNGoldmine = 'ReplaceableTextures\\CommandButtons\\BTNGoldmine.blp',
    bTNGolemStormBolt = 'ReplaceableTextures\\CommandButtons\\BTNGolemStormBolt.blp',
    bTNGolemThunderClap = 'ReplaceableTextures\\CommandButtons\\BTNGolemThunderClap.blp',
    bTNGrabTree = 'ReplaceableTextures\\CommandButtons\\BTNGrabTree.blp',
    bTNGraveYard = 'ReplaceableTextures\\CommandButtons\\BTNGraveYard.blp',
    bTNGreatHall = 'ReplaceableTextures\\CommandButtons\\BTNGreatHall.blp',
    bTNGreaterInvisibility = 'ReplaceableTextures\\CommandButtons\\BTNGreaterInvisibility.blp',
    bTNGreaterInvisibility1 = 'ReplaceableTextures\\CommandButtons\\BTNGreaterInvisibility.blp',
    bTNGreaterInvulneralbility = 'ReplaceableTextures\\CommandButtons\\BTNGreaterInvulneralbility.blp',
    bTNGreaterInvulneralbility1 = 'ReplaceableTextures\\CommandButtons\\BTNGreaterInvulneralbility.blp',
    bTNGreaterRejuvPotion = 'ReplaceableTextures\\CommandButtons\\BTNGreaterRejuvPotion.blp',
    bTNGreaterRejuvScroll = 'ReplaceableTextures\\CommandButtons\\BTNGreaterRejuvScroll.blp',
    bTNGreenDragon = 'ReplaceableTextures\\CommandButtons\\BTNGreenDragon.blp',
    bTNGreenDragonRoost = 'ReplaceableTextures\\CommandButtons\\BTNGreenDragonRoost.blp',
    bTNGreenDragonSpawn = 'ReplaceableTextures\\CommandButtons\\BTNGreenDragonSpawn.blp',
    bTNGreenHydra = 'ReplaceableTextures\\CommandButtons\\BTNGreenHydra.blp',
    bTNGrimWard = 'ReplaceableTextures\\CommandButtons\\BTNGrimWard.blp',
    bTNGrizzlyBear = 'ReplaceableTextures\\CommandButtons\\BTNGrizzlyBear.blp',
    bTNGrunt = 'ReplaceableTextures\\CommandButtons\\BTNGrunt.blp',
    bTNGryphonAviary = 'ReplaceableTextures\\CommandButtons\\BTNGryphonAviary.blp',
    bTNGryphonRider = 'ReplaceableTextures\\CommandButtons\\BTNGryphonRider.blp',
    bTNGuardTower = 'ReplaceableTextures\\CommandButtons\\BTNGuardTower.blp',
    bTNGuardianWard = 'ReplaceableTextures\\CommandButtons\\BTNGuardianWard.blp',
    bTNGuldan = 'ReplaceableTextures\\CommandButtons\\BTNGuldan.blp',
    bTNGuldanSkull = 'ReplaceableTextures\\CommandButtons\\BTNGuldanSkull.blp',
    bTNGyrocopter = 'ReplaceableTextures\\CommandButtons\\BTNGyrocopter.blp',
    bTNHallOfTheDead = 'ReplaceableTextures\\CommandButtons\\BTNHallOfTheDead.blp',
    bTNHammer = 'ReplaceableTextures\\CommandButtons\\BTNHammer.blp',
    bTNHardenedSkin = 'ReplaceableTextures\\CommandButtons\\BTNHardenedSkin.blp',
    bTNHarpy = 'ReplaceableTextures\\CommandButtons\\BTNHarpy.blp',
    bTNHarpyQueen = 'ReplaceableTextures\\CommandButtons\\BTNHarpyQueen.blp',
    bTNHarpyWitch = 'ReplaceableTextures\\CommandButtons\\BTNHarpyWitch.blp',
    bTNHauntedMine = 'ReplaceableTextures\\CommandButtons\\BTNHauntedMine.blp',
    bTNHeadHunterBerserker = 'ReplaceableTextures\\CommandButtons\\BTNHeadHunterBerserker.blp',
    bTNHeadhunter = 'ReplaceableTextures\\CommandButtons\\BTNHeadhunter.blp',
    bTNHeal = 'ReplaceableTextures\\CommandButtons\\BTNHeal.blp',
    bTNHealOff = 'ReplaceableTextures\\CommandButtons\\BTNHealOff.blp',
    bTNHealOn = 'ReplaceableTextures\\CommandButtons\\BTNHealOn.blp',
    bTNHealingSalve = 'ReplaceableTextures\\CommandButtons\\BTNHealingSalve.blp',
    bTNHealingSpray = 'ReplaceableTextures\\CommandButtons\\BTNHealingSpray.blp',
    bTNHealingWard = 'ReplaceableTextures\\CommandButtons\\BTNHealingWard.blp',
    bTNHealingWave = 'ReplaceableTextures\\CommandButtons\\BTNHealingWave.blp',
    bTNHealthStone = 'ReplaceableTextures\\CommandButtons\\BTNHealthStone.blp',
    bTNHeartOfAszune = 'ReplaceableTextures\\CommandButtons\\BTNHeartOfAszune.blp',
    bTNHeartOfSearinox = 'ReplaceableTextures\\CommandButtons\\BTNHeartOfSearinox.blp',
    bTNHellScream = 'ReplaceableTextures\\CommandButtons\\BTNHellScream.blp',
    bTNHelmOfValor = 'ReplaceableTextures\\CommandButtons\\BTNHelmOfValor.blp',
    bTNHelmutPurple = 'ReplaceableTextures\\CommandButtons\\BTNHelmutPurple.blp',
    bTNHermitCrab = 'ReplaceableTextures\\CommandButtons\\BTNHermitCrab.blp',
    bTNHeroAlchemist = 'ReplaceableTextures\\CommandButtons\\BTNHeroAlchemist.blp',
    bTNHeroArchMage = 'ReplaceableTextures\\CommandButtons\\BTNHeroArchMage.blp',
    bTNHeroAvatarOfFlame = 'ReplaceableTextures\\CommandButtons\\BTNHeroAvatarOfFlame.blp',
    bTNHeroBlademaster = 'ReplaceableTextures\\CommandButtons\\BTNHeroBlademaster.blp',
    bTNHeroBloodElfPrince = 'ReplaceableTextures\\CommandButtons\\BTNHeroBloodElfPrince.blp',
    bTNHeroCryptLord = 'ReplaceableTextures\\CommandButtons\\BTNHeroCryptLord.blp',
    bTNHeroDeathKnight = 'ReplaceableTextures\\CommandButtons\\BTNHeroDeathKnight.blp',
    bTNHeroDemonHunter = 'ReplaceableTextures\\CommandButtons\\BTNHeroDemonHunter.blp',
    bTNHeroDreadLord = 'ReplaceableTextures\\CommandButtons\\BTNHeroDreadLord.blp',
    bTNHeroFarseer = 'ReplaceableTextures\\CommandButtons\\BTNHeroFarseer.blp',
    bTNHeroLich = 'ReplaceableTextures\\CommandButtons\\BTNHeroLich.blp',
    bTNHeroMoonPriestess = 'ReplaceableTextures\\CommandButtons\\BTNHeroMoonPriestess.blp',
    bTNHeroMountainKing = 'ReplaceableTextures\\CommandButtons\\BTNHeroMountainKing.blp',
    bTNHeroPaladin = 'ReplaceableTextures\\CommandButtons\\BTNHeroPaladin.blp',
    bTNHeroTaurenChieftain = 'ReplaceableTextures\\CommandButtons\\BTNHeroTaurenChieftain.blp',
    bTNHeroTinker = 'ReplaceableTextures\\CommandButtons\\BTNHeroTinker.blp',
    bTNHeroWarden = 'ReplaceableTextures\\CommandButtons\\BTNHeroWarden.blp',
    bTNHex = 'ReplaceableTextures\\CommandButtons\\BTNHex.blp',
    bTNHighElvenArcher = 'ReplaceableTextures\\CommandButtons\\BTNHighElvenArcher.blp',
    bTNHippogriff = 'ReplaceableTextures\\CommandButtons\\BTNHippogriff.blp',
    bTNHippogriffRider = 'ReplaceableTextures\\CommandButtons\\BTNHippogriffRider.blp',
    bTNHire = 'ReplaceableTextures\\CommandButtons\\BTNHire.blp',
    bTNHoldPosition = 'ReplaceableTextures\\CommandButtons\\BTNHoldPosition.blp',
    bTNHolyBolt = 'ReplaceableTextures\\CommandButtons\\BTNHolyBolt.blp',
    bTNHolyWater = 'ReplaceableTextures\\CommandButtons\\BTNHolyWater.blp',
    bTNHoodOfCunning = 'ReplaceableTextures\\CommandButtons\\BTNHoodOfCunning.blp',
    bTNHornOfCenarius = 'ReplaceableTextures\\CommandButtons\\BTNHornOfCenarius.blp',
    bTNHornOfDoom = 'ReplaceableTextures\\CommandButtons\\BTNHornOfDoom.blp',
    bTNHornOfFog = 'ReplaceableTextures\\CommandButtons\\BTNHornOfFog.blp',
    bTNHowlOfTerror = 'ReplaceableTextures\\CommandButtons\\BTNHowlOfTerror.blp',
    bTNHumanArcaneTower = 'ReplaceableTextures\\CommandButtons\\BTNHumanArcaneTower.blp',
    bTNHumanArmorUpOne = 'ReplaceableTextures\\CommandButtons\\BTNHumanArmorUpOne.blp',
    bTNHumanArmorUpThree = 'ReplaceableTextures\\CommandButtons\\BTNHumanArmorUpThree.blp',
    bTNHumanArmorUpTwo = 'ReplaceableTextures\\CommandButtons\\BTNHumanArmorUpTwo.blp',
    bTNHumanArtilleryUpOne = 'ReplaceableTextures\\CommandButtons\\BTNHumanArtilleryUpOne.blp',
    bTNHumanBarracks = 'ReplaceableTextures\\CommandButtons\\BTNHumanBarracks.blp',
    bTNHumanBattleShip = 'ReplaceableTextures\\CommandButtons\\BTNHumanBattleShip.blp',
    bTNHumanBuild = 'ReplaceableTextures\\CommandButtons\\BTNHumanBuild.blp',
    bTNHumanCaptureFlag = 'ReplaceableTextures\\CommandButtons\\BTNHumanCaptureFlag.blp',
    bTNHumanDestroyer = 'ReplaceableTextures\\CommandButtons\\BTNHumanDestroyer.blp',
    bTNHumanLumberMill = 'ReplaceableTextures\\CommandButtons\\BTNHumanLumberMill.blp',
    bTNHumanLumberUpgrade1 = 'ReplaceableTextures\\CommandButtons\\BTNHumanLumberUpgrade1.blp',
    bTNHumanLumberUpgrade2 = 'ReplaceableTextures\\CommandButtons\\BTNHumanLumberUpgrade2.blp',
    bTNHumanMissileUpOne = 'ReplaceableTextures\\CommandButtons\\BTNHumanMissileUpOne.blp',
    bTNHumanMissileUpThree = 'ReplaceableTextures\\CommandButtons\\BTNHumanMissileUpThree.blp',
    bTNHumanMissileUpTwo = 'ReplaceableTextures\\CommandButtons\\BTNHumanMissileUpTwo.blp',
    bTNHumanShipyard = 'ReplaceableTextures\\CommandButtons\\BTNHumanShipyard.blp',
    bTNHumanTransport = 'ReplaceableTextures\\CommandButtons\\BTNHumanTransport.blp',
    bTNHumanWatchTower = 'ReplaceableTextures\\CommandButtons\\BTNHumanWatchTower.blp',
    bTNHuntersHall = 'ReplaceableTextures\\CommandButtons\\BTNHuntersHall.blp',
    bTNHuntress = 'ReplaceableTextures\\CommandButtons\\BTNHuntress.blp',
    bTNHydra = 'ReplaceableTextures\\CommandButtons\\BTNHydra.blp',
    bTNHydraWarStomp = 'ReplaceableTextures\\CommandButtons\\BTNHydraWarStomp.blp',
    bTNHydralisk = 'ReplaceableTextures\\CommandButtons\\BTNHydralisk.blp',
    bTNIceCrownObelisk = 'ReplaceableTextures\\CommandButtons\\BTNIceCrownObelisk.blp',
    bTNIceShard = 'ReplaceableTextures\\CommandButtons\\BTNIceShard.blp',
    bTNIceTroll = 'ReplaceableTextures\\CommandButtons\\BTNIceTroll.blp',
    bTNIceTrollBeserker = 'ReplaceableTextures\\CommandButtons\\BTNIceTrollBeserker.blp',
    bTNIceTrollBeserker1 = 'ReplaceableTextures\\CommandButtons\\BTNIceTrollBeserker.blp',
    bTNIceTrollShadowPriest = 'ReplaceableTextures\\CommandButtons\\BTNIceTrollShadowPriest.blp',
    bTNIceTrollShaman = 'ReplaceableTextures\\CommandButtons\\BTNIceTrollShaman.blp',
    bTNIcyTreasureBox = 'ReplaceableTextures\\CommandButtons\\BTNIcyTreasureBox.blp',
    bTNIllidanPrisonWagon = 'ReplaceableTextures\\CommandButtons\\BTNIllidanPrisonWagon.blp',
    bTNImbuedMasonry = 'ReplaceableTextures\\CommandButtons\\BTNImbuedMasonry.blp',
    bTNImmolationOff = 'ReplaceableTextures\\CommandButtons\\BTNImmolationOff.blp',
    bTNImmolationOn = 'ReplaceableTextures\\CommandButtons\\BTNImmolationOn.blp',
    bTNImpale = 'ReplaceableTextures\\CommandButtons\\BTNImpale.blp',
    bTNImpalingBolt = 'ReplaceableTextures\\CommandButtons\\BTNImpalingBolt.blp',
    bTNImprovedBows = 'ReplaceableTextures\\CommandButtons\\BTNImprovedBows.blp',
    bTNImprovedCreatureAttack = 'ReplaceableTextures\\CommandButtons\\BTNImprovedCreatureAttack.blp',
    bTNImprovedCreatureCarapace = 'ReplaceableTextures\\CommandButtons\\BTNImprovedCreatureCarapace.blp',
    bTNImprovedMining = 'ReplaceableTextures\\CommandButtons\\BTNImprovedMining.blp',
    bTNImprovedMoonArmor = 'ReplaceableTextures\\CommandButtons\\BTNImprovedMoonArmor.blp',
    bTNImprovedReinforcedHides = 'ReplaceableTextures\\CommandButtons\\BTNImprovedReinforcedHides.blp',
    bTNImprovedSpikedBarricades = 'ReplaceableTextures\\CommandButtons\\BTNImprovedSpikedBarricades.blp',
    bTNImprovedStrengthOfTheMoon = 'ReplaceableTextures\\CommandButtons\\BTNImprovedStrengthOfTheMoon.blp',
    bTNImprovedStrengthOfTheWild = 'ReplaceableTextures\\CommandButtons\\BTNImprovedStrengthOfTheWild.blp',
    bTNImprovedUnholyArmor = 'ReplaceableTextures\\CommandButtons\\BTNImprovedUnholyArmor.blp',
    bTNImprovedUnholyStrength = 'ReplaceableTextures\\CommandButtons\\BTNImprovedUnholyStrength.blp',
    bTNIncinerate = 'ReplaceableTextures\\CommandButtons\\BTNIncinerate.blp',
    bTNIncinerateOff = 'ReplaceableTextures\\CommandButtons\\BTNIncinerateOff.blp',
    bTNIncinerateOn = 'ReplaceableTextures\\CommandButtons\\BTNIncinerateOn.blp',
    bTNInfernal = 'ReplaceableTextures\\CommandButtons\\BTNInfernal.blp',
    bTNInfernalCannon = 'ReplaceableTextures\\CommandButtons\\BTNInfernalCannon.blp',
    bTNInfernalFlameCannon = 'ReplaceableTextures\\CommandButtons\\BTNInfernalFlameCannon.blp',
    bTNInfernalStone = 'ReplaceableTextures\\CommandButtons\\BTNInfernalStone.blp',
    bTNInn = 'ReplaceableTextures\\CommandButtons\\BTNInn.blp',
    bTNInnerFire = 'ReplaceableTextures\\CommandButtons\\BTNInnerFire.blp',
    bTNInnerFireOff = 'ReplaceableTextures\\CommandButtons\\BTNInnerFireOff.blp',
    bTNInnerFireOn = 'ReplaceableTextures\\CommandButtons\\BTNInnerFireOn.blp',
    bTNInvisibility = 'ReplaceableTextures\\CommandButtons\\BTNInvisibility.blp',
    bTNInvulnerable = 'ReplaceableTextures\\CommandButtons\\BTNInvulnerable.blp',
    bTNJaina = 'ReplaceableTextures\\CommandButtons\\BTNJaina.blp',
    bTNJanggo = 'ReplaceableTextures\\CommandButtons\\BTNJanggo.blp',
    bTNJuggernaut = 'ReplaceableTextures\\CommandButtons\\BTNJuggernaut.blp',
    bTNJungleBeast = 'ReplaceableTextures\\CommandButtons\\BTNJungleBeast.blp',
    bTNJunkGolem = 'ReplaceableTextures\\CommandButtons\\BTNJunkGolem.blp',
    bTNKeep = 'ReplaceableTextures\\CommandButtons\\BTNKeep.blp',
    bTNKeeperGhostBlue = 'ReplaceableTextures\\CommandButtons\\BTNKeeperGhostBlue.blp',
    bTNKeeperOfTheGrove = 'ReplaceableTextures\\CommandButtons\\BTNKeeperOfTheGrove.blp',
    bTNKelThuzad = 'ReplaceableTextures\\CommandButtons\\BTNKelThuzad.blp',
    bTNKiljaedin = 'ReplaceableTextures\\CommandButtons\\BTNKiljaedin.blp',
    bTNKnight = 'ReplaceableTextures\\CommandButtons\\BTNKnight.blp',
    bTNKobold = 'ReplaceableTextures\\CommandButtons\\BTNKobold.blp',
    bTNKoboldGeomancer = 'ReplaceableTextures\\CommandButtons\\BTNKoboldGeomancer.blp',
    bTNKotoBeast = 'ReplaceableTextures\\CommandButtons\\BTNKotoBeast.blp',
    bTNLGExchange = 'ReplaceableTextures\\CommandButtons\\BTNLGExchange.blp',
    bTNLament = 'ReplaceableTextures\\CommandButtons\\BTNLament.blp',
    bTNLamp = 'ReplaceableTextures\\CommandButtons\\BTNLamp.blp',
    bTNLavaSpawn = 'ReplaceableTextures\\CommandButtons\\BTNLavaSpawn.blp',
    bTNLeatherUpgradeOne = 'ReplaceableTextures\\CommandButtons\\BTNLeatherUpgradeOne.blp',
    bTNLeatherUpgradeThree = 'ReplaceableTextures\\CommandButtons\\BTNLeatherUpgradeThree.blp',
    bTNLeatherUpgradeTwo = 'ReplaceableTextures\\CommandButtons\\BTNLeatherUpgradeTwo.blp',
    bTNLesserClarityPotion = 'ReplaceableTextures\\CommandButtons\\BTNLesserClarityPotion.blp',
    bTNLesserInvisibility = 'ReplaceableTextures\\CommandButtons\\BTNLesserInvisibility.blp',
    bTNLesserInvisibility1 = 'ReplaceableTextures\\CommandButtons\\BTNLesserInvisibility.blp',
    bTNLesserInvulneralbility = 'ReplaceableTextures\\CommandButtons\\BTNLesserInvulneralbility.blp',
    bTNLesserInvulneralbility1 = 'ReplaceableTextures\\CommandButtons\\BTNLesserInvulneralbility.blp',
    bTNLesserRejuvPotion = 'ReplaceableTextures\\CommandButtons\\BTNLesserRejuvPotion.blp',
    bTNLesserRejuvScroll = 'ReplaceableTextures\\CommandButtons\\BTNLesserRejuvScroll.blp',
    bTNLichVersion2 = 'ReplaceableTextures\\CommandButtons\\BTNLichVersion2.blp',
    bTNLifeDrain = 'ReplaceableTextures\\CommandButtons\\BTNLifeDrain.blp',
    bTNLightningShield = 'ReplaceableTextures\\CommandButtons\\BTNLightningShield.blp',
    bTNLionHorn = 'ReplaceableTextures\\CommandButtons\\BTNLionHorn.blp',
    bTNLiquidFire = 'ReplaceableTextures\\CommandButtons\\BTNLiquidFire.blp',
    bTNLoad = 'ReplaceableTextures\\CommandButtons\\BTNLoad.blp',
    bTNLoadDwarf = 'ReplaceableTextures\\CommandButtons\\BTNLoadDwarf.blp',
    bTNLoadPeon = 'ReplaceableTextures\\CommandButtons\\BTNLoadPeon.blp',
    bTNLobstrokkBlue = 'ReplaceableTextures\\CommandButtons\\BTNLobstrokkBlue.blp',
    bTNLobstrokkGreen = 'ReplaceableTextures\\CommandButtons\\BTNLobstrokkGreen.blp',
    bTNLobstrokkRed = 'ReplaceableTextures\\CommandButtons\\BTNLobstrokkRed.blp',
    bTNLocustSwarm = 'ReplaceableTextures\\CommandButtons\\BTNLocustSwarm.blp',
    bTNMGExchange = 'ReplaceableTextures\\CommandButtons\\BTNMGExchange.blp',
    bTNMageTower = 'ReplaceableTextures\\CommandButtons\\BTNMageTower.blp',
    bTNMagicImmunity = 'ReplaceableTextures\\CommandButtons\\BTNMagicImmunity.blp',
    bTNMagicLariet = 'ReplaceableTextures\\CommandButtons\\BTNMagicLariet.blp',
    bTNMagicVault = 'ReplaceableTextures\\CommandButtons\\BTNMagicVault.blp',
    bTNMagicalSentry = 'ReplaceableTextures\\CommandButtons\\BTNMagicalSentry.blp',
    bTNMagnataur = 'ReplaceableTextures\\CommandButtons\\BTNMagnataur.blp',
    bTNMagnataurBrown = 'ReplaceableTextures\\CommandButtons\\BTNMagnataurBrown.blp',
    bTNMammoth = 'ReplaceableTextures\\CommandButtons\\BTNMammoth.blp',
    bTNManaBurn = 'ReplaceableTextures\\CommandButtons\\BTNManaBurn.blp',
    bTNManaDrain = 'ReplaceableTextures\\CommandButtons\\BTNManaDrain.blp',
    bTNManaFlare = 'ReplaceableTextures\\CommandButtons\\BTNManaFlare.blp',
    bTNManaFlareOff = 'ReplaceableTextures\\CommandButtons\\BTNManaFlareOff.blp',
    bTNManaRecharge = 'ReplaceableTextures\\CommandButtons\\BTNManaRecharge.blp',
    bTNManaRechargeOff = 'ReplaceableTextures\\CommandButtons\\BTNManaRechargeOff.blp',
    bTNManaRechargeOn = 'ReplaceableTextures\\CommandButtons\\BTNManaRechargeOn.blp',
    bTNManaShield = 'ReplaceableTextures\\CommandButtons\\BTNManaShield.blp',
    bTNManaStone = 'ReplaceableTextures\\CommandButtons\\BTNManaStone.blp',
    bTNMannoroth = 'ReplaceableTextures\\CommandButtons\\BTNMannoroth.blp',
    bTNMantle = 'ReplaceableTextures\\CommandButtons\\BTNMantle.blp',
    bTNMantleOfIntelligence = 'ReplaceableTextures\\CommandButtons\\BTNMantleOfIntelligence.blp',
    bTNManual = 'ReplaceableTextures\\CommandButtons\\BTNManual.blp',
    bTNManual2 = 'ReplaceableTextures\\CommandButtons\\BTNManual2.blp',
    bTNManual3 = 'ReplaceableTextures\\CommandButtons\\BTNManual3.blp',
    bTNMarine = 'ReplaceableTextures\\CommandButtons\\BTNMarine.blp',
    bTNMarkOfFire = 'ReplaceableTextures\\CommandButtons\\BTNMarkOfFire.blp',
    bTNMarketPlace = 'ReplaceableTextures\\CommandButtons\\BTNMarketPlace.blp',
    bTNMarksmanship = 'ReplaceableTextures\\CommandButtons\\BTNMarksmanship.blp',
    bTNMaskOfDeath = 'ReplaceableTextures\\CommandButtons\\BTNMaskOfDeath.blp',
    bTNMassTeleport = 'ReplaceableTextures\\CommandButtons\\BTNMassTeleport.blp',
    bTNMeatWagon = 'ReplaceableTextures\\CommandButtons\\BTNMeatWagon.blp',
    bTNMeatapult = 'ReplaceableTextures\\CommandButtons\\BTNMeatapult.blp',
    bTNMechanicalCritter = 'ReplaceableTextures\\CommandButtons\\BTNMechanicalCritter.blp',
    bTNMedalionOfCourage = 'ReplaceableTextures\\CommandButtons\\BTNMedalionOfCourage.blp',
    bTNMedivh = 'ReplaceableTextures\\CommandButtons\\BTNMedivh.blp',
    bTNMercenaryCamp = 'ReplaceableTextures\\CommandButtons\\BTNMercenaryCamp.blp',
    bTNMerchant = 'ReplaceableTextures\\CommandButtons\\BTNMerchant.blp',
    bTNMetamorphosis = 'ReplaceableTextures\\CommandButtons\\BTNMetamorphosis.blp',
    bTNMilitia = 'ReplaceableTextures\\CommandButtons\\BTNMilitia.blp',
    bTNMinorRejuvPotion = 'ReplaceableTextures\\CommandButtons\\BTNMinorRejuvPotion.blp',
    bTNMirrorImage = 'ReplaceableTextures\\CommandButtons\\BTNMirrorImage.blp',
    bTNMonsoon = 'ReplaceableTextures\\CommandButtons\\BTNMonsoon.blp',
    bTNMonsterLure = 'ReplaceableTextures\\CommandButtons\\BTNMonsterLure.blp',
    bTNMoonArmor = 'ReplaceableTextures\\CommandButtons\\BTNMoonArmor.blp',
    bTNMoonKey = 'ReplaceableTextures\\CommandButtons\\BTNMoonKey.blp',
    bTNMoonStone = 'ReplaceableTextures\\CommandButtons\\BTNMoonStone.blp',
    bTNMoonWell = 'ReplaceableTextures\\CommandButtons\\BTNMoonWell.blp',
    bTNMortarTeam = 'ReplaceableTextures\\CommandButtons\\BTNMortarTeam.blp',
    bTNMountainGiant = 'ReplaceableTextures\\CommandButtons\\BTNMountainGiant.blp',
    bTNMove = 'ReplaceableTextures\\CommandButtons\\BTNMove.blp',
    bTNMurgalSlave = 'ReplaceableTextures\\CommandButtons\\BTNMurgalSlave.blp',
    bTNMurgulBloodGill = 'ReplaceableTextures\\CommandButtons\\BTNMurgulBloodGill.blp',
    bTNMurgulShadowCaster = 'ReplaceableTextures\\CommandButtons\\BTNMurgulShadowCaster.blp',
    bTNMurgulTideWarrior = 'ReplaceableTextures\\CommandButtons\\BTNMurgulTideWarrior.blp',
    bTNMurloc = 'ReplaceableTextures\\CommandButtons\\BTNMurloc.blp',
    bTNMurlocFleshEater = 'ReplaceableTextures\\CommandButtons\\BTNMurlocFleshEater.blp',
    bTNMurlocMutant = 'ReplaceableTextures\\CommandButtons\\BTNMurlocMutant.blp',
    bTNMurlocNightCrawler = 'ReplaceableTextures\\CommandButtons\\BTNMurlocNightCrawler.blp',
    bTNNagaArmorUp1 = 'ReplaceableTextures\\CommandButtons\\BTNNagaArmorUp1.blp',
    bTNNagaArmorUp2 = 'ReplaceableTextures\\CommandButtons\\BTNNagaArmorUp2.blp',
    bTNNagaArmorUp3 = 'ReplaceableTextures\\CommandButtons\\BTNNagaArmorUp3.blp',
    bTNNagaBurrow = 'ReplaceableTextures\\CommandButtons\\BTNNagaBurrow.blp',
    bTNNagaMyrmidon = 'ReplaceableTextures\\CommandButtons\\BTNNagaMyrmidon.blp',
    bTNNagaMyrmidonRoyalGuard = 'ReplaceableTextures\\CommandButtons\\BTNNagaMyrmidonRoyalGuard.blp',
    bTNNagaSeaWitch = 'ReplaceableTextures\\CommandButtons\\BTNNagaSeaWitch.blp',
    bTNNagaSummoner = 'ReplaceableTextures\\CommandButtons\\BTNNagaSummoner.blp',
    bTNNagaUnBurrow = 'ReplaceableTextures\\CommandButtons\\BTNNagaUnBurrow.blp',
    bTNNagaWeaponUp1 = 'ReplaceableTextures\\CommandButtons\\BTNNagaWeaponUp1.blp',
    bTNNagaWeaponUp2 = 'ReplaceableTextures\\CommandButtons\\BTNNagaWeaponUp2.blp',
    bTNNagaWeaponUp3 = 'ReplaceableTextures\\CommandButtons\\BTNNagaWeaponUp3.blp',
    bTNNatureTouchGrow = 'ReplaceableTextures\\CommandButtons\\BTNNatureTouchGrow.blp',
    bTNNaturesBlessing = 'ReplaceableTextures\\CommandButtons\\BTNNaturesBlessing.blp',
    bTNNecklace = 'ReplaceableTextures\\CommandButtons\\BTNNecklace.blp',
    bTNNecromancer = 'ReplaceableTextures\\CommandButtons\\BTNNecromancer.blp',
    bTNNecromancerAdept = 'ReplaceableTextures\\CommandButtons\\BTNNecromancerAdept.blp',
    bTNNecromancerMaster = 'ReplaceableTextures\\CommandButtons\\BTNNecromancerMaster.blp',
    bTNNecropolis = 'ReplaceableTextures\\CommandButtons\\BTNNecropolis.blp',
    bTNNerubian = 'ReplaceableTextures\\CommandButtons\\BTNNerubian.blp',
    bTNNerubianQueen = 'ReplaceableTextures\\CommandButtons\\BTNNerubianQueen.blp',
    bTNNerubianZiggurat = 'ReplaceableTextures\\CommandButtons\\BTNNerubianZiggurat.blp',
    bTNNetherDragon = 'ReplaceableTextures\\CommandButtons\\BTNNetherDragon.blp',
    bTNNeutralManaShield = 'ReplaceableTextures\\CommandButtons\\BTNNeutralManaShield.blp',
    bTNNightElfBattleCruiser = 'ReplaceableTextures\\CommandButtons\\BTNNightElfBattleCruiser.blp',
    bTNNightElfBuild = 'ReplaceableTextures\\CommandButtons\\BTNNightElfBuild.blp',
    bTNNightElfCaptureFlag = 'ReplaceableTextures\\CommandButtons\\BTNNightElfCaptureFlag.blp',
    bTNNightElfDestroyer = 'ReplaceableTextures\\CommandButtons\\BTNNightElfDestroyer.blp',
    bTNNightElfFishingBoat = 'ReplaceableTextures\\CommandButtons\\BTNNightElfFishingBoat.blp',
    bTNNightElfFishingVillage = 'ReplaceableTextures\\CommandButtons\\BTNNightElfFishingVillage.blp',
    bTNNightElfRunner = 'ReplaceableTextures\\CommandButtons\\BTNNightElfRunner.blp',
    bTNNightElfShipyard = 'ReplaceableTextures\\CommandButtons\\BTNNightElfShipyard.blp',
    bTNNightElfTransport = 'ReplaceableTextures\\CommandButtons\\BTNNightElfTransport.blp',
    bTNObsidianStatue = 'ReplaceableTextures\\CommandButtons\\BTNObsidianStatue.blp',
    bTNOgre = 'ReplaceableTextures\\CommandButtons\\BTNOgre.blp',
    bTNOgreLord = 'ReplaceableTextures\\CommandButtons\\BTNOgreLord.blp',
    bTNOgreMagi = 'ReplaceableTextures\\CommandButtons\\BTNOgreMagi.blp',
    bTNOneHeadedOgre = 'ReplaceableTextures\\CommandButtons\\BTNOneHeadedOgre.blp',
    bTNOrb = 'ReplaceableTextures\\CommandButtons\\BTNOrb.blp',
    bTNOrbOfCorruption = 'ReplaceableTextures\\CommandButtons\\BTNOrbOfCorruption.blp',
    bTNOrbOfDarkness = 'ReplaceableTextures\\CommandButtons\\BTNOrbOfDarkness.blp',
    bTNOrbOfDeath = 'ReplaceableTextures\\CommandButtons\\BTNOrbOfDeath.blp',
    bTNOrbOfDeathOff = 'ReplaceableTextures\\CommandButtons\\BTNOrbOfDeathOff.blp',
    bTNOrbOfDeathOn = 'ReplaceableTextures\\CommandButtons\\BTNOrbOfDeathOn.blp',
    bTNOrbOfFire = 'ReplaceableTextures\\CommandButtons\\BTNOrbOfFire.blp',
    bTNOrbOfFrost = 'ReplaceableTextures\\CommandButtons\\BTNOrbOfFrost.blp',
    bTNOrbOfLightning = 'ReplaceableTextures\\CommandButtons\\BTNOrbOfLightning.blp',
    bTNOrbOfVenom = 'ReplaceableTextures\\CommandButtons\\BTNOrbOfVenom.blp',
    bTNOrbofSlowness = 'ReplaceableTextures\\CommandButtons\\BTNOrbofSlowness.blp',
    bTNOrcBattleStandard = 'ReplaceableTextures\\CommandButtons\\BTNOrcBattleStandard.blp',
    bTNOrcCaptureFlag = 'ReplaceableTextures\\CommandButtons\\BTNOrcCaptureFlag.blp',
    bTNOrcCar = 'ReplaceableTextures\\CommandButtons\\BTNOrcCar.blp',
    bTNOrcDestroyer = 'ReplaceableTextures\\CommandButtons\\BTNOrcDestroyer.blp',
    bTNOrcLumberUpgradeTwo = 'ReplaceableTextures\\CommandButtons\\BTNOrcLumberUpgradeTwo.blp',
    bTNOrcMeleeUpOne = 'ReplaceableTextures\\CommandButtons\\BTNOrcMeleeUpOne.blp',
    bTNOrcMeleeUpThree = 'ReplaceableTextures\\CommandButtons\\BTNOrcMeleeUpThree.blp',
    bTNOrcMeleeUpTwo = 'ReplaceableTextures\\CommandButtons\\BTNOrcMeleeUpTwo.blp',
    bTNOrcRallyPoint = 'ReplaceableTextures\\CommandButtons\\BTNOrcRallyPoint.blp',
    bTNOrcTower = 'ReplaceableTextures\\CommandButtons\\BTNOrcTower.blp',
    bTNOrcWarlock = 'ReplaceableTextures\\CommandButtons\\BTNOrcWarlock.blp',
    bTNOrcWarlockRed = 'ReplaceableTextures\\CommandButtons\\BTNOrcWarlockRed.blp',
    bTNOrcishTransport = 'ReplaceableTextures\\CommandButtons\\BTNOrcishTransport.blp',
    bTNOtherBarrel = 'ReplaceableTextures\\CommandButtons\\BTNOtherBarrel.blp',
    bTNOwlBear = 'ReplaceableTextures\\CommandButtons\\BTNOwlBear.blp',
    bTNPackBeast = 'ReplaceableTextures\\CommandButtons\\BTNPackBeast.blp',
    bTNPandaTaunt = 'ReplaceableTextures\\CommandButtons\\BTNPandaTaunt.blp',
    bTNPandarenBrewmaster = 'ReplaceableTextures\\CommandButtons\\BTNPandarenBrewmaster.blp',
    bTNParasite = 'ReplaceableTextures\\CommandButtons\\BTNParasite.blp',
    bTNParasiteOff = 'ReplaceableTextures\\CommandButtons\\BTNParasiteOff.blp',
    bTNParasiteOn = 'ReplaceableTextures\\CommandButtons\\BTNParasiteOn.blp',
    bTNPatrol = 'ReplaceableTextures\\CommandButtons\\BTNPatrol.blp',
    bTNPeasant = 'ReplaceableTextures\\CommandButtons\\BTNPeasant.blp',
    bTNPebble = 'ReplaceableTextures\\CommandButtons\\BTNPebble.blp',
    bTNPendantOfEnergy = 'ReplaceableTextures\\CommandButtons\\BTNPendantOfEnergy.blp',
    bTNPendantOfMana = 'ReplaceableTextures\\CommandButtons\\BTNPendantOfMana.blp',
    bTNPenguin = 'ReplaceableTextures\\CommandButtons\\BTNPenguin.blp',
    bTNPeon = 'ReplaceableTextures\\CommandButtons\\BTNPeon.blp',
    bTNPeriapt = 'ReplaceableTextures\\CommandButtons\\BTNPeriapt.blp',
    bTNPeriapt1 = 'ReplaceableTextures\\CommandButtons\\BTNPeriapt1.blp',
    bTNPhaseShift = 'ReplaceableTextures\\CommandButtons\\BTNPhaseShift.blp',
    bTNPhaseShiftOff = 'ReplaceableTextures\\CommandButtons\\BTNPhaseShiftOff.blp',
    bTNPhaseShiftOn = 'ReplaceableTextures\\CommandButtons\\BTNPhaseShiftOn.blp',
    bTNPhilosophersStone = 'ReplaceableTextures\\CommandButtons\\BTNPhilosophersStone.blp',
    bTNPhoenixEgg = 'ReplaceableTextures\\CommandButtons\\BTNPhoenixEgg.blp',
    bTNPickUpItem = 'ReplaceableTextures\\CommandButtons\\BTNPickUpItem.blp',
    bTNPig = 'ReplaceableTextures\\CommandButtons\\BTNPig.blp',
    bTNPigFarm = 'ReplaceableTextures\\CommandButtons\\BTNPigFarm.blp',
    bTNPillage = 'ReplaceableTextures\\CommandButtons\\BTNPillage.blp',
    bTNPipeOfInsight = 'ReplaceableTextures\\CommandButtons\\BTNPipeOfInsight.blp',
    bTNPitLord = 'ReplaceableTextures\\CommandButtons\\BTNPitLord.blp',
    bTNPlagueCloud = 'ReplaceableTextures\\CommandButtons\\BTNPlagueCloud.blp',
    bTNPocketFactory = 'ReplaceableTextures\\CommandButtons\\BTNPocketFactory.blp',
    bTNPoisonArrow = 'ReplaceableTextures\\CommandButtons\\BTNPoisonArrow.blp',
    bTNPoisonSting = 'ReplaceableTextures\\CommandButtons\\BTNPoisonSting.blp',
    bTNPolarFurbolg = 'ReplaceableTextures\\CommandButtons\\BTNPolarFurbolg.blp',
    bTNPolarFurbolgElder = 'ReplaceableTextures\\CommandButtons\\BTNPolarFurbolgElder.blp',
    bTNPolarFurbolgShaman = 'ReplaceableTextures\\CommandButtons\\BTNPolarFurbolgShaman.blp',
    bTNPolarFurbolgTracker = 'ReplaceableTextures\\CommandButtons\\BTNPolarFurbolgTracker.blp',
    bTNPolymorph = 'ReplaceableTextures\\CommandButtons\\BTNPolymorph.blp',
    bTNPortal = 'ReplaceableTextures\\CommandButtons\\BTNPortal.blp',
    bTNPossession = 'ReplaceableTextures\\CommandButtons\\BTNPossession.blp',
    bTNPotionBlue = 'ReplaceableTextures\\CommandButtons\\BTNPotionBlue.blp',
    bTNPotionBlueBig = 'ReplaceableTextures\\CommandButtons\\BTNPotionBlueBig.blp',
    bTNPotionBlueSmall = 'ReplaceableTextures\\CommandButtons\\BTNPotionBlueSmall.blp',
    bTNPotionGreen = 'ReplaceableTextures\\CommandButtons\\BTNPotionGreen.blp',
    bTNPotionGreenSmall = 'ReplaceableTextures\\CommandButtons\\BTNPotionGreenSmall.blp',
    bTNPotionOfClarity = 'ReplaceableTextures\\CommandButtons\\BTNPotionOfClarity.blp',
    bTNPotionOfDivinity = 'ReplaceableTextures\\CommandButtons\\BTNPotionOfDivinity.blp',
    bTNPotionOfOmniscience = 'ReplaceableTextures\\CommandButtons\\BTNPotionOfOmniscience.blp',
    bTNPotionOfRestoration = 'ReplaceableTextures\\CommandButtons\\BTNPotionOfRestoration.blp',
    bTNPotionOfRestoration1 = 'ReplaceableTextures\\CommandButtons\\BTNPotionOfRestoration.blp',
    bTNPotionOfVampirism = 'ReplaceableTextures\\CommandButtons\\BTNPotionOfVampirism.blp',
    bTNPotionPurple = 'ReplaceableTextures\\CommandButtons\\BTNPotionPurple.blp',
    bTNPotionRed = 'ReplaceableTextures\\CommandButtons\\BTNPotionRed.blp',
    bTNPowerGenerator = 'ReplaceableTextures\\CommandButtons\\BTNPowerGenerator.blp',
    bTNPriest = 'ReplaceableTextures\\CommandButtons\\BTNPriest.blp',
    bTNPriest1 = 'ReplaceableTextures\\CommandButtons\\BTNPriest.blp',
    bTNPriestAdept = 'ReplaceableTextures\\CommandButtons\\BTNPriestAdept.blp',
    bTNPriestMaster = 'ReplaceableTextures\\CommandButtons\\BTNPriestMaster.blp',
    bTNPriestessOfTheMoon = 'ReplaceableTextures\\CommandButtons\\BTNPriestessOfTheMoon.blp',
    bTNProudMoore = 'ReplaceableTextures\\CommandButtons\\BTNProudMoore.blp',
    bTNPurge = 'ReplaceableTextures\\CommandButtons\\BTNPurge.blp',
    bTNPurpleFelhound = 'ReplaceableTextures\\CommandButtons\\BTNPurpleFelhound.blp',
    bTNQuillBeast = 'ReplaceableTextures\\CommandButtons\\BTNQuillBeast.blp',
    bTNQuillBeastGod = 'ReplaceableTextures\\CommandButtons\\BTNQuillBeastGod.blp',
    bTNQuillSpray = 'ReplaceableTextures\\CommandButtons\\BTNQuillSpray.blp',
    bTNQuillSprayOff = 'ReplaceableTextures\\CommandButtons\\BTNQuillSprayOff.blp',
    bTNROBOGOBLIN = 'ReplaceableTextures\\CommandButtons\\BTNROBOGOBLIN.blp',
    bTNROBOGOBLINOff = 'ReplaceableTextures\\CommandButtons\\BTNROBOGOBLINOff.blp',
    bTNROBOGOBLINOn = 'ReplaceableTextures\\CommandButtons\\BTNROBOGOBLINOn.blp',
    bTNRacoon = 'ReplaceableTextures\\CommandButtons\\BTNRacoon.blp',
    bTNRaider = 'ReplaceableTextures\\CommandButtons\\BTNRaider.blp',
    bTNRaiseDead = 'ReplaceableTextures\\CommandButtons\\BTNRaiseDead.blp',
    bTNRaiseDeadOff = 'ReplaceableTextures\\CommandButtons\\BTNRaiseDeadOff.blp',
    bTNRaiseDeadOn = 'ReplaceableTextures\\CommandButtons\\BTNRaiseDeadOn.blp',
    bTNRallyPoint = 'ReplaceableTextures\\CommandButtons\\BTNRallyPoint.blp',
    bTNRallyPointNightElf = 'ReplaceableTextures\\CommandButtons\\BTNRallyPointNightElf.blp',
    bTNRallyPointUndead = 'ReplaceableTextures\\CommandButtons\\BTNRallyPointUndead.blp',
    bTNRavenForm = 'ReplaceableTextures\\CommandButtons\\BTNRavenForm.blp',
    bTNRazorback = 'ReplaceableTextures\\CommandButtons\\BTNRazorback.blp',
    bTNRazormaneChief = 'ReplaceableTextures\\CommandButtons\\BTNRazormaneChief.blp',
    bTNRedDragon = 'ReplaceableTextures\\CommandButtons\\BTNRedDragon.blp',
    bTNRedDragonDevour = 'ReplaceableTextures\\CommandButtons\\BTNRedDragonDevour.blp',
    bTNRegenerate = 'ReplaceableTextures\\CommandButtons\\BTNRegenerate.blp',
    bTNRegeneration = 'ReplaceableTextures\\CommandButtons\\BTNRegeneration.blp',
    bTNRegenerationAura = 'ReplaceableTextures\\CommandButtons\\BTNRegenerationAura.blp',
    bTNReincarnation = 'ReplaceableTextures\\CommandButtons\\BTNReincarnation.blp',
    bTNReinforcedBurrows = 'ReplaceableTextures\\CommandButtons\\BTNReinforcedBurrows.blp',
    bTNReinforcedHides = 'ReplaceableTextures\\CommandButtons\\BTNReinforcedHides.blp',
    bTNRejuvPotion = 'ReplaceableTextures\\CommandButtons\\BTNRejuvPotion.blp',
    bTNRejuvenation = 'ReplaceableTextures\\CommandButtons\\BTNRejuvenation.blp',
    bTNRejuvenationPotion = 'ReplaceableTextures\\CommandButtons\\BTNRejuvenationPotion.blp',
    bTNRepair = 'ReplaceableTextures\\CommandButtons\\BTNRepair.blp',
    bTNRepairOff = 'ReplaceableTextures\\CommandButtons\\BTNRepairOff.blp',
    bTNRepairOn = 'ReplaceableTextures\\CommandButtons\\BTNRepairOn.blp',
    bTNReplay_Loop = 'ReplaceableTextures\\CommandButtons\\BTNReplay-Loop.blp',
    bTNReplay_Pause = 'ReplaceableTextures\\CommandButtons\\BTNReplay-Pause.blp',
    bTNReplay_Play = 'ReplaceableTextures\\CommandButtons\\BTNReplay-Play.blp',
    bTNReplay_SpeedDown = 'ReplaceableTextures\\CommandButtons\\BTNReplay-SpeedDown.blp',
    bTNReplay_SpeedUp = 'ReplaceableTextures\\CommandButtons\\BTNReplay-SpeedUp.blp',
    bTNReplenishHealth = 'ReplaceableTextures\\CommandButtons\\BTNReplenishHealth.blp',
    bTNReplenishHealthOff = 'ReplaceableTextures\\CommandButtons\\BTNReplenishHealthOff.blp',
    bTNReplenishHealthOn = 'ReplaceableTextures\\CommandButtons\\BTNReplenishHealthOn.blp',
    bTNReplenishMana = 'ReplaceableTextures\\CommandButtons\\BTNReplenishMana.blp',
    bTNReplenishManaOff = 'ReplaceableTextures\\CommandButtons\\BTNReplenishManaOff.blp',
    bTNReplenishManaOn = 'ReplaceableTextures\\CommandButtons\\BTNReplenishManaOn.blp',
    bTNResStone = 'ReplaceableTextures\\CommandButtons\\BTNResStone.blp',
    bTNResistMagic = 'ReplaceableTextures\\CommandButtons\\BTNResistMagic.blp',
    bTNResistantSkin = 'ReplaceableTextures\\CommandButtons\\BTNResistantSkin.blp',
    bTNResurrection = 'ReplaceableTextures\\CommandButtons\\BTNResurrection.blp',
    bTNReturnGoods = 'ReplaceableTextures\\CommandButtons\\BTNReturnGoods.blp',
    bTNReveal = 'ReplaceableTextures\\CommandButtons\\BTNReveal.blp',
    bTNRevenant = 'ReplaceableTextures\\CommandButtons\\BTNRevenant.blp',
    bTNRiderlessHorse = 'ReplaceableTextures\\CommandButtons\\BTNRiderlessHorse.blp',
    bTNRiderlessKodo = 'ReplaceableTextures\\CommandButtons\\BTNRiderlessKodo.blp',
    bTNRifleman = 'ReplaceableTextures\\CommandButtons\\BTNRifleman.blp',
    bTNRingGreen = 'ReplaceableTextures\\CommandButtons\\BTNRingGreen.blp',
    bTNRingJadeFalcon = 'ReplaceableTextures\\CommandButtons\\BTNRingJadeFalcon.blp',
    bTNRingLionHead = 'ReplaceableTextures\\CommandButtons\\BTNRingLionHead.blp',
    bTNRingPurple = 'ReplaceableTextures\\CommandButtons\\BTNRingPurple.blp',
    bTNRingSkull = 'ReplaceableTextures\\CommandButtons\\BTNRingSkull.blp',
    bTNRingVioletSpider = 'ReplaceableTextures\\CommandButtons\\BTNRingVioletSpider.blp',
    bTNRobeOfTheMagi = 'ReplaceableTextures\\CommandButtons\\BTNRobeOfTheMagi.blp',
    bTNRockGolem = 'ReplaceableTextures\\CommandButtons\\BTNRockGolem.blp',
    bTNRockTower = 'ReplaceableTextures\\CommandButtons\\BTNRockTower.blp',
    bTNRodOfNecromancy = 'ReplaceableTextures\\CommandButtons\\BTNRodOfNecromancy.blp',
    bTNRoot = 'ReplaceableTextures\\CommandButtons\\BTNRoot.blp',
    bTNRune = 'ReplaceableTextures\\CommandButtons\\BTNRune.blp',
    bTNRunedBracers = 'ReplaceableTextures\\CommandButtons\\BTNRunedBracers.blp',
    bTNSacrifice = 'ReplaceableTextures\\CommandButtons\\BTNSacrifice.blp',
    bTNSacrificialPit = 'ReplaceableTextures\\CommandButtons\\BTNSacrificialPit.blp',
    bTNSacrificialSkull = 'ReplaceableTextures\\CommandButtons\\BTNSacrificialSkull.blp',
    bTNSasquatch = 'ReplaceableTextures\\CommandButtons\\BTNSasquatch.blp',
    bTNSasquatchShaman = 'ReplaceableTextures\\CommandButtons\\BTNSasquatchShaman.blp',
    bTNSatyr = 'ReplaceableTextures\\CommandButtons\\BTNSatyr.blp',
    bTNSatyrTrickster = 'ReplaceableTextures\\CommandButtons\\BTNSatyrTrickster.blp',
    bTNScatterRockets = 'ReplaceableTextures\\CommandButtons\\BTNScatterRockets.blp',
    bTNScepterOfMastery = 'ReplaceableTextures\\CommandButtons\\BTNScepterOfMastery.blp',
    bTNScourgeBuild = 'ReplaceableTextures\\CommandButtons\\BTNScourgeBuild.blp',
    bTNScout = 'ReplaceableTextures\\CommandButtons\\BTNScout.blp',
    bTNScroll = 'ReplaceableTextures\\CommandButtons\\BTNScroll.blp',
    bTNScrollOfHaste = 'ReplaceableTextures\\CommandButtons\\BTNScrollOfHaste.blp',
    bTNScrollOfHealing = 'ReplaceableTextures\\CommandButtons\\BTNScrollOfHealing.blp',
    bTNScrollOfProtection = 'ReplaceableTextures\\CommandButtons\\BTNScrollOfProtection.blp',
    bTNScrollOfRegeneration = 'ReplaceableTextures\\CommandButtons\\BTNScrollOfRegeneration.blp',
    bTNScrollOfRegenerationGreen = 'ReplaceableTextures\\CommandButtons\\BTNScrollOfRegenerationGreen.blp',
    bTNScrollOfTownPortal = 'ReplaceableTextures\\CommandButtons\\BTNScrollOfTownPortal.blp',
    bTNScrollUber = 'ReplaceableTextures\\CommandButtons\\BTNScrollUber.blp',
    bTNSeaElemental = 'ReplaceableTextures\\CommandButtons\\BTNSeaElemental.blp',
    bTNSeaGiant = 'ReplaceableTextures\\CommandButtons\\BTNSeaGiant.blp',
    bTNSeaGiantGreen = 'ReplaceableTextures\\CommandButtons\\BTNSeaGiantGreen.blp',
    bTNSeaGiantPulverize = 'ReplaceableTextures\\CommandButtons\\BTNSeaGiantPulverize.blp',
    bTNSeaGiantWarStomp = 'ReplaceableTextures\\CommandButtons\\BTNSeaGiantWarStomp.blp',
    bTNSeaTurtleGreen = 'ReplaceableTextures\\CommandButtons\\BTNSeaTurtleGreen.blp',
    bTNSeaTurtleRed = 'ReplaceableTextures\\CommandButtons\\BTNSeaTurtleRed.blp',
    bTNSeaWitch = 'ReplaceableTextures\\CommandButtons\\BTNSeaWitch.blp',
    bTNSeal = 'ReplaceableTextures\\CommandButtons\\BTNSeal.blp',
    bTNSearingArrows = 'ReplaceableTextures\\CommandButtons\\BTNSearingArrows.blp',
    bTNSearingArrowsOff = 'ReplaceableTextures\\CommandButtons\\BTNSearingArrowsOff.blp',
    bTNSearingArrowsOn = 'ReplaceableTextures\\CommandButtons\\BTNSearingArrowsOn.blp',
    bTNSeigeEngine = 'ReplaceableTextures\\CommandButtons\\BTNSeigeEngine.blp',
    bTNSeigeEngineWithMissles = 'ReplaceableTextures\\CommandButtons\\BTNSeigeEngineWithMissles.blp',
    bTNSelectHeroOff = 'ReplaceableTextures\\CommandButtons\\BTNSelectHeroOff.blp',
    bTNSelectHeroOn = 'ReplaceableTextures\\CommandButtons\\BTNSelectHeroOn.blp',
    bTNSelectUnit = 'ReplaceableTextures\\CommandButtons\\BTNSelectUnit.blp',
    bTNSelectUnit1 = 'ReplaceableTextures\\CommandButtons\\BTNSelectUnit.blp',
    bTNSelfDestruct = 'ReplaceableTextures\\CommandButtons\\BTNSelfDestruct.blp',
    bTNSelfDestructOff = 'ReplaceableTextures\\CommandButtons\\BTNSelfDestructOff.blp',
    bTNSelfDestructOn = 'ReplaceableTextures\\CommandButtons\\BTNSelfDestructOn.blp',
    bTNSell = 'ReplaceableTextures\\CommandButtons\\BTNSell.blp',
    bTNSentinel = 'ReplaceableTextures\\CommandButtons\\BTNSentinel.blp',
    bTNSentryWard = 'ReplaceableTextures\\CommandButtons\\BTNSentryWard.blp',
    bTNSerpentWard = 'ReplaceableTextures\\CommandButtons\\BTNSerpentWard.blp',
    bTNShade = 'ReplaceableTextures\\CommandButtons\\BTNShade.blp',
    bTNShadowHunter = 'ReplaceableTextures\\CommandButtons\\BTNShadowHunter.blp',
    bTNShadowMeld = 'ReplaceableTextures\\CommandButtons\\BTNShadowMeld.blp',
    bTNShadowPact = 'ReplaceableTextures\\CommandButtons\\BTNShadowPact.blp',
    bTNShadowPact1 = 'ReplaceableTextures\\CommandButtons\\BTNShadowPact.blp',
    bTNShadowStrike = 'ReplaceableTextures\\CommandButtons\\BTNShadowStrike.blp',
    bTNShaman = 'ReplaceableTextures\\CommandButtons\\BTNShaman.blp',
    bTNShamanAdept = 'ReplaceableTextures\\CommandButtons\\BTNShamanAdept.blp',
    bTNShamanMaster = 'ReplaceableTextures\\CommandButtons\\BTNShamanMaster.blp',
    bTNShandris = 'ReplaceableTextures\\CommandButtons\\BTNShandris.blp',
    bTNSheep = 'ReplaceableTextures\\CommandButtons\\BTNSheep.blp',
    bTNShimmerWeed = 'ReplaceableTextures\\CommandButtons\\BTNShimmerWeed.blp',
    bTNShip = 'ReplaceableTextures\\CommandButtons\\BTNShip.blp',
    bTNShockWave = 'ReplaceableTextures\\CommandButtons\\BTNShockWave.blp',
    bTNShoveler = 'ReplaceableTextures\\CommandButtons\\BTNShoveler.blp',
    bTNShrineOfAszhara = 'ReplaceableTextures\\CommandButtons\\BTNShrineOfAszhara.blp',
    bTNSilence = 'ReplaceableTextures\\CommandButtons\\BTNSilence.blp',
    bTNSirenAdept = 'ReplaceableTextures\\CommandButtons\\BTNSirenAdept.blp',
    bTNSirenMaster = 'ReplaceableTextures\\CommandButtons\\BTNSirenMaster.blp',
    bTNSkeletalLongevity = 'ReplaceableTextures\\CommandButtons\\BTNSkeletalLongevity.blp',
    bTNSkeletalOrc = 'ReplaceableTextures\\CommandButtons\\BTNSkeletalOrc.blp',
    bTNSkeletalOrcChampion = 'ReplaceableTextures\\CommandButtons\\BTNSkeletalOrcChampion.blp',
    bTNSkeletalOrcGrunt = 'ReplaceableTextures\\CommandButtons\\BTNSkeletalOrcGrunt.blp',
    bTNSkeletonArcher = 'ReplaceableTextures\\CommandButtons\\BTNSkeletonArcher.blp',
    bTNSkeletonMage = 'ReplaceableTextures\\CommandButtons\\BTNSkeletonMage.blp',
    bTNSkeletonWarrior = 'ReplaceableTextures\\CommandButtons\\BTNSkeletonWarrior.blp',
    bTNSkillz = 'ReplaceableTextures\\CommandButtons\\BTNSkillz.blp',
    bTNSkink = 'ReplaceableTextures\\CommandButtons\\BTNSkink.blp',
    bTNSlaughterHouse = 'ReplaceableTextures\\CommandButtons\\BTNSlaughterHouse.blp',
    bTNSleep = 'ReplaceableTextures\\CommandButtons\\BTNSleep.blp',
    bTNSlippersOfAgility = 'ReplaceableTextures\\CommandButtons\\BTNSlippersOfAgility.blp',
    bTNSlow = 'ReplaceableTextures\\CommandButtons\\BTNSlow.blp',
    bTNSlowOff = 'ReplaceableTextures\\CommandButtons\\BTNSlowOff.blp',
    bTNSlowOn = 'ReplaceableTextures\\CommandButtons\\BTNSlowOn.blp',
    bTNSlowPoison = 'ReplaceableTextures\\CommandButtons\\BTNSlowPoison.blp',
    bTNSludgeCreature = 'ReplaceableTextures\\CommandButtons\\BTNSludgeCreature.blp',
    bTNSmash = 'ReplaceableTextures\\CommandButtons\\BTNSmash.blp',
    bTNSnapDragon = 'ReplaceableTextures\\CommandButtons\\BTNSnapDragon.blp',
    bTNSnazzyPotion = 'ReplaceableTextures\\CommandButtons\\BTNSnazzyPotion.blp',
    bTNSnazzyScroll = 'ReplaceableTextures\\CommandButtons\\BTNSnazzyScroll.blp',
    bTNSnazzyScrollGreen = 'ReplaceableTextures\\CommandButtons\\BTNSnazzyScrollGreen.blp',
    bTNSnazzyScrollPurple = 'ReplaceableTextures\\CommandButtons\\BTNSnazzyScrollPurple.blp',
    bTNSnowOwl = 'ReplaceableTextures\\CommandButtons\\BTNSnowOwl.blp',
    bTNSobiMask = 'ReplaceableTextures\\CommandButtons\\BTNSobiMask.blp',
    bTNSorceress = 'ReplaceableTextures\\CommandButtons\\BTNSorceress.blp',
    bTNSorceressAdept = 'ReplaceableTextures\\CommandButtons\\BTNSorceressAdept.blp',
    bTNSorceressMaster = 'ReplaceableTextures\\CommandButtons\\BTNSorceressMaster.blp',
    bTNSoulBurn = 'ReplaceableTextures\\CommandButtons\\BTNSoulBurn.blp',
    bTNSoulGem = 'ReplaceableTextures\\CommandButtons\\BTNSoulGem.blp',
    bTNSpawningGrounds = 'ReplaceableTextures\\CommandButtons\\BTNSpawningGrounds.blp',
    bTNSpellBookBLS = 'ReplaceableTextures\\CommandButtons\\BTNSpellBookBLS.blp',
    bTNSpellBreaker = 'ReplaceableTextures\\CommandButtons\\BTNSpellBreaker.blp',
    bTNSpellBreakerMagicDefend = 'ReplaceableTextures\\CommandButtons\\BTNSpellBreakerMagicDefend.blp',
    bTNSpellBreakerMagicUnDefend = 'ReplaceableTextures\\CommandButtons\\BTNSpellBreakerMagicUnDefend.blp',
    bTNSpellShieldAmulet = 'ReplaceableTextures\\CommandButtons\\BTNSpellShieldAmulet.blp',
    bTNSpellSteal = 'ReplaceableTextures\\CommandButtons\\BTNSpellSteal.blp',
    bTNSpellStealOff = 'ReplaceableTextures\\CommandButtons\\BTNSpellStealOff.blp',
    bTNSpellStealOn = 'ReplaceableTextures\\CommandButtons\\BTNSpellStealOn.blp',
    bTNSpider = 'ReplaceableTextures\\CommandButtons\\BTNSpider.blp',
    bTNSpiderBlack = 'ReplaceableTextures\\CommandButtons\\BTNSpiderBlack.blp',
    bTNSpiderBlue = 'ReplaceableTextures\\CommandButtons\\BTNSpiderBlue.blp',
    bTNSpiderCrab = 'ReplaceableTextures\\CommandButtons\\BTNSpiderCrab.blp',
    bTNSpiderGreen = 'ReplaceableTextures\\CommandButtons\\BTNSpiderGreen.blp',
    bTNSpiderSilkBroach = 'ReplaceableTextures\\CommandButtons\\BTNSpiderSilkBroach.blp',
    bTNSpiderling = 'ReplaceableTextures\\CommandButtons\\BTNSpiderling.blp',
    bTNSpikedBarricades = 'ReplaceableTextures\\CommandButtons\\BTNSpikedBarricades.blp',
    bTNSpinyCrab = 'ReplaceableTextures\\CommandButtons\\BTNSpinyCrab.blp',
    bTNSpiritLink = 'ReplaceableTextures\\CommandButtons\\BTNSpiritLink.blp',
    bTNSpiritLodge = 'ReplaceableTextures\\CommandButtons\\BTNSpiritLodge.blp',
    bTNSpiritOfVengeance = 'ReplaceableTextures\\CommandButtons\\BTNSpiritOfVengeance.blp',
    bTNSpiritWalker = 'ReplaceableTextures\\CommandButtons\\BTNSpiritWalker.blp',
    bTNSpiritWalkerAdeptTraining = 'ReplaceableTextures\\CommandButtons\\BTNSpiritWalkerAdeptTraining.blp',
    bTNSpiritWalkerMasterTraining = 'ReplaceableTextures\\CommandButtons\\BTNSpiritWalkerMasterTraining.blp',
    bTNSpiritWolf = 'ReplaceableTextures\\CommandButtons\\BTNSpiritWolf.blp',
    bTNSpiritWyvern = 'ReplaceableTextures\\CommandButtons\\BTNSpiritWyvern.blp',
    bTNSpy = 'ReplaceableTextures\\CommandButtons\\BTNSpy.blp',
    bTNStaffOfNegation = 'ReplaceableTextures\\CommandButtons\\BTNStaffOfNegation.blp',
    bTNStaffOfPreservation = 'ReplaceableTextures\\CommandButtons\\BTNStaffOfPreservation.blp',
    bTNStaffOfPurification = 'ReplaceableTextures\\CommandButtons\\BTNStaffOfPurification.blp',
    bTNStaffOfSanctuary = 'ReplaceableTextures\\CommandButtons\\BTNStaffOfSanctuary.blp',
    bTNStaffOfSilence = 'ReplaceableTextures\\CommandButtons\\BTNStaffOfSilence.blp',
    bTNStaffOfTeleportation = 'ReplaceableTextures\\CommandButtons\\BTNStaffOfTeleportation.blp',
    bTNStag = 'ReplaceableTextures\\CommandButtons\\BTNStag.blp',
    bTNStampede = 'ReplaceableTextures\\CommandButtons\\BTNStampede.blp',
    bTNStarFall = 'ReplaceableTextures\\CommandButtons\\BTNStarFall.blp',
    bTNStarWand = 'ReplaceableTextures\\CommandButtons\\BTNStarWand.blp',
    bTNStasisTrap = 'ReplaceableTextures\\CommandButtons\\BTNStasisTrap.blp',
    bTNStatUp = 'ReplaceableTextures\\CommandButtons\\BTNStatUp.blp',
    bTNSteamTank = 'ReplaceableTextures\\CommandButtons\\BTNSteamTank.blp',
    bTNSteelArmor = 'ReplaceableTextures\\CommandButtons\\BTNSteelArmor.blp',
    bTNSteelMelee = 'ReplaceableTextures\\CommandButtons\\BTNSteelMelee.blp',
    bTNSteelRanged = 'ReplaceableTextures\\CommandButtons\\BTNSteelRanged.blp',
    bTNStone = 'ReplaceableTextures\\CommandButtons\\BTNStone.blp',
    bTNStoneArchitecture = 'ReplaceableTextures\\CommandButtons\\BTNStoneArchitecture.blp',
    bTNStoneForm = 'ReplaceableTextures\\CommandButtons\\BTNStoneForm.blp',
    bTNStop = 'ReplaceableTextures\\CommandButtons\\BTNStop.blp',
    bTNStormBolt = 'ReplaceableTextures\\CommandButtons\\BTNStormBolt.blp',
    bTNStormBrewMaster = 'ReplaceableTextures\\CommandButtons\\BTNStormBrewMaster.blp',
    bTNStormEarthFire = 'ReplaceableTextures\\CommandButtons\\BTNStormEarth&Fire.blp',
    bTNStormHammer = 'ReplaceableTextures\\CommandButtons\\BTNStormHammer.blp',
    bTNStrengthOfTheMoon = 'ReplaceableTextures\\CommandButtons\\BTNStrengthOfTheMoon.blp',
    bTNStrengthOfTheWild = 'ReplaceableTextures\\CommandButtons\\BTNStrengthOfTheWild.blp',
    bTNStrongDrink = 'ReplaceableTextures\\CommandButtons\\BTNStrongDrink.blp',
    bTNStrongHold = 'ReplaceableTextures\\CommandButtons\\BTNStrongHold.blp',
    bTNStun = 'ReplaceableTextures\\CommandButtons\\BTNStun.blp',
    bTNSummonWaterElemental = 'ReplaceableTextures\\CommandButtons\\BTNSummonWaterElemental.blp',
    bTNSunKey = 'ReplaceableTextures\\CommandButtons\\BTNSunKey.blp',
    bTNSupportBeam = 'ReplaceableTextures\\CommandButtons\\BTNSupportBeam.blp',
    bTNSylvanusWindRunner = 'ReplaceableTextures\\CommandButtons\\BTNSylvanusWindRunner.blp',
    bTNTalisman = 'ReplaceableTextures\\CommandButtons\\BTNTalisman.blp',
    bTNTameHippogriff = 'ReplaceableTextures\\CommandButtons\\BTNTameHippogriff.blp',
    bTNTaunt = 'ReplaceableTextures\\CommandButtons\\BTNTaunt.blp',
    bTNTauren = 'ReplaceableTextures\\CommandButtons\\BTNTauren.blp',
    bTNTaurenHut = 'ReplaceableTextures\\CommandButtons\\BTNTaurenHut.blp',
    bTNTaurenTotem = 'ReplaceableTextures\\CommandButtons\\BTNTaurenTotem.blp',
    bTNTavern = 'ReplaceableTextures\\CommandButtons\\BTNTavern.blp',
    bTNTelescope = 'ReplaceableTextures\\CommandButtons\\BTNTelescope.blp',
    bTNTemp = 'ReplaceableTextures\\CommandButtons\\BTNTemp.blp',
    bTNTemp1 = 'Textures\\BTNTemp.blp',
    bTNTempleOfTheDamned = 'ReplaceableTextures\\CommandButtons\\BTNTempleOfTheDamned.blp',
    bTNTempleOfTides = 'ReplaceableTextures\\CommandButtons\\BTNTempleOfTides.blp',
    bTNTentacle = 'ReplaceableTextures\\CommandButtons\\BTNTentacle.blp',
    bTNTheBlackArrow = 'ReplaceableTextures\\CommandButtons\\BTNTheBlackArrow.blp',
    bTNTheBlackArrowOnOff = 'ReplaceableTextures\\CommandButtons\\BTNTheBlackArrowOnOff.blp',
    bTNTheCaptain = 'ReplaceableTextures\\CommandButtons\\BTNTheCaptain.blp',
    bTNThickFur = 'ReplaceableTextures\\CommandButtons\\BTNThickFur.blp',
    bTNThievesGuild = 'ReplaceableTextures\\CommandButtons\\BTNThievesGuild.blp',
    bTNThoriumArmor = 'ReplaceableTextures\\CommandButtons\\BTNThoriumArmor.blp',
    bTNThoriumMelee = 'ReplaceableTextures\\CommandButtons\\BTNThoriumMelee.blp',
    bTNThoriumRanged = 'ReplaceableTextures\\CommandButtons\\BTNThoriumRanged.blp',
    bTNThornShield = 'ReplaceableTextures\\CommandButtons\\BTNThornShield.blp',
    bTNThorns = 'ReplaceableTextures\\CommandButtons\\BTNThorns.blp',
    bTNThornyShieldOff = 'ReplaceableTextures\\CommandButtons\\BTNThornyShieldOff.blp',
    bTNThrall = 'ReplaceableTextures\\CommandButtons\\BTNThrall.blp',
    bTNThunderClap = 'ReplaceableTextures\\CommandButtons\\BTNThunderClap.blp',
    bTNThunderLizard = 'ReplaceableTextures\\CommandButtons\\BTNThunderLizard.blp',
    bTNThunderLizardEgg = 'ReplaceableTextures\\CommandButtons\\BTNThunderLizardEgg.blp',
    bTNThunderLizardSalamander = 'ReplaceableTextures\\CommandButtons\\BTNThunderLizardSalamander.blp',
    bTNThunderLizardVizier = 'ReplaceableTextures\\CommandButtons\\BTNThunderLizardVizier.blp',
    bTNTichondrius = 'ReplaceableTextures\\CommandButtons\\BTNTichondrius.blp',
    bTNTidalGuardian = 'ReplaceableTextures\\CommandButtons\\BTNTidalGuardian.blp',
    bTNTimberWolf = 'ReplaceableTextures\\CommandButtons\\BTNTimberWolf.blp',
    bTNTinyCastle = 'ReplaceableTextures\\CommandButtons\\BTNTinyCastle.blp',
    bTNTombOfRelics = 'ReplaceableTextures\\CommandButtons\\BTNTombOfRelics.blp',
    bTNTome = 'ReplaceableTextures\\CommandButtons\\BTNTome.blp',
    bTNTomeBrown = 'ReplaceableTextures\\CommandButtons\\BTNTomeBrown.blp',
    bTNTomeOfRetraining = 'ReplaceableTextures\\CommandButtons\\BTNTomeOfRetraining.blp',
    bTNTomeRed = 'ReplaceableTextures\\CommandButtons\\BTNTomeRed.blp',
    bTNTornado = 'ReplaceableTextures\\CommandButtons\\BTNTornado.blp',
    bTNTower = 'ReplaceableTextures\\CommandButtons\\BTNTower.blp',
    bTNTownHall = 'ReplaceableTextures\\CommandButtons\\BTNTownHall.blp',
    bTNTranquility = 'ReplaceableTextures\\CommandButtons\\BTNTranquility.blp',
    bTNTransmute = 'ReplaceableTextures\\CommandButtons\\BTNTransmute.blp',
    bTNTransport = 'ReplaceableTextures\\CommandButtons\\BTNTransport.blp',
    bTNTreant = 'ReplaceableTextures\\CommandButtons\\BTNTreant.blp',
    bTNTreeOfAges = 'ReplaceableTextures\\CommandButtons\\BTNTreeOfAges.blp',
    bTNTreeOfEternity = 'ReplaceableTextures\\CommandButtons\\BTNTreeOfEternity.blp',
    bTNTreeOfLife = 'ReplaceableTextures\\CommandButtons\\BTNTreeOfLife.blp',
    bTNTrollBatRider = 'ReplaceableTextures\\CommandButtons\\BTNTrollBatRider.blp',
    bTNTrollBurrow = 'ReplaceableTextures\\CommandButtons\\BTNTrollBurrow.blp',
    bTNTrueShot = 'ReplaceableTextures\\CommandButtons\\BTNTrueShot.blp',
    bTNTuskaarBlack = 'ReplaceableTextures\\CommandButtons\\BTNTuskaarBlack.blp',
    bTNTuskaarBrown = 'ReplaceableTextures\\CommandButtons\\BTNTuskaarBrown.blp',
    bTNTuskaarGold = 'ReplaceableTextures\\CommandButtons\\BTNTuskaarGold.blp',
    bTNTuskaarNomad = 'ReplaceableTextures\\CommandButtons\\BTNTuskaarNomad.blp',
    bTNUltravision = 'ReplaceableTextures\\CommandButtons\\BTNUltravision.blp',
    bTNUnLoad = 'ReplaceableTextures\\CommandButtons\\BTNUnLoad.blp',
    bTNUnbroken = 'ReplaceableTextures\\CommandButtons\\BTNUnbroken.blp',
    bTNUndeadAirBarge = 'ReplaceableTextures\\CommandButtons\\BTNUndeadAirBarge.blp',
    bTNUndeadBattleShip = 'ReplaceableTextures\\CommandButtons\\BTNUndeadBattleShip.blp',
    bTNUndeadCaptureFlag = 'ReplaceableTextures\\CommandButtons\\BTNUndeadCaptureFlag.blp',
    bTNUndeadCar = 'ReplaceableTextures\\CommandButtons\\BTNUndeadCar.blp',
    bTNUndeadDestroyer = 'ReplaceableTextures\\CommandButtons\\BTNUndeadDestroyer.blp',
    bTNUndeadLoad = 'ReplaceableTextures\\CommandButtons\\BTNUndeadLoad.blp',
    bTNUndeadLoadOff = 'ReplaceableTextures\\CommandButtons\\BTNUndeadLoadOff.blp',
    bTNUndeadLoadOn = 'ReplaceableTextures\\CommandButtons\\BTNUndeadLoadOn.blp',
    bTNUndeadShipyard = 'ReplaceableTextures\\CommandButtons\\BTNUndeadShipyard.blp',
    bTNUndeadShrine = 'ReplaceableTextures\\CommandButtons\\BTNUndeadShrine.blp',
    bTNUndeadTransport = 'ReplaceableTextures\\CommandButtons\\BTNUndeadTransport.blp',
    bTNUndeadUnLoad = 'ReplaceableTextures\\CommandButtons\\BTNUndeadUnLoad.blp',
    bTNUnholyArmor = 'ReplaceableTextures\\CommandButtons\\BTNUnholyArmor.blp',
    bTNUnholyAura = 'ReplaceableTextures\\CommandButtons\\BTNUnholyAura.blp',
    bTNUnholyFrenzy = 'ReplaceableTextures\\CommandButtons\\BTNUnholyFrenzy.blp',
    bTNUnholyStrength = 'ReplaceableTextures\\CommandButtons\\BTNUnholyStrength.blp',
    bTNUnloadDwarf = 'ReplaceableTextures\\CommandButtons\\BTNUnloadDwarf.blp',
    bTNUnloadPeon = 'ReplaceableTextures\\CommandButtons\\BTNUnloadPeon.blp',
    bTNUnstableConcoction = 'ReplaceableTextures\\CommandButtons\\BTNUnstableConcoction.blp',
    bTNUnsummonBuilding = 'ReplaceableTextures\\CommandButtons\\BTNUnsummonBuilding.blp',
    bTNUpgradeMoonGlaive = 'ReplaceableTextures\\CommandButtons\\BTNUpgradeMoonGlaive.blp',
    bTNUpgradeRegenerationAura = 'ReplaceableTextures\\CommandButtons\\BTNUpgradeRegenerationAura.blp',
    bTNUproot = 'ReplaceableTextures\\CommandButtons\\BTNUproot.blp',
    bTNUrnOfKelThuzad = 'ReplaceableTextures\\CommandButtons\\BTNUrnOfKelThuzad.blp',
    bTNUsedSoulGem = 'ReplaceableTextures\\CommandButtons\\BTNUsedSoulGem.blp',
    bTNVampiricAura = 'ReplaceableTextures\\CommandButtons\\BTNVampiricAura.blp',
    bTNVengeanceIncarnate = 'ReplaceableTextures\\CommandButtons\\BTNVengeanceIncarnate.blp',
    bTNVialEmpty = 'ReplaceableTextures\\CommandButtons\\BTNVialEmpty.blp',
    bTNVialFull = 'ReplaceableTextures\\CommandButtons\\BTNVialFull.blp',
    bTNVillagerKid = 'ReplaceableTextures\\CommandButtons\\BTNVillagerKid.blp',
    bTNVillagerKid2 = 'ReplaceableTextures\\CommandButtons\\BTNVillagerKid2.blp',
    bTNVillagerMan = 'ReplaceableTextures\\CommandButtons\\BTNVillagerMan.blp',
    bTNVillagerMan1 = 'ReplaceableTextures\\CommandButtons\\BTNVillagerMan1.blp',
    bTNVillagerWoman = 'ReplaceableTextures\\CommandButtons\\BTNVillagerWoman.blp',
    bTNVoidWalker = 'ReplaceableTextures\\CommandButtons\\BTNVoidWalker.blp',
    bTNVolcano = 'ReplaceableTextures\\CommandButtons\\BTNVolcano.blp',
    bTNVoodooLounge = 'ReplaceableTextures\\CommandButtons\\BTNVoodooLounge.blp',
    bTNVorpalBlades = 'ReplaceableTextures\\CommandButtons\\BTNVorpalBlades.blp',
    bTNVulture = 'ReplaceableTextures\\CommandButtons\\BTNVulture.blp',
    bTNWallOfFire = 'ReplaceableTextures\\CommandButtons\\BTNWallOfFire.blp',
    bTNWand = 'ReplaceableTextures\\CommandButtons\\BTNWand.blp',
    bTNWandOfCyclone = 'ReplaceableTextures\\CommandButtons\\BTNWandOfCyclone.blp',
    bTNWandOfManaSteal = 'ReplaceableTextures\\CommandButtons\\BTNWandOfManaSteal.blp',
    bTNWandOfNeutralization = 'ReplaceableTextures\\CommandButtons\\BTNWandOfNeutralization.blp',
    bTNWandOfShadowSight = 'ReplaceableTextures\\CommandButtons\\BTNWandOfShadowSight.blp',
    bTNWandSkull = 'ReplaceableTextures\\CommandButtons\\BTNWandSkull.blp',
    bTNWarEagle = 'ReplaceableTextures\\CommandButtons\\BTNWarEagle.blp',
    bTNWarStomp = 'ReplaceableTextures\\CommandButtons\\BTNWarStomp.blp',
    bTNWarden2 = 'ReplaceableTextures\\CommandButtons\\BTNWarden2.blp',
    bTNWaygate = 'ReplaceableTextures\\CommandButtons\\BTNWaygate.blp',
    bTNWeb = 'ReplaceableTextures\\CommandButtons\\BTNWeb.blp',
    bTNWebOff = 'ReplaceableTextures\\CommandButtons\\BTNWebOff.blp',
    bTNWebOn = 'ReplaceableTextures\\CommandButtons\\BTNWebOn.blp',
    bTNWellSpring = 'ReplaceableTextures\\CommandButtons\\BTNWellSpring.blp',
    bTNWendigo = 'ReplaceableTextures\\CommandButtons\\BTNWendigo.blp',
    bTNWhirlwind = 'ReplaceableTextures\\CommandButtons\\BTNWhirlwind.blp',
    bTNWindSerpent = 'ReplaceableTextures\\CommandButtons\\BTNWindSerpent.blp',
    bTNWindWalkOff = 'ReplaceableTextures\\CommandButtons\\BTNWindWalkOff.blp',
    bTNWindWalkOn = 'ReplaceableTextures\\CommandButtons\\BTNWindWalkOn.blp',
    bTNWirtsLeg = 'ReplaceableTextures\\CommandButtons\\BTNWirtsLeg.blp',
    bTNWirtsOtherLeg = 'ReplaceableTextures\\CommandButtons\\BTNWirtsOtherLeg.blp',
    bTNWirtsOtherLeg1 = 'ReplaceableTextures\\CommandButtons\\BTNWirtsOtherLeg.blp',
    bTNWisp = 'ReplaceableTextures\\CommandButtons\\BTNWisp.blp',
    bTNWispHealOff = 'ReplaceableTextures\\CommandButtons\\BTNWispHealOff.blp',
    bTNWispHealOn = 'ReplaceableTextures\\CommandButtons\\BTNWispHealOn.blp',
    bTNWispSplode = 'ReplaceableTextures\\CommandButtons\\BTNWispSplode.blp',
    bTNWitchDoctor = 'ReplaceableTextures\\CommandButtons\\BTNWitchDoctor.blp',
    bTNWitchDoctorAdept = 'ReplaceableTextures\\CommandButtons\\BTNWitchDoctorAdept.blp',
    bTNWitchDoctorMaster = 'ReplaceableTextures\\CommandButtons\\BTNWitchDoctorMaster.blp',
    bTNWolf = 'ReplaceableTextures\\CommandButtons\\BTNWolf.blp',
    bTNWorkshop = 'ReplaceableTextures\\CommandButtons\\BTNWorkshop.blp',
    bTNWyvern = 'ReplaceableTextures\\CommandButtons\\BTNWyvern.blp',
    bTNWyvernRider = 'ReplaceableTextures\\CommandButtons\\BTNWyvernRider.blp',
    bTNYouDirtyRat = 'ReplaceableTextures\\CommandButtons\\BTNYouDirtyRat!.blp',
    bTNZergling = 'ReplaceableTextures\\CommandButtons\\BTNZergling.blp',
    bTNZiggurat = 'ReplaceableTextures\\CommandButtons\\BTNZiggurat.blp',
    bTNZigguratUpgrade = 'ReplaceableTextures\\CommandButtons\\BTNZigguratUpgrade.blp',
    bTNZombie = 'ReplaceableTextures\\CommandButtons\\BTNZombie.blp',
    bTNeredarRed = 'ReplaceableTextures\\CommandButtons\\BTNeredarRed.blp',
    bTNnerubianSpiderLord = 'ReplaceableTextures\\CommandButtons\\BTNnerubianSpiderLord.blp',
    bTNneutralManaShieldOff = 'ReplaceableTextures\\CommandButtons\\BTNneutralManaShieldOff.blp',
    bTNpurpleDragonSpawn = 'ReplaceableTextures\\CommandButtons\\BTNpurpleDragonSpawn.blp',
    bTNtemp = 'Abilities\\Spells\\Other\\TempSpellArt\\BTNtemp.blp',
    bTNtempB = 'Buildings\\Other\\TempArtB\\BTNtempB.blp',
    bTNtempW = 'Textures\\BTNtempW.blp',
    dISBTN3M1 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTN3M1.blp',
    dISBTN3M2 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTN3M2.blp',
    dISBTN3M3 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTN3M3.blp',
    dISBTNAbomination = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAbomination.blp',
    dISBTNAbsorbMagic = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAbsorbMagic.blp',
    dISBTNAcidBomb = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAcidBomb.blp',
    dISBTNAcolyte = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAcolyte.blp',
    dISBTNAcorn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAcorn.blp',
    dISBTNAdvStruct = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAdvStruct.blp',
    dISBTNAdvancedCreatureAttack = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAdvancedCreatureAttack.blp',
    dISBTNAdvancedCreatureCarapace = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAdvancedCreatureCarapace.blp',
    dISBTNAdvancedDeathTower = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAdvancedDeathTower.blp',
    dISBTNAdvancedEnergyTower = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAdvancedEnergyTower.blp',
    dISBTNAdvancedFlameTower = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAdvancedFlameTower.blp',
    dISBTNAdvancedFrostTower = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAdvancedFrostTower.blp',
    dISBTNAdvancedMoonArmor = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAdvancedMoonArmor.blp',
    dISBTNAdvancedReinforcedHides = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAdvancedReinforcedHides.blp',
    dISBTNAdvancedRockTower = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAdvancedRockTower.blp',
    dISBTNAdvancedSpikedBarricades = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAdvancedSpikedBarricades.blp',
    dISBTNAdvancedStrengthOfTheMoon = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAdvancedStrengthOfTheMoon.blp',
    dISBTNAdvancedStrengthOfTheWild = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAdvancedStrengthOfTheWild.blp',
    dISBTNAdvancedUnholyArmor = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAdvancedUnholyArmor.blp',
    dISBTNAdvancedUnholyStrength = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAdvancedUnholyStrength.blp',
    dISBTNAkama = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAkama.blp',
    dISBTNAlbatross = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAlbatross.blp',
    dISBTNAlleriaFlute = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAlleriaFlute.blp',
    dISBTNAltarOfDarkness = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAltarOfDarkness.blp',
    dISBTNAltarOfDepths = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAltarOfDepths.blp',
    dISBTNAltarOfElders = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAltarOfElders.blp',
    dISBTNAltarOfKings = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAltarOfKings.blp',
    dISBTNAltarOfStorms = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAltarOfStorms.blp',
    dISBTNAmbush = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAmbush.blp',
    dISBTNAmmoDump = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAmmoDump.blp',
    dISBTNAmulet = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAmulet.blp',
    dISBTNAmuletOftheWild = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAmuletOftheWild.blp',
    dISBTNAncestralSpirit = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAncestralSpirit.blp',
    dISBTNAncientOfLore = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAncientOfLore.blp',
    dISBTNAncientOfTheEarth = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAncientOfTheEarth.blp',
    dISBTNAncientOfTheMoon = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAncientOfTheMoon.blp',
    dISBTNAncientOfWonders = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAncientOfWonders.blp',
    dISBTNAnimalWarTraining = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAnimalWarTraining.blp',
    dISBTNAnimateDead = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAnimateDead.blp',
    dISBTNAnkh = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAnkh.blp',
    dISBTNAntiMagicShell = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAntiMagicShell.blp',
    dISBTNArachnathid = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNArachnathid.blp',
    dISBTNArachnathidGreen = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNArachnathidGreen.blp',
    dISBTNArachnathidpurple = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNArachnathidpurple.blp',
    dISBTNArcaneObservatory = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNArcaneObservatory.blp',
    dISBTNArcaneSanctum = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNArcaneSanctum.blp',
    dISBTNArcaneTower = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNArcaneTower.blp',
    dISBTNArcaneVault = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNArcaneVault.blp',
    dISBTNArcaniteArchitecture = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNArcaniteArchitecture.blp',
    dISBTNArcaniteArmor = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNArcaniteArmor.blp',
    dISBTNArcaniteMelee = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNArcaniteMelee.blp',
    dISBTNArcaniteRanged = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNArcaniteRanged.blp',
    dISBTNArcher = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNArcher.blp',
    dISBTNArchimonde = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNArchimonde.blp',
    dISBTNArmorGolem = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNArmorGolem.blp',
    dISBTNArmoredOge = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNArmoredOge.blp',
    dISBTNArthas = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNArthas.blp',
    dISBTNAssassin = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAssassin.blp',
    dISBTNAttack = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAttack.blp',
    dISBTNAttackGround = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAttackGround.blp',
    dISBTNAuraOfDarkness = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAuraOfDarkness.blp',
    dISBTNAvatar = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAvatar.blp',
    dISBTNAvatarOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAvatarOff.blp',
    dISBTNAvatarOn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAvatarOn.blp',
    dISBTNAvengingAssassin = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAvengingAssassin.blp',
    dISBTNAvengingWatcher = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAvengingWatcher.blp',
    dISBTNAvengingWatcherOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAvengingWatcherOff.blp',
    dISBTNAvengingWatcherOn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAvengingWatcherOn.blp',
    dISBTNAzureDragon = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNAzureDragon.blp',
    dISBTNBLoodMage2 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBLoodMage2.blp',
    dISBTNBacktoWork = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBacktoWork.blp',
    dISBTNBallista = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBallista.blp',
    dISBTNBandit = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBandit.blp',
    dISBTNBanditLord = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBanditLord.blp',
    dISBTNBanditMage = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBanditMage.blp',
    dISBTNBanditSpearThrower = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBanditSpearThrower.blp',
    dISBTNBanish = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBanish.blp',
    dISBTNBanshee = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBanshee.blp',
    dISBTNBansheeAdept = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBansheeAdept.blp',
    dISBTNBansheeMaster = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBansheeMaster.blp',
    dISBTNBansheeRanger = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBansheeRanger.blp',
    dISBTNBarkSkin = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBarkSkin.blp',
    dISBTNBarkSkinOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBarkSkinOff.blp',
    dISBTNBarkSkinOn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBarkSkinOn.blp',
    dISBTNBarracks = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBarracks.blp',
    dISBTNBarrel = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBarrel.blp',
    dISBTNBash = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBash.blp',
    dISBTNBasicStruct = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBasicStruct.blp',
    dISBTNBattleRoar = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBattleRoar.blp',
    dISBTNBattleShip = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBattleShip.blp',
    dISBTNBattleStations = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBattleStations.blp',
    dISBTNBearBlink = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBearBlink.blp',
    dISBTNBearDen = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBearDen.blp',
    dISBTNBearForm = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBearForm.blp',
    dISBTNBeastMaster = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBeastMaster.blp',
    dISBTNBeastiary = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBeastiary.blp',
    dISBTNBelt = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBelt.blp',
    dISBTNBerserk = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBerserk.blp',
    dISBTNBerserkForTrolls = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBerserkForTrolls.blp',
    dISBTNBigBadVoodooSpell = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBigBadVoodooSpell.blp',
    dISBTNBlackCitadel = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBlackCitadel.blp',
    dISBTNBlackDragon = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBlackDragon.blp',
    dISBTNBlackDragonRoost = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBlackDragonRoost.blp',
    dISBTNBlackMammoth = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBlackMammoth.blp',
    dISBTNBlackMarket = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBlackMarket.blp',
    dISBTNBlacksmith = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBlacksmith.blp',
    dISBTNBlink = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBlink.blp',
    dISBTNBlizzard = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBlizzard.blp',
    dISBTNBloodElfPeasant = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBloodElfPeasant.blp',
    dISBTNBloodElfSupplyWagon = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBloodElfSupplyWagon.blp',
    dISBTNBloodGhostKey = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBlood&GhostKey.blp',
    dISBTNBloodKey = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBloodKey.blp',
    dISBTNBloodLust = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBloodLust.blp',
    dISBTNBloodLustOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBloodLustOff.blp',
    dISBTNBloodLustOn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBloodLustOn.blp',
    dISBTNBlueDemoness = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBlueDemoness.blp',
    dISBTNBlueDragonRoost = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBlueDragonRoost.blp',
    dISBTNBlueDragonSpawn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBlueDragonSpawn.blp',
    dISBTNBlueMagnataur = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBlueMagnataur.blp',
    dISBTNBoneChimes = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBoneChimes.blp',
    dISBTNBoneYard = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBoneYard.blp',
    dISBTNBookOfSummoning = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBookOfSummoning.blp',
    dISBTNBookOfTheDead = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBookOfTheDead.blp',
    dISBTNBoots = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBoots.blp',
    dISBTNBootsOfSpeed = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBootsOfSpeed.blp',
    dISBTNBox = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBox.blp',
    dISBTNBreathOfFire = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBreathOfFire.blp',
    dISBTNBreathOfFrost = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBreathOfFrost.blp',
    dISBTNBrilliance = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBrilliance.blp',
    dISBTNBronzeBowl = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBronzeBowl.blp',
    dISBTNBronzeBowlFull = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBronzeBowlFull.blp',
    dISBTNBronzeDragon = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBronzeDragon.blp',
    dISBTNBundleOfLumber = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNBundleOfLumber.blp',
    dISBTNCOP = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCOP.blp',
    dISBTNCage = 'ReplaceableTextures\\CommandButtons\\DISBTNCage.blp',
    dISBTNCage1 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCage.blp',
    dISBTNCagedIllidan = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCagedIllidan.blp',
    dISBTNCallToArms = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCallToArms.blp',
    dISBTNCancel = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCancel.blp',
    dISBTNCannibalize = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCannibalize.blp',
    dISBTNCannonTower = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCannonTower.blp',
    dISBTNCarrionScarabs = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCarrionScarabs.blp',
    dISBTNCarrionScarabsOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCarrionScarabsOff.blp',
    dISBTNCarrionScarabsOn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCarrionScarabsOn.blp',
    dISBTNCarrionSwarm = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCarrionSwarm.blp',
    dISBTNCastle = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCastle.blp',
    dISBTNCatapult = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCatapult.blp',
    dISBTNCentaur = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCentaur.blp',
    dISBTNCentaurArcher = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCentaurArcher.blp',
    dISBTNCentaurKhan = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCentaurKhan.blp',
    dISBTNChainLightning = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNChainLightning.blp',
    dISBTNChaosBlademaster = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNChaosBlademaster.blp',
    dISBTNChaosGrom = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNChaosGrom.blp',
    dISBTNChaosGrunt = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNChaosGrunt.blp',
    dISBTNChaosKotoBeast = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNChaosKotoBeast.blp',
    dISBTNChaosPeon = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNChaosPeon.blp',
    dISBTNChaosSpaceOrc = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNChaosSpaceOrc.blp',
    dISBTNChaosWarlock = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNChaosWarlock.blp',
    dISBTNChaosWarlockGreen = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNChaosWarlockGreen.blp',
    dISBTNChaosWarlord = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNChaosWarlord.blp',
    dISBTNChaosWolfRider = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNChaosWolfRider.blp',
    dISBTNCharm = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCharm.blp',
    dISBTNCharm1 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCharm.blp',
    dISBTNCheese = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCheese.blp',
    dISBTNChemicalRage = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNChemicalRage.blp',
    dISBTNChestOfGold = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNChestOfGold.blp',
    dISBTNChimaera = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNChimaera.blp',
    dISBTNChimaeraRoost = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNChimaeraRoost.blp',
    dISBTNChime = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNChime.blp',
    dISBTNCirclet = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCirclet.blp',
    dISBTNClawsOfAttack = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNClawsOfAttack.blp',
    dISBTNClayFigurine = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNClayFigurine.blp',
    dISBTNCleavingAttack = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCleavingAttack.blp',
    dISBTNCloak = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCloak.blp',
    dISBTNCloakOfFlames = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCloakOfFlames.blp',
    dISBTNClockWerkGoblin = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNClockWerkGoblin.blp',
    dISBTNCloudOfFog = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCloudOfFog.blp',
    dISBTNClusterRockets = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNClusterRockets.blp',
    dISBTNColdArrows = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNColdArrows.blp',
    dISBTNColdArrowsOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNColdArrowsOff.blp',
    dISBTNColdArrowsOn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNColdArrowsOn.blp',
    dISBTNColdTower = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNColdTower.blp',
    dISBTNCommand = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCommand.blp',
    dISBTNControlMagic = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNControlMagic.blp',
    dISBTNCoralBed = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCoralBed.blp',
    dISBTNCorpseExplode = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCorpseExplode.blp',
    dISBTNCorrosiveBreath = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCorrosiveBreath.blp',
    dISBTNCorruptedAncientOfWar = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCorruptedAncientOfWar.blp',
    dISBTNCorruptedAncientProtector = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCorruptedAncientProtector.blp',
    dISBTNCorruptedEnt = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCorruptedEnt.blp',
    dISBTNCorruptedMoonWell = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCorruptedMoonWell.blp',
    dISBTNCorruptedTreeOfLife = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCorruptedTreeOfLife.blp',
    dISBTNCrate = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCrate.blp',
    dISBTNCreatureAttack = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCreatureAttack.blp',
    dISBTNCreatureCarapace = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCreatureCarapace.blp',
    dISBTNCripple = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCripple.blp',
    dISBTNCriticalStrike = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCriticalStrike.blp',
    dISBTNCritterChicken = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCritterChicken.blp',
    dISBTNCritterRabbit = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCritterRabbit.blp',
    dISBTNCrushingWave = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCrushingWave.blp',
    dISBTNCrypt = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCrypt.blp',
    dISBTNCryptFiend = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCryptFiend.blp',
    dISBTNCryptFiendBurrow = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCryptFiendBurrow.blp',
    dISBTNCryptFiendUnBurrow = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCryptFiendUnBurrow.blp',
    dISBTNCrystalBall = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCrystalBall.blp',
    dISBTNCurse = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCurse.blp',
    dISBTNCurseOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCurseOff.blp',
    dISBTNCurseOn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCurseOn.blp',
    dISBTNCyclone = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNCyclone.blp',
    dISBTNDOCAdeptTraining = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDOCAdeptTraining.blp',
    dISBTNDOCMasterTraining = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDOCMasterTraining.blp',
    dISBTNDOTAdeptTraining = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDOTAdeptTraining.blp',
    dISBTNDOTMasterTraining = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDOTMasterTraining.blp',
    dISBTNDaggerOfEscape = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDaggerOfEscape.blp',
    dISBTNDalaranGuardTower = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDalaranGuardTower.blp',
    dISBTNDalaranMutant = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDalaranMutant.blp',
    dISBTNDalaranReject = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDalaranReject.blp',
    dISBTNDarkPortal = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDarkPortal.blp',
    dISBTNDarkRitual = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDarkRitual.blp',
    dISBTNDarkSummoning = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDarkSummoning.blp',
    dISBTNDarkTroll = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDarkTroll.blp',
    dISBTNDarkTrollShadowPriest = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDarkTrollShadowPriest.blp',
    dISBTNDarkTrollTrapper = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDarkTrollTrapper.blp',
    dISBTNDeathAndDecay = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDeathAndDecay.blp',
    dISBTNDeathCoil = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDeathCoil.blp',
    dISBTNDeathPact = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDeathPact.blp',
    dISBTNDeathTower = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDeathTower.blp',
    dISBTNDeepLordRevenant = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDeepLordRevenant.blp',
    dISBTNDefend = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDefend.blp',
    dISBTNDefendStop = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDefendStop.blp',
    dISBTNDemolish = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDemolish.blp',
    dISBTNDemolisher = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDemolisher.blp',
    dISBTNDemonGate = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDemonGate.blp',
    dISBTNDemoness = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDemoness.blp',
    dISBTNDenOfWonders = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDenOfWonders.blp',
    dISBTNDestroyer = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDestroyer.blp',
    dISBTNDevotion = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDevotion.blp',
    dISBTNDevour = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDevour.blp',
    dISBTNDevourMagic = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDevourMagic.blp',
    dISBTNDiabloCar = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDiabloCar.blp',
    dISBTNDireWolf = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDireWolf.blp',
    dISBTNDisenchant = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDisenchant.blp',
    dISBTNDispelMagic = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDispelMagic.blp',
    dISBTNDivineIntervention = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDivineIntervention.blp',
    dISBTNDivineShieldOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDivineShieldOff.blp',
    dISBTNDizzy = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDizzy.blp',
    dISBTNDoom = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDoom.blp',
    dISBTNDoomGuard = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDoomGuard.blp',
    dISBTNDragonHawk = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDragonHawk.blp',
    dISBTNDragonRoost = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDragonRoost.blp',
    dISBTNDrain = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDrain.blp',
    dISBTNDranai = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDranai.blp',
    dISBTNDranaiAkama = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDranaiAkama.blp',
    dISBTNDranaiChiefHut = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDranaiChiefHut.blp',
    dISBTNDranaiHut = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDranaiHut.blp',
    dISBTNDranaiMage = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDranaiMage.blp',
    dISBTNDruidOfTheClaw = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDruidOfTheClaw.blp',
    dISBTNDruidOfTheTalon = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDruidOfTheTalon.blp',
    dISBTNDrum = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDrum.blp',
    dISBTNDrunkenDodge = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDrunkenDodge.blp',
    dISBTNDryad = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDryad.blp',
    dISBTNDryadDispelMagic = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDryadDispelMagic.blp',
    dISBTNDryadDispelMagicOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDryadDispelMagicOff.blp',
    dISBTNDryadDispelMagicOn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDryadDispelMagicOn.blp',
    dISBTNDuneWorm = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDuneWorm.blp',
    dISBTNDust = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDust.blp',
    dISBTNDustOfAppearance = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDustOfAppearance.blp',
    dISBTNDwarfCar = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDwarfCar.blp',
    dISBTNDwarvenLongRifle = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNDwarvenLongRifle.blp',
    dISBTNEarthBrewMaster = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNEarthBrewMaster.blp',
    dISBTNEarthquake = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNEarthquake.blp',
    dISBTNEatTree = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNEatTree.blp',
    dISBTNElfVillager = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNElfVillager.blp',
    dISBTNElunesBlessing = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNElunesBlessing.blp',
    dISBTNElvenFarm = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNElvenFarm.blp',
    dISBTNElvenGuardTower = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNElvenGuardTower.blp',
    dISBTNEnchantedBears = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNEnchantedBears.blp',
    dISBTNEnchantedCrows = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNEnchantedCrows.blp',
    dISBTNEnchantedGemstone = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNEnchantedGemstone.blp',
    dISBTNEnergyTower = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNEnergyTower.blp',
    dISBTNEngineeringUpgrade = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNEngineeringUpgrade.blp',
    dISBTNEnsnare = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNEnsnare.blp',
    dISBTNEnt = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNEnt.blp',
    dISBTNEntangleMine = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNEntangleMine.blp',
    dISBTNEntanglingRoots = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNEntanglingRoots.blp',
    dISBTNEntrapmentWard = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNEntrapmentWard.blp',
    dISBTNEntrapmentWard1 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNEntrapmentWard.blp',
    dISBTNEnvenomedSpear = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNEnvenomedSpear.blp',
    dISBTNEredarWarlockPurple = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNEredarWarlockPurple.blp',
    dISBTNEtherealFormOn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNEtherealFormOn.blp',
    dISBTNEvasion = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNEvasion.blp',
    dISBTNEvilIllidan = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNEvilIllidan.blp',
    dISBTNExhumeCorpses = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNExhumeCorpses.blp',
    dISBTNExpandedView = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNExpandedView.blp',
    dISBTNFacelessOne = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFacelessOne.blp',
    dISBTNFaerieDragon = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFaerieDragon.blp',
    dISBTNFaerieFire = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFaerieFire.blp',
    dISBTNFaerieFireOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFaerieFireOff.blp',
    dISBTNFaerieFireOn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFaerieFireOn.blp',
    dISBTNFanOfKnives = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFanOfKnives.blp',
    dISBTNFarSight = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFarSight.blp',
    dISBTNFarm = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFarm.blp',
    dISBTNFeedBack = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFeedBack.blp',
    dISBTNFelBoar = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFelBoar.blp',
    dISBTNFelGuard = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFelGuard.blp',
    dISBTNFelGuardBlue = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFelGuardBlue.blp',
    dISBTNFelHound = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFelHound.blp',
    dISBTNFelStalker = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFelStalker.blp',
    dISBTNFemaleElfVillager = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFemaleElfVillager.blp',
    dISBTNFire = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFire.blp',
    dISBTNFireBolt = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFireBolt.blp',
    dISBTNFireBrewMaster = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFireBrewMaster.blp',
    dISBTNFireForTheCannon = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFireForTheCannon.blp',
    dISBTNFireRocks = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFireRocks.blp',
    dISBTNFlakCannons = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFlakCannons.blp',
    dISBTNFlameTower = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFlameTower.blp',
    dISBTNFlamingArrows = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFlamingArrows.blp',
    dISBTNFlare = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFlare.blp',
    dISBTNFleshGolem = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFleshGolem.blp',
    dISBTNFlute = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFlute.blp',
    dISBTNFlyingMachine = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFlyingMachine.blp',
    dISBTNFootman = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFootman.blp',
    dISBTNForceOfNature = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNForceOfNature.blp',
    dISBTNForestTroll = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNForestTroll.blp',
    dISBTNForestTrollShadowPriest = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNForestTrollShadowPriest.blp',
    dISBTNForestTrollTrapper = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNForestTrollTrapper.blp',
    dISBTNForestTrollTrapper1 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNForestTrollTrapper.blp',
    dISBTNForge = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNForge.blp',
    dISBTNForgottenOne = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNForgottenOne.blp',
    dISBTNFortress = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFortress.blp',
    dISBTNFountainOfLife = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFountainOfLife.blp',
    dISBTNFountainOfLifeBlood = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFountainOfLifeBlood.blp',
    dISBTNFountainOfLifeDefiled = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFountainOfLifeDefiled.blp',
    dISBTNFragmentationBombs = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFragmentationBombs.blp',
    dISBTNFreezingBreath = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFreezingBreath.blp',
    dISBTNFrost = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFrost.blp',
    dISBTNFrostArmor = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFrostArmor.blp',
    dISBTNFrostArmorOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFrostArmorOff.blp',
    dISBTNFrostArmorOff1 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFrostArmorOff.blp',
    dISBTNFrostArmorOn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFrostArmorOn.blp',
    dISBTNFrostArmorOn1 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFrostArmorOn.blp',
    dISBTNFrostBear = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFrostBear.blp',
    dISBTNFrostBolt = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFrostBolt.blp',
    dISBTNFrostMourne = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFrostMourne.blp',
    dISBTNFrostTower = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFrostTower.blp',
    dISBTNFrostWyrm = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFrostWyrm.blp',
    dISBTNFurbolg = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFurbolg.blp',
    dISBTNFurbolgElder = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFurbolgElder.blp',
    dISBTNFurbolgPanda = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFurbolgPanda.blp',
    dISBTNFurbolgShaman = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFurbolgShaman.blp',
    dISBTNFurbolgTracker = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFurbolgTracker.blp',
    dISBTNFurion = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNFurion.blp',
    dISBTNGLExchange = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGLExchange.blp',
    dISBTNGMExchange = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGMExchange.blp',
    dISBTNGargoyle = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGargoyle.blp',
    dISBTNGarithos = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGarithos.blp',
    dISBTNGatherGold = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGatherGold.blp',
    dISBTNGauntletsOfOgrePower = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGauntletsOfOgrePower.blp',
    dISBTNGem = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGem.blp',
    dISBTNGenericCreepBuilding = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGenericCreepBuilding.blp',
    dISBTNGenericHumanBuilding = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGenericHumanBuilding.blp',
    dISBTNGenericSpellImmunity = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGenericSpellImmunity.blp',
    dISBTNGhost = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGhost.blp',
    dISBTNGhostKey = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGhostKey.blp',
    dISBTNGhostMage = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGhostMage.blp',
    dISBTNGhostOfKelThuzad = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGhostOfKelThuzad.blp',
    dISBTNGhoul = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGhoul.blp',
    dISBTNGhoulFrenzy = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGhoulFrenzy.blp',
    dISBTNGlacier = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGlacier.blp',
    dISBTNGlaiveThrower = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGlaiveThrower.blp',
    dISBTNGlove = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGlove.blp',
    dISBTNGlyph = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGlyph.blp',
    dISBTNGlyph1 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGlyph.blp',
    dISBTNGnoll = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGnoll.blp',
    dISBTNGnollArcher = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGnollArcher.blp',
    dISBTNGnollCommandAura = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGnollCommandAura.blp',
    dISBTNGnollKing = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGnollKing.blp',
    dISBTNGnollWarden = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGnollWarden.blp',
    dISBTNGoblinLandMine = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGoblinLandMine.blp',
    dISBTNGoblinSapper = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGoblinSapper.blp',
    dISBTNGoblinShipyard = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGoblinShipyard.blp',
    dISBTNGoblinZeppelin = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGoblinZeppelin.blp',
    dISBTNGoldRing = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGoldRing.blp',
    dISBTNGoldmine = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGoldmine.blp',
    dISBTNGolemStormBolt = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGolemStormBolt.blp',
    dISBTNGolemThunderClap = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGolemThunderClap.blp',
    dISBTNGrabTree = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGrabTree.blp',
    dISBTNGraveYard = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGraveYard.blp',
    dISBTNGreatHall = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGreatHall.blp',
    dISBTNGreaterInvisibility = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGreaterInvisibility.blp',
    dISBTNGreaterInvisibility1 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGreaterInvisibility.blp',
    dISBTNGreaterInvulneralbility = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGreaterInvulneralbility.blp',
    dISBTNGreaterInvulneralbility1 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGreaterInvulneralbility.blp',
    dISBTNGreaterRejuvPotion = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGreaterRejuvPotion.blp',
    dISBTNGreaterRejuvScroll = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGreaterRejuvScroll.blp',
    dISBTNGreenDragon = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGreenDragon.blp',
    dISBTNGreenDragonRoost = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGreenDragonRoost.blp',
    dISBTNGreenDragonSpawn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGreenDragonSpawn.blp',
    dISBTNGreenHydra = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGreenHydra.blp',
    dISBTNGrimWard = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGrimWard.blp',
    dISBTNGrizzlyBear = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGrizzlyBear.blp',
    dISBTNGrunt = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGrunt.blp',
    dISBTNGryphonAviary = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGryphonAviary.blp',
    dISBTNGryphonRider = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGryphonRider.blp',
    dISBTNGuardTower = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGuardTower.blp',
    dISBTNGuardianWard = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGuardianWard.blp',
    dISBTNGuldan = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGuldan.blp',
    dISBTNGuldanSkull = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGuldanSkull.blp',
    dISBTNGyrocopter = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNGyrocopter.blp',
    dISBTNHallOfTheDead = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHallOfTheDead.blp',
    dISBTNHammer = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHammer.blp',
    dISBTNHardenedSkin = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHardenedSkin.blp',
    dISBTNHarpy = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHarpy.blp',
    dISBTNHarpyQueen = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHarpyQueen.blp',
    dISBTNHarpyWitch = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHarpyWitch.blp',
    dISBTNHauntedMine = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHauntedMine.blp',
    dISBTNHeadHunterBerserker = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHeadHunterBerserker.blp',
    dISBTNHeadhunter = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHeadhunter.blp',
    dISBTNHeal = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHeal.blp',
    dISBTNHealOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHealOff.blp',
    dISBTNHealOn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHealOn.blp',
    dISBTNHealingSalve = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHealingSalve.blp',
    dISBTNHealingSpray = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHealingSpray.blp',
    dISBTNHealingWard = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHealingWard.blp',
    dISBTNHealingWave = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHealingWave.blp',
    dISBTNHealthStone = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHealthStone.blp',
    dISBTNHeartOfAszune = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHeartOfAszune.blp',
    dISBTNHeartOfSearinox = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHeartOfSearinox.blp',
    dISBTNHellScream = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHellScream.blp',
    dISBTNHelmOfValor = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHelmOfValor.blp',
    dISBTNHelmutPurple = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHelmutPurple.blp',
    dISBTNHermitCrab = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHermitCrab.blp',
    dISBTNHeroAlchemist = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHeroAlchemist.blp',
    dISBTNHeroArchMage = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHeroArchMage.blp',
    dISBTNHeroAvatarOfFlame = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHeroAvatarOfFlame.blp',
    dISBTNHeroBlademaster = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHeroBlademaster.blp',
    dISBTNHeroBloodElfPrince = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHeroBloodElfPrince.blp',
    dISBTNHeroCryptLord = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHeroCryptLord.blp',
    dISBTNHeroDeathKnight = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHeroDeathKnight.blp',
    dISBTNHeroDemonHunter = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHeroDemonHunter.blp',
    dISBTNHeroDreadLord = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHeroDreadLord.blp',
    dISBTNHeroFarseer = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHeroFarseer.blp',
    dISBTNHeroLich = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHeroLich.blp',
    dISBTNHeroMoonPriestess = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHeroMoonPriestess.blp',
    dISBTNHeroMountainKing = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHeroMountainKing.blp',
    dISBTNHeroPaladin = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHeroPaladin.blp',
    dISBTNHeroTaurenChieftain = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHeroTaurenChieftain.blp',
    dISBTNHeroTinker = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHeroTinker.blp',
    dISBTNHeroWarden = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHeroWarden.blp',
    dISBTNHex = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHex.blp',
    dISBTNHighElvenArcher = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHighElvenArcher.blp',
    dISBTNHippogriff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHippogriff.blp',
    dISBTNHippogriffRider = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHippogriffRider.blp',
    dISBTNHire = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHire.blp',
    dISBTNHoldPosition = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHoldPosition.blp',
    dISBTNHolyBolt = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHolyBolt.blp',
    dISBTNHolyWater = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHolyWater.blp',
    dISBTNHoodOfCunning = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHoodOfCunning.blp',
    dISBTNHornOfCenarius = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHornOfCenarius.blp',
    dISBTNHornOfDoom = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHornOfDoom.blp',
    dISBTNHornOfFog = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHornOfFog.blp',
    dISBTNHowlOfTerror = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHowlOfTerror.blp',
    dISBTNHumanArcaneTower = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHumanArcaneTower.blp',
    dISBTNHumanArmorUpOne = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHumanArmorUpOne.blp',
    dISBTNHumanArmorUpThree = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHumanArmorUpThree.blp',
    dISBTNHumanArmorUpTwo = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHumanArmorUpTwo.blp',
    dISBTNHumanArtilleryUpOne = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHumanArtilleryUpOne.blp',
    dISBTNHumanBarracks = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHumanBarracks.blp',
    dISBTNHumanBattleShip = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHumanBattleShip.blp',
    dISBTNHumanBuild = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHumanBuild.blp',
    dISBTNHumanCaptureFlag = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHumanCaptureFlag.blp',
    dISBTNHumanDestroyer = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHumanDestroyer.blp',
    dISBTNHumanLumberMill = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHumanLumberMill.blp',
    dISBTNHumanLumberUpgrade1 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHumanLumberUpgrade1.blp',
    dISBTNHumanLumberUpgrade2 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHumanLumberUpgrade2.blp',
    dISBTNHumanMissileUpOne = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHumanMissileUpOne.blp',
    dISBTNHumanMissileUpThree = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHumanMissileUpThree.blp',
    dISBTNHumanMissileUpTwo = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHumanMissileUpTwo.blp',
    dISBTNHumanShipyard = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHumanShipyard.blp',
    dISBTNHumanTransport = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHumanTransport.blp',
    dISBTNHumanWatchTower = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHumanWatchTower.blp',
    dISBTNHuntersHall = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHuntersHall.blp',
    dISBTNHuntress = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHuntress.blp',
    dISBTNHydra = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHydra.blp',
    dISBTNHydraWarStomp = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHydraWarStomp.blp',
    dISBTNHydralisk = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNHydralisk.blp',
    dISBTNIceCrownObelisk = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNIceCrownObelisk.blp',
    dISBTNIceShard = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNIceShard.blp',
    dISBTNIceTroll = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNIceTroll.blp',
    dISBTNIceTrollBeserker = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNIceTrollBeserker.blp',
    dISBTNIceTrollBeserker1 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNIceTrollBeserker.blp',
    dISBTNIceTrollShadowPriest = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNIceTrollShadowPriest.blp',
    dISBTNIceTrollShaman = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNIceTrollShaman.blp',
    dISBTNIcyTreasureBox = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNIcyTreasureBox.blp',
    dISBTNIllidanPrisonWagon = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNIllidanPrisonWagon.blp',
    dISBTNImbuedMasonry = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNImbuedMasonry.blp',
    dISBTNImmolationOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNImmolationOff.blp',
    dISBTNImmolationOn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNImmolationOn.blp',
    dISBTNImpale = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNImpale.blp',
    dISBTNImpalingBolt = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNImpalingBolt.blp',
    dISBTNImprovedBows = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNImprovedBows.blp',
    dISBTNImprovedCreatureAttack = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNImprovedCreatureAttack.blp',
    dISBTNImprovedCreatureCarapace = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNImprovedCreatureCarapace.blp',
    dISBTNImprovedMining = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNImprovedMining.blp',
    dISBTNImprovedMoonArmor = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNImprovedMoonArmor.blp',
    dISBTNImprovedReinforcedHides = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNImprovedReinforcedHides.blp',
    dISBTNImprovedSpikedBarricades = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNImprovedSpikedBarricades.blp',
    dISBTNImprovedStrengthOfTheMoon = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNImprovedStrengthOfTheMoon.blp',
    dISBTNImprovedStrengthOfTheWild = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNImprovedStrengthOfTheWild.blp',
    dISBTNImprovedUnholyArmor = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNImprovedUnholyArmor.blp',
    dISBTNImprovedUnholyStrength = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNImprovedUnholyStrength.blp',
    dISBTNIncinerate = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNIncinerate.blp',
    dISBTNIncinerateOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNIncinerateOff.blp',
    dISBTNIncinerateOn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNIncinerateOn.blp',
    dISBTNInfernal = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNInfernal.blp',
    dISBTNInfernalCannon = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNInfernalCannon.blp',
    dISBTNInfernalFlameCannon = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNInfernalFlameCannon.blp',
    dISBTNInfernalStone = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNInfernalStone.blp',
    dISBTNInn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNInn.blp',
    dISBTNInnerFire = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNInnerFire.blp',
    dISBTNInnerFireOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNInnerFireOff.blp',
    dISBTNInnerFireOn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNInnerFireOn.blp',
    dISBTNInvisibility = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNInvisibility.blp',
    dISBTNInvulnerable = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNInvulnerable.blp',
    dISBTNJaina = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNJaina.blp',
    dISBTNJanggo = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNJanggo.blp',
    dISBTNJuggernaut = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNJuggernaut.blp',
    dISBTNJungleBeast = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNJungleBeast.blp',
    dISBTNJunkGolem = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNJunkGolem.blp',
    dISBTNKeep = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNKeep.blp',
    dISBTNKeeperGhostBlue = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNKeeperGhostBlue.blp',
    dISBTNKeeperOfTheGrove = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNKeeperOfTheGrove.blp',
    dISBTNKelThuzad = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNKelThuzad.blp',
    dISBTNKiljaedin = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNKiljaedin.blp',
    dISBTNKnight = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNKnight.blp',
    dISBTNKobold = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNKobold.blp',
    dISBTNKoboldGeomancer = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNKoboldGeomancer.blp',
    dISBTNKotoBeast = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNKotoBeast.blp',
    dISBTNLGExchange = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNLGExchange.blp',
    dISBTNLamp = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNLamp.blp',
    dISBTNLavaSpawn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNLavaSpawn.blp',
    dISBTNLeatherUpgradeOne = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNLeatherUpgradeOne.blp',
    dISBTNLeatherUpgradeThree = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNLeatherUpgradeThree.blp',
    dISBTNLeatherUpgradeTwo = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNLeatherUpgradeTwo.blp',
    dISBTNLesserClarityPotion = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNLesserClarityPotion.blp',
    dISBTNLesserInvisibility = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNLesserInvisibility.blp',
    dISBTNLesserInvisibility1 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNLesserInvisibility.blp',
    dISBTNLesserInvulneralbility = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNLesserInvulneralbility.blp',
    dISBTNLesserInvulneralbility1 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNLesserInvulneralbility.blp',
    dISBTNLesserRejuvPotion = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNLesserRejuvPotion.blp',
    dISBTNLesserRejuvScroll = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNLesserRejuvScroll.blp',
    dISBTNLichVersion2 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNLichVersion2.blp',
    dISBTNLifeDrain = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNLifeDrain.blp',
    dISBTNLightningShield = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNLightningShield.blp',
    dISBTNLionHorn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNLionHorn.blp',
    dISBTNLiquidFire = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNLiquidFire.blp',
    dISBTNLoad = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNLoad.blp',
    dISBTNLoadDwarf = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNLoadDwarf.blp',
    dISBTNLoadPeon = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNLoadPeon.blp',
    dISBTNLobstrokkBlue = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNLobstrokkBlue.blp',
    dISBTNLobstrokkGreen = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNLobstrokkGreen.blp',
    dISBTNLobstrokkRed = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNLobstrokkRed.blp',
    dISBTNLocustSwarm = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNLocustSwarm.blp',
    dISBTNMGExchange = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMGExchange.blp',
    dISBTNMageTower = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMageTower.blp',
    dISBTNMagicImmunity = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMagicImmunity.blp',
    dISBTNMagicLariet = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMagicLariet.blp',
    dISBTNMagicVault = 'ReplaceableTextures\\CommandButtons\\DISBTNMagicVault.blp',
    dISBTNMagicVault1 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMagicVault.blp',
    dISBTNMagicalSentry = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMagicalSentry.blp',
    dISBTNMagnataur = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMagnataur.blp',
    dISBTNMagnataurBrown = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMagnataurBrown.blp',
    dISBTNMammoth = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMammoth.blp',
    dISBTNManaBurn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNManaBurn.blp',
    dISBTNManaDrain = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNManaDrain.blp',
    dISBTNManaFlare = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNManaFlare.blp',
    dISBTNManaFlareOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNManaFlareOff.blp',
    dISBTNManaRecharge = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNManaRecharge.blp',
    dISBTNManaRechargeOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNManaRechargeOff.blp',
    dISBTNManaRechargeOn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNManaRechargeOn.blp',
    dISBTNManaShield = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNManaShield.blp',
    dISBTNManaStone = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNManaStone.blp',
    dISBTNMannoroth = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMannoroth.blp',
    dISBTNMantle = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMantle.blp',
    dISBTNMantleOfIntelligence = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMantleOfIntelligence.blp',
    dISBTNManual = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNManual.blp',
    dISBTNManual2 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNManual2.blp',
    dISBTNManual3 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNManual3.blp',
    dISBTNMarine = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMarine.blp',
    dISBTNMarkOfFire = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMarkOfFire.blp',
    dISBTNMarketPlace = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMarketPlace.blp',
    dISBTNMarksmanship = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMarksmanship.blp',
    dISBTNMaskOfDeath = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMaskOfDeath.blp',
    dISBTNMassTeleport = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMassTeleport.blp',
    dISBTNMeatWagon = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMeatWagon.blp',
    dISBTNMechanicalCritter = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMechanicalCritter.blp',
    dISBTNMedalionOfCourage = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMedalionOfCourage.blp',
    dISBTNMedivh = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMedivh.blp',
    dISBTNMercenaryCamp = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMercenaryCamp.blp',
    dISBTNMerchant = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMerchant.blp',
    dISBTNMetamorphosis = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMetamorphosis.blp',
    dISBTNMilitia = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMilitia.blp',
    dISBTNMinorRejuvPotion = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMinorRejuvPotion.blp',
    dISBTNMirrorImage = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMirrorImage.blp',
    dISBTNMonsoon = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMonsoon.blp',
    dISBTNMonsterLure = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMonsterLure.blp',
    dISBTNMoonArmor = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMoonArmor.blp',
    dISBTNMoonKey = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMoonKey.blp',
    dISBTNMoonStone = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMoonStone.blp',
    dISBTNMoonWell = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMoonWell.blp',
    dISBTNMortarTeam = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMortarTeam.blp',
    dISBTNMountainGiant = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMountainGiant.blp',
    dISBTNMove = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMove.blp',
    dISBTNMurgalSlave = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMurgalSlave.blp',
    dISBTNMurgulBloodGill = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMurgulBloodGill.blp',
    dISBTNMurgulShadowCaster = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMurgulShadowCaster.blp',
    dISBTNMurgulTideWarrior = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMurgulTideWarrior.blp',
    dISBTNMurloc = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMurloc.blp',
    dISBTNMurlocFleshEater = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMurlocFleshEater.blp',
    dISBTNMurlocMutant = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMurlocMutant.blp',
    dISBTNMurlocNightCrawler = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNMurlocNightCrawler.blp',
    dISBTNNagaArmorUp1 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNagaArmorUp1.blp',
    dISBTNNagaArmorUp2 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNagaArmorUp2.blp',
    dISBTNNagaArmorUp3 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNagaArmorUp3.blp',
    dISBTNNagaBurrow = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNagaBurrow.blp',
    dISBTNNagaMyrmidon = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNagaMyrmidon.blp',
    dISBTNNagaMyrmidonRoyalGuard = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNagaMyrmidonRoyalGuard.blp',
    dISBTNNagaSeaWitch = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNagaSeaWitch.blp',
    dISBTNNagaSummoner = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNagaSummoner.blp',
    dISBTNNagaUnBurrow = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNagaUnBurrow.blp',
    dISBTNNagaWeaponUp1 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNagaWeaponUp1.blp',
    dISBTNNagaWeaponUp2 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNagaWeaponUp2.blp',
    dISBTNNagaWeaponUp3 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNagaWeaponUp3.blp',
    dISBTNNatureTouchGrow = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNatureTouchGrow.blp',
    dISBTNNaturesBlessing = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNaturesBlessing.blp',
    dISBTNNecklace = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNecklace.blp',
    dISBTNNecromancer = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNecromancer.blp',
    dISBTNNecromancerAdept = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNecromancerAdept.blp',
    dISBTNNecromancerMaster = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNecromancerMaster.blp',
    dISBTNNecropolis = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNecropolis.blp',
    dISBTNNerubian = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNerubian.blp',
    dISBTNNerubianQueen = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNerubianQueen.blp',
    dISBTNNerubianZiggurat = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNerubianZiggurat.blp',
    dISBTNNetherDragon = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNetherDragon.blp',
    dISBTNNeutralManaShield = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNeutralManaShield.blp',
    dISBTNNightElfBattleCruiser = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNightElfBattleCruiser.blp',
    dISBTNNightElfBuild = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNightElfBuild.blp',
    dISBTNNightElfCaptureFlag = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNightElfCaptureFlag.blp',
    dISBTNNightElfDestroyer = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNightElfDestroyer.blp',
    dISBTNNightElfFishingBoat = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNightElfFishingBoat.blp',
    dISBTNNightElfFishingVillage = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNightElfFishingVillage.blp',
    dISBTNNightElfRunner = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNightElfRunner.blp',
    dISBTNNightElfShipyard = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNightElfShipyard.blp',
    dISBTNNightElfTransport = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNNightElfTransport.blp',
    dISBTNObsidianStatue = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNObsidianStatue.blp',
    dISBTNOgre = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNOgre.blp',
    dISBTNOgreLord = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNOgreLord.blp',
    dISBTNOgreMagi = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNOgreMagi.blp',
    dISBTNOneHeadedOgre = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNOneHeadedOgre.blp',
    dISBTNOrb = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNOrb.blp',
    dISBTNOrbOfCorruption = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNOrbOfCorruption.blp',
    dISBTNOrbOfDarkness = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNOrbOfDarkness.blp',
    dISBTNOrbOfDeath = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNOrbOfDeath.blp',
    dISBTNOrbOfDeathOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNOrbOfDeathOff.blp',
    dISBTNOrbOfDeathOn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNOrbOfDeathOn.blp',
    dISBTNOrbOfFire = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNOrbOfFire.blp',
    dISBTNOrbOfFrost = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNOrbOfFrost.blp',
    dISBTNOrbOfLightning = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNOrbOfLightning.blp',
    dISBTNOrbOfVenom = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNOrbOfVenom.blp',
    dISBTNOrbofSlowness = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNOrbofSlowness.blp',
    dISBTNOrcBattleStandard = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNOrcBattleStandard.blp',
    dISBTNOrcCaptureFlag = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNOrcCaptureFlag.blp',
    dISBTNOrcCar = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNOrcCar.blp',
    dISBTNOrcDestroyer = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNOrcDestroyer.blp',
    dISBTNOrcMeleeUpOne = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNOrcMeleeUpOne.blp',
    dISBTNOrcMeleeUpThree = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNOrcMeleeUpThree.blp',
    dISBTNOrcMeleeUpTwo = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNOrcMeleeUpTwo.blp',
    dISBTNOrcRallyPoint = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNOrcRallyPoint.blp',
    dISBTNOrcTower = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNOrcTower.blp',
    dISBTNOrcWarlock = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNOrcWarlock.blp',
    dISBTNOrcWarlockRed = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNOrcWarlockRed.blp',
    dISBTNOrcishTransport = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNOrcishTransport.blp',
    dISBTNOtherBarrel = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNOtherBarrel.blp',
    dISBTNOwlBear = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNOwlBear.blp',
    dISBTNPackBeast = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPackBeast.blp',
    dISBTNPandaTaunt = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPandaTaunt.blp',
    dISBTNPandarenBrewmaster = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPandarenBrewmaster.blp',
    dISBTNParasite = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNParasite.blp',
    dISBTNParasiteOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNParasiteOff.blp',
    dISBTNParasiteOn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNParasiteOn.blp',
    dISBTNPatrol = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPatrol.blp',
    dISBTNPeasant = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPeasant.blp',
    dISBTNPebble = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPebble.blp',
    dISBTNPendantOfEnergy = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPendantOfEnergy.blp',
    dISBTNPendantOfMana = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPendantOfMana.blp',
    dISBTNPenguin = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPenguin.blp',
    dISBTNPeon = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPeon.blp',
    dISBTNPeriapt = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPeriapt.blp',
    dISBTNPeriapt1 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPeriapt1.blp',
    dISBTNPhaseShift = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPhaseShift.blp',
    dISBTNPhaseShiftOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPhaseShiftOff.blp',
    dISBTNPhaseShiftOn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPhaseShiftOn.blp',
    dISBTNPhilosophersStone = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPhilosophersStone.blp',
    dISBTNPhoenixEgg = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPhoenixEgg.blp',
    dISBTNPickUpItem = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPickUpItem.blp',
    dISBTNPig = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPig.blp',
    dISBTNPigFarm = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPigFarm.blp',
    dISBTNPillage = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPillage.blp',
    dISBTNPipeOfInsight = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPipeOfInsight.blp',
    dISBTNPitLord = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPitLord.blp',
    dISBTNPlagueCloud = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPlagueCloud.blp',
    dISBTNPocketFactory = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPocketFactory.blp',
    dISBTNPoisonArrow = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPoisonArrow.blp',
    dISBTNPoisonSting = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPoisonSting.blp',
    dISBTNPolarFurbolg = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPolarFurbolg.blp',
    dISBTNPolarFurbolgElder = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPolarFurbolgElder.blp',
    dISBTNPolarFurbolgShaman = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPolarFurbolgShaman.blp',
    dISBTNPolarFurbolgTracker = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPolarFurbolgTracker.blp',
    dISBTNPolymorph = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPolymorph.blp',
    dISBTNPortal = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPortal.blp',
    dISBTNPossession = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPossession.blp',
    dISBTNPotionBlue = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPotionBlue.blp',
    dISBTNPotionBlueBig = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPotionBlueBig.blp',
    dISBTNPotionBlueSmall = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPotionBlueSmall.blp',
    dISBTNPotionGreen = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPotionGreen.blp',
    dISBTNPotionGreenSmall = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPotionGreenSmall.blp',
    dISBTNPotionOfClarity = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPotionOfClarity.blp',
    dISBTNPotionOfDivinity = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPotionOfDivinity.blp',
    dISBTNPotionOfOmniscience = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPotionOfOmniscience.blp',
    dISBTNPotionOfRestoration = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPotionOfRestoration.blp',
    dISBTNPotionOfRestoration1 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPotionOfRestoration.blp',
    dISBTNPotionOfVampirism = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPotionOfVampirism.blp',
    dISBTNPotionPurple = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPotionPurple.blp',
    dISBTNPotionRed = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPotionRed.blp',
    dISBTNPowerGenerator = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPowerGenerator.blp',
    dISBTNPriest = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPriest.blp',
    dISBTNPriest1 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPriest.blp',
    dISBTNPriestAdept = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPriestAdept.blp',
    dISBTNPriestMaster = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPriestMaster.blp',
    dISBTNPriestessOfTheMoon = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPriestessOfTheMoon.blp',
    dISBTNProudMoore = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNProudMoore.blp',
    dISBTNPurge = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPurge.blp',
    dISBTNPurpleFelhound = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNPurpleFelhound.blp',
    dISBTNQuillBeast = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNQuillBeast.blp',
    dISBTNQuillBeastGod = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNQuillBeastGod.blp',
    dISBTNQuillSpray = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNQuillSpray.blp',
    dISBTNQuillSprayOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNQuillSprayOff.blp',
    dISBTNROBOGOBLIN = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNROBOGOBLIN.blp',
    dISBTNROBOGOBLINOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNROBOGOBLINOff.blp',
    dISBTNROBOGOBLINOn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNROBOGOBLINOn.blp',
    dISBTNRacoon = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRacoon.blp',
    dISBTNRaider = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRaider.blp',
    dISBTNRaiseDead = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRaiseDead.blp',
    dISBTNRaiseDeadOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRaiseDeadOff.blp',
    dISBTNRaiseDeadOn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRaiseDeadOn.blp',
    dISBTNRallyPoint = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRallyPoint.blp',
    dISBTNRallyPointNightElf = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRallyPointNightElf.blp',
    dISBTNRallyPointUndead = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRallyPointUndead.blp',
    dISBTNRavenForm = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRavenForm.blp',
    dISBTNRazorback = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRazorback.blp',
    dISBTNRazormaneChief = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRazormaneChief.blp',
    dISBTNRedDragon = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRedDragon.blp',
    dISBTNRedDragonDevour = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRedDragonDevour.blp',
    dISBTNRegenerate = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRegenerate.blp',
    dISBTNRegenerationAura = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRegenerationAura.blp',
    dISBTNReincarnation = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNReincarnation.blp',
    dISBTNReinforcedBurrows = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNReinforcedBurrows.blp',
    dISBTNReinforcedHides = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNReinforcedHides.blp',
    dISBTNRejuvPotion = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRejuvPotion.blp',
    dISBTNRejuvenation = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRejuvenation.blp',
    dISBTNRejuvenationPotion = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRejuvenationPotion.blp',
    dISBTNRepair = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRepair.blp',
    dISBTNRepairOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRepairOff.blp',
    dISBTNRepairOn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRepairOn.blp',
    dISBTNReplay_Loop = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNReplay-Loop.blp',
    dISBTNReplay_Pause = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNReplay-Pause.blp',
    dISBTNReplay_Play = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNReplay-Play.blp',
    dISBTNReplay_SpeedDown = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNReplay-SpeedDown.blp',
    dISBTNReplay_SpeedUp = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNReplay-SpeedUp.blp',
    dISBTNReplenishHealth = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNReplenishHealth.blp',
    dISBTNReplenishHealthOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNReplenishHealthOff.blp',
    dISBTNReplenishHealthOn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNReplenishHealthOn.blp',
    dISBTNReplenishMana = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNReplenishMana.blp',
    dISBTNReplenishManaOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNReplenishManaOff.blp',
    dISBTNReplenishManaOn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNReplenishManaOn.blp',
    dISBTNResStone = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNResStone.blp',
    dISBTNResistMagic = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNResistMagic.blp',
    dISBTNResistantSkin = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNResistantSkin.blp',
    dISBTNResurrection = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNResurrection.blp',
    dISBTNReturnGoods = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNReturnGoods.blp',
    dISBTNReveal = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNReveal.blp',
    dISBTNRevenant = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRevenant.blp',
    dISBTNRiderlessHorse = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRiderlessHorse.blp',
    dISBTNRiderlessKodo = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRiderlessKodo.blp',
    dISBTNRifleman = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRifleman.blp',
    dISBTNRingGreen = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRingGreen.blp',
    dISBTNRingJadeFalcon = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRingJadeFalcon.blp',
    dISBTNRingLionHead = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRingLionHead.blp',
    dISBTNRingPurple = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRingPurple.blp',
    dISBTNRingSkull = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRingSkull.blp',
    dISBTNRingVioletSpider = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRingVioletSpider.blp',
    dISBTNRobeOfTheMagi = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRobeOfTheMagi.blp',
    dISBTNRockGolem = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRockGolem.blp',
    dISBTNRockTower = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRockTower.blp',
    dISBTNRodOfNecromancy = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRodOfNecromancy.blp',
    dISBTNRoot = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRoot.blp',
    dISBTNRune = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRune.blp',
    dISBTNRunedBracers = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNRunedBracers.blp',
    dISBTNSacrifice = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSacrifice.blp',
    dISBTNSacrificialPit = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSacrificialPit.blp',
    dISBTNSacrificialSkull = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSacrificialSkull.blp',
    dISBTNSasquatch = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSasquatch.blp',
    dISBTNSasquatchShaman = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSasquatchShaman.blp',
    dISBTNSatyr = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSatyr.blp',
    dISBTNSatyrTrickster = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSatyrTrickster.blp',
    dISBTNScatterRockets = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNScatterRockets.blp',
    dISBTNScepterOfMastery = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNScepterOfMastery.blp',
    dISBTNScourgeBuild = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNScourgeBuild.blp',
    dISBTNScout = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNScout.blp',
    dISBTNScroll = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNScroll.blp',
    dISBTNScrollOfHaste = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNScrollOfHaste.blp',
    dISBTNScrollOfHealing = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNScrollOfHealing.blp',
    dISBTNScrollOfProtection = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNScrollOfProtection.blp',
    dISBTNScrollOfRegeneration = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNScrollOfRegeneration.blp',
    dISBTNScrollOfRegenerationGreen = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNScrollOfRegenerationGreen.blp',
    dISBTNScrollOfTownPortal = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNScrollOfTownPortal.blp',
    dISBTNScrollUber = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNScrollUber.blp',
    dISBTNSeaElemental = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSeaElemental.blp',
    dISBTNSeaGiant = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSeaGiant.blp',
    dISBTNSeaGiantGreen = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSeaGiantGreen.blp',
    dISBTNSeaGiantPulverize = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSeaGiantPulverize.blp',
    dISBTNSeaGiantWarStomp = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSeaGiantWarStomp.blp',
    dISBTNSeaTurtleGreen = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSeaTurtleGreen.blp',
    dISBTNSeaTurtleRed = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSeaTurtleRed.blp',
    dISBTNSeaWitch = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSeaWitch.blp',
    dISBTNSeal = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSeal.blp',
    dISBTNSearingArrows = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSearingArrows.blp',
    dISBTNSearingArrowsOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSearingArrowsOff.blp',
    dISBTNSearingArrowsOn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSearingArrowsOn.blp',
    dISBTNSeigeEngine = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSeigeEngine.blp',
    dISBTNSeigeEngineWithMissles = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSeigeEngineWithMissles.blp',
    dISBTNSelectHeroOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSelectHeroOff.blp',
    dISBTNSelectHeroOn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSelectHeroOn.blp',
    dISBTNSelectUnit = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSelectUnit.blp',
    dISBTNSelectUnit1 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSelectUnit.blp',
    dISBTNSelfDestruct = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSelfDestruct.blp',
    dISBTNSelfDestructOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSelfDestructOff.blp',
    dISBTNSelfDestructOn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSelfDestructOn.blp',
    dISBTNSell = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSell.blp',
    dISBTNSentinel = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSentinel.blp',
    dISBTNSentryWard = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSentryWard.blp',
    dISBTNSerpentWard = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSerpentWard.blp',
    dISBTNShade = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNShade.blp',
    dISBTNShadowHunter = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNShadowHunter.blp',
    dISBTNShadowMeld = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNShadowMeld.blp',
    dISBTNShadowPact = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNShadowPact.blp',
    dISBTNShadowPact1 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNShadowPact.blp',
    dISBTNShadowStrike = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNShadowStrike.blp',
    dISBTNShaman = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNShaman.blp',
    dISBTNShamanAdept = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNShamanAdept.blp',
    dISBTNShamanMaster = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNShamanMaster.blp',
    dISBTNShandris = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNShandris.blp',
    dISBTNSheep = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSheep.blp',
    dISBTNShimmerWeed = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNShimmerWeed.blp',
    dISBTNShip = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNShip.blp',
    dISBTNShockWave = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNShockWave.blp',
    dISBTNShoveler = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNShoveler.blp',
    dISBTNShrineOfAszhara = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNShrineOfAszhara.blp',
    dISBTNSilence = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSilence.blp',
    dISBTNSirenAdept = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSirenAdept.blp',
    dISBTNSirenMaster = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSirenMaster.blp',
    dISBTNSkeletalLongevity = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSkeletalLongevity.blp',
    dISBTNSkeletalOrc = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSkeletalOrc.blp',
    dISBTNSkeletalOrcChampion = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSkeletalOrcChampion.blp',
    dISBTNSkeletalOrcGrunt = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSkeletalOrcGrunt.blp',
    dISBTNSkeletonArcher = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSkeletonArcher.blp',
    dISBTNSkeletonMage = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSkeletonMage.blp',
    dISBTNSkeletonWarrior = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSkeletonWarrior.blp',
    dISBTNSkillz = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSkillz.blp',
    dISBTNSkink = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSkink.blp',
    dISBTNSlaughterHouse = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSlaughterHouse.blp',
    dISBTNSleep = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSleep.blp',
    dISBTNSlippersOfAgility = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSlippersOfAgility.blp',
    dISBTNSlow = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSlow.blp',
    dISBTNSlowOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSlowOff.blp',
    dISBTNSlowOn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSlowOn.blp',
    dISBTNSlowPoison = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSlowPoison.blp',
    dISBTNSludgeCreature = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSludgeCreature.blp',
    dISBTNSmash = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSmash.blp',
    dISBTNSnapDragon = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSnapDragon.blp',
    dISBTNSnazzyPotion = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSnazzyPotion.blp',
    dISBTNSnazzyScroll = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSnazzyScroll.blp',
    dISBTNSnazzyScrollGreen = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSnazzyScrollGreen.blp',
    dISBTNSnazzyScrollPurple = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSnazzyScrollPurple.blp',
    dISBTNSnowOwl = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSnowOwl.blp',
    dISBTNSobiMask = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSobiMask.blp',
    dISBTNSorceress = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSorceress.blp',
    dISBTNSorceressAdept = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSorceressAdept.blp',
    dISBTNSorceressMaster = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSorceressMaster.blp',
    dISBTNSoulBurn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSoulBurn.blp',
    dISBTNSoulGem = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSoulGem.blp',
    dISBTNSpawningGrounds = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpawningGrounds.blp',
    dISBTNSpellBookBLS = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpellBookBLS.blp',
    dISBTNSpellBreaker = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpellBreaker.blp',
    dISBTNSpellBreakerMagicDefend = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpellBreakerMagicDefend.blp',
    dISBTNSpellBreakerMagicUnDefend = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpellBreakerMagicUnDefend.blp',
    dISBTNSpellShieldAmulet = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpellShieldAmulet.blp',
    dISBTNSpellSteal = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpellSteal.blp',
    dISBTNSpellStealOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpellStealOff.blp',
    dISBTNSpellStealOn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpellStealOn.blp',
    dISBTNSpider = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpider.blp',
    dISBTNSpiderBlack = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpiderBlack.blp',
    dISBTNSpiderBlue = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpiderBlue.blp',
    dISBTNSpiderCrab = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpiderCrab.blp',
    dISBTNSpiderGreen = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpiderGreen.blp',
    dISBTNSpiderSilkBroach = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpiderSilkBroach.blp',
    dISBTNSpiderling = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpiderling.blp',
    dISBTNSpikedBarricades = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpikedBarricades.blp',
    dISBTNSpinyCrab = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpinyCrab.blp',
    dISBTNSpiritLink = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpiritLink.blp',
    dISBTNSpiritLodge = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpiritLodge.blp',
    dISBTNSpiritOfVengeance = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpiritOfVengeance.blp',
    dISBTNSpiritWalker = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpiritWalker.blp',
    dISBTNSpiritWalkerAdeptTraining = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpiritWalkerAdeptTraining.blp',
    dISBTNSpiritWalkerMasterTraining = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpiritWalkerMasterTraining.blp',
    dISBTNSpiritWolf = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpiritWolf.blp',
    dISBTNSpiritWyvern = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpiritWyvern.blp',
    dISBTNSpy = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSpy.blp',
    dISBTNStaffOfNegation = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNStaffOfNegation.blp',
    dISBTNStaffOfPreservation = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNStaffOfPreservation.blp',
    dISBTNStaffOfPurification = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNStaffOfPurification.blp',
    dISBTNStaffOfSanctuary = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNStaffOfSanctuary.blp',
    dISBTNStaffOfSilence = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNStaffOfSilence.blp',
    dISBTNStaffOfTeleportation = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNStaffOfTeleportation.blp',
    dISBTNStag = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNStag.blp',
    dISBTNStampede = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNStampede.blp',
    dISBTNStarFall = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNStarFall.blp',
    dISBTNStarWand = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNStarWand.blp',
    dISBTNStasisTrap = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNStasisTrap.blp',
    dISBTNStatUp = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNStatUp.blp',
    dISBTNSteamTank = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSteamTank.blp',
    dISBTNSteelArmor = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSteelArmor.blp',
    dISBTNSteelMelee = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSteelMelee.blp',
    dISBTNSteelRanged = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSteelRanged.blp',
    dISBTNStone = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNStone.blp',
    dISBTNStoneArchitecture = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNStoneArchitecture.blp',
    dISBTNStoneForm = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNStoneForm.blp',
    dISBTNStop = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNStop.blp',
    dISBTNStormBolt = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNStormBolt.blp',
    dISBTNStormBrewMaster = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNStormBrewMaster.blp',
    dISBTNStormEarthFire = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNStormEarth&Fire.blp',
    dISBTNStormHammer = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNStormHammer.blp',
    dISBTNStrengthOfTheMoon = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNStrengthOfTheMoon.blp',
    dISBTNStrengthOfTheWild = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNStrengthOfTheWild.blp',
    dISBTNStrongDrink = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNStrongDrink.blp',
    dISBTNStrongHold = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNStrongHold.blp',
    dISBTNStun = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNStun.blp',
    dISBTNSummonWaterElemental = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSummonWaterElemental.blp',
    dISBTNSunKey = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSunKey.blp',
    dISBTNSupportBeam = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSupportBeam.blp',
    dISBTNSylvanusWindRunner = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNSylvanusWindRunner.blp',
    dISBTNTalisman = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTalisman.blp',
    dISBTNTameHippogriff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTameHippogriff.blp',
    dISBTNTaunt = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTaunt.blp',
    dISBTNTauren = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTauren.blp',
    dISBTNTaurenHut = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTaurenHut.blp',
    dISBTNTaurenTotem = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTaurenTotem.blp',
    dISBTNTavern = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTavern.blp',
    dISBTNTelescope = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTelescope.blp',
    dISBTNTemp = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTemp.blp',
    dISBTNTempleOfTheDamned = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTempleOfTheDamned.blp',
    dISBTNTempleOfTides = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTempleOfTides.blp',
    dISBTNTentacle = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTentacle.blp',
    dISBTNTheBlackArrow = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTheBlackArrow.blp',
    dISBTNTheBlackArrowOnOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTheBlackArrowOnOff.blp',
    dISBTNTheCaptain = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTheCaptain.blp',
    dISBTNThickFur = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNThickFur.blp',
    dISBTNThievesGuild = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNThievesGuild.blp',
    dISBTNThoriumArmor = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNThoriumArmor.blp',
    dISBTNThoriumMelee = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNThoriumMelee.blp',
    dISBTNThoriumRanged = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNThoriumRanged.blp',
    dISBTNThornShield = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNThornShield.blp',
    dISBTNThorns = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNThorns.blp',
    dISBTNThornyShieldOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNThornyShieldOff.blp',
    dISBTNThrall = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNThrall.blp',
    dISBTNThunderClap = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNThunderClap.blp',
    dISBTNThunderLizard = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNThunderLizard.blp',
    dISBTNThunderLizardEgg = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNThunderLizardEgg.blp',
    dISBTNThunderLizardSalamander = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNThunderLizardSalamander.blp',
    dISBTNThunderLizardVizier = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNThunderLizardVizier.blp',
    dISBTNTichondrius = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTichondrius.blp',
    dISBTNTidalGuardian = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTidalGuardian.blp',
    dISBTNTimberWolf = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTimberWolf.blp',
    dISBTNTinyCastle = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTinyCastle.blp',
    dISBTNTombOfRelics = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTombOfRelics.blp',
    dISBTNTome = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTome.blp',
    dISBTNTomeBrown = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTomeBrown.blp',
    dISBTNTomeOfRetraining = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTomeOfRetraining.blp',
    dISBTNTomeRed = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTomeRed.blp',
    dISBTNTornado = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTornado.blp',
    dISBTNTower = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTower.blp',
    dISBTNTownHall = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTownHall.blp',
    dISBTNTranquility = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTranquility.blp',
    dISBTNTransmute = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTransmute.blp',
    dISBTNTransport = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTransport.blp',
    dISBTNTreant = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTreant.blp',
    dISBTNTreeOfAges = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTreeOfAges.blp',
    dISBTNTreeOfEternity = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTreeOfEternity.blp',
    dISBTNTreeOfLife = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTreeOfLife.blp',
    dISBTNTrollBatRider = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTrollBatRider.blp',
    dISBTNTrollBurrow = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTrollBurrow.blp',
    dISBTNTrueShot = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTrueShot.blp',
    dISBTNTuskaarBlack = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTuskaarBlack.blp',
    dISBTNTuskaarBrown = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTuskaarBrown.blp',
    dISBTNTuskaarGold = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTuskaarGold.blp',
    dISBTNTuskaarNomad = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNTuskaarNomad.blp',
    dISBTNUltravision = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNUltravision.blp',
    dISBTNUnLoad = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNUnLoad.blp',
    dISBTNUnbroken = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNUnbroken.blp',
    dISBTNUndeadAirBarge = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNUndeadAirBarge.blp',
    dISBTNUndeadBattleShip = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNUndeadBattleShip.blp',
    dISBTNUndeadCaptureFlag = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNUndeadCaptureFlag.blp',
    dISBTNUndeadCar = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNUndeadCar.blp',
    dISBTNUndeadDestroyer = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNUndeadDestroyer.blp',
    dISBTNUndeadLoad = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNUndeadLoad.blp',
    dISBTNUndeadLoadOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNUndeadLoadOff.blp',
    dISBTNUndeadLoadOn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNUndeadLoadOn.blp',
    dISBTNUndeadShipyard = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNUndeadShipyard.blp',
    dISBTNUndeadShrine = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNUndeadShrine.blp',
    dISBTNUndeadTransport = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNUndeadTransport.blp',
    dISBTNUndeadUnLoad = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNUndeadUnLoad.blp',
    dISBTNUnholyArmor = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNUnholyArmor.blp',
    dISBTNUnholyAura = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNUnholyAura.blp',
    dISBTNUnholyFrenzy = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNUnholyFrenzy.blp',
    dISBTNUnholyStrength = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNUnholyStrength.blp',
    dISBTNUnloadDwarf = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNUnloadDwarf.blp',
    dISBTNUnloadPeon = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNUnloadPeon.blp',
    dISBTNUnstableConcoction = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNUnstableConcoction.blp',
    dISBTNUnsummonBuilding = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNUnsummonBuilding.blp',
    dISBTNUpgradeMoonGlaive = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNUpgradeMoonGlaive.blp',
    dISBTNUpgradeRegenerationAura = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNUpgradeRegenerationAura.blp',
    dISBTNUproot = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNUproot.blp',
    dISBTNUrnOfKelThuzad = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNUrnOfKelThuzad.blp',
    dISBTNUsedSoulGem = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNUsedSoulGem.blp',
    dISBTNVampiricAura = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNVampiricAura.blp',
    dISBTNVengeanceIncarnate = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNVengeanceIncarnate.blp',
    dISBTNVialEmpty = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNVialEmpty.blp',
    dISBTNVialFull = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNVialFull.blp',
    dISBTNVillagerKid = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNVillagerKid.blp',
    dISBTNVillagerKid2 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNVillagerKid2.blp',
    dISBTNVillagerMan = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNVillagerMan.blp',
    dISBTNVillagerMan1 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNVillagerMan1.blp',
    dISBTNVillagerWoman = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNVillagerWoman.blp',
    dISBTNVoidWalker = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNVoidWalker.blp',
    dISBTNVolcano = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNVolcano.blp',
    dISBTNVoodooLounge = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNVoodooLounge.blp',
    dISBTNVorpalBlades = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNVorpalBlades.blp',
    dISBTNVulture = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNVulture.blp',
    dISBTNWallOfFire = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWallOfFire.blp',
    dISBTNWand = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWand.blp',
    dISBTNWandOfCyclone = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWandOfCyclone.blp',
    dISBTNWandOfManaSteal = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWandOfManaSteal.blp',
    dISBTNWandOfNeutralization = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWandOfNeutralization.blp',
    dISBTNWandOfShadowSight = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWandOfShadowSight.blp',
    dISBTNWandSkull = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWandSkull.blp',
    dISBTNWarEagle = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWarEagle.blp',
    dISBTNWarStomp = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWarStomp.blp',
    dISBTNWarden2 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWarden2.blp',
    dISBTNWaygate = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWaygate.blp',
    dISBTNWeb = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWeb.blp',
    dISBTNWebOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWebOff.blp',
    dISBTNWebOn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWebOn.blp',
    dISBTNWellSpring = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWellSpring.blp',
    dISBTNWendigo = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWendigo.blp',
    dISBTNWhirlwind = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWhirlwind.blp',
    dISBTNWindSerpent = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWindSerpent.blp',
    dISBTNWindWalkOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWindWalkOff.blp',
    dISBTNWindWalkOn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWindWalkOn.blp',
    dISBTNWirtsLeg = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWirtsLeg.blp',
    dISBTNWirtsOtherLeg = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWirtsOtherLeg.blp',
    dISBTNWirtsOtherLeg1 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWirtsOtherLeg.blp',
    dISBTNWisp = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWisp.blp',
    dISBTNWispHealOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWispHealOff.blp',
    dISBTNWispHealOn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWispHealOn.blp',
    dISBTNWispSplode = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWispSplode.blp',
    dISBTNWitchDoctor = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWitchDoctor.blp',
    dISBTNWitchDoctorAdept = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWitchDoctorAdept.blp',
    dISBTNWitchDoctorMaster = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWitchDoctorMaster.blp',
    dISBTNWolf = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWolf.blp',
    dISBTNWorkshop = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWorkshop.blp',
    dISBTNWyvern = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWyvern.blp',
    dISBTNWyvernRider = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNWyvernRider.blp',
    dISBTNYouDirtyRat = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNYouDirtyRat!.blp',
    dISBTNZergling = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNZergling.blp',
    dISBTNZiggurat = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNZiggurat.blp',
    dISBTNZigguratUpgrade = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNZigguratUpgrade.blp',
    dISBTNZombie = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNZombie.blp',
    dISBTNeredarRed = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNeredarRed.blp',
    dISBTNnerubianSpiderLord = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNnerubianSpiderLord.blp',
    dISBTNneutralManaShieldOff = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNneutralManaShieldOff.blp',
    dISBTNpurpleDragonSpawn = 'ReplaceableTextures\\CommandButtonsDisabled\\DISBTNpurpleDragonSpawn.blp',
    dISPASBTNBash = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNBash.blp',
    dISPASBTNBattleRoar = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNBattleRoar.blp',
    dISPASBTNBrilliance = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNBrilliance.blp',
    dISPASBTNCleavingAttack = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNCleavingAttack.blp',
    dISPASBTNCommand = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNCommand.blp',
    dISPASBTNCorrosiveBreath = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNCorrosiveBreath.blp',
    dISPASBTNCriticalStrike = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNCriticalStrike.blp',
    dISPASBTNDemolish = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNDemolish.blp',
    dISPASBTNDevotion = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNDevotion.blp',
    dISPASBTNDrum = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNDrum.blp',
    dISPASBTNDrunkenDodge = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNDrunkenDodge.blp',
    dISPASBTNElunesBlessing = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNElunesBlessing.blp',
    dISPASBTNEngineeringUpgrade = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNEngineeringUpgrade.blp',
    dISPASBTNEnvenomedSpear = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNEnvenomedSpear.blp',
    dISPASBTNEvasion = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNEvasion.blp',
    dISPASBTNExhumeCorpses = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNExhumeCorpses.blp',
    dISPASBTNFeedBack = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNFeedBack.blp',
    dISPASBTNFireRocks = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNFireRocks.blp',
    dISPASBTNFlakCannons = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNFlakCannons.blp',
    dISPASBTNFlyingMachineTrueSight = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNFlyingMachineTrueSight.blp',
    dISPASBTNFlyingMachineTrueSight1 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNFlyingMachineTrueSight.blp',
    dISPASBTNFragmentationBombs = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNFragmentationBombs.blp',
    dISPASBTNFreezingBreath = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNFreezingBreath.blp',
    dISPASBTNFrost = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNFrost.blp',
    dISPASBTNGenericSpellImmunity = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNGenericSpellImmunity.blp',
    dISPASBTNGenericSpellImmunity1 = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNGenericSpellImmunity.blp',
    dISPASBTNGnollCommandAura = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNGnollCommandAura.blp',
    dISPASBTNGyroCopterTrueSight = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNGyroCopterTrueSight.blp',
    dISPASBTNHardenedSkin = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNHardenedSkin.blp',
    dISPASBTNHumanArtilleryUpOne = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNHumanArtilleryUpOne.blp',
    dISPASBTNImmolation = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNImmolation.blp',
    dISPASBTNImpalingBolt = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNImpalingBolt.blp',
    dISPASBTNIncinerate = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNIncinerate.blp',
    dISPASBTNLiquidFire = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNLiquidFire.blp',
    dISPASBTNMagicImmunity = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNMagicImmunity.blp',
    dISPASBTNMagicalSentry = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNMagicalSentry.blp',
    dISPASBTNPillage = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNPillage.blp',
    dISPASBTNPlagueCloud = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNPlagueCloud.blp',
    dISPASBTNPoisonSting = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNPoisonSting.blp',
    dISPASBTNRegenerate = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNRegenerate.blp',
    dISPASBTNRegenerationAura = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNRegenerationAura.blp',
    dISPASBTNReincarnation = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNReincarnation.blp',
    dISPASBTNResistantSkin = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNResistantSkin.blp',
    dISPASBTNScatterRockets = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNScatterRockets.blp',
    dISPASBTNScout = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNScout.blp',
    dISPASBTNSeaGiantPulverize = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNSeaGiantPulverize.blp',
    dISPASBTNShadeTrueSight = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNShadeTrueSight.blp',
    dISPASBTNSlowPoison = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNSlowPoison.blp',
    dISPASBTNSmash = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNSmash.blp',
    dISPASBTNSpiritOfVengeance = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNSpiritOfVengeance.blp',
    dISPASBTNStatUp = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNStatUp.blp',
    dISPASBTNStormHammer = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNStormHammer.blp',
    dISPASBTNThickFur = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNThickFur.blp',
    dISPASBTNThornShield = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNThornShield.blp',
    dISPASBTNThorns = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNThorns.blp',
    dISPASBTNTrueShot = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNTrueShot.blp',
    dISPASBTNUnholyAura = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNUnholyAura.blp',
    dISPASBTNUpgradeMoonGlaive = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNUpgradeMoonGlaive.blp',
    dISPASBTNVampiricAura = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNVampiricAura.blp',
    dISPASBTNVorpalBlades = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNVorpalBlades.blp',
    dISPASBTNWarStomp = 'ReplaceableTextures\\CommandButtonsDisabled\\DISPASBTNWarStomp.blp',
    pASBTNBash = 'ReplaceableTextures\\PassiveButtons\\PASBTNBash.blp',
    pASBTNBattleRoar = 'ReplaceableTextures\\PassiveButtons\\PASBTNBattleRoar.blp',
    pASBTNBrilliance = 'ReplaceableTextures\\PassiveButtons\\PASBTNBrilliance.blp',
    pASBTNCleavingAttack = 'ReplaceableTextures\\PassiveButtons\\PASBTNCleavingAttack.blp',
    pASBTNCommand = 'ReplaceableTextures\\PassiveButtons\\PASBTNCommand.blp',
    pASBTNCorrosiveBreath = 'ReplaceableTextures\\PassiveButtons\\PASBTNCorrosiveBreath.blp',
    pASBTNCriticalStrike = 'ReplaceableTextures\\PassiveButtons\\PASBTNCriticalStrike.blp',
    pASBTNDemolish = 'ReplaceableTextures\\PassiveButtons\\PASBTNDemolish.blp',
    pASBTNDevotion = 'ReplaceableTextures\\PassiveButtons\\PASBTNDevotion.blp',
    pASBTNDrum = 'ReplaceableTextures\\PassiveButtons\\PASBTNDrum.blp',
    pASBTNDrunkenDodge = 'ReplaceableTextures\\PassiveButtons\\PASBTNDrunkenDodge.blp',
    pASBTNElunesBlessing = 'ReplaceableTextures\\PassiveButtons\\PASBTNElunesBlessing.blp',
    pASBTNEngineeringUpgrade = 'ReplaceableTextures\\CommandButtons\\PASBTNEngineeringUpgrade.blp',
    pASBTNEnvenomedSpear = 'ReplaceableTextures\\PassiveButtons\\PASBTNEnvenomedSpear.blp',
    pASBTNEvasion = 'ReplaceableTextures\\PassiveButtons\\PASBTNEvasion.blp',
    pASBTNExhumeCorpses = 'ReplaceableTextures\\PassiveButtons\\PASBTNExhumeCorpses.blp',
    pASBTNFeedBack = 'ReplaceableTextures\\PassiveButtons\\PASBTNFeedBack.blp',
    pASBTNFireRocks = 'ReplaceableTextures\\PassiveButtons\\PASBTNFireRocks.blp',
    pASBTNFlakCannons = 'ReplaceableTextures\\PassiveButtons\\PASBTNFlakCannons.blp',
    pASBTNFlyingMachineTrueSight = 'ReplaceableTextures\\PassiveButtons\\PASBTNFlyingMachineTrueSight.blp',
    pASBTNFlyingMachineTrueSight1 = 'ReplaceableTextures\\PassiveButtons\\PASBTNFlyingMachineTrueSight.blp',
    pASBTNFragmentationBombs = 'ReplaceableTextures\\PassiveButtons\\PASBTNFragmentationBombs.blp',
    pASBTNFreezingBreath = 'ReplaceableTextures\\PassiveButtons\\PASBTNFreezingBreath.blp',
    pASBTNFrost = 'ReplaceableTextures\\PassiveButtons\\PASBTNFrost.blp',
    pASBTNGenericSpellImmunity = 'ReplaceableTextures\\PassiveButtons\\PASBTNGenericSpellImmunity.blp',
    pASBTNGenericSpellImmunity1 = 'ReplaceableTextures\\PassiveButtons\\PASBTNGenericSpellImmunity.blp',
    pASBTNGnollCommandAura = 'ReplaceableTextures\\PassiveButtons\\PASBTNGnollCommandAura.blp',
    pASBTNGyroCopterTrueSight = 'ReplaceableTextures\\PassiveButtons\\PASBTNGyroCopterTrueSight.blp',
    pASBTNHardenedSkin = 'ReplaceableTextures\\PassiveButtons\\PASBTNHardenedSkin.blp',
    pASBTNHumanArtilleryUpOne = 'ReplaceableTextures\\PassiveButtons\\PASBTNHumanArtilleryUpOne.blp',
    pASBTNImmolation = 'ReplaceableTextures\\PassiveButtons\\PASBTNImmolation.blp',
    pASBTNImpalingBolt = 'ReplaceableTextures\\PassiveButtons\\PASBTNImpalingBolt.blp',
    pASBTNIncinerate = 'ReplaceableTextures\\PassiveButtons\\PASBTNIncinerate.blp',
    pASBTNLiquidFire = 'ReplaceableTextures\\PassiveButtons\\PASBTNLiquidFire.blp',
    pASBTNMagicImmunity = 'ReplaceableTextures\\PassiveButtons\\PASBTNMagicImmunity.blp',
    pASBTNMagicalSentry = 'ReplaceableTextures\\PassiveButtons\\PASBTNMagicalSentry.blp',
    pASBTNPillage = 'ReplaceableTextures\\PassiveButtons\\PASBTNPillage.blp',
    pASBTNPlagueCloud = 'ReplaceableTextures\\PassiveButtons\\PASBTNPlagueCloud.blp',
    pASBTNPoisonSting = 'ReplaceableTextures\\PassiveButtons\\PASBTNPoisonSting.blp',
    pASBTNRegenerate = 'ReplaceableTextures\\PassiveButtons\\PASBTNRegenerate.blp',
    pASBTNRegenerationAura = 'ReplaceableTextures\\PassiveButtons\\PASBTNRegenerationAura.blp',
    pASBTNReincarnation = 'ReplaceableTextures\\PassiveButtons\\PASBTNReincarnation.blp',
    pASBTNResistantSkin = 'ReplaceableTextures\\PassiveButtons\\PASBTNResistantSkin.blp',
    pASBTNScatterRockets = 'ReplaceableTextures\\PassiveButtons\\PASBTNScatterRockets.blp',
    pASBTNScout = 'ReplaceableTextures\\PassiveButtons\\PASBTNScout.blp',
    pASBTNSeaGiantPulverize = 'ReplaceableTextures\\PassiveButtons\\PASBTNSeaGiantPulverize.blp',
    pASBTNShadeTrueSight = 'ReplaceableTextures\\PassiveButtons\\PASBTNShadeTrueSight.blp',
    pASBTNSlowPoison = 'ReplaceableTextures\\PassiveButtons\\PASBTNSlowPoison.blp',
    pASBTNSmash = 'ReplaceableTextures\\PassiveButtons\\PASBTNSmash.blp',
    pASBTNSpiritOfVengeance = 'ReplaceableTextures\\PassiveButtons\\PASBTNSpiritOfVengeance.blp',
    pASBTNStatUp = 'ReplaceableTextures\\PassiveButtons\\PASBTNStatUp.blp',
    pASBTNStormHammer = 'ReplaceableTextures\\PassiveButtons\\PASBTNStormHammer.blp',
    pASBTNThickFur = 'ReplaceableTextures\\PassiveButtons\\PASBTNThickFur.blp',
    pASBTNThornShield = 'ReplaceableTextures\\PassiveButtons\\PASBTNThornShield.blp',
    pASBTNThorns = 'ReplaceableTextures\\PassiveButtons\\PASBTNThorns.blp',
    pASBTNTrueShot = 'ReplaceableTextures\\PassiveButtons\\PASBTNTrueShot.blp',
    pASBTNUnholyAura = 'ReplaceableTextures\\PassiveButtons\\PASBTNUnholyAura.blp',
    pASBTNUpgradeMoonGlaive = 'ReplaceableTextures\\PassiveButtons\\PASBTNUpgradeMoonGlaive.blp',
    pASBTNVampiricAura = 'ReplaceableTextures\\PassiveButtons\\PASBTNVampiricAura.blp',
    pASBTNVorpalBlades = 'ReplaceableTextures\\PassiveButtons\\PASBTNVorpalBlades.blp',
    pASBTNWarStomp = 'ReplaceableTextures\\PassiveButtons\\PASBTNWarStomp.blp',
}

return Icons]]

P['lib/stdlib/utils/_dispatcher.lua'] = [[-- item.lua
-- @Author : Dencer (tdaddon@163.com)
-- @Link   : https://dengsir.github.io
-- @Date   : 5/6/2019, 11:57:08 PM

---@class _Dispatcher: object
local Dispatcher = class('_Dispatcher')

Dispatcher.dispatchers = setmetatable({}, {
    __index = function(t, id)
        t[id] = Dispatcher:new(id)
        return t[id]
    end,
})

local function errorhandler(err)
    local h = geterrorhandler()
    if h then
        h(err)
    end
end

function Dispatcher:constructor(id)
    self.id = id
    self.listeners = {}
    self.insertQueue = {}
    self.recurse = 0
end

---<static> get
---@return _Dispatcher
function Dispatcher:get(id)
    return self.dispatchers[id]
end

function Dispatcher:remove(id)
    self.dispatchers[id] = nil
end

---<static> getAll
---@return table<integer, _Dispatcher>
function Dispatcher:getAll()
    return self.dispatchers
end

---addObject
---@param obj Observer
---@param method function
---@return void
function Dispatcher:addObject(obj, method)
    if self.recurse < 1 then
        self.listeners[obj] = method
    else
        self.insertQueue[obj] = method
    end
end

---removeObject
---@param obj Observer
---@return void
function Dispatcher:removeObject(obj)
    self.listeners[obj] = nil
    self.insertQueue[obj] = nil
end

---dispatch
---@vararg any
---@return void
function Dispatcher:dispatch(...)
    local recurse = self.recurse
    self.recurse = recurse + 1

    for obj, method in pairs(self.listeners) do
        xpcall(method, errorhandler, ...)
    end

    self.recurse = recurse

    if not table.isempty(self.insertQueue) and recurse == 0 then
        for obj, method in pairs(self.insertQueue) do
            self.listeners[obj] = method
            self.insertQueue[obj] = nil
        end
        self.insertQueue = nil
    end
end

---hasListener
---@return boolean
function Dispatcher:hasListener()
    return not table.isempty(self.listeners) or not table.isempty(self.insertQueue)
end

return Dispatcher]]

P['lib/stdlib/utils/color.lua'] = [[local Color = {}

---gradient
---@param text string
---@param ra integer @0~255
---@param ga integer @0~255
---@param ba integer @0~255
---@param rb integer @0~255
---@param gb integer @0~255
---@param bb integer @0~255
function Color:gradientText(text, ra, ga, ba, rb, gb, bb)

    local chars = {}
    local count = utf8.len(text)
    local hasColor = false

    for i, c in utf8.codes(text) do
        local char = utf8.char(c)
        if char ~= ' ' then
            char = string.format('|cff%02x%02x%02x%s', math.ceil(ra + (rb - ra) / count * i),
                                 math.ceil(ga + (gb - ga) / count * i), math.ceil(ba + (bb - ba) / count * i), char)
            hasColor = true
        end
        table.insert(chars, char)
    end

    if hasColor then
        table.insert(chars, '|r')
    end

    return table.concat(chars)

end

return Color]]

P['lib/stdlib/utils/commandline.lua'] = [[local Trigger = require('lib.stdlib.oop.trigger')
local Event = require('lib.stdlib.oop.event')
local Player = require('lib.stdlib.oop.player')
local Timer = require('lib.stdlib.oop.timer')

---@class CommandLine: object
local CommandLine = class('__CommandLine'):new()

---@class CommandHandler: table
---@field triggerPlayer Player
---@field command string
---@field onEvent fun(player:Player, str:String)
local CommandHandler

---@type CommandHandler[]
local _HANDLER = {}

---<static> addOption
---@param player Player
---@param command string
---@param cb fun(player:Player, str:String)
function CommandLine:addOption(player, command, cb)
    local commandList = string.split(command, '|')
    for i, v in ipairs(commandList) do
        if _HANDLER[v] then
            print(string.format('command %s exists.', v))
        else
            _HANDLER[v] = {}
            local h = _HANDLER[v]
            h.command = v
            h.triggerPlayer = player
            h.onEvent = cb
        end
    end
end

---<static> addOptionAnyPlayer
---@param command string
---@param cb fun(player:Player, str:String)
function CommandLine:addOptionToAll(command, cb)
    self:addOption(nil, command, cb)
end

---<static> exec
---@param command string
function CommandLine:exec(command, data)
    local h = _HANDLER[command]
    if h then
        h.onEvent(nil, data)
    end
end

local function onChatEvent()
    local p = Event.getTriggerPlayer()
    local text = Event.getEventPlayerChatString()
    local command, data = table.unpack(string.split(text, ' ', false, 1))
    local h = _HANDLER[command]
    if h and (not h.triggerPlayer or h.triggerPlayer == p) then
        h.onEvent(p, data)
    end
end

---init
local function onLateInit()
    local t = Trigger:create()
    t:addAction(onChatEvent)
    for i = 0, 23 do
        t:registerPlayerChatEvent(Player:get(i), '', false)
    end
end

Timer:after(0.1, onLateInit)

return CommandLine]]

P['lib/stdlib/utils/message.lua'] = [[-- message.lua
-- @Author : Dencer (tdaddon@163.com)
-- @Link   : https://dengsir.github.io
-- @Date   : 7/5/2019, 2:28:56 PM
local Player = require('lib.stdlib.oop.player')
local Force = require('lib.stdlib.oop.force')
local Native = require('lib.stdlib.native.init')

local Message = {}

---toAll
---@param text string
---@param timeout float
function Message:toAll(text, timeout)
    for player in Player:iterateAll() do
        self:toPlayer(player, text, timeout)
    end
end

---toForce
---@param force Force
---@param text string
---@param timeout float
---@return void
function Message:toForce(force, text, timeout)
    local localPlayer = Player:getLocal()
    if not localPlayer:isInForce(force) then
        return
    end
    return self:toPlayer(localPlayer, text, timeout)
end

---toPlayers
---@param players Player[]
---@param text string
---@param timeout float
---@return void
function Message:toPlayers(players, text, timeout)
    for player in vipairs(players) do
        self:toPlayer(player, text, timeout)
    end
end

---toPlayer
---@overload fun(player: Player, text: string): void
---@param player Player
---@param text string
---@param timeout float
---@return void
function Message:toPlayer(player, text, timeout)
    if not player:isLocal() then
        return
    end
    if timeout then
        Native.DisplayTimedTextToPlayer(player:getUd(), 0, 0, timeout, text)
    else
        Native.DisplayTextToPlayer(player:getUd(), 0, 0, text)
    end

end

return Message]]

P['lib/stdlib/utils/observer.lua'] = [=[-- observer.lua
-- @Author : Dencer (tdaddon@163.com)
-- @Link   : https://dengsir.github.io
-- @Date   : 5/6/2019, 10:49:38 PM
---@class Observer: object
local Observer = class('Observer')

local Dispatcher = require('lib.stdlib.utils._dispatcher')

---registerEvent
---@param id integer
---@param method function | string
---@return void
function Observer:registerEvent(...)
    local length = select('#', ...)
    local method = select(length, ...)

    if type(method) == 'string' then
        local _method = self[method]
        if not _method then
            error(string.format([[not found method '%s' in object]], method), 2)
        end
        method = function(...)
            return _method(self, ...)
        end
    end

    if type(method) ~= 'function' then
        error('not function', 2)
    end

    for i = 1, length - 1 do
        local id = select(i, ...)
        Dispatcher:get(id):addObject(self, method)
    end
end

---unregisterEvent
---@param id integer
---@return void
function Observer:unregisterEvent(id)
    Dispatcher:get(id):removeObject(id)
end

---unregisterAllEvents
---@return void
function Observer:unregisterAllEvents()
    for id, dispatcher in pairs(Dispatcher:getAll()) do
        dispatcher:removeObject(self)

        if not dispatcher:hasListener() then
            Dispatcher:remove(id)
        end
    end
end

---fireEvent
---@param id integer
---@vararg any
function Observer:fireEvent(id, ...)
    return Dispatcher:get(id):dispatch(...)
end

return Observer]=]

P['main.lua'] = [=[--require('utils')
--require('object')
--require('ability/ability_base')
--require('ui/ui_manager')
--require('player')
require('lib.init')
require('core.MKCore')

print("booting...")
MKCore:boot()
print("boot finish...")

require('biz.hero.hero')
require('biz.ability.ability1')
require('biz.ability.ability2')
require('biz.ability.ability3')
require('biz.ability.ability4')

-- function Unit:onEnterMap()
            
--     if self:getOwner():getController() ~= MapControl.User then
--         return
--     end
    
--     if self.firstEnter == false then
--         return
--     end

--     self.firstEnter = true
-- end

local main  = MKCore.UnitSys:createUnit(MainHero,Player:get(0),Native.GetRectCenterX(gg_rct_RebornRect),Native.GetRectCenterY(gg_rct_RebornRect),0)

print(Native.BlzLoadTOCFile([[war3mapimported\UI\ui.toc]]))    


Timer:create():start(2,function()
    ---@type Unit
    local unit =  Unit:fromUd(udg_enemy)    
    --unit:issuePointOrder(Order.curse,main:getX(),main:getY())
end)]=]

P['origwar3map.lua'] = [[udg_enemy = nil
gg_rct_RebornRect = nil
gg_cam_HunterCam = nil
gg_cam_SoldierCam = nil
gg_cam_WizardCam = nil
gg_cam_CGCam1 = nil
gg_cam_CGCam2 = nil
gg_cam_CGCam3 = nil
gg_cam_CGCam5 = nil
gg_snd_Marcin_Przyby__owicz___Breaking_In01 = ""
gg_snd_GoodJob = nil
gg_snd_AchievementEarned = nil
gg_snd_Hint = nil
gg_snd_Joe_Henson_Alexis_Smith___Assassin_s_Creed = ""
gg_trg_Init = nil
gg_unit_H002_0006 = nil
function InitGlobals()
end

function InitSounds()
    gg_snd_Marcin_Przyby__owicz___Breaking_In01 = "war3mapImported/Marcin Przybyłowicz - Breaking In.flac"
    gg_snd_GoodJob = CreateSound("Sound/Interface/GoodJob.flac", false, false, false, 0, 0, "DefaultEAXON")
    SetSoundParamsFromLabel(gg_snd_GoodJob, "GoodJob")
    SetSoundDuration(gg_snd_GoodJob, 2954)
    SetSoundVolume(gg_snd_GoodJob, 127)
    gg_snd_AchievementEarned = CreateSound("Sound/Interface/AchievementEarned.flac", false, false, false, 0, 0, "DefaultEAXON")
    SetSoundParamsFromLabel(gg_snd_AchievementEarned, "AchievementEarned")
    SetSoundDuration(gg_snd_AchievementEarned, 4173)
    SetSoundVolume(gg_snd_AchievementEarned, 127)
    gg_snd_Hint = CreateSound("Sound/Interface/Hint.flac", false, false, false, 0, 0, "DefaultEAXON")
    SetSoundParamsFromLabel(gg_snd_Hint, "Hint")
    SetSoundDuration(gg_snd_Hint, 2845)
    SetSoundVolume(gg_snd_Hint, 80)
    gg_snd_Joe_Henson_Alexis_Smith___Assassin_s_Creed = "war3mapImported/Joe Henson,Alexis Smith - Assassin's Creed.mp3"
end

function CreateUnitsForPlayer1()
    local p = Player(1)
    local u
    local unitID
    local t
    local life
    gg_unit_H002_0006 = BlzCreateUnitWithSkin(p, FourCC("H002"), 887.0, -4896.9, 240.783, FourCC("H002"))
end

function CreateNeutralHostile()
    local p = Player(PLAYER_NEUTRAL_AGGRESSIVE)
    local u
    local unitID
    local t
    local life
    u = BlzCreateUnitWithSkin(p, FourCC("e003"), 312.8, -3875.2, 344.943, FourCC("e003"))
    u = BlzCreateUnitWithSkin(p, FourCC("e007"), 98.6, -4401.3, 200.909, FourCC("e007"))
    u = BlzCreateUnitWithSkin(p, FourCC("e003"), -513.1, -4215.9, 323.031, FourCC("e003"))
    u = BlzCreateUnitWithSkin(p, FourCC("e003"), -658.5, -4630.6, 13.901, FourCC("e003"))
    u = BlzCreateUnitWithSkin(p, FourCC("e003"), -429.6, -4031.1, 293.903, FourCC("e003"))
    u = BlzCreateUnitWithSkin(p, FourCC("e003"), -706.3, -5147.2, 326.707, FourCC("e003"))
    u = BlzCreateUnitWithSkin(p, FourCC("e003"), -253.5, -3912.9, 273.838, FourCC("e003"))
    u = BlzCreateUnitWithSkin(p, FourCC("e003"), -712.1, -4842.1, 32.798, FourCC("e003"))
    u = BlzCreateUnitWithSkin(p, FourCC("e003"), -54.7, -3786.4, 257.847, FourCC("e003"))
    u = BlzCreateUnitWithSkin(p, FourCC("e007"), 151.4, -4182.7, 222.829, FourCC("e007"))
end

function CreatePlayerBuildings()
end

function CreatePlayerUnits()
    CreateUnitsForPlayer1()
end

function CreateAllUnits()
    CreatePlayerBuildings()
    CreateNeutralHostile()
    CreatePlayerUnits()
end

function CreateRegions()
    local we
    gg_rct_RebornRect = Rect(-640.0, -4704.0, -192.0, -4288.0)
end

function CreateCameras()
    gg_cam_HunterCam = CreateCameraSetup()
    CameraSetupSetField(gg_cam_HunterCam, CAMERA_FIELD_ZOFFSET, 0.0, 0.0)
    CameraSetupSetField(gg_cam_HunterCam, CAMERA_FIELD_ROTATION, 93.1, 0.0)
    CameraSetupSetField(gg_cam_HunterCam, CAMERA_FIELD_ANGLE_OF_ATTACK, 329.6, 0.0)
    CameraSetupSetField(gg_cam_HunterCam, CAMERA_FIELD_TARGET_DISTANCE, 769.7, 0.0)
    CameraSetupSetField(gg_cam_HunterCam, CAMERA_FIELD_ROLL, 0.0, 0.0)
    CameraSetupSetField(gg_cam_HunterCam, CAMERA_FIELD_FIELD_OF_VIEW, 70.0, 0.0)
    CameraSetupSetField(gg_cam_HunterCam, CAMERA_FIELD_FARZ, 5000.0, 0.0)
    CameraSetupSetField(gg_cam_HunterCam, CAMERA_FIELD_NEARZ, 16.0, 0.0)
    CameraSetupSetField(gg_cam_HunterCam, CAMERA_FIELD_LOCAL_PITCH, 0.0, 0.0)
    CameraSetupSetField(gg_cam_HunterCam, CAMERA_FIELD_LOCAL_YAW, 0.0, 0.0)
    CameraSetupSetField(gg_cam_HunterCam, CAMERA_FIELD_LOCAL_ROLL, 0.0, 0.0)
    CameraSetupSetDestPosition(gg_cam_HunterCam, 2837.7, -2756.6, 0.0)
    gg_cam_SoldierCam = CreateCameraSetup()
    CameraSetupSetField(gg_cam_SoldierCam, CAMERA_FIELD_ZOFFSET, 0.0, 0.0)
    CameraSetupSetField(gg_cam_SoldierCam, CAMERA_FIELD_ROTATION, 302.0, 0.0)
    CameraSetupSetField(gg_cam_SoldierCam, CAMERA_FIELD_ANGLE_OF_ATTACK, 344.5, 0.0)
    CameraSetupSetField(gg_cam_SoldierCam, CAMERA_FIELD_TARGET_DISTANCE, 931.4, 0.0)
    CameraSetupSetField(gg_cam_SoldierCam, CAMERA_FIELD_ROLL, 0.0, 0.0)
    CameraSetupSetField(gg_cam_SoldierCam, CAMERA_FIELD_FIELD_OF_VIEW, 70.0, 0.0)
    CameraSetupSetField(gg_cam_SoldierCam, CAMERA_FIELD_FARZ, 5000.0, 0.0)
    CameraSetupSetField(gg_cam_SoldierCam, CAMERA_FIELD_NEARZ, 16.0, 0.0)
    CameraSetupSetField(gg_cam_SoldierCam, CAMERA_FIELD_LOCAL_PITCH, 0.0, 0.0)
    CameraSetupSetField(gg_cam_SoldierCam, CAMERA_FIELD_LOCAL_YAW, 0.0, 0.0)
    CameraSetupSetField(gg_cam_SoldierCam, CAMERA_FIELD_LOCAL_ROLL, 0.0, 0.0)
    CameraSetupSetDestPosition(gg_cam_SoldierCam, 3478.9, -2871.9, 0.0)
    gg_cam_WizardCam = CreateCameraSetup()
    CameraSetupSetField(gg_cam_WizardCam, CAMERA_FIELD_ZOFFSET, 0.0, 0.0)
    CameraSetupSetField(gg_cam_WizardCam, CAMERA_FIELD_ROTATION, 326.7, 0.0)
    CameraSetupSetField(gg_cam_WizardCam, CAMERA_FIELD_ANGLE_OF_ATTACK, 344.5, 0.0)
    CameraSetupSetField(gg_cam_WizardCam, CAMERA_FIELD_TARGET_DISTANCE, 578.3, 0.0)
    CameraSetupSetField(gg_cam_WizardCam, CAMERA_FIELD_ROLL, 0.0, 0.0)
    CameraSetupSetField(gg_cam_WizardCam, CAMERA_FIELD_FIELD_OF_VIEW, 70.0, 0.0)
    CameraSetupSetField(gg_cam_WizardCam, CAMERA_FIELD_FARZ, 5000.0, 0.0)
    CameraSetupSetField(gg_cam_WizardCam, CAMERA_FIELD_NEARZ, 16.0, 0.0)
    CameraSetupSetField(gg_cam_WizardCam, CAMERA_FIELD_LOCAL_PITCH, 0.0, 0.0)
    CameraSetupSetField(gg_cam_WizardCam, CAMERA_FIELD_LOCAL_YAW, 0.0, 0.0)
    CameraSetupSetField(gg_cam_WizardCam, CAMERA_FIELD_LOCAL_ROLL, 0.0, 0.0)
    CameraSetupSetDestPosition(gg_cam_WizardCam, 2981.6, -2056.4, 0.0)
    gg_cam_CGCam1 = CreateCameraSetup()
    CameraSetupSetField(gg_cam_CGCam1, CAMERA_FIELD_ZOFFSET, 0.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam1, CAMERA_FIELD_ROTATION, 322.1, 0.0)
    CameraSetupSetField(gg_cam_CGCam1, CAMERA_FIELD_ANGLE_OF_ATTACK, 330.9, 0.0)
    CameraSetupSetField(gg_cam_CGCam1, CAMERA_FIELD_TARGET_DISTANCE, 1815.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam1, CAMERA_FIELD_ROLL, 0.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam1, CAMERA_FIELD_FIELD_OF_VIEW, 70.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam1, CAMERA_FIELD_FARZ, 7320.5, 0.0)
    CameraSetupSetField(gg_cam_CGCam1, CAMERA_FIELD_NEARZ, 16.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam1, CAMERA_FIELD_LOCAL_PITCH, 0.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam1, CAMERA_FIELD_LOCAL_YAW, 0.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam1, CAMERA_FIELD_LOCAL_ROLL, 0.0, 0.0)
    CameraSetupSetDestPosition(gg_cam_CGCam1, 324.0, -532.4, 0.0)
    gg_cam_CGCam2 = CreateCameraSetup()
    CameraSetupSetField(gg_cam_CGCam2, CAMERA_FIELD_ZOFFSET, 0.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam2, CAMERA_FIELD_ROTATION, 41.6, 0.0)
    CameraSetupSetField(gg_cam_CGCam2, CAMERA_FIELD_ANGLE_OF_ATTACK, 336.2, 0.0)
    CameraSetupSetField(gg_cam_CGCam2, CAMERA_FIELD_TARGET_DISTANCE, 1127.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam2, CAMERA_FIELD_ROLL, 0.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam2, CAMERA_FIELD_FIELD_OF_VIEW, 70.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam2, CAMERA_FIELD_FARZ, 7320.5, 0.0)
    CameraSetupSetField(gg_cam_CGCam2, CAMERA_FIELD_NEARZ, 16.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam2, CAMERA_FIELD_LOCAL_PITCH, 0.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam2, CAMERA_FIELD_LOCAL_YAW, 0.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam2, CAMERA_FIELD_LOCAL_ROLL, 0.0, 0.0)
    CameraSetupSetDestPosition(gg_cam_CGCam2, 2574.6, -1039.6, 0.0)
    gg_cam_CGCam3 = CreateCameraSetup()
    CameraSetupSetField(gg_cam_CGCam3, CAMERA_FIELD_ZOFFSET, 0.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam3, CAMERA_FIELD_ROTATION, 90.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam3, CAMERA_FIELD_ANGLE_OF_ATTACK, 304.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam3, CAMERA_FIELD_TARGET_DISTANCE, 1650.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam3, CAMERA_FIELD_ROLL, 0.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam3, CAMERA_FIELD_FIELD_OF_VIEW, 70.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam3, CAMERA_FIELD_FARZ, 5000.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam3, CAMERA_FIELD_NEARZ, 16.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam3, CAMERA_FIELD_LOCAL_PITCH, 0.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam3, CAMERA_FIELD_LOCAL_YAW, 0.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam3, CAMERA_FIELD_LOCAL_ROLL, 0.0, 0.0)
    CameraSetupSetDestPosition(gg_cam_CGCam3, 2574.6, -1039.6, 0.0)
    gg_cam_CGCam5 = CreateCameraSetup()
    CameraSetupSetField(gg_cam_CGCam5, CAMERA_FIELD_ZOFFSET, 0.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam5, CAMERA_FIELD_ROTATION, 90.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam5, CAMERA_FIELD_ANGLE_OF_ATTACK, 304.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam5, CAMERA_FIELD_TARGET_DISTANCE, 1650.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam5, CAMERA_FIELD_ROLL, 0.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam5, CAMERA_FIELD_FIELD_OF_VIEW, 70.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam5, CAMERA_FIELD_FARZ, 5000.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam5, CAMERA_FIELD_NEARZ, 16.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam5, CAMERA_FIELD_LOCAL_PITCH, 0.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam5, CAMERA_FIELD_LOCAL_YAW, 0.0, 0.0)
    CameraSetupSetField(gg_cam_CGCam5, CAMERA_FIELD_LOCAL_ROLL, 0.0, 0.0)
    CameraSetupSetDestPosition(gg_cam_CGCam5, 3173.9, -1175.4, 0.0)
end

function Trig_Init_Actions()
    SetMapMusicIndexedBJ(gg_snd_Marcin_Przyby__owicz___Breaking_In01, 0)
    udg_enemy = gg_unit_H002_0006
end

function InitTrig_Init()
    gg_trg_Init = CreateTrigger()
    TriggerAddAction(gg_trg_Init, Trig_Init_Actions)
end

function InitCustomTriggers()
    InitTrig_Init()
end

function RunInitializationTriggers()
    ConditionalTriggerExecute(gg_trg_Init)
end

function InitCustomPlayerSlots()
    SetPlayerStartLocation(Player(0), 0)
    ForcePlayerStartLocation(Player(0), 0)
    SetPlayerColor(Player(0), ConvertPlayerColor(0))
    SetPlayerRacePreference(Player(0), RACE_PREF_HUMAN)
    SetPlayerRaceSelectable(Player(0), false)
    SetPlayerController(Player(0), MAP_CONTROL_USER)
    SetPlayerStartLocation(Player(1), 1)
    ForcePlayerStartLocation(Player(1), 1)
    SetPlayerColor(Player(1), ConvertPlayerColor(1))
    SetPlayerRacePreference(Player(1), RACE_PREF_HUMAN)
    SetPlayerRaceSelectable(Player(1), false)
    SetPlayerController(Player(1), MAP_CONTROL_USER)
    SetPlayerStartLocation(Player(2), 2)
    ForcePlayerStartLocation(Player(2), 2)
    SetPlayerColor(Player(2), ConvertPlayerColor(2))
    SetPlayerRacePreference(Player(2), RACE_PREF_HUMAN)
    SetPlayerRaceSelectable(Player(2), false)
    SetPlayerController(Player(2), MAP_CONTROL_USER)
    SetPlayerStartLocation(Player(23), 3)
    SetPlayerColor(Player(23), ConvertPlayerColor(23))
    SetPlayerRacePreference(Player(23), RACE_PREF_NIGHTELF)
    SetPlayerRaceSelectable(Player(23), false)
    SetPlayerController(Player(23), MAP_CONTROL_COMPUTER)
end

function InitCustomTeams()
    SetPlayerTeam(Player(0), 0)
    SetPlayerTeam(Player(1), 1)
    SetPlayerTeam(Player(2), 2)
    SetPlayerTeam(Player(23), 3)
end

function InitAllyPriorities()
    SetStartLocPrioCount(0, 1)
    SetStartLocPrio(0, 0, 1, MAP_LOC_PRIO_HIGH)
    SetStartLocPrioCount(1, 1)
    SetStartLocPrio(1, 0, 0, MAP_LOC_PRIO_HIGH)
    SetStartLocPrioCount(2, 2)
    SetStartLocPrio(2, 0, 0, MAP_LOC_PRIO_HIGH)
    SetStartLocPrio(2, 1, 1, MAP_LOC_PRIO_HIGH)
    SetEnemyStartLocPrioCount(3, 3)
    SetEnemyStartLocPrio(3, 0, 0, MAP_LOC_PRIO_LOW)
    SetEnemyStartLocPrio(3, 1, 1, MAP_LOC_PRIO_HIGH)
    SetEnemyStartLocPrio(3, 2, 2, MAP_LOC_PRIO_HIGH)
end

function main()
    SetCameraBounds(-5888.0 + GetCameraMargin(CAMERA_MARGIN_LEFT), -10240.0 + GetCameraMargin(CAMERA_MARGIN_BOTTOM), 4864.0 - GetCameraMargin(CAMERA_MARGIN_RIGHT), 512.0 - GetCameraMargin(CAMERA_MARGIN_TOP), -5888.0 + GetCameraMargin(CAMERA_MARGIN_LEFT), 512.0 - GetCameraMargin(CAMERA_MARGIN_TOP), 4864.0 - GetCameraMargin(CAMERA_MARGIN_RIGHT), -10240.0 + GetCameraMargin(CAMERA_MARGIN_BOTTOM))
    SetDayNightModels("Environment\\DNC\\DNCLordaeron\\DNCLordaeronTerrain\\DNCLordaeronTerrain.mdl", "Environment\\DNC\\DNCLordaeron\\DNCLordaeronUnit\\DNCLordaeronUnit.mdl")
    SetTerrainFogEx(0, 1500.0, 2500.0, 0.200, 0.502, 0.502, 0.502)
    NewSoundEnvironment("Default")
    SetAmbientDaySound("LordaeronSummerDay")
    SetAmbientNightSound("LordaeronSummerNight")
    SetMapMusic("Music", true, 0)
    InitSounds()
    CreateRegions()
    CreateCameras()
    CreateAllUnits()
    InitBlizzard()
    InitGlobals()
    InitCustomTriggers()
    RunInitializationTriggers()
end

function config()
    SetMapName("TRIGSTR_003")
    SetMapDescription("TRIGSTR_005")
    SetPlayers(4)
    SetTeams(4)
    SetGamePlacement(MAP_PLACEMENT_TEAMS_TOGETHER)
    DefineStartLocation(0, 640.0, -5120.0)
    DefineStartLocation(1, 640.0, -5120.0)
    DefineStartLocation(2, 640.0, -5056.0)
    DefineStartLocation(3, -1344.0, -768.0)
    InitCustomPlayerSlots()
    InitCustomTeams()
    InitAllyPriorities()
end]]


dofile('origwar3map.lua')

local __main = main
function main()
    xpcall(function()
        __main()
        dofile('main.lua')
    end, function(msg)
        local handler = geterrorhandler()
        if handler and msg then
            return handler(msg)
        end
    end)
end
